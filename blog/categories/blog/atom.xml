<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-29T13:44:30+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ソースコードの表示色]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/07/blog-octopress/"/>
    <updated>2013-07-07T15:09:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/07/blog-octopress</id>
    <content type="html"><![CDATA[<p>コード部分のバックグラウンドの色が
コントラストが低すぎてちょっと見難いと思ったので
周りの色より暗かったのを明るくしてみたと
いうだけの話です。</p>

<!-- more -->


<p>{%include after_excerpt.html%}</p>

<h1 id="Before/After">Before/After</h1>

<p>もともと
<img class="pic" src="{{site.imgpath}}post/20130707_codeblock0.jpg" "" ""></p>

<p>こんなだったのが</p>

<p><img class="pic" src="{{site.imgpath}}post/20130707_codeblock1.jpg" "" ""></p>

<p>こんな感じ。
周りの背景が<code>#f2f2f2</code>で、前のコード背景が<code>#eaeaea</code>だったのに対して
新しい方では<code>#fafafa</code>。</p>

<p>ちなみにコードのsyntax highlightはgithubを真似る様にして作ってます。</p>

<h1 id="現状のテーマ:octogray">現状のテーマ:octogray</h1>

<p>まだちょこちょこ変更してますが、このブログの今の状態をテーマとしてまとめてみました。</p>

<blockquote><p><a href="https://github.com/rcmdnk/octogray">octogray</a></p></blockquote>

<p>他のテーマ同様<code>/.themes/</code>に入れて<code>rake install[octogray]</code>で入れられます。</p>

<p>{%comment%}
<img src="{{site.imgpath}}post/xxx.jpg" "" "">
{%endcomment%}
{%comment%}
{%fn_ref 1%}
{%endcomment%}</p>

<hr />

<p>{%comment%}
{%footnotes%}
  {%fn%}...
{%endfootnotes%}
{%endcomment%}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スクロール時に付いてくるサイドバー]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/21/blog-octopress/"/>
    <updated>2013-06-21T23:35:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/21/blog-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B004V4LJKG/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/71Tg6V717bL._SL160_.png" border="0"></a>
記事が長くなった時にサイドバーがあると、下の方に行った時に寂しくなるので
下の方のコンテンツが着いてくる様なサイトが良くありますが、
<a href="http://github.com/cyokodog/jquery.ex-flex-fixed">jquery--ex-flex-fiex</a>という
プラグインを使ってOctopressへ導入してみました。
基本となっているテーマはデフォルトのClassicです。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="jquery.ex-flex-fixedのインストール">jquery.ex-flex-fixedのインストール</h1>

<p>この<a href="https://github.com/cyokodog/jquery.ex-flex-fixed">レポジトリ</a>
から直接取ってくるかclone:</p>

<pre><code>git clone git://github.com/cyokodog/jquery.ex-flex-fixed.git
</code></pre>

<p>して、
取ってきた<code>jquery.exflexfixed-0.3.0.js</code>を<code>source/javascripts/</code>へ
入れます。</p>

<p>これを<code>source/_includes/custom/head.html</code>へ次の行を加えて
読み込み、さらに下記の様なスクリプトも<code>.side-scroll</code>というクラスに関して
作っておきます。
{%codeblock lang:html%}
{%raw%}</p>

<script src="{{root_url}}/javascripts/jquery.exflexfixed-0.3.0.js" type="text/javascript"></script>


<script>
  jQuery(function($){
    $('.scroll-fixed').exFlexFixed({
      watchPosition: true,
      container : '#content'
    });
  });
</script>


<p>{%endraw%}
{%endcodeblock%}</p>

<p><code>#content</code>は<code>source/_layouts/default.html</code>にある
コンテンツ用の<code>div</code>要素に対するIDです。
(これがスクロールしたりするときにどこからどこまでを見るか、という<code>全体</code>をになる。)</p>

<p><code>watchPosition</code>については
<a href="http://d.hatena.ne.jp/cyokodog/20120427/exflexfixed01">作者さんのページ</a>
に説明がありますが、
少なくとも自分の今の状態だと入れておかないと
最初に表示した時に要素がかぶってしまうので必要でした。</p>

<h1 id="_config.ymlで着いてくる要素の数を決めれるようにする">_config.ymlで着いてくる要素の数を決めれるようにする</h1>

<p>サイドバーを構築する時に使われる<code>plugins/include_array.rb</code>を
下の様に変更して<code>&lt;div class="scroll-fixed"&gt;</code>~<code>&lt;\div&gt;</code>で
好きな数(n_scroll_fixed)だけサイドバーの要素を囲める様にします。</p>

<p>{% gist 5834744 %}</p>

<p>これで、<code>_config_yml</code>へ</p>

<pre><code># scroll-fixed
n_scroll_fixed: 3
</code></pre>

<p>と書けば、下から3つがスクロールに対して着いてくる要素になります。</p>

<p>以上で導入は終わりで、
そんな感じで右のスクロールバーを見てもらうと、下の方の要素が
いくつか下の方に行った時に追随してくるのが分かるかと思います。</p>

<h1 id="その他似たようなプラグイン">その他似たようなプラグイン</h1>

<p><code>jquery--ex-flex-fiex</code>以外にもスクロールに追随するサイドバー用のプラグインとして
下のような物がありました。</p>

<ul>
<li><a href="http://blog.echoenduring.com/2010/11/15/freebie-contained-sticky-scroll-jquery-plugin/">Contained Sticky Scroll</a></li>
<li><a href="http://stickyjs.com/">sticky</a></li>
</ul>


<p>{% comment %}
<img src="{{site.imgpath}}post/xxx.jpg" title="" alt="">
{% endcomment %}
{% comment %}
{% fn_ref 1 %}
{% endcomment %}</p>

<hr />

<p>{% comment %}
{% footnotes %}
  {% fn %}...
{% endfootnotes %}
{% endcomment %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressでMac風キーボードのキーを表示をさせるプラグイン]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/19/blog-octopress/"/>
    <updated>2013-06-19T19:36:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/19/blog-octopress</id>
    <content type="html"><![CDATA[<p>OctpressでMacのキーボードの様な表示をさせるプラグインを作りました。
キーボード表示自体は簡単なCSSで実装して、
プラグインを使う事でCommand:&#x2318;(<code>&amp;#x2318;</code>)等の記号を
キーコードを覚えずにLiquidタグで簡単に書ける様になります。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="インストール">インストール</h1>

<p>以下のレポジトリからファイルを取ってきてREADMEに従ってプラグインと
scssファイルを導入して下さい</p>

<blockquote><p><a href="https://github.com/rcmdnk/keyboardkey">keyboardkey</a></p></blockquote>

<h1 id="使い方">使い方</h1>

<p>導入したら<code>key</code>とう言うLinquidタグが使える様になるので
好きなアルファベットなり単語を<code>key</code>の後に入れるだけです。</p>

<h2 id="hoge文字列をキーボード化">hoge文字列をキーボード化</h2>

<ul>
<li>{%raw%}<code>{% key a %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key a%}</li>
<li>{%raw%}<code>{% key A %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key A%}</li>
<li>{%raw%}<code>{% key Enter %}</code>{%endraw%}: &nbsp; &nbsp; {%key Enter%}</li>
</ul>


<h2 id="記号">記号</h2>

<p>文字列だけだと直接html書いても余り変わらないわけですが、
プラグインでは以下の記号について、<code>symbol</code>という引数を与えた後に
適当なワードを与えると記号に変換します。</p>

<ul>
<li>{%raw%}<code>{% key symbol apple %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol apple%}</li>
<li>{%raw%}<code>{% key symbol cmd %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol cmd%}

<ul>
<li>cmd等いくつかの記号については複数の1つの記号に対して複数のワードが用意されています

<ul>
<li>{%raw%}<code>{% key symbol command %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {% key symbol command%}</li>
</ul>
</li>
<li>その他全てのワードについては<code>keyboardkey.rb</code>の中身を見てみて下さい。</li>
</ul>
</li>
<li>{%raw%}<code>{% key symbol opt %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol opt%}</li>
<li>{%raw%}<code>{% key symbol shift %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol shift%}</li>
<li>{%raw%}<code>{% key symbol ctr %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol ctr%}</li>
<li>{%raw%}<code>{% key symbol tab %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol tab%}</li>
<li>{%raw%}<code>{% key symbol esc %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol esc%}</li>
<li>{%raw%}<code>{% key symbol bs %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol bs%}</li>
<li>{%raw%}<code>{% key symbol return %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol return%}</li>
<li>{%raw%}<code>{% key symbol delete %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol delete%}</li>
<li>{%raw%}<code>{% key symbol clear %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol clear%}</li>
<li>{%raw%}<code>{% key symbol eject %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol eject%}</li>
<li>{%raw%}<code>{% key symbol capslock %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol capslock%}</li>
<li>{%raw%}<code>{% key symbol pageup %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol pageup%}</li>
<li>{%raw%}<code>{% key symbol pagedown %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol pagedown%}</li>
<li>{%raw%}<code>{% key symbol home %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol home%}</li>
<li>{%raw%}<code>{% key symbol end %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol end%}</li>
<li>{%raw%}<code>{% key symbol left %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol left%}</li>
<li>{%raw%}<code>{% key symbol up %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol up%}</li>
<li>{%raw%}<code>{% key symbol right %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol right%}</li>
<li>{%raw%}<code>{% key symbol down %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol down%}</li>
<li>{%raw%}<code>{% key symbol eacute %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol eacute%}</li>
<li>{%raw%}<code>{% key symbol clock %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol clock%}</li>
<li>{%raw%}<code>{% key symbol gear %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol gear%}</li>
<li>{%raw%}<code>{% key symbol space %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol space%}</li>
<li>{%raw%}<code>{% key symbol asterisk %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol asterisk%}</li>
<li>{%raw%}<code>{% key symbol not %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol not%}</li>
<li>{%raw%}<code>{% key symbol sup2 %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol sup2%}</li>
<li>{%raw%}<code>{% key symbol sup3 %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol sup3%}</li>
<li>{%raw%}<code>{% key symbol times %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol times%}</li>
<li>{%raw%}<code>{% key symbol divide %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol divide%}</li>
<li>{%raw%}<code>{% key symbol radic %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol radic%}</li>
<li>{%raw%}<code>{% key symbol sdot %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol sdot%}</li>
<li>{%raw%}<code>{% key symbol middot %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol middot%}</li>
<li>{%raw%}<code>{% key symbol 3dots %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol 3dots%}</li>
<li>{%raw%}<code>{% key symbol check %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol check%}</li>
<li>{%raw%}<code>{% key symbol diamond %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol diamond%}</li>
<li>{%raw%}<code>{% key symbol diamond_white %}</code>{%endraw%}: &nbsp; &nbsp; {%key symbol diamond_white%}</li>
<li>{%raw%}<code>{% key symbol quote %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol quote%}</li>
<li>{%raw%}<code>{% key symbol amp %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol amp%}</li>
<li>{%raw%}<code>{% key symbol lt %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol lt%}</li>
<li>{%raw%}<code>{% key symbol gt %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol gt%}</li>
<li>{%raw%}<code>{% key symbol lsquare %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol lsquare%}</li>
<li>{%raw%}<code>{% key symbol rsquare %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol rsquare%}</li>
<li>{%raw%}<code>{% key symbol lbrace %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol lbrace%}</li>
<li>{%raw%}<code>{% key symbol rbrace %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol rbrace%}</li>
<li>{%raw%}<code>{% key symbol lparensesis %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol lparensesis%}</li>
<li>{%raw%}<code>{% key symbol rparensesis %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol rparensesis%}</li>
<li>{%raw%}<code>{% key symbol copy %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol copy%}</li>
<li>{%raw%}<code>{% key symbol deg %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key symbol deg%}</li>
</ul>


<h2 id="サイズの変更">サイズの変更</h2>

<ul>
<li>{%raw%}<code>{% key a key_half %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; {%key a key_half%}</li>
<li>{%raw%}<code>{% key a key_small %}</code>{%endraw%}: &nbsp; &nbsp; {%key a key_small%}</li>
<li>{%raw%}<code>{% key a key_large %}</code>{%endraw%}: &nbsp; &nbsp; {%key a key_large%}</li>
<li>{%raw%}<code>{% key a key_2x %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key a key_2x%}</li>
<li>{%raw%}<code>{% key a key_3x %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key a key_3x%}</li>
<li>{%raw%}<code>{% key a key_4x %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key a key_4x%}</li>
<li>{%raw%}<code>{% key a key_5x %}</code>{%endraw%}: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {%key a key_5x%}</li>
</ul>


<h2 id="黒キーボード">黒キーボード</h2>

<ul>
<li>{%raw%}<code>{% key a key_black %}</code>{%endraw%}: &nbsp; &nbsp; {%key a key_black%}</li>
</ul>


<h2 id="文字列を強制的に全て大文字化">文字列を強制的に全て大文字化</h2>

<ul>
<li>{%raw%}<code>{% key a key_uppercase %}</code>{%endraw%}: &nbsp; &nbsp; {%key a key_uppercase%}</li>
</ul>


<h2 id="複数の組み合わせ">複数の組み合わせ</h2>

<ul>
<li>{%raw%}<code>{% key symbol cmd key_large key_black %}</code>{%endraw%}: &nbsp; &nbsp; {% key symbol cmd key_large key_black %}</li>
</ul>


<h1 id="表示を変えたいとき">表示を変えたいとき</h1>

<p>表示が気に喰わない場合は<code>sass/custom/_keyboardkey.scss</code>を調整して下さい。</p>

<h1 id="Octopress以外で使う方法(plugin無しで使う方法)">Octopress以外で使う方法(plugin無しで使う方法)</h1>

<p>上の方法ではOctopressプレグインを使ってLiquidタグで簡単に
書ける様にしましたが、
<a href="https://github.com/rcmdnk/keyboardkey">keyboardkey</a>レポジトリにある
<code>keyboardkey.scss</code>と言うscssファイルを導入すれば
Octopress関係なく簡単に記号を含めたキーを書ける様になります。</p>

<p>こんな感じでi要素を書くと上にあるのと同じようなキーを表示します。</p>

<pre><code>&lt;i class='key'&gt;A&lt;/i&gt;
&lt;i class='key key_ctrl'&gt;&lt;/i&gt;
</code></pre>

<p><code>key_large</code>や<code>key_black</code>等はそのままクラス名なのでclassの所に加えて上げると
上と同じようになりますが、symbolに関してはLiquidで変換するための引数なので
記号変換したい場合は上の様に<code>key_</code>+<code>記号名</code>の様なクラスが定義してあるので
それを加えて下さい。
どの記号が使えるかはこれも<code>keyboardkey.scss</code>を参照、ということで。</p>

<p>{% comment %}
<img src="{{site.imgpath}}post/xxx.jpg" title="" alt="">
{% endcomment %}
{% comment %}
{% fn_ref 1 %}
{% endcomment %}</p>

<hr />

<p>{% comment %}
{% footnotes %}
  {% fn %}...
{% endfootnotes %}
{% endcomment %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressのIndexページの変更]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/21/blog-octopress/"/>
    <updated>2013-05-21T17:25:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/21/blog-octopress</id>
    <content type="html"><![CDATA[<p>Octopressの変更でIndex(表紙)ページ周りの変更について
まとめておきたいと思います。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="Indexページで各記事のボックス全体をリンクに">Indexページで各記事のボックス全体をリンクに</h1>

<p>通常Indexページから各記事へのリンクは、
各記事タイトルと最後の<code>Read on</code>(<code>_config.yml</code>で<code>excerpt_link</code>に設定した値)
の部分だけですが、紹介部分のボックス全体をリンクにするようにしました。</p>

<p><img class="pic" src="{{site.imgpath}}post/20130521_index_click_box.jpg" alt=""/></p>

<p>まず、<code>_include/custom/head.html</code>へ以下のスクリプトを追加:</p>

<p>{%codeblock lang:html %}</p>

<script>
$(function(){
  $(".index_click_box").click(function(){
    window.location=$(this).parent().find("a").eq(-1).attr("href");
    return false;
  });
});
</script>


<p>{%endcodeblock%}</p>

<p>次に<code>sass/custom/_styles.scss</code>へ</p>

<p>{%codeblock lang:scss%}
.index_click_box{</p>

<pre><code>cursor: pointer;
</code></pre>

<p>}
{%endcodeblock%}</p>

<p>を追加。</p>

<p>最後に<code>_include/article.html</code>の下の方で</p>

<p>{%codeblock lang:diff %}
{%raw%}
 {% if index %}
-  <div class="entry-content">{{ content | excerpt }}</div>
+  <div class="entry-content index_click_box">{{ content | excerpt }}</div>
{%endraw%}
{%endcodeblock%}</p>

<p>と言った感じでIndexページの時のコンテンツ全体を<code>index_click_box</code>化。</p>

<p>これでIndexページに載っている文章部分も含めてリンクになります。
ただし、文章中に別のリンクがある場合はその部分だけは元々あるリンクとなります。</p>

<h1 id="NailThumbを使ってイメージ大きさ調整">NailThumbを使ってイメージ大きさ調整</h1>

<p><a href="http://www.garralab.com/nailthumb.php">NailThumb</a>は
イメージの大きさを自動調整してくれたりするjQueryプラグインです{% fn_ref 1 %}。
単に大きさ調整する以外にもアニメーションを付けたりすることもできます。</p>

<p>Indexページで単一の大きさの正方形画像を載せたかったのですが、
単純に大きさ指定すると縦横の縮小がおかしくなるので、
それを解決するのにこのプラグインを導入します。</p>

<p>導入するにはまず
<a href="http://www.garralab.com/nailthumb-downloads.php">Download &amp; support</a>
から最新のzipファイル(現在1.1)を取ってきて以下の物をコピーします。</p>

<ul>
<li><code>jquery.nailthumb.1.1.min.js</code>を<code>source/javascripts/</code>へ</li>
<li><code>jquery.nailthumb.1.1.css</code>を<code>sass/custom/_nailthumb.scss</code>としてコピー</li>
</ul>


<p>次に<code>source/_includes/custom/head.html</code>へ</p>

<p>{%codeblock lang:html %}
{%raw%}</p>

<script src="http://rcmdnk.github.io//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js" type="text/javascript"></script>


<script src="{{root_url}}/javascripts/jquery.nailthumb.1.1.min.js" type="text/javascript"></script>


<script type="text/javascript">
  jQuery(document).ready(function() {
  jQuery('.nailthumb-container').nailthumb({width:200,height:200,maxShrink:1,fitDirection:'left top'});
  });
</script>


<p>{%endraw%}
{%endcodeblock%}</p>

<p>といった感じに、nailthumbスクリプトの読み込みと実行スクリプトを書きます。
(jqueryの読み込みが既に他でしてあれば1行目は必要ありません。)
ここでは</p>

<ul>
<li>縦横200px</li>
<li>画像の縮小しない(200x200より大きい時は一部分を表示)</li>
<li>一部分表示の際は左上を表示、</li>
</ul>


<p>と言った設定にしてあります。</p>

<p>次に<code>sass/custom/_styles.scss</code>へ<code>@import "nailtumb";</code>を追加して
先ほどコピーした<code>_nailthumb.scss</code>も読み込む様にします。</p>

<p>さらに<code>sass/custom/_styles.scss</code>へ</p>

<p>{%codeblock lang:css%}
.title-thumb {
  width: 200px;
  height: 200px;
  float: left;
  right-margin: 10px;
  bottom-margin: 10px;
}
{%endcodeblock%}</p>

<p>と言ったクラスを追加。</p>

<p>これで</p>

<p>{%codeblock lang:html%}</p>

<pre><code>&lt;div class="nailthumb-container"&gt;
    &lt;img src="http://rcmdnk.github.io/images/page_thumb.jpg" alt="page_thumb"/&gt;
&lt;/div&gt;
</code></pre>

<p>{%endcodeblock%}</p>

<p>と言った記述で200x200に適宣変更された画像を表示出来るようになります。</p>

<h1 id="サムネイルをYAMLで指定するようにする">サムネイルをYAMLで指定するようにする</h1>

<p>簡単にタイトルサムネイルを決めるために、
YAMLブロックで指定するようにしました。</p>

<p>YAMLで<code>ogimage</code>という変数を与え、この値がある時は
記事の最初にサムネイルを入れる様にするため、
<code>_include/article.html</code>の下の方のcontent部分を以下の様に変更します。</p>

<p>{%codeblock lang:diff %}
{%raw%}
@@ -17,6 +17,11 @@
 {% endunless %}
 {% if index %}
   <div class="entry-content">{{ content | excerpt }}</div>
+  {% if post.ogimage %}
+    <div class="nailthumb-container title-thumb">
+      <img src="{{post.ogimage}}" alt="" title=""/>
+    </div>
+  {% endif %}
   {% capture excerpted %}{{ content | has_excerpt }}{% endcapture %}
   {% if excerpted == 'true' %}</p>

<pre><code> &lt;footer&gt;
</code></pre>

<p>@@ -24,5 +29,12 @@</p>

<pre><code> &lt;/footer&gt;
</code></pre>

<p>   {% endif %}
 {% else %}
-<div class="entry-content">{{ content }}</div>
+<div class="entry-content">
+  {% if page.ogimage and page.no_ogimage != true %}
+    <div class="nailthumb-container title-thumb">
+      <img src="{{page.ogimage}}" alt="" title=""/>
+    </div>
+  {% endif %}
+  {{ content }}
+</div>
 {% endif %}
{%endraw%}
{%endcodeblock%}</p>

<p>これで、<code>ogimage</code>の値が設定されている時はページの最初にサムネイルが追加
される様になります。</p>

<h1 id="Open+Graph+Protocol+(OGP)について">Open Graph Protocol (OGP)について</h1>

<p>Indexページとは直接関係無いのですが、<code>ogimage</code>と言う名前は
<a href="http://ogp.me/">OGP</a>での画像指定にも使ってみよう、と言うことでその名前にしました。
OGPはSNS等でページの解析に使われるための情報の定義方法で
Facebook等にシェアされる時、HTML内に</p>

<pre><code>&lt;meta property="og:image" content="http://page_image.jpg" /&gt;
</code></pre>

<p>等と書かれているとこのイメージがページのイメージ、
と指定でき、シェアされる時に表示される画像を明示的に決める事が出来る、
とのことです。</p>

<p>下を見てもらうと分かるように、このブログに<a href="http://zenback.jp/">Zenback</a>
を導入してみたのですが、
ここで関連記事の画像もog:imageを使う、とのことなので上手く
関連記事の画像表示をしてくれないかな、とと思ってOGPのデータも
Octopressで入れるようにしました。</p>

<p>OGPデータを追加するために<code>_include/custom/head.html</code>内に次の様な行を
追加します。</p>

<p>{%codeblock lang:html%}
{%raw%}
<meta property="og:title" content="{{page.title}}" />
<meta property="og:type" content="blog" />
<meta property="og:description" content="{{ description | strip_html | condense_spaces | truncate:150 }}">
{% capture canonical %}{{ site.url }}{% if site.permalink contains '.html' %}{{ page.url }}{% else %}{{ page.url | remove:'index.html' | strip_slash }}{% endif %}{% endcapture %}
<meta property="og:url" content="{{canonical}}" />
{% if page.ogimage %}
<meta property="og:image" content="{{page.ogimage}}"/>
{% endif %}
<meta property="og:site_name" content="{{site.title}}" />
{%endraw%}
{%endcodeblock%}</p>

<p>description部分はページのdescriptionと同じです。</p>

<p>og:imageは200px x 200px以上が推奨で出来れば1500 x 1500が良いとのこと。
でも5MB以下でないといけません。{% fn_ref 2 %}</p>

<p>Zenbackの表示でも、元が小さい画像の所は上手く表示されずに、
代わりにAbout Meにあるロゴが表示されています。
(ページ中に他に大きな画像もあるのに、何故なのかが謎...)</p>

<p>OGPについてはFacebookの<a href="http://developers.facebook.com/tools/debug">デバッガーページ</a>
で正しく設定されているか調べる事が出来ます。</p>

<h1 id="og:imageとページトップの画像を違うものにしたいとき">og:imageとページトップの画像を違うものにしたいとき</h1>

<p>上の設定だと最初に来る画像は常に小さく切り取られた絵になってしまうので、
もし、og:imageはSNS用だけに使って表示する時は別の表示にしたい時は
<code>_include/article.html</code>のif文を</p>

<p>{%codeblock lang:diff%}
{%raw%}
-{% if page.ogimage %}
+{% if page.ogimage and page.no_ogimage != true %}
{%endraw%}
{%endcodeblock%}</p>

<p>な感じで変更して、
YAMLブロックで<code>no_ogimage: true</code>と言ったフラグを定義して、
本文の方で適時画像を挿入すればOK。</p>

<h1 id="Indexページと本ページで分ける">Indexページと本ページで分ける</h1>

<p>さらに場合分けして、Indexページでは小さく切り取って
本ページの方ではそのまま表示したい場合は</p>

<p><code>_include/article.html</code>を</p>

<p>{%codeblock lang:html %}
{%raw%}
{% endunless %}
{% if index %}
  <div class="entry-content">{{ content | excerpt }}</div>
  {% if post.ogimage and post.no_ogimage != true %}</p>

<pre><code>&lt;div class="nailthumb-container title-thumb"&gt;
  &lt;img src="{{post.ogimage}}" alt="" title=""/&gt;
&lt;/div&gt;
</code></pre>

<p>  {% endif %}
  {% capture excerpted %}{{ content | has_excerpt }}{% endcapture %}
  {% if excerpted == 'true' %}</p>

<pre><code>&lt;footer&gt;
  &lt;a rel="full-article" href="{{ root_url }}{{ post.url }}"&gt;{{ site.excerpt_link }}&lt;/a&gt;
&lt;/footer&gt;
</code></pre>

<p>  {% endif %}
{% else %}</p>

<div class="entry-content">{{ content }}</div>


<div class="entry-content">
  {% if post.ogimage and post.no_ogimage != true %}
    {% case post.thumb_page %}
    {% when 0 %}
    {% when 2 %}
      <img src="{{page.ogimage}}" alt="" title=""/>
    {% else %}
      <div class="nailthumb-container title-thumb">
        <img src="{{page.ogimage}}" alt="" title=""/>
      </div>
    {% endcase %}
  {% endif %}
  {{ content }}
</div>


<p>{% endif %}
{%endraw%}
{%endcodeblock%}</p>

<p>とかして、</p>

<ul>
<li><code>thumb_page: 0</code>だと本ページの方では表示しない</li>
<li><code>thumb_page: 2</code>だと本ページの方では大きさ変更せずそのまま表示</li>
<li><code>thumb_page: 1</code>もしくは定義無しならサムネイル表示</li>
</ul>


<p>とかで。</p>

<hr />

<p>{% footnotes %}
  {% fn %} これ以外にも<a href="https://github.com/karacas/imgLiquid">imgLiquid</a>や
  <a href="https://github.com/karacas/imgLiquid">MyThumnail</a>と言った
  似たような事が出来るプラグインもあります。
  {% fn %} <a href="https://developers.facebook.com/docs/opengraph/creating-object-types/#properties">Facebook Developers</a>
{% endfootnotes %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでのプレビュー方法]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/20/blog-octopress/"/>
    <updated>2013-05-20T21:10:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/20/blog-octopress</id>
    <content type="html"><![CDATA[<p>Octopressで作った記事をチェックするときのプレビュー方法は通常は
<code>rake preview</code>として<code>localhost:4000</code>で確認出来る様な設定になっていますが、
いくつかそれ以外の確認方法についてもまとめておきたいと思います。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="rake+preview">rake preview</h1>

<p>最初の設定では<a href="http://ja.wikipedia.org/wiki/WEBrick">WEBrick</a>
{% fn_ref 1 %}
というフレームワークを使ったWebサーバーが立ち上がります。</p>

<p><img src="{{site.imgpath}}post/20130520_webrick.jpg" title="" alt=""></p>

<p>通常ポート番号4000番を指定していますが、この番号は<code>Rakefile</code>内にある
<code>server_port</code>(~30行目)を変更すれば好きな番号変更できます。</p>

<p><code>rake preview</code>ではOctopressディレクトリを監視しながら変更があった場合
随時アップデートして表示してくれます。</p>

<p>また、YAMLブロックで<code>published: false</code>としてある記事についても
表示されるので、そのような下書き段階のままでも確認出来ます。</p>

<h1 id="単独でWEBrickを動かす">単独でWEBrickを動かす</h1>

<p><code>rake preview</code>だと常にディレクトリ変更を監視するので、
CPUを結構食います。</p>

<p>もし、既に出来上がったものを見るだけで良ければ、Octopressの
トップディレクトリ(<code>config.ru</code>があるディレクトリ)で</p>

<pre><code>$ rakup --port 4000
</code></pre>

<p>とすると、単独で走らせる事が出来ます。
(portを指定しなければ9292番に立ち上がります。)</p>

<h1 id="Powを使う">Powを使う</h1>

<p>Macの場合、
<code>rake preview</code>の他に最初からサポートされていると公式に書かれている方法として
<a href="http://pow.cx/">Pow</a>を使う方法があります。</p>

<p>この場合は<code>Pow</code>は別途インストールする必要があります。
公式ページのまま従うと</p>

<pre><code>$ curl get.pow.cx|sh
*** Installing Pow 0.4.1...
*** Installing local configuration files...

/Users/user/Library/Application Support/Pow/Versions/0.4.1/lib/command.js:78
            throw err;
                              ^
                              Error: EACCES, open '/Users/user/Library/LaunchAgents/cx.pow.powd.plist'
</code></pre>

<p>と怒られる場合があるので、その場合は
<code>/Users/user/Library/LaunchAgents</code>がrootの所有物になっていると思うので、<code>sudo</code>
して下さい。
(自分の所ではvirtualvoxのインストール時にこのディレクトリがroot権限で造られていました。)</p>

<pre><code>$ curl get.pow.cx| sudo sh
</code></pre>

<p>としてインストールして下さい。</p>

<p>さらに、iTerm嬢やtmux内でインストールを行おうとすると</p>

<p>{%raw%}</p>

<pre><code>$ curl get.pow.cx| sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  6887  100  6887    0     0  13603      0 --:--:-- --:--:-- --:--:-- 23748
*** Installing Pow 0.4.1...
*** Installing local configuration files...
/Users/user/Library/LaunchAgents/cx.pow.powd.plist
*** Installing system configuration files as root...
/etc/resolver/dev
/Library/LaunchDaemons/cx.pow.firewall.plist
*** Starting the Pow server...
*** Performing self-test...
!!! Couldn't find a running Pow server on port 20559

For troubleshooting instructions, please see the Pow wiki:
https://github.com/37signals/pow/wiki/Troubleshooting

To uninstall Pow, `curl get.pow.cx/uninstall.sh | sh`
</code></pre>

<p>{%endraw%}</p>

<p>こんな風に怒られますが、取り敢えずの回避策として
<code>ターミナル.app</code>から行う様に{% fn_ref 2 %}、とのことです。</p>

<p>Powがインストール出来たら、今度はOctopressの<a href="http://octopress.org/docs/blogging/">公式</a>に従って</p>

<pre><code>$ cd ~/.pow
$ ln -s /path/to/octporess octopress
$ cd -
</code></pre>

<p>これで以降、<a href="http://octopress.dev">http://octopress.dev</a>
へとアクセスするだけでpublic内の様子を見ることが出来ます。</p>

<p><code>rake preview</code>の様にディレクトリの監視をしながらpublishされてないものも
含めて見たい場合は</p>

<pre><code>$ rake watch
</code></pre>

<p>を実行すると同様に監視状態に入るので、
<a href="http://octopress.dev">http://octopress.dev</a>で見るページもアップデート
される様になります。</p>

<h1 id="Thinの導入">Thinの導入</h1>

<p>OctopressとPreviewで検索すると<code>thinを代わりに使ったら高速になるよ</code>
という記事が結構ひっかかりますので、例に漏れずに試してみました。</p>

<p>まず、<code>Gemfile</code>へ</p>

<pre><code>$ gem 'thin'
</code></pre>

<p>を追加し、<code>bundle install</code>してthinを導入します。</p>

<p>この段階でOctopressのトップディレクトリで</p>

<pre><code>$ thin start
</code></pre>

<p>とすると<a href="http://localhost:3000">http://localhost:3000</a>で
プレビューにアクセス出来ます。</p>

<p>また、thinがGemfileに書いてあると、通常の<code>rake preview</code>もthinを使う
様になります。</p>

<p><img src="{{site.imgpath}}post/20130520_thin.jpg" title="" alt=""></p>

<p>thinの導入についてはこちら</p>

<blockquote><p>Ref: <a href="http://blog.glidenote.com/blog/2012/10/31/thin-octopress/">ctopressのRake Previewにthinを利用してプレビューを高速化する</a></p></blockquote>

<p>でpull requestされていて次のversion 2.1ではthinを使う様になるようです。
<a href="https://github.com/imathis/octopress/pull/858">こちら</a>のリクエストと
共にブランチにマージされています。</p>

<p>正直な所、Webサーバー自体はそれ程負荷がかかるものでもないので、
あまりWEBrickとthinの違いは感じませんでした。
(それ以上に<code>preview</code>で監視に使われるリソースのが大変。)</p>

<h1 id="SimpleHTTPServer">SimpleHTTPServer</h1>

<p>SimpleHTTPServerは簡単にWebサーバーを立てる事が出来るpythonのモジュールです。
rubyから一歩離れたいときに...</p>

<p>コマンドを打ったディレクトリをルートとしてサーバーを立ち上げるので、
<code>rake generate</code>した後に<code>public</code>ディレクトリへ行き</p>

<pre><code>python -m SimpleHTTPServer
</code></pre>

<p>とします(勿論pythonが導入済みな事を前提で)。
この場合にはポート8000<a href="http://localhost:3000">http://localhost:3000</a>がデフォルトで使われます。(違う番号にしたい時はコマンドの最後に番号を与えてれば変更出来ます。)</p>

<p>この場合でも<code>rake watch</code>と併用すれば自動アップデートが出来ます。</p>

<h1 id="　まとめ">　まとめ</h1>

<p><code>rake preview</code>/<code>rake watch</code>は自動で変更を取り入れてアップデートしてくれるので
便利なのですが、
結構負荷がかかるのであまり長い間動かしておけるものではないと思います。
(全然問題無い様なマシンなら別として...)</p>

<p>また、<code>previw</code>や<code>watch</code>による自動生成だと、たまに1回エラーを出してしまった時に
回復できずに結局<code>generate</code>なりし直す必要があることもあります。
(変なファイルが残ってしまうこともあるのでどうしても駄目なら<code>rake clean</code>も試すとエラーが消える事があります。)</p>

<p>その辺も含めて、普段使う方法としてはMacでは</p>

<ol>
<li><code>rake generate</code>でpublicフォルダを生成</li>
<li>Powを使って<a href="http://octopress.dev">http://octopress.dev</a>を開いて確認</li>
<li>変更が必要なら変更する。

<ul>
<li>もし頻繁にチェックしたい場合は<code>rake watch</code>と併用してPowで。</li>
</ul>
</li>
</ol>


<p>と言った感じが一番楽でマシンにも優しいかな、と。</p>

<p>Windowsの場合でも1つのターミナルで<code>rakup --port 4000</code>/<code>thin start</code>動かしておいて
Powの様にして、必要に応じて<code>generate</code>なり<code>rake watch</code>
した方が普通に<code>preview</code>するよりは軽く使えるかな、と。
(ずっとpreviewしっぱなしでも良いくらいのスペックを持っていれば良いだけなんですが...)</p>

<p>Ref:</p>

<blockquote><p><a href="http://gihyo.jp/tb?p=dev/serial/01/ruby/0023">第23回　Rackとは何か（1）Rackの生まれた背景</a></p>

<p><a href="http://blog.uu59.org/2012-04-18-ruby-httpd.html">Rubyのhttpサーバまとめ 2012年4月版(thin, Unicorn, Passenger, etc)</a></p>

<hr />

<p>{% footnotes %}
  {% fn %} <a href="http://www.webrick.org/">公式ページ</a>が見つからないけど、
　wikiにも無いページがあるのでしょうか...?(もうrubyの一部としてのドキュメントだけ?)
  {% fn %} <a href="https://github.com/37signals/pow/wiki/Troubleshooting">Troubleshooting</a>
{% endfootnotes %}</p></blockquote>
]]></content>
  </entry>
  
</feed>
