<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computer | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-17T02:11:41+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Homebrew用のパッケージの簡単な作り方]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/17/computer-mac-homebrew/"/>
    <updated>2013-09-17T21:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/17/computer-mac-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0937381578/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51M44AG9ZGL._SL160_.jpg" border="0"></a></p>

<p><a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>
をGitHubに置いてHomebrew(+tap)で管理できる様にした方法についてのメモ。
<a href="https://github.com/andrew/brewdler">Brewdler</a>を参考にしています。
(というかそれ以上の事はしてない。。。)</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="レポジトリを作る">レポジトリを作る</h1>

<p>今回はインストールするパッケージと、Homebrew用のFormulaを
一緒のレポジトリに入れてしまうので、
1つのレポジトリだけ作ります。</p>

<p>レポジトリ名は、tapするため、必ず<code>homebrew-</code>から始まる名前にします<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。
今回作ったのは<a href="https://github.com/rcmdnk/homebrew-brewall">rcmdnk/homebrew-brewall</a>という名前のレポジトリ。</p>

<h1 id="インストールするファイルの作成">インストールするファイルの作成</h1>

<p>今回作るのはmakeとか必要なく、すでに用意されてる<code>bin</code>ディレクトリ等から
コピーするだけのものです。
今回は実行スクリプトだけなので、<code>bin/brewall</code>と<code>bin</code>ディレクトリに
実行ファイルを置いただけ。</p>

<h1 id="Formulaを作る">Formulaを作る</h1>

<p>brewall用のFormulaはこんな感じ。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brewall.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;formula&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;HOMEBREW_BREWALL_VERSION = &#39;0.0.1&#39;</span>
</span><span class='line'><span class="sr">class Brewall &amp;lt; Formula</span>
</span><span class='line'><span class="sr">  homepage &#39;https:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rcmdnk</span><span class="o">/</span><span class="n">homebrew</span><span class="o">-</span><span class="n">brewall</span><span class="o">/</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  url &#39;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rcmdnk</span><span class="o">/</span><span class="n">homebrew</span><span class="o">-</span><span class="n">brewall</span><span class="o">.</span><span class="n">git</span><span class="s1">&#39;, :tag =&gt; &quot;v#{HOMEBREW_BREWALL_VERSION}&quot;</span>
</span><span class='line'><span class="s1">  version HOMEBREW_BREWALL_VERSION</span>
</span><span class='line'><span class="s1">  head &#39;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rcmdnk</span><span class="o">/</span><span class="n">homebrew</span><span class="o">-</span><span class="n">brewall</span><span class="o">.</span><span class="n">git</span><span class="s1">&#39;, :branch =&gt; &#39;</span><span class="n">master</span><span class="s1">&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  skip_clean &#39;</span><span class="n">bin</span><span class="s1">&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  def install&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;prefix.install &#39;</span><span class="n">bin</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">(bin+&#39;</span><span class="n">brewall</span><span class="err">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">chmod</span> <span class="mo">0755</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Brewall</code>というクラスを作って行きます。</p>

<ul>
<li><code>homepage</code>は参照できる情報があるページ。(今回はGitHubレポジトリにREADMEがあるのでレポジトリそのもの)</li>
<li><code>url</code>はパッケージを取得する<code>url</code>。gitのURLの場合は自動的に<code>git</code>を使って取って来てくれる。
必要なときは取得方法を指定<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。gitのURLの時、<code>tag</code>を上の様に指定すると
masterブランチでなく指定の<code>tag</code>を取ってくる。<code>branch</code>の指定も可能。</li>
<li><code>version</code>はパッケージのパージョンです。<code>brew update</code>すると、
<code>tap</code>で取ってきたFormulaもすべてGitHub上でmasterブランチに更新があればFormulaを更新する。
その後、<code>brew upgrade</code>した時、Formulaにある<code>version</code>と現在インストールされてる
<code>version</code><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>が違う場合更新を行う。新しいタグを作ったり<code>/bin/brewall</code>自体に
更新があったとしても<code>brew upgrade</code>では更新してくれない。あくまでFormulaベースでの確認。

<ul>
<li>Brewdlerをマネて、<code>HOMEBREW_BREWALL_VERSION</code>という変数を使ってversionを管理。
tag名は<code>v</code>+<code>version number</code>となるように。</li>
</ul>
</li>
<li><code>head</code>は<code>brew install brewall --HEAD</code>の様に<code>HEAD</code>を指定した時に何を取ってくるかの指定。
gitの場合では通常はmasterブランチを指定。</li>
<li><code>skip_clean</code><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>は<code>clean</code>時にスキップするディレクトリの指定。Homeberwはインストール途中で
コンパイルなどを行ったあとに一旦<code>bin</code>以下のバイナリや<code>lib</code>以下の<code>.dylibs</code>に対してリンクを外す、及び空のディレクトリを削除cleanupするが、
この時、今回の様に元々<code>bin</code>ディレクトリがあってそこからコピーしてインストールしたいような場合、
この時点でこの作業が行われると上手くいかない時がある。上の例で<code>skip_clean</code>に<code>bin</code>を指定しておかないと、
<code>brewall</code>コマンド自体は<code>/usr/local/Cellar/brewall/0.0.1/bin/breall</code>にインストールされて
<code>/usr/local/bin</code>にもリンクはできるが、途中で行ってるchmodが効かずに実行不能なファイルのままになる。</li>
<li><code>install</code>内でインストール方法を指定する。
今回は単純に<code>bin</code>ディレクトリをインストールしたいだけなので、
<code>prefix.install 'bin'</code>だけでOK。<code>lib</code>や<code>install</code>がある場合はそれらも<code>prefix.install lib</code>
等と書けば<code>Cellar</code>以下に実体がインストールされて<code>/usr/local/lib</code>等に
リンクが貼られる。

<ul>
<li><code>(bin+'brewall').chmod 0755</code>で<code>bin/brewall</code>を実行可能ファイルに。</li>
<li><code>configure</code>や<code>make</code>が必要なパッケージの場合もここで実行コマンドを記述する。</li>
</ul>
</li>
</ul>


<p>この内容を記述したファイルを<code>brewall.rb</code>などとしてtapするレポジトリに入れておくと、
tap後、このファイル名<code>brewall</code>が<code>brew install</code>で入れられるパッケージの名前として
登録されます。</p>

<h1 id="タグを作る">タグを作る</h1>

<p>Homebrewで<code>updata</code>/<code>upgrade</code>で簡単に更新を適用するためにはタグを作っておくと便利です。
上でFormulaで指定したように<code>v</code>+<code>version number</code>のタグを作ります<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<p>上で作業をひと通り終えたあとで</p>

<pre><code>$ git add .
$ git commit -m "initial import"
$ git push # push master branch
$ git tag -a v0.0.1 -m "first tag"
$ git tag --tag # push tag
</code></pre>

<p>こんな感じでmasterブランチを送ったあと、masterブランチの現在のスナップショットで
tagを作って送ります。</p>

<h1 id="Homebrewでインストールしてみる">Homebrewでインストールしてみる</h1>

<pre><code>$ brew tap rcmdnk/breall
$ brew search brewall
brewall
$ brew install brewall
</code></pre>

<h1 id="Brewallで管理">Brewallで管理</h1>

<p>Brewall自身の場合は鶏が先か卵が先かになってしまいますが、それ以外の場合は</p>

<pre><code>$ brewall -e # open Brewfile
...
tapall 'rcmdnk/brewall'
...
$ brewall
</code></pre>

<p>と、Brewfileに<code>tapall</code>でレポジトリを加えて<code>brewall</code>すれば
レポジトリにある全てのFormulaeに対して<code>brew install</code>まで実行します。</p>

<h1 id="アップデート">アップデート</h1>

<p>パッケージのレポジトリ自体は通常、変更を行っても<code>brew update</code>/<code>brew upgrade</code>で
更新されません。<code>--HEAD</code>オプションを使ってインストールするときは
最新のmasterがインストールされますが、この場合もupgradeなどでは更新されません。
(<code>--HEAD</code>を使うといずれにしろ<code>upgrade</code>ではアップデート出来ない。)</p>

<p>更新がある程度まとまったら、新たにタグを作り、Formula内のバージョンも
上げてpushします。</p>

<p>これで、</p>

<pre><code>$ brew update
$ brew upgrade
</code></pre>

<p>の作業で自動的に新しいタグの内容が反映されます。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="https://github.com/mxcl/homebrew/wiki/Formula-Cookbook#specifying-the-download-strategy-explicitly">Formula Cookbook#Specifying the Download Strategy explicitly</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>各パッケージは<code>/usr/local/Cellar/brewall/0.0.1/</code>な感じでバージョン名のディレクトリにインストールされてます。
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="https://github.com/adamv/homebrew-cookbook/blob/master/topics/06_anatomy_of_a_formula.md#skip_clean">Anatomy of a Formula#skip_clean</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="/blog/2013/09/16/computer-git/">Gitでタグを使う</a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでタグを使う]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/16/computer-git/"/>
    <updated>2013-09-16T14:25:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/16/computer-git</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/09/13/computer-mac-install-homebrew/">Brewall</a>
をそれ自身Homebrewで管理できる様にするためにFormulaを書いてる時に
バージョン情報があるとアップデートが簡単に出来るので、
そのためレポジトリにタグ付けを初めてしてみたのでついでにメモ。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="タグを付ける">タグを付ける</h1>

<p><a href="http://subversion.apache.org/">SVN</a>なんかと同じようにGitにもタグがあって<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、
特定のポイントのスナップショットを残す事が出来ます。</p>

<p>タグを作りたい時は、</p>

<pre><code>$ git tag -a v0.0.2 -m "version 2"
</code></pre>

<p>こんな感じで<code>-a</code>に続きタグ名を与えます。<code>-m</code>はコメント。</p>

<p>現在のローカルレポジトリの状態から作られるので、何か変更してある場合は
<code>commit</code>後に。</p>

<p><code>git tag</code>とするとタグ一覧が見れます。</p>

<pre><code>$ git tag
v0.0.1
v0.0.2
</code></pre>

<h1 id="リモートにpush">リモートにpush</h1>

<p>リモートに送るには<code>push</code>に<code>--tag</code>を与るだけです。</p>

<pre><code>$ git tag --tag
</code></pre>

<p>GitHubに送ると、こんな感じでタグが選べる様になります。</p>

<p><img class="pic" src="/images/post/20130916_github_tag.jpg"></p>

<p>これでタグを作った時のスナップショットをZipで取ってこれる様になります<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<h1 id="タグをチェックアウト">タグをチェックアウト</h1>

<p>ただタグの中身を見たい時はcheckoutすればOK<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。</p>

<pre><code>$ git checkout v0.0.2
Note: checking out 'v0.0.2'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later ) by using -b with the checkout command again. Example:

git checkout -b new_branch_name

HEAD is now at 05745ff... Update: brew in tap repo can be written before tap
</code></pre>

<p>ただ、この場合は<code>detached HEAD</code>状態で他のブランチに移ると消えてしまう状態です。</p>

<p>変更履歴を取って行きたい場合はこの状態から</p>

<pre><code>$ git checkout -b branch_v0.0.2
</code></pre>

<p>などとして新たにブランチを作るか最初から</p>

<pre><code>$ git checkout -b branch_v0.0.2 v0.0.2
</code></pre>

<p>とすれば<code>v0.0.2</code>のタグで初期化された<code>branch_v0.0.2</code>というブランチが出来ます。</p>

<p>この時に、ブランチ名も<code>v0.0.2</code>でも良いんですが、その場合は
ブランチ名とタグ名がconflictするのでその後、ブランチを<code>refs/heads/v0.0.2</code>、
タグを<code>refs/tags/v0.0.2</code>ときちんと指定してあげないと</p>

<pre><code>$ git checkout v0.0.2
warning: refname 'v0.0.2' is ambiguous.
</code></pre>

<p>みたいに注意されます。(一応この場合は<code>refs/heads/v0.0.2</code>を取ってきます。)</p>

<h1 id="タグを削除">タグを削除</h1>

<p>ローカルのタグを削除するには<code>-d</code>オプションを使って</p>

<pre><code>$ git tag -d v0.0.2
</code></pre>

<p>の様にします<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<p>これをリモートに反映するにはGitHub等のリモートレポジトリが<code>origin</code>として
<code>git remote</code>に登録されてるとして</p>

<pre><code>$ git push origin :v0.0.2
</code></pre>

<p>または</p>

<pre><code>$ git push --delete origin v0.0.2
</code></pre>

<p>とすればOK。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://git-scm.com/book/ja/Git-%e3%81%ae%e5%9f%ba%e6%9c%ac-%e3%82%bf%e3%82%b0">2.6 Git の基本 - タグ</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.goodpic.com/mt/archives2/2010/08/github_tgzzip.html">GitHub でタグを打って tgz/zip アーカイブ をダウンロードできるようにする</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://d.hatena.ne.jp/kanonji/20110304/1299211488">gitでタグをチェックアウトする。</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://cdn8.atwikiimg.com/git_jp/pub/git-manual-jp/Documentation/chunked/ch01s02.html">プロジェクトの他のバージョンのチェックアウト方法</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="http://qiita.com/usamik26/items/7e53bae128bf130b8a32"> git でリモートのタグやブランチを削除する方法 </a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brewallにtapall追加]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/15/computer-mac-homebrew/"/>
    <updated>2013-09-15T19:58:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/15/computer-mac-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B007HZEBW4/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/511VNFQvfhL._SL160_.jpg" border="0"></a></p>

<p><a href="/blog/2013/09/12/computer-mac-install/">Homebrewの拡張:brewdler, tap, cask</a>
で書いた所に追記しておきましたが、
<a href="/blog/2013/09/13/computer-mac-install-homebrew/">Brewallをざっと書いてみた</a>
後で、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>
について
ちょっときちんと理解してなかった所があったので、
その辺上手く管理できるように<a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>
をアップデートしてみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Tap">Tap</h1>

<p>Tapは元々Homebrewに元々入ってるFormulaeに加えて、新しい
Formulaeの入ったGitGubレポジトリを追加して扱えるパッケージを簡単に増やせる、
というのが本来の目的の様。</p>

<ul>
<li>Homebrewで紹介されてるレポジトリ一覧:
<a href="https://github.com/mxcl/homebrew/wiki/Interesting-Taps-&amp;-Branches">Interesting Taps &amp; Branches</a></li>
</ul>


<p>最初に<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>だけを見ていたので、
このパッケージの様に1つのレポジトリに1つのパッケージがあって
Formulaとパッケージと同時に管理するのが普通だと勘違いしてました。</p>

<p>なので、<a href="/blog/2013/09/13/computer-mac-install-homebrew/">前回の時は</a>
<code>tap</code>と書いておくと、指定したリポジトリの中にFormulaが1つだけあると仮定して、
そのFormulaに対し<code>brew install</code>も同時に行うようにして、
2つ以上ある時はエラー出すような形にしてました。</p>

<p>これだと色々なレポジトリをtapして追加してる場合は使い勝手が良くないので、
その辺を主にアップデートしました。</p>

<h1 id="tapall">tapall</h1>

<p>新たに<code>tappall</code>コマンドを追加しました。
新しいBrewallだと</p>

<pre><code>tap 'phinze/cask'
</code></pre>

<p>と書いただけだとcaskレポジトリをtapするだけになっています。
もし、<code>brew install</code>も同時に行いたい場合は、代わりに</p>

<pre><code>tapall 'phinze/cask'
</code></pre>

<p>と書くと、caskレポジトリにあるFormulaeを探してきて全てインストールします。
この場合は<code>brew-cask</code>のみですが、複数のFormulaeがある場合も全てインストールします。</p>

<p>インストールするパッケージを限定したい場合、
例えば上のIntaresting Taps &amp; Branchesの中で一番上にある
<code>science</code>というレポジトリの<code>abyss</code>というFormulaについてだけ
インストールしたい場合は</p>

<pre><code>tap 'Homebrew/science'
brew 'abyss'
</code></pre>

<p>とします。この場合でも、順序は気にしなくて大丈夫です。
(Brewfile内にあるtapを常に一番最初に行うようにします。)</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでssh時の'Permission denied (publickey).'の解決法]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/14/computer-mac-github/"/>
    <updated>2013-09-14T21:31:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/14/computer-mac-github</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008K411SS/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/61N6n6LkUAL._SL160_.png" border="0"></a></p>

<p>Macでたまに<code>ssh</code>したり、<code>git</code>コマンドでGitHubに<code>push</code>したりするときに
うまくいかない時があって色々調べたのでそのまとめ。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="sshでPermission+denined">sshでPermission denined</h1>

<p>普段Mac内でiTermなどターミナルを立ち上げて作業を行ってる時には問題ないんですが、
<code>cron</code>で予約しておいたジョブの中や
Macに外から<code>ssh</code>で入って作業したりするときに、
<code>git</code>コマンドを使ったりすると、</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>こんな感じのエラーが。
同時にMacの方でターミナルなどを立ち上げて直接試してみると問題なく接続できます。</p>

<p>GitHub関連で調べていたらこんなページを見つけたので</p>

<blockquote><p><a href="https://help.github.com/articles/error-permission-denied-publickey">Error: Permission denied (publickey)</a></p></blockquote>

<p>これに従い取り敢えずMacの中で<code>ssh -vT git@github.com</code>してみると</p>

<pre><code>$ ssh -vT git@github.com
...
debug1: identity file /Users/user/.ssh/id_dsa type 2
debug1: identity file /Users/user/.ssh/id_dsa-cert type -1
...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/user/.ssh/id_rsa
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Authentication succeeded (publickey).
...
</code></pre>

<p>と。何故かdsa鍵しか最初にみてませんが、最終的にrsa鍵で認証を通してます。</p>

<p>一方、外からssh(内部で<code>ssh local</code>で入っても一緒の状態になりました)してからみると</p>

<pre><code>$ ssh -vT git@github.com
...
debug1: identity file /Users/user/.ssh/id_dsa type 2
debug1: identity file /Users/user/.ssh/id_dsa-cert type -1
...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/user/.ssh/id_rsa
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Authentication succeeded (publickey).
</code></pre>

<p>な感じで失敗。</p>

<p><code>~/.ssh/</code>には<code>id_rsa</code>もあるのを確認した上で、<code>~/.ssh/config</code>を見ると</p>

<pre><code>Host github
  HostName github.com
  IdentityFile ~/.ssh/id_rsa
  User rcmdnk
  Compression yes
</code></pre>

<p>の記述はあり、GitHubではrsa鍵を使ってたので良いと思ったんですが、
よく見たらその上の方に</p>

<pre><code>Host *
  Protocol 2
  IdentityFile ~/.ssh/id_dsa
</code></pre>

<p>こんな記述が。。。昔どこかで使ったか、少なくとも今使っては居ないので、
なんかのテストで少し使っていたか、全く覚えてないですが、取り敢えずコメントアウト。
これが、ssh時にdsa鍵を強制してたのでいけなかったみたいで、
コメントアウトしたら外からsshした場合も</p>

<pre><code>$ ssh -vT git@github.com
...
debug1: identity file /Users/user/.ssh/id_rsa type 1
debug1: identity file /Users/user/.ssh/id_rsa-cert type -1
debug1: identity file /Users/user/.ssh/id_dsa type 2
debug1: identity file /Users/user/.ssh/id_dsa-cert type -1
...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/user/.ssh/id_rsa
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
Enter passphrase for key '/Users/user/.ssh/id_rsa':
debug1: read PEM private key done: type RSA
debug1: Authentication succeeded (publickey).
...
</code></pre>

<p>こんな感じでrsaキーを使ってOKに。
ただ、鍵にパスフレーズを入れてたみたいでこの場合パスフレーズを要求されました。
Mac内で行うときは聞かれない。</p>

<p>取り敢えずこれに関しては自分がおかしな設定残してただけで使えるようにはなったんですが、
なぜMac内で直接立ち上げたときは問題なかったのか意味不明だったのでちょっと調べてみることに。</p>

<h1 id="Macでのssh-agent:+launchdで立ち上げ">Macでのssh-agent: launchdで立ち上げ</h1>

<p>ssh-agentは特に気にしてなかったんですが、
Macでは<a href="http://ja.wikipedia.org/wiki/Launchd">launchd</a>
を採用していてこれで<code>ssh-agent</code>も管理されています。</p>

<p>設定ファイルは</p>

<pre><code>/System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
</code></pre>

<p>ターミナルを起動すると<code>SSH_AUTH_SOCK</code>が</p>

<pre><code>$ echo $SSH_AUTH_SOCK
/tmp/launch-XXXXXX/Listeners
</code></pre>

<p>(<code>XXXXXX</code>の部分はランダムな文字列)と設定されてます。
これで<code>ssh</code>とかでこの値にアクセスしようとすると
<code>ssh-agent</code>が起動するようになってるようです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>さらに、この時に一度使った鍵のパスフレーズはKeyChainに保存される？ため<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>、
次回から起動した時は一度登録したパスフレーズは聞かれません。
で、上の場合Mac内では<code>ssh-agent</code>に鍵を最初の時に登録してあったのでパスフレーズも聞かれず上手く行ってた模様。</p>

<p>一方、外部からsshしたりして<code>SSH_AUTH_SOCK</code>の値を見ると設定されてません。
これがどの部分で設定されてるかは結局良くわからなかったんですが、
取り敢えずこれが原因。</p>

<p>Macの方でこの値を取得して値だけ</p>

<pre><code>$ export SSH_AUTH_SOCK=/tmp/launch-XXXXXX/Listeners
</code></pre>

<p>とすれば、<code>ssh</code>などするときに<code>ssh-agent</code>が自動で起動するようになりました。</p>

<h1 id="SSH_AUTH_SOCKを自動で設定する">SSH_AUTH_SOCKを自動で設定する</h1>

<p>一番単純には<code>/tmp/launch*/Listeners</code>を探して設定すればOK<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<pre><code>export SSH_AUTH_SOCK=`ls -tr /tmp/launch*/Listeners|tail -n1`
</code></pre>

<p>たまに該当するファイルが複数できてる事があるので
時間的に最後の物を選択。</p>

<p>この辺、どこで設定されてるか探し当てられませんでしたが、Macでログインした時に
新しいものが出来る模様。(launchdを勉強すれば分かるのだろうか。。。？
SSH_AUTH_SOCKもMacでログインした時に
全体の環境変数として設定されてる？ログアウトしてログインし直したり<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>すると新しい物が出来る。単に時間が経っても出来る？)</p>

<p>さらに、たまに上の方法で探した最後の物が間違ってる場合もあり(他の物様に作られたもの？)、上手く行かない時があるんですが、
webで探すと<code>ssh-agent</code>で使われてる物を直接探して
<code>ps</code>から取ってきたり<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup>、</p>

<pre><code>export SSH_AUTH_SOCK=`ps auxeww | grep ssh-agent | grep SSH_AUTH_SOCK | sed 's/.*SSH_AUTH_SOCK=//' | cut -f 1 -d ' '`
</code></pre>

<p><code>lsof</code>で探してきたり<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup></p>

<pre><code>export SSH_AUTH_SOCK=`/usr/sbin/lsof | grep Listeners | grep ssh-agent | awk '{print $8}'`
</code></pre>

<p>するものがありましたが、
<code>ssh-agent</code>が走ってないと駄目なので、例えばMacでログインだけして、
一度もMac内のターミナルから<code>ssh</code>などを実行してない状況で
他からsshしてくるとこれらは使えません。</p>

<p>なので、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;SSH_AUTH_SOCK&quot;</span>&gt;SSH_AUTH_SOCK&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> <span class="s2">&quot;$SSH_AUTH_SOCK&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">sock_tmp</span><span class="o">=(</span>&lt;code&gt;ls -t /tmp/launch*/Listeners&lt;/code&gt;<span class="o">)</span>
</span><span class='line'>  <span class="k">for </span>s in <span class="k">${</span><span class="nv">sock_tmp</span><span class="p">[@]</span><span class="k">}</span>;<span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">SSH_AUTH_SOCK</span><span class="o">=</span><span class="nv">$s</span>
</span><span class='line'>ssh-add -l &amp;gt;&amp;amp;amp; /dev/null
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">break</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">unset </span>SSH_AUTH_SOCK
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">unset </span>sock_tmp
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>みたいな事を書いておくと正しい物を拾えます。</p>

<p>ただ、これでも、Macを起動しただけで一度もログインしてない状態だと
うまくいかないので、その時は自分で別途<code>ssh-agent</code>を立ち上げるように
すれば良いかも。
<code>.bashrc</code>を読み込んでるスクリプト起動時等に立ち上がるとパスフレーズを聞かれて止まってしまうので
<code>.bash_profile</code>の方に</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc_profile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> -f ~/.bashrc <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>  . ~/.bashrc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$SSH_AUTH_SOCK&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">eval</span> &lt;code&gt;ssh-agent&lt;/code&gt; &gt; ~/.ssh-agent.tmp
</span><span class='line'>  <span class="nv">MY_SSH_AGENT_PID</span><span class="o">=</span>&lt;code&gt;cat ~/.ssh-agent.tmp|cut -d<span class="s2">&quot; &quot;</span> -f3&lt;/code&gt;
</span><span class='line'>  rm -f ~/.ssh-agent.tmp
</span><span class='line'>  ssh-add ~/.ssh/id_rsa
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>と、<code>.bashrc</code>読み込み後に<code>SSH_AUTH_SOCK</code>が設定されてない時に限り
<code>ssh-agent</code>を起動するように。</p>

<p>これだと<code>ssh-agent</code>が増え続けるので、
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc_logout </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$MY_SSH_AGENT_PID&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>;
</span><span class='line'>  <span class="nb">kill</span> -9 <span class="nv">$MY_SSH_AGENT_PID</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
と言った感じでログアウト時に<code>kill</code>するようにしておきます。</p>

<p>ただ、Macをサーバーの様に外から再起動させてそのまま置いておく、
ということはまず無いので、後半はやり過ぎで
<code>Listeners</code>を探す程度にしておいて、
もし後半の様な状況で必要ならば手で<code>ssh-agent</code>を起動する、
程度で良いかも。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>ただし、<code>ssh-agent -l</code>というMac特有のオプション？付きで起動: <a href="http://www.gossamer-threads.com/lists/openssh/dev/52278">MacOSX &amp; ssh-agent -l</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.dribin.org/dave/blog/archives/2007/11/28/ssh_agent_leopard/">ssh-agent on Mac OS X 10.5 (Leopard)</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://bridge.grumpy-troll.org/2011/07/diversion-into-macosx-launchd-ssh-agent.html">Diversion into MacOSX launchd &amp; ssh-agent </a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://aligach.net/diary/20110602.html">keychainでssh-agentと鍵を管理することにした</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="http://d.hatena.ne.jp/yuyarin/20100225/1267084795">Mac OS X の cron で SSH に失敗する．</a>
  <a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p>普段ログインし直す必要なんて無いわけですが、<a href="https://secure.logmein.com/jp/">LogMeIn</a>を使っていて、たまに調子悪いと勝手にログアウトしてしまうことがある。。。
  <a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p><a href="http://pentestmonkey.net/cheat-sheet/ssh-cheat-sheet">SSH Cheat Sheet</a>
  <a href='#fnref:7' rev='footnote'>↩</a></p>
</li><li id='fn:8'><p><a href="https://discussions.apple.com/thread/1674891?start=0&amp;tstart=0">where is SSH_AUTH_SOCK set?</a>、<code>lsof</code>の方は0.1秒程かかってちょっと遅い
<a href='#fnref:8' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brewall: brewパッケージを管理する]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/"/>
    <updated>2013-09-13T12:37:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0062009273/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51C2N2o2HkL._SL160_.jpg" border="0"></a>
昨日、<a href="/blog/2013/09/12/computer-mac-install/">Homebrewの拡張:brewdler, tap, cask</a>
という記事でbrewdlerを試したことを書きましたが、
どうもただリストを管理してるだけなうえ、
tapでインストールするパッケージはきちんとインストール出来ないし、
削除も対応してなかったりして利点が見いだせなかったので、
それらを出来るようにしたスクリプトを作りました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Brewall">Brewall</h1>

<p>ファイルはGitHubにあります:<a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>。</p>

<h2 id="Brewallのインストール">Brewallのインストール</h2>

<p>brew-tapでインストール出来るようにしたので、
Homebrewがインストールされてれば</p>

<pre><code>$ brew tap rcmdnk/brewall
$ brew install brewall
</code></pre>

<p>でインストール出来ます。</p>

<p>必要なファイルは<code>/bin/brewall</code>だけなので、これを取ってきてパスが通った好きな所に入れてもOKです。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インプットファイル">インプットファイル</h3>

<p>管理はデフォルトでは<code>/usr/local/Library/Brewfile</code>をインプットファイルとして使います。
最初に</p>

<pre><code>$ brewall -i
</code></pre>

<p>とすると、現在インストールされているファイルからBrewfileを作ってくれます。
このファイルはBrewdlerでも使えますし、
Brewdler様に作ったBrewfileもそのまま流用できます。</p>

<p>Brewdler同様、<code>tap</code>/<code>cask</code>にも対応していて、こんな感じで
Brewfilwを作って下さい(既にHomebrewで何かインストールしてある場合は先
に<code>brewall -i</code>でファイルを作りそれを編集して下さい):</p>

<pre><code>brew 'mercurial'
brew 'macvim --with-lua'
tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>最初にコマンド(<code>brew</code>/<code>tap</code>/<code>cask</code>)、次にパッケージやインストール時のオプションです。
基本的2番目以降の項目は<code>brew install</code>等の引数に直接渡されるだけなので、
<code>brew install</code>に使える引数は全て使えます。</p>

<p>なので、MacVimを<code>+lua</code>でコンパイルしてインストールしたい場合は上の様に<code>--with-lua</code>付きで。
<code>brewall -i</code>でも、これらのオプション付きでインストールしたものはオプション付きで初期化します。</p>

<p>また、Brewdlerだと<code>tap</code>で書いただけの場合、<code>brew install</code>が行われないので
手作業が必要でしたが(上のファイルだと<code>cask</code>がないと言って怒られる)、
Brewallは<code>brew install</code>もパッケージ名を探してきて自動的に一緒に<code>brew install</code>もされます。</p>

<hr />

<p>2013/09/15 追記</p>

<p>brew-tapに関して少し理解してなかった部分があって1レポジトリ1パッケージ(Formula)
限定にしてましたが、そうでもないので、
それに対応するようアップデート:<a href="/blog/2013/09/15/computer-mac-homebrew/">Brewallにtapall追加</a>。</p>

<p>これに伴い<code>tap</code>だけの場合は<code>tap</code>するだけ、<code>tapall</code>コマンドを使うと
レポジトリ内の全てのFormulaeに従いパッケージをインストールする様になります。
(上で書かれてる様な自動インストールをしたい場合は<code>tapall</code>を使う。)</p>

<hr />

<p>また、<code>cask</code>コマンドがある場合、自動で<code>tap 'phinze/cask'</code>と同じことをするようにしてあるので、
上の例では<code>phinze/cask</code>の項を落としてもOKです。</p>

<p>順番も、先に<code>cask</code>の項目があっても、その時に<code>cask</code>をインストールしてしまうので
問題ありません。</p>

<h3 id="インストール">インストール</h3>

<p>引数なしで<code>brewall</code>を行うと、<code>Brewfile</code>にあるパッケージをインストールします。</p>

<p>MacVim等、アプリケーションを含むパッケージの場合、<code>-l</code>を与えることで、
ローカルの<code>~/Applications/</code>へ各アプリケションへのリンクを作ります(<code>brew linkapps</code>)。
もし、グローバルな<code>/Applications/</code>へインストールしたい場合は<code>-g</code>を使います。
この場合は<code>sudo</code>するのでrootパスワードを聞かれます。</p>

<h3 id="クリーンアップ">クリーンアップ</h3>

<p><code>brewall -c</code>とすると、<code>Brewfile</code>に無い項目を削除します。
デフォルトではdry runモードで走るので実際には削除しません。</p>

<p>一度<code>brewall -c</code>でチェックして、実際に削除したい場合は</p>

<pre><code>$ brew -c -r
</code></pre>

<p>と<code>-r</code>を付けて下さい。</p>

<p>また、<code>cask</code>コマンドがある場合、<code>tap 'phinze/cask'</code>がなくてもこれを削除しません。</p>

<h3 id="Brewfile編集">Brewfile編集</h3>

<pre><code>$ brew -e
</code></pre>

<p>とするとBrewfileを編集できます。Editorはデフォルトでは<code>vim</code>ですが、
<code>EDITOR</code>変数が設定してある場合はその値を使います。</p>

<h1 id="まとめ">まとめ</h1>

<p>Homebrew等、基本Rubyで書かれてるのでRubyで作った方が喜ばれるところかもしれませんが、
RubyはOctopressで使うくらいでおぼつかない(じゃあなぜOctopressを使ったか。。。)ので、
簡単にシェルスクリプトで書きました。</p>

<p>Brewdlerで出来る事は網羅し、かつ、インストールは全自動化、
削除も簡単に行える様にできたので取り敢えず満足なところ。</p>

<p></p>

<hr />

<p></p>
]]></content>
  </entry>
  
</feed>
