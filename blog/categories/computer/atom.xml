<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computer | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-13T14:04:19+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Mac][Install][Homebrew]Brewall: brewパッケージを管理する]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/"/>
    <updated>2013-09-13T12:37:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0062009273/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51C2N2o2HkL._SL160_.jpg" border="0"></a>
昨日、<a href="/blog/2013/09/12/computer-mac-install/">Homebrewの拡張:brewdler, tap, cask</a>
という記事でbrewdlerを試したことを書きましたが、
どうもただリストを管理してるだけなうえ、
tapでインストールするパッケージはきちんとインストール出来ないし、
削除も対応してなかったりして利点が見いだせなかったので、
それらを出来るようにしたスクリプトを作りました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Brewall">Brewall</h1>

<p>ファイルはGitHubにあります:<a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>。</p>

<h2 id="Brewallのインストール">Brewallのインストール</h2>

<p>brew-tapでインストール出来るようにしたので、
Homebrewがインストールされてれば</p>

<pre><code>$ brew tap rcmdnk/brewall
$ brew install brewall
</code></pre>

<p>でインストール出来ます。</p>

<p>必要なファイルは<code>/bin/brewall</code>だけなので、これを取ってきてパスが通った好きな所に入れてもOKです。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インプットファイル">インプットファイル</h3>

<p>管理はデフォルトでは<code>/usr/local/Library/Brewfile</code>をインプットファイルとして使います。
最初に</p>

<pre><code>$ brewall -i
</code></pre>

<p>とすると、現在インストールされているファイルからBrewfileを作ってくれます。
このファイルはBrewdlerでも使えますし、
Brewdler様に作ったBrewfileもそのまま流用できます。</p>

<p>Brewdler同様、<code>tap</code>/<code>cask</code>にも対応していて、こんな感じで
Brewfilwを作って下さい(既にHomebrewで何かインストールしてある場合は先
に<code>brewall -i</code>でファイルを作りそれを編集して下さい):</p>

<pre><code>brew 'mercurial'
brew 'macvim --with-lua'
tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>最初にコマンド(<code>brew</code>/<code>tap</code>/<code>cask</code>)、次にパッケージやインストール時のオプションです。
基本的2番目以降の項目は<code>brew install</code>等の引数に直接渡されるだけなので、
<code>brew install</code>に使える引数は全て使えます。</p>

<p>なので、MacVimを<code>+lua</code>でコンパイルしてインストールしたい場合は上の様に<code>--with-lua</code>付きで。
<code>brewall -i</code>でも、これらのオプション付きでインストールしたものはオプション付きで初期化します。</p>

<p>また、Brewdlerだと<code>tap</code>で書いただけの場合、<code>brew install</code>が行われないので
手作業が必要でしたが(上のファイルだと<code>cask</code>がないと言って怒られる)、
Brewallは<code>brew install</code>もパッケージ名を探してきて自動的に一緒に<code>brew install</code>もされます。</p>

<p>また、<code>cask</code>コマンドがある場合、自動で<code>tap 'phinze/cask'</code>と同じことをするようにしてあるので、
上の例では<code>phinze/cask</code>の項を落としてもOKです。</p>

<p>順番も、先に<code>cask</code>の項目があっても、その時に<code>cask</code>をインストールしてしまうので
問題ありません。</p>

<h3 id="インストール">インストール</h3>

<p>引数なしで<code>brewall</code>を行うと、<code>Brewfile</code>にあるパッケージをインストールします。</p>

<p>MacVim等、アプリケーションを含むパッケージの場合、<code>-l</code>を与えることで、
ローカルの<code>~/Applications/</code>へ各アプリケションへのリンクを作ります(<code>brew linkapps</code>)。
もし、グローバルな<code>/Applications/</code>へインストールしたい場合は<code>-g</code>を使います。
この場合は<code>sudo</code>するのでrootパスワードを聞かれます。</p>

<h3 id="クリーンアップ">クリーンアップ</h3>

<p><code>brewall -c</code>とすると、<code>Brewfile</code>に無い項目を削除します。
デフォルトではdry runモードで走るので実際には削除しません。</p>

<p>一度<code>brewall -c</code>でチェックして、実際に削除したい場合は</p>

<pre><code>$ brew -c -r
</code></pre>

<p>と<code>-r</code>を付けて下さい。</p>

<p>また、<code>cask</code>コマンドがある場合、<code>tap 'phinze/cask'</code>がなくてもこれを削除しません。</p>

<h3 id="Brewfile編集">Brewfile編集</h3>

<pre><code>$ brew -e
</code></pre>

<p>とするとBrewfileを編集できます。Editorはデフォルトでは<code>vim</code>ですが、
<code>EDITOR</code>変数が設定してある場合はその値を使います。</p>

<h1 id="まとめ">まとめ</h1>

<p>Homebrew等、基本Rubyで書かれてるのでRubyで作った方が喜ばれるところかもしれませんが、
RubyはOctopressで使うくらいでおぼつかない(じゃあなぜOctopressを使ったか。。。)ので、
簡単にシェルスクリプトで書きました。</p>

<p>Brewdlerで出来る事は網羅し、かつ、インストールは全自動化、
削除も簡単に行える様にできたので取り敢えず満足なところ。</p>

<p></p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac][Homebrew][Install]Homebrewの拡張:brewdler, tap, cask]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/12/computer-mac-install/"/>
    <updated>2013-09-12T18:03:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/12/computer-mac-install</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003HT5RV8/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51FeRgNZqeL._SL160_.jpg" border="0"></a>
Macでのパッケージ管理は<a href="/blog/2013/06/21/computer-mac/">Homebrewで行うようにしてますが</a>、
<a href="https://github.com/andrew/brewdler">brewdler</a>というものがあって、
より簡単に管理できそうだ、と言うことでちょっと試してみました。
ついでに、brewdlerのREADMEで始めてHomebrewにtapというコマンドがあることや
Homebrew-caskという拡張があることも知ったのでその辺について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<hr />

<p>追記 2013/09/13</p>

<p><a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>
というHomebrewのパッケージたちをを管理するスクリプトを書いてみました。
Brewdlerでの使い勝手に加え、Brewderでいまいちだったところを改善してあります。
簡単なシェルスクリプトです。</p>

<blockquote><p><a href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/">Brewall: brewパッケージを管理する</a></p></blockquote>

<hr />

<h1 id="brewdler">brewdler</h1>

<p><a href="https://github.com/andrew/brewdler">brewdler</a>は、
<a href="http://bundler.io/">Bundler</a>でRubyのプロジェクトを管理する感覚で、
<a href="http://brew.sh/">Homebrew</a>で管理されるパッケージも管理しよう、という向きの管理パッケージです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。
現状は、インストールするパッケージリストの記述しておいて他のマシンに移った時でも
簡単にまとめてインストール出来るようにする、と言った感じです。
アップグレード等はbrewコマンド自体で管理。</p>

<p>インストールは簡単でRubyGemsがインストールしてあれば<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></p>

<pre><code>$ gem install brewdler
</code></pre>

<p>でOK。
使い方も簡単で、Gemfileの様な<code>Brewfile</code>と言う名前のファイルを作り、その中に、</p>

<pre><code>brew 'vim'
</code></pre>

<p>と言った感じで記述しておくと、<code>Brewfile</code>のあるディレクトリで</p>

<pre><code>$ brewdle
</code></pre>

<p>とするだけで記述されているパッケージをまとめてインストールしてくれます。</p>

<p>現状Homebrewでインストールするvimは<code>-lua</code>な状態ですが、<code>+lua</code>にしたければ</p>

<pre><code>brew 'vim --with-lua'
</code></pre>

<p>の様に、brewで使えるオプションをそのまま書いておけばそのオプション付きでインストールされます。
(基本的には<code>第一引数のコマンド</code>+<code>install</code>+<code>第二引数</code>の様な感じをしているみたい。)</p>

<p>これだけだとはっきり言って単にシェルスクリプトで回せば良いのでは。。。
という疑問があって、あまりメリットを感じてないので実はbrewdler自体は使わないでいいかな、
と思ってたりするんですが、
<a href="https://github.com/andrew/brewdler">brewderのREADME</a>で、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>と
<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>も使えるとの
記述があって、それらも初めて知ったのでちょっと試してみました。</p>

<h1 id="brew+tap">brew tap</h1>

<p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>は
Homebrewに実装されてるコマンドで、GitHubのレポジトリにある
パッケージをそのままインストールするコマンドです。
最近のHomebrewがインストールされてればそのまま使えます。</p>

<p>使い方は<code>brew</code>の後に<code>tap</code>コマンドを入れて、後はレポジトリ名。
次に使うcaskなんかだと、</p>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>こんな感じで。まず<code>tap</code>コマンドでHomebrewに必要なファイルを取ってきて<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、
そのファイルに従いインストール出来るようにします。
(<code>brew-cask</code>の名前は<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>
にある<code>brew-cask.rb</code>の名前)</p>

<p>その後、他のパッケージ同様、<code>brew install</code>コマンドでインストール出来るようになります。</p>

<p>tapするときにレポジトリ名の<code>homebrew-</code>の部分は省略して<code>phinze/cask</code>でも通ります。
逆に、tapで管理したいレポジトリを作りたい時は必ず<code>homebrew-</code>を付ける必要があり、
また、この部分以外に<code>-</code>を付けるのは禁止だそうです<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。</p>

<p>(<code>/usr/local/Library/Taps/</code>以下にまずレポジトリごと取ってきてその中にある
<code>brew-cask.rb</code>等を参照してるみたいで、かつ、<code>install</code>時には新たに
GitHubから直接ファイルをとて来てるので、<code>Tap</code>ディレクトリにあるものが
ただただムダに思えるんですが。。。
設定ファイル用のレポジトリと実体用のレポジトリを分けて、
設定ファイルでそのレポジトリを指定すれば良いのかもしれませんが、
いずれにしろなんか無駄な感じが。。。)</p>

<p>アンインストールする時はまず通常通り、</p>

<pre><code>$ brew uninstall brew-cask
</code></pre>

<p>でbrew内でアンインストールし、</p>

<pre><code>$ brew untap phinze/homebrew-cask
</code></pre>

<p>でアンタップ(<code>Tap</code>ディレクトリから削除)。</p>

<p>これをbrewdlerで管理したい場合は</p>

<pre><code>tap 'phinze/homebrew-cask'
brew 'brew-cask'
</code></pre>

<p>の様に、<code>tap</code>と<code>brew</code>のコマンドを順に書きます。
<code>tap</code>の方は第一項を<code>tap</code>にして第二項をレポジトリ名に。
<a href="https://github.com/andrew/brewdler">brewderのREADME</a>だと、
caskが<code>tap</code>だけ書かれてますが、
これだと<code>tap</code>するだけでインストールしてくれません。
なので、必ずインストールするために<code>brew</code>の項を下に書く必要があります。</p>

<h1 id="brew+cask">brew cask</h1>

<p><a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>は
Homebrewの拡張でWebから落としてきてインストールする様なソフトを
自動でインストールしてくれます。
cask自体のインストールは上でやったように<code>brew tap</code>で。</p>

<p>インストールできるソフトは現在デフォルトではこんな感じ:
<a href="https://gist.github.com/rcmdnk/6541661">brew-cask-search.txt</a>。</p>

<p>インストールは</p>

<pre><code>$ brew cask install firefox
</code></pre>

<p>こんな感じで。
実体は<code>/opt/homebrew-cask/Caskroom</code>にインストールされ、そこから
デフォルトだと、<code>~/Applications/</code>へリンクが貼られます。
(最初に<code>homebrew-cask</code>ディレクトリがない場合はディレクトリを作るためにroot権限が求められます。)</p>

<p>インストール先を変えたい場合は環境変数<code>HOMEBREW_CASK_OPTS</code>を</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>と設定すると<code>/Applications</code>にインストールする様になります。
<code>brew cask install</code>コマンド時に直接<code>--appdir=/Applications</code>を加えてもOK<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<p>アンインストールは</p>

<pre><code>$ brew cask uninstall firefox
</code></pre>

<p>で<code>~/Applications/</code>のリンクも<code>.../Caskroom/</code>の実体も削除。</p>

<p>デフォルトのfirefoxは英語版ですが、日本語版をインストールしたい場合は</p>

<pre><code>$ brew cask edit firefox
</code></pre>

<p>とすると設定ファイルが開けるので、その中で</p>

<pre><code>-  url 'https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=en-US'
+  url 'https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=ja-JP-mac'
</code></pre>

<p>の様に、<code>url</code>の部分で<code>lang</code>を<code>en-US</code>から<code>ja-JP-mac</code>に変更します。</p>

<p>ここで注意が必要なのが、一回<code>cask install</code>すると、
<code>/Library/Caches/Homebrew/</code>に<code>firefox-latest</code>のキャシュが残ってて、
これを使ってしまうので、再度違う言語でインストールしたい場合には
このファイルを先に消しておく必要があります。
(caskでダウンロードされたキャッシュは<code>brew cleanup</code>等で消えないので、
手で消すしか無い？)</p>

<p>これをbrewdleで管理したい場合はBrewfileに</p>

<pre><code>cask 'firefox'
</code></pre>

<p>と書いて<code>brewdle</code>すれば良いだけです。</p>

<p>ただ、<a href="https://github.com/andrew/brewdler">brewdleのREADME</a>にあるように
いきなり<code>tap</code>での<code>cask</code>のインストールと<code>cask</code>でのインストールを</p>

<pre><code>tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>こんな感じで書いてもおいても、caskは無いと言われてしまいます。</p>

<p>なので、これらがインストールされてない状態からBrewfileを作る時は、</p>

<ol>
<li>tap 'phinze/homebrew-cask'</li>
<li>brew 'brew-cask'</li>
<li>cask 'firefox'</li>
</ol>


<p>の様にまず、caskを<code>tap</code>、caskをインストール、
その後に<code>cask</code>でインストールするもの、のように書いていく必要があります。</p>

<h1 id="まとめ">まとめ</h1>

<p>brewdlerが便利そうだな、と思って使ってみたんですが、いまいち単なる
リストと違って何が嬉しいのかわからないのが現状。
いっそのこと適当なスクリプトを自分で書いてしまった方が色々できて
良さそう。。。</p>

<p>ただ、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>と
<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>を
知れたのは良かったです。
差し当たり現在入れてある物はcaskで置き換えたりはしてませんが、
そのうち。</p>

<p>と、思って、<code>cask</code>についていろいろ調べてた時、
<code>cask</code>の実体が<code>/opt/</code>以下にあるのでちょっと<code>/opt/</code>行った所、
<code>boxen</code>ディレクトリを発見。
そう言えば、ちょっと前に</p>

<blockquote><p><a href="http://qiita.com/yuku_t/items/c6f20de0e4f4c352046c">Boxen使わなくても許されるのは2012年までだよね</a></p></blockquote>

<p>とかあったので<a href="http://boxen.github.com/">Boxen</a>入れてみようと思って、
でも途中でMac1台しか持ってないし、まだ暫く買い換えなそうだし、
次Mac買うとも限らないし、、、と思って途中で辞めたのを思い出しました。</p>

<p>ただ、<a href="http://brew.sh/">Homebrew</a>自体がBoxenで管理できたりするので、
まずはBoxenで管理出来るパッケージはBoxenでして、
それ以外をHomebrew(+cask)で管理する、と言う感じにするのが良いのかも。</p>

<p>そのうちやりたいところ。。。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://qiita.com/futoase/items/9a52ddd8bb19863372d0">homebrewのパッケージをGemfileみたく管理したい -> brewdlerがあった...</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a>でrubyと一緒に導入済。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>通常のHomebrewの各パッケージ用の設定ファイルは<code>/usr/local/Library/Formula/</code>内の<code>vim.rb</code>等。
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="https://github.com/phinze/homebrew-cask/blob/master/USAGE.md">homebrew-cask/USAGE.md</a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ウェブページを読みやすくするBeeLine Reader]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/10/computer/"/>
    <updated>2013-09-10T19:12:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/10/computer</id>
    <content type="html"><![CDATA[<p>Gigazineで紹介されてた<a href="http://www.beelinereader.com/">BeeLine Reader</a>がなかなか面白いです。</p>

<!-- more -->


<blockquote><p><a href="http://gigazine.net/news/20130910-beeline-reader/">ウェブページを読む速度が最大30％増加するブックマークレット「BeeLine Reader」</a></p></blockquote>

<p>BeeLine Readerはページ表示を行毎に色付けして表示しなおしてくれるブックマークレット
を提供してくれてます。</p>

<p>文章ばかりのページだとたまに左端に戻った時にどの行だったか
分かりづらい時がありますが、そんな時に行ごとに色付けしておけば
読みやすい、との原理。
横方向にもグラデーションをかけてどの辺りまで読んだかを視認しやすくしてくれます。</p>

<p>また、変換する際に、<a href="http://getpocket.com/">Pocket</a>
や<a href="http://evernote.com/">Evernote</a>の<a href="http://evernote.com/intl/jp/clearly/">Clearly</a>
みたいに余計な物を落としてくれるので、その点でも読みやすくなります。</p>

<p>あまりウェブで長い文章を読むことは無いですが、やってみると意外と読みやすいかも。</p>

<p>試しにこのページをやってみるとこんな感じ。</p>

<p><img src="/images/post/20130910_mypage.jpg" alt="" title="" class="pic" /></p>

<p>実際にこのページで試してみたい場合はここから<i class="icon-arrow-right"></i>
<a href="javascript:(function(){readStyle='style-athelas';readSize='size-large';readMargin='margin-medium';_readability_script=document.createElement('SCRIPT');_readability_script.type='text/javascript';_readability_script.src='http://www.beelinereader.com/beelinereader/readability.js?x='+Math.random();document.getElementsByTagName('head')[0].appendChild(_readability_script);_readability_css=document.createElement('LINK');_readability_css.rel='stylesheet';_readability_css.href='http://www.beelinereader.com/beelinereader/readability.css';_readability_css.type='text/css';_readability_css.media='all';document.getElementsByTagName('head')[0].appendChild(_readability_css);_readability_print_css=document.createElement('LINK');_readability_print_css.rel='stylesheet';_readability_print_css.href='http://www.beelinereader.com/beelinereader/readability_print.css';_readability_print_css.media='print';_readability_print_css.type='text/css';document.getElementsByTagName('head')[0].appendChild(_readability_print_css);}());javascript:(function(){var%20w=window,u='http://www.beelinereader.com/beelinereader/BlackBlueRed',l=w.location,d=w.document,s=d.createElement('script'),e=encodeURIComponent,x='undefined';function%20g(){if(d.readyState&&d.readyState!='complete'){setTimeout(g,2500);}else{if(typeof%20MainApp==x){s.setAttribute('src',u+'.js');d.body.appendChild(s);}function%20f(){if(typeof%20MainApp==x){setTimeout(f,2500)}else{MainApp.show();}}f();}}g();}())">チェック</a>。
たまに上手く行かずに1文字ずつ色が変化してしまう様になってしまう時がありますが、
もう一度やってみると上手く行くことがあります。
(但し、ブラウザの<code>戻る</code>をすると、1つ前のページに戻ってしまうので、代わりに<i class='key'>F5</i>等で
再読み込みをすると元に戻ります。)</p>

<p>これ、PDFとかWordとかで長い文章読むときに出来たら便利だな、と思って、
Firefox内でPDFをプレビュー表示するようにして、ブックマークレットを試してみましたが、
1ページ目だけ？が表示され、さらに単語毎に行分けされる様な感じで全然駄目でした。</p>

<p>これと同じ事をしてくれるPDF viewerとかそのうち出たら便利かもしれないな…と。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimプラグインlightline導入]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/06/computer-vim/"/>
    <updated>2013-09-06T00:02:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/06/computer-vim</id>
    <content type="html"><![CDATA[<p>前回
<a href="/blog/2013/09/06/computer-cygwin/putty-vim/">Cygwin+screenで256 colorを有効にする</a>
というのを書いたので、
その表示させたかったVimのステータスラインについて。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="lightline">lightline</h1>

<p><a href="https://github.com/itchyny/lightline.vim">lightline</a>は
Vimのステータスラインを綺麗に表示させてくれるプラグインです。</p>

<p>Vimには元々<a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a>
(とその後継の<a href="https://github.com/Lokaltog/powerline">powerline</a>)
というPythonを使ったプラグインがありましたが、
最近、<a href="https://github.com/bling/vim-airline">vim-airline</a>
というプラグインが出来て、純粋Vim Scriptなので速いし、
他のプラグインとの融合等もあって嬉しい、
ということで移行した、と言う人が増えていました。</p>

<p>元々vim-powerlineはもっさりする気がして一度入れてから外してましたが、
すごい話題になってたのでまずvim-airlineを入れてみました。</p>

<p>そんな中、<a href="https://github.com/itchyny/lightline.vim">lightline</a>
というプラグインが登場。
vim-airlineをさらに拡張性高くしたような感じで、さらに
作者の方のブログ<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>ではその設計思想まで熱く語られています。</p>

<p>ということで、vim-airlineを導入したばかりでしたが、
lightlineも試してみることに。
ちょっと使ってみてとても拡張性が高いのが楽しい所です。</p>

<p>取り敢えず置いてみた設定はこんな感じ。</p>

<p><div><script src='https://gist.github.com/6457180.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>プラグインのhelpや
レポジトリにある<a href="https://github.com/itchyny/lightline.vim">README</a>
がかなり詳しいので、取り敢えず追ってくだけでも色々出来るようになります。</p>

<p>上のも関数などはREADMEを追って作ったものを変更したりしています。
ちょっと工夫してるところとしては、表示幅によって表示する項目を変えれるよう、各関数で表示幅とすべての表示文字数を比較して表示するかどうか決めています。</p>

<p>こんな感じで最後までファイル名は残るように。</p>

<p><img src="/images/post/20130906_lightline.gif" "" ""></p>

<p>表示の優先度などが全部の関数がお互いに上手く対応出来るように
書かないといけない様に関数を作ってしまっているので
もうちょっと上手く書けないかな、と思うところですが、
取り敢えずは良い感じに欲しい情報を載せる事が出来ました。</p>

<p>ちなみに、上のgifアニメでは、
<a href="https://github.com/kana/vim-submode">vim-submode</a>
を使ってWindowを動かしています<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p>作者の方のブログでは加えて、<a href="http://d.hatena.ne.jp/itchyny/20130828/1377653592">作者が教える！</a>
シリーズもやってくれるみたいで、今後も追っていきたい所です。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://d.hatena.ne.jp/itchyny/20130824/1377351527">lightline.vim作りました - プラグインの直交性について</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://d.hatena.ne.jp/thinca/20130131/1359567419">submode.vim とその設定例なんかを紹介</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwin+screenで256 colorを有効にする]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/05/computer-cygwin-putty-vim/"/>
    <updated>2013-09-05T19:26:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/05/computer-cygwin-putty-vim</id>
    <content type="html"><![CDATA[<p>最近、vimのステータス表示で
<a href="https://github.com/bling/vim-airline">vim-airline</a>がリリースされたり
それに追随して<a href="https://github.com/itchyny/lightline.vim">lightline</a>
がリリースされたり<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、
気になっていたのでインストールしました。
これまであまりターミナルの表示色を気にしてませんでしたが、
これらを導入した際にちゃんと表示されてない部分があったので
それらの設定と、後、導入したステータスラインの設定等。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Cygwin+++GNU+Screen">Cygwin + GNU Screen</h1>

<p>CygwinではMac同様、GNU Screenはソースからコンパイルして
インストールしていますが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、
この際、<code>configure</code>で<code>--enable-colors256</code>として256色表示を有効にしてるんですが、
実際にはそれ程色を気にするわけでもないのでCygwin上ではきちんと試してませんでした。</p>

<p>で、今回vimのステータスラインを入れてみて他の端末ではこんな感じで綺麗に見れてたのが</p>

<p><img src="/images/post/20130905_vimstatusok.png" "" ""></p>

<p>Cygwinだと</p>

<p><img src="/images/post/20130905_vimstatusno.png" "" ""></p>

<p>こんな感じで状態がとても見辛く(ともに<code>lightline</code>の<code>jellybeans</code>テーマ)。</p>

<p>色々試していると、GNU screenを起動した時だけがおかしくなるので、
screenインストール時にcolors256オプション付け忘れかと思って再インストールしてみるも駄目。
<code>.screenrc</code>に</p>

<pre><code>term xterm-256color
</code></pre>

<p>とtermを指定したりしても関係なし(そもそも他の端末ではなくてもOK。)</p>

<p>問題はMinttyのターミナルオプションが<code>xterm</code>になっていて、これを
<code>xterm-256color</code>に指定する必要があったみたいです。
(つまりはずっと256色表示でなかった。。。)</p>

<p>ターミナルにメニューバーが無いので、タイトルバーを右クリックから<code>Options...</code>
を選び下の様にTerminalのTypeを<code>xterm-256color</code>に。</p>

<p><img src="/images/post/20130905_cygwin.png" "" ""></p>

<p>これでちゃんと表示出来る様になりました。</p>

<p>テストとして<code>bash</code>でこんなスクリプトを使って表示。
<div><script src='https://gist.github.com/6457780.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><img src="/images/post/20130905_256colOK.png" "" ""></p>

<p>こんな感じに見れます。もし256色表示が有効でないと、</p>

<p><img src="/images/post/20130905_256colNO.png" "" ""></p>

<p>こんな感じで、同じ色を表示する所が出てきます。</p>

<h1 id="Putty">Putty</h1>

<p>一応同じWindowsとしてPuttyについても。</p>

<p>Puttyは各Sessionの<code>Connection</code>の<code>Data</code>の所に<code>Terminal-type string</code>
という項目があるので、ここに<code>xterm-256color</code>を記入します。
こちらは昔設定したみたいでこうなっていて、外に繋げたりcoLinuxでは
きちんと256色表示されていたみたいです。</p>

<p><img src="/images/post/20130905_putty.png" "" ""></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://d.hatena.ne.jp/itchyny/20130824/1377351527">lightline.vim作りました - プラグインの直交性について</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="/2013/03/22/screen-install/">Macでの文字化け対策用のGNU screenのインストール</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
