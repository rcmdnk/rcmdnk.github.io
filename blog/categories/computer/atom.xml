<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computer | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-15T23:14:01+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brewallにtapall追加]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/15/computer-mac-homebrew/"/>
    <updated>2013-09-15T19:58:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/15/computer-mac-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B007HZEBW4/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/511VNFQvfhL._SL160_.jpg" border="0"></a></p>

<p><a href="/blog/2013/09/12/computer-mac-install/">Homebrewの拡張:brewdler, tap, cask</a>
で書いた所に追記しておきましたが、
<a href="/blog/2013/09/13/computer-mac-install-homebrew/">Brewallをざっと書いてみた</a>
後で、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>
について
ちょっときちんと理解してなかった所があったので、
その辺上手く管理できるように<a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>
をアップデートしてみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Tap">Tap</h1>

<p>Tapは元々Homebrewに元々入ってるFormulaeに加えて、新しい
Formulaeの入ったGitGubレポジトリを追加して扱えるパッケージを簡単に増やせる、
というのが本来の目的の様。</p>

<ul>
<li>Homebrewで紹介されてるレポジトリ一覧:
<a href="https://github.com/mxcl/homebrew/wiki/Interesting-Taps-&amp;-Branches">Interesting Taps &amp; Branches</a></li>
</ul>


<p>最初に<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>だけを見ていたので、
このパッケージの様に1つのレポジトリに1つのパッケージがあって
Formulaとパッケージと同時に管理するのが普通だと勘違いしてました。</p>

<p>なので、<a href="/blog/2013/09/13/computer-mac-install-homebrew/">前回の時は</a>
<code>tap</code>と書いておくと、指定したリポジトリの中にFormulaが1つだけあると仮定して、
そのFormulaに対し<code>brew install</code>も同時に行うようにして、
2つ以上ある時はエラー出すような形にしてました。</p>

<p>これだと色々なレポジトリをtapして追加してる場合は使い勝手が良くないので、
その辺を主にアップデートしました。</p>

<h1 id="tapall">tapall</h1>

<p>新たに<code>tappall</code>コマンドを追加しました。
新しいBrewallだと</p>

<pre><code>tap 'phinze/cask'
</code></pre>

<p>と書いただけだとcaskレポジトリをtapするだけになっています。
もし、<code>brew install</code>も同時に行いたい場合は、代わりに</p>

<pre><code>tapall 'phinze/cask'
</code></pre>

<p>と書くと、caskレポジトリにあるFormulaeを探してきて全てインストールします。
この場合は<code>brew-cask</code>のみですが、複数のFormulaeがある場合も全てインストールします。</p>

<p>インストールするパッケージを限定したい場合、
例えば上のIntaresting Taps &amp; Branchesの中で一番上にある
<code>science</code>というレポジトリの<code>abyss</code>というFormulaについてだけ
インストールしたい場合は</p>

<pre><code>tap 'Homebrew/science'
brew 'abyss'
</code></pre>

<p>とします。この場合でも、順序は気にしなくて大丈夫です。
(Brewfile内にあるtapを常に一番最初に行うようにします。)</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでssh時の'Permission denied (publickey).'の解決法]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/14/computer-mac-github/"/>
    <updated>2013-09-14T21:31:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/14/computer-mac-github</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008K411SS/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/61N6n6LkUAL._SL160_.png" border="0"></a></p>

<p>Macでたまに<code>ssh</code>したり、<code>git</code>コマンドでGitHubに<code>push</code>したりするときに
うまくいかない時があって色々調べたのでそのまとめ。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="sshでPermission+denined">sshでPermission denined</h1>

<p>普段Mac内でiTermなどターミナルを立ち上げて作業を行ってる時には問題ないんですが、
<code>cron</code>で予約しておいたジョブの中や
Macに外から<code>ssh</code>で入って作業したりするときに、
<code>git</code>コマンドを使ったりすると、</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>こんな感じのエラーが。
同時にMacの方でターミナルなどを立ち上げて直接試してみると問題なく接続できます。</p>

<p>GitHub関連で調べていたらこんなページを見つけたので</p>

<blockquote><p><a href="https://help.github.com/articles/error-permission-denied-publickey">Error: Permission denied (publickey)</a></p></blockquote>

<p>これに従い取り敢えずMacの中で<code>ssh -vT git@github.com</code>してみると</p>

<pre><code>$ ssh -vT git@github.com
...
debug1: identity file /Users/user/.ssh/id_dsa type 2
debug1: identity file /Users/user/.ssh/id_dsa-cert type -1
...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/user/.ssh/id_rsa
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Authentication succeeded (publickey).
...
</code></pre>

<p>と。何故かdsa鍵しか最初にみてませんが、最終的にrsa鍵で認証を通してます。</p>

<p>一方、外からssh(内部で<code>ssh local</code>で入っても一緒の状態になりました)してからみると</p>

<pre><code>$ ssh -vT git@github.com
...
debug1: identity file /Users/user/.ssh/id_dsa type 2
debug1: identity file /Users/user/.ssh/id_dsa-cert type -1
...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/user/.ssh/id_rsa
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Authentication succeeded (publickey).
</code></pre>

<p>な感じで失敗。</p>

<p><code>~/.ssh/</code>には<code>id_rsa</code>もあるのを確認した上で、<code>~/.ssh/config</code>を見ると</p>

<pre><code>Host github
  HostName github.com
  IdentityFile ~/.ssh/id_rsa
  User rcmdnk
  Compression yes
</code></pre>

<p>の記述はあり、GitHubではrsa鍵を使ってたので良いと思ったんですが、
よく見たらその上の方に</p>

<pre><code>Host *
  Protocol 2
  IdentityFile ~/.ssh/id_dsa
</code></pre>

<p>こんな記述が。。。昔どこかで使ったか、少なくとも今使っては居ないので、
なんかのテストで少し使っていたか、全く覚えてないですが、取り敢えずコメントアウト。
これが、ssh時にdsa鍵を強制してたのでいけなかったみたいで、
コメントアウトしたら外からsshした場合も</p>

<pre><code>$ ssh -vT git@github.com
...
debug1: identity file /Users/user/.ssh/id_rsa type 1
debug1: identity file /Users/user/.ssh/id_rsa-cert type -1
debug1: identity file /Users/user/.ssh/id_dsa type 2
debug1: identity file /Users/user/.ssh/id_dsa-cert type -1
...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/user/.ssh/id_rsa
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
Enter passphrase for key '/Users/user/.ssh/id_rsa':
debug1: read PEM private key done: type RSA
debug1: Authentication succeeded (publickey).
...
</code></pre>

<p>こんな感じでrsaキーを使ってOKに。
ただ、鍵にパスフレーズを入れてたみたいでこの場合パスフレーズを要求されました。
Mac内で行うときは聞かれない。</p>

<p>取り敢えずこれに関しては自分がおかしな設定残してただけで使えるようにはなったんですが、
なぜMac内で直接立ち上げたときは問題なかったのか意味不明だったのでちょっと調べてみることに。</p>

<h1 id="Macでのssh-agent:+launchdで立ち上げ">Macでのssh-agent: launchdで立ち上げ</h1>

<p>ssh-agentは特に気にしてなかったんですが、
Macでは<a href="http://ja.wikipedia.org/wiki/Launchd">launchd</a>
を採用していてこれで<code>ssh-agent</code>も管理されています。</p>

<p>設定ファイルは</p>

<pre><code>/System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
</code></pre>

<p>ターミナルを起動すると<code>SSH_AUTH_SOCK</code>が</p>

<pre><code>$ echo $SSH_AUTH_SOCK
/tmp/launch-XXXXXX/Listeners
</code></pre>

<p>(<code>XXXXXX</code>の部分はランダムな文字列)と設定されてます。
これで<code>ssh</code>とかでこの値にアクセスしようとすると
<code>ssh-agent</code>が起動するようになってるようです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>さらに、この時に一度使った鍵のパスフレーズはKeyChainに保存される？ため<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>、
次回から起動した時は一度登録したパスフレーズは聞かれません。
で、上の場合Mac内では<code>ssh-agent</code>に鍵を最初の時に登録してあったのでパスフレーズも聞かれず上手く行ってた模様。</p>

<p>一方、外部からsshしたりして<code>SSH_AUTH_SOCK</code>の値を見ると設定されてません。
これがどの部分で設定されてるかは結局良くわからなかったんですが、
取り敢えずこれが原因。</p>

<p>Macの方でこの値を取得して値だけ</p>

<pre><code>$ export SSH_AUTH_SOCK=/tmp/launch-XXXXXX/Listeners
</code></pre>

<p>とすれば、<code>ssh</code>などするときに<code>ssh-agent</code>が自動で起動するようになりました。</p>

<h1 id="SSH_AUTH_SOCKを自動で設定する">SSH_AUTH_SOCKを自動で設定する</h1>

<p>一番単純には<code>/tmp/launch*/Listeners</code>を探して設定すればOK<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<pre><code>export SSH_AUTH_SOCK=`ls -tr /tmp/launch*/Listeners|tail -n1`
</code></pre>

<p>たまに該当するファイルが複数できてる事があるので
時間的に最後の物を選択。</p>

<p>この辺、どこで設定されてるか探し当てられませんでしたが、Macでログインした時に
新しいものが出来る模様。(launchdを勉強すれば分かるのだろうか。。。？
SSH_AUTH_SOCKもMacでログインした時に
全体の環境変数として設定されてる？ログアウトしてログインし直したり<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>すると新しい物が出来る。単に時間が経っても出来る？)</p>

<p>さらに、たまに上の方法で探した最後の物が間違ってる場合もあり(他の物様に作られたもの？)、上手く行かない時があるんですが、
webで探すと<code>ssh-agent</code>で使われてる物を直接探して
<code>ps</code>から取ってきたり<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup>、</p>

<pre><code>export SSH_AUTH_SOCK=`ps auxeww | grep ssh-agent | grep SSH_AUTH_SOCK | sed 's/.*SSH_AUTH_SOCK=//' | cut -f 1 -d ' '`
</code></pre>

<p><code>lsof</code>で探してきたり<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup></p>

<pre><code>export SSH_AUTH_SOCK=`/usr/sbin/lsof | grep Listeners | grep ssh-agent | awk '{print $8}'`
</code></pre>

<p>するものがありましたが、
<code>ssh-agent</code>が走ってないと駄目なので、例えばMacでログインだけして、
一度もMac内のターミナルから<code>ssh</code>などを実行してない状況で
他からsshしてくるとこれらは使えません。</p>

<p>なので、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;SSH_AUTH_SOCK&quot;</span>&gt;SSH_AUTH_SOCK&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> <span class="s2">&quot;$SSH_AUTH_SOCK&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">sock_tmp</span><span class="o">=(</span>&lt;code&gt;ls -t /tmp/launch*/Listeners&lt;/code&gt;<span class="o">)</span>
</span><span class='line'>  <span class="k">for </span>s in <span class="k">${</span><span class="nv">sock_tmp</span><span class="p">[@]</span><span class="k">}</span>;<span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">SSH_AUTH_SOCK</span><span class="o">=</span><span class="nv">$s</span>
</span><span class='line'>ssh-add -l &amp;gt;&amp;amp;amp; /dev/null
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">break</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">unset </span>SSH_AUTH_SOCK
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">unset </span>sock_tmp
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>みたいな事を書いておくと正しい物を拾えます。</p>

<p>ただ、これでも、Macを起動しただけで一度もログインしてない状態だと
うまくいかないので、その時は自分で別途<code>ssh-agent</code>を立ち上げるように
すれば良いかも。
<code>.bashrc</code>を読み込んでるスクリプト起動時等に立ち上がるとパスフレーズを聞かれて止まってしまうので
<code>.bash_profile</code>の方に</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc_profile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> -f ~/.bashrc <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'>  . ~/.bashrc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$SSH_AUTH_SOCK&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">eval</span> &lt;code&gt;ssh-agent&lt;/code&gt; &gt; ~/.ssh-agent.tmp
</span><span class='line'>  <span class="nv">MY_SSH_AGENT_PID</span><span class="o">=</span>&lt;code&gt;cat ~/.ssh-agent.tmp|cut -d<span class="s2">&quot; &quot;</span> -f3&lt;/code&gt;
</span><span class='line'>  rm -f ~/.ssh-agent.tmp
</span><span class='line'>  ssh-add ~/.ssh/id_rsa
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>と、<code>.bashrc</code>読み込み後に<code>SSH_AUTH_SOCK</code>が設定されてない時に限り
<code>ssh-agent</code>を起動するように。</p>

<p>これだと<code>ssh-agent</code>が増え続けるので、
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc_logout </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$MY_SSH_AGENT_PID&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>;
</span><span class='line'>  <span class="nb">kill</span> -9 <span class="nv">$MY_SSH_AGENT_PID</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
と言った感じでログアウト時に<code>kill</code>するようにしておきます。</p>

<p>ただ、Macをサーバーの様に外から再起動させてそのまま置いておく、
ということはまず無いので、後半はやり過ぎで
<code>Listeners</code>を探す程度にしておいて、
もし後半の様な状況で必要ならば手で<code>ssh-agent</code>を起動する、
程度で良いかも。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>ただし、<code>ssh-agent -l</code>というMac特有のオプション？付きで起動: <a href="http://www.gossamer-threads.com/lists/openssh/dev/52278">MacOSX &amp; ssh-agent -l</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.dribin.org/dave/blog/archives/2007/11/28/ssh_agent_leopard/">ssh-agent on Mac OS X 10.5 (Leopard)</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://bridge.grumpy-troll.org/2011/07/diversion-into-macosx-launchd-ssh-agent.html">Diversion into MacOSX launchd &amp; ssh-agent </a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://aligach.net/diary/20110602.html">keychainでssh-agentと鍵を管理することにした</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="http://d.hatena.ne.jp/yuyarin/20100225/1267084795">Mac OS X の cron で SSH に失敗する．</a>
  <a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p>普段ログインし直す必要なんて無いわけですが、<a href="https://secure.logmein.com/jp/">LogMeIn</a>を使っていて、たまに調子悪いと勝手にログアウトしてしまうことがある。。。
  <a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p><a href="http://pentestmonkey.net/cheat-sheet/ssh-cheat-sheet">SSH Cheat Sheet</a>
  <a href='#fnref:7' rev='footnote'>↩</a></p>
</li><li id='fn:8'><p><a href="https://discussions.apple.com/thread/1674891?start=0&amp;tstart=0">where is SSH_AUTH_SOCK set?</a>、<code>lsof</code>の方は0.1秒程かかってちょっと遅い
<a href='#fnref:8' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brewall: brewパッケージを管理する]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/"/>
    <updated>2013-09-13T12:37:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0062009273/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51C2N2o2HkL._SL160_.jpg" border="0"></a>
昨日、<a href="/blog/2013/09/12/computer-mac-install/">Homebrewの拡張:brewdler, tap, cask</a>
という記事でbrewdlerを試したことを書きましたが、
どうもただリストを管理してるだけなうえ、
tapでインストールするパッケージはきちんとインストール出来ないし、
削除も対応してなかったりして利点が見いだせなかったので、
それらを出来るようにしたスクリプトを作りました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Brewall">Brewall</h1>

<p>ファイルはGitHubにあります:<a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>。</p>

<h2 id="Brewallのインストール">Brewallのインストール</h2>

<p>brew-tapでインストール出来るようにしたので、
Homebrewがインストールされてれば</p>

<pre><code>$ brew tap rcmdnk/brewall
$ brew install brewall
</code></pre>

<p>でインストール出来ます。</p>

<p>必要なファイルは<code>/bin/brewall</code>だけなので、これを取ってきてパスが通った好きな所に入れてもOKです。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インプットファイル">インプットファイル</h3>

<p>管理はデフォルトでは<code>/usr/local/Library/Brewfile</code>をインプットファイルとして使います。
最初に</p>

<pre><code>$ brewall -i
</code></pre>

<p>とすると、現在インストールされているファイルからBrewfileを作ってくれます。
このファイルはBrewdlerでも使えますし、
Brewdler様に作ったBrewfileもそのまま流用できます。</p>

<p>Brewdler同様、<code>tap</code>/<code>cask</code>にも対応していて、こんな感じで
Brewfilwを作って下さい(既にHomebrewで何かインストールしてある場合は先
に<code>brewall -i</code>でファイルを作りそれを編集して下さい):</p>

<pre><code>brew 'mercurial'
brew 'macvim --with-lua'
tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>最初にコマンド(<code>brew</code>/<code>tap</code>/<code>cask</code>)、次にパッケージやインストール時のオプションです。
基本的2番目以降の項目は<code>brew install</code>等の引数に直接渡されるだけなので、
<code>brew install</code>に使える引数は全て使えます。</p>

<p>なので、MacVimを<code>+lua</code>でコンパイルしてインストールしたい場合は上の様に<code>--with-lua</code>付きで。
<code>brewall -i</code>でも、これらのオプション付きでインストールしたものはオプション付きで初期化します。</p>

<p>また、Brewdlerだと<code>tap</code>で書いただけの場合、<code>brew install</code>が行われないので
手作業が必要でしたが(上のファイルだと<code>cask</code>がないと言って怒られる)、
Brewallは<code>brew install</code>もパッケージ名を探してきて自動的に一緒に<code>brew install</code>もされます。</p>

<hr />

<p>2013/09/15 追記</p>

<p>brew-tapに関して少し理解してなかった部分があって1レポジトリ1パッケージ(Formula)
限定にしてましたが、そうでもないので、
それに対応するようアップデート:<a href="/blog/2013/09/15/computer-mac-homebrew/">Brewallにtapall追加</a>。</p>

<p>これに伴い<code>tap</code>だけの場合は<code>tap</code>するだけ、<code>tapall</code>コマンドを使うと
レポジトリ内の全てのFormulaeに従いパッケージをインストールする様になります。
(上で書かれてる様な自動インストールをしたい場合は<code>tapall</code>を使う。)</p>

<hr />

<p>また、<code>cask</code>コマンドがある場合、自動で<code>tap 'phinze/cask'</code>と同じことをするようにしてあるので、
上の例では<code>phinze/cask</code>の項を落としてもOKです。</p>

<p>順番も、先に<code>cask</code>の項目があっても、その時に<code>cask</code>をインストールしてしまうので
問題ありません。</p>

<h3 id="インストール">インストール</h3>

<p>引数なしで<code>brewall</code>を行うと、<code>Brewfile</code>にあるパッケージをインストールします。</p>

<p>MacVim等、アプリケーションを含むパッケージの場合、<code>-l</code>を与えることで、
ローカルの<code>~/Applications/</code>へ各アプリケションへのリンクを作ります(<code>brew linkapps</code>)。
もし、グローバルな<code>/Applications/</code>へインストールしたい場合は<code>-g</code>を使います。
この場合は<code>sudo</code>するのでrootパスワードを聞かれます。</p>

<h3 id="クリーンアップ">クリーンアップ</h3>

<p><code>brewall -c</code>とすると、<code>Brewfile</code>に無い項目を削除します。
デフォルトではdry runモードで走るので実際には削除しません。</p>

<p>一度<code>brewall -c</code>でチェックして、実際に削除したい場合は</p>

<pre><code>$ brew -c -r
</code></pre>

<p>と<code>-r</code>を付けて下さい。</p>

<p>また、<code>cask</code>コマンドがある場合、<code>tap 'phinze/cask'</code>がなくてもこれを削除しません。</p>

<h3 id="Brewfile編集">Brewfile編集</h3>

<pre><code>$ brew -e
</code></pre>

<p>とするとBrewfileを編集できます。Editorはデフォルトでは<code>vim</code>ですが、
<code>EDITOR</code>変数が設定してある場合はその値を使います。</p>

<h1 id="まとめ">まとめ</h1>

<p>Homebrew等、基本Rubyで書かれてるのでRubyで作った方が喜ばれるところかもしれませんが、
RubyはOctopressで使うくらいでおぼつかない(じゃあなぜOctopressを使ったか。。。)ので、
簡単にシェルスクリプトで書きました。</p>

<p>Brewdlerで出来る事は網羅し、かつ、インストールは全自動化、
削除も簡単に行える様にできたので取り敢えず満足なところ。</p>

<p></p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewの拡張:brewdler, tap, cask]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/12/computer-mac-install/"/>
    <updated>2013-09-12T18:03:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/12/computer-mac-install</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003HT5RV8/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51FeRgNZqeL._SL160_.jpg" border="0"></a>
Macでのパッケージ管理は<a href="/blog/2013/06/21/computer-mac/">Homebrewで行うようにしてますが</a>、
<a href="https://github.com/andrew/brewdler">brewdler</a>というものがあって、
より簡単に管理できそうだ、と言うことでちょっと試してみました。
ついでに、brewdlerのREADMEで始めてHomebrewにtapというコマンドがあることや
Homebrew-caskという拡張があることも知ったのでその辺について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<hr />

<p>追記 2013/09/13</p>

<p><a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>
というHomebrewのパッケージたちをを管理するスクリプトを書いてみました。
Brewdlerでの使い勝手に加え、Brewderでいまいちだったところを改善してあります。
簡単なシェルスクリプトです。</p>

<blockquote><p><a href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/">Brewall: brewパッケージを管理する</a></p></blockquote>

<hr />

<h1 id="brewdler">brewdler</h1>

<p><a href="https://github.com/andrew/brewdler">brewdler</a>は、
<a href="http://bundler.io/">Bundler</a>でRubyのプロジェクトを管理する感覚で、
<a href="http://brew.sh/">Homebrew</a>で管理されるパッケージも管理しよう、という向きの管理パッケージです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。
現状は、インストールするパッケージリストの記述しておいて他のマシンに移った時でも
簡単にまとめてインストール出来るようにする、と言った感じです。
アップグレード等はbrewコマンド自体で管理。</p>

<p>インストールは簡単でRubyGemsがインストールしてあれば<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></p>

<pre><code>$ gem install brewdler
</code></pre>

<p>でOK。
使い方も簡単で、Gemfileの様な<code>Brewfile</code>と言う名前のファイルを作り、その中に、</p>

<pre><code>brew 'vim'
</code></pre>

<p>と言った感じで記述しておくと、<code>Brewfile</code>のあるディレクトリで</p>

<pre><code>$ brewdle
</code></pre>

<p>とするだけで記述されているパッケージをまとめてインストールしてくれます。</p>

<p>現状Homebrewでインストールするvimは<code>-lua</code>な状態ですが、<code>+lua</code>にしたければ</p>

<pre><code>brew 'vim --with-lua'
</code></pre>

<p>の様に、brewで使えるオプションをそのまま書いておけばそのオプション付きでインストールされます。
(基本的には<code>第一引数のコマンド</code>+<code>install</code>+<code>第二引数</code>の様な感じをしているみたい。)</p>

<p>これだけだとはっきり言って単にシェルスクリプトで回せば良いのでは。。。
という疑問があって、あまりメリットを感じてないので実はbrewdler自体は使わないでいいかな、
と思ってたりするんですが、
<a href="https://github.com/andrew/brewdler">brewderのREADME</a>で、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>と
<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>も使えるとの
記述があって、それらも初めて知ったのでちょっと試してみました。</p>

<h1 id="brew+tap">brew tap</h1>

<p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>は
Homebrewに実装されてるコマンドで、GitHubのレポジトリにある
パッケージをそのままインストールするコマンドです。
最近のHomebrewがインストールされてればそのまま使えます。</p>

<p>使い方は<code>brew</code>の後に<code>tap</code>コマンドを入れて、後はレポジトリ名。
次に使うcaskなんかだと、</p>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>こんな感じで。まず<code>tap</code>コマンドでHomebrewに必要なファイルを取ってきて<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、
そのファイルに従いインストール出来るようにします。
(<code>brew-cask</code>の名前は<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>
にある<code>brew-cask.rb</code>の名前)</p>

<p>その後、他のパッケージ同様、<code>brew install</code>コマンドでインストール出来るようになります。</p>

<p>tapするときにレポジトリ名の<code>homebrew-</code>の部分は省略して<code>phinze/cask</code>でも通ります。
逆に、tapで管理したいレポジトリを作りたい時は必ず<code>homebrew-</code>を付ける必要があり、
また、この部分以外に<code>-</code>を付けるのは禁止だそうです<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。</p>

<p>(<strike><code>/usr/local/Library/Taps/</code>以下にまずレポジトリごと取ってきてその中にある
<code>brew-cask.rb</code>等を参照してるみたいで、かつ、<code>install</code>時には新たに
GitHubから直接ファイルをとて来てるので、<code>Tap</code>ディレクトリにあるものが
ただただムダに思えるんですが。。。
設定ファイル用のレポジトリと実体用のレポジトリを分けて、
設定ファイルでそのレポジトリを指定すれば良いのかもしれませんが、
いずれにしろなんか無駄な感じが。。。</strike>
caskだけ見てたのでよく分かってなかったですが、
本来、Formulaを集めたリポジトリがあって、それをTapすることで
新たにインストールできるパッケージを増やす、と言うのが
Tapの使い方みたいですね。caskみたいな場合は、
自分自身でFormulaも用意してる、と。そうすると、取り敢えず
brewdlerで管理するときもTapするものはTapだけで、必要なパッケージだけ
brew installするのが正しい感じ。)</p>

<p>アンインストールする時はまず通常通り、</p>

<pre><code>$ brew uninstall brew-cask
</code></pre>

<p>でbrew内でアンインストールし、</p>

<pre><code>$ brew untap phinze/homebrew-cask
</code></pre>

<p>でアンタップ(<code>Tap</code>ディレクトリから削除)。</p>

<p>これをbrewdlerで管理したい場合は</p>

<pre><code>tap 'phinze/homebrew-cask'
brew 'brew-cask'
</code></pre>

<p>の様に、<code>tap</code>と<code>brew</code>のコマンドを順に書きます。
<code>tap</code>の方は第一項を<code>tap</code>にして第二項をレポジトリ名に。
<a href="https://github.com/andrew/brewdler">brewderのREADME</a>だと、
caskが<code>tap</code>だけ書かれてますが、
これだと<code>tap</code>するだけでインストールしてくれません。
なので、必ずインストールするために<code>brew</code>の項を下に書く必要があります。</p>

<h1 id="brew+cask">brew cask</h1>

<p><a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>は
Homebrewの拡張でWebから落としてきてインストールする様なソフトを
自動でインストールしてくれます。
cask自体のインストールは上でやったように<code>brew tap</code>で。</p>

<p>インストールできるソフトは現在デフォルトではこんな感じ:
<a href="https://gist.github.com/rcmdnk/6541661">brew-cask-search.txt</a>。</p>

<p>インストールは</p>

<pre><code>$ brew cask install firefox
</code></pre>

<p>こんな感じで。
実体は<code>/opt/homebrew-cask/Caskroom</code>にインストールされ、そこから
デフォルトだと、<code>~/Applications/</code>へリンクが貼られます。
(最初に<code>homebrew-cask</code>ディレクトリがない場合はディレクトリを作るためにroot権限が求められます。)</p>

<p>インストール先を変えたい場合は環境変数<code>HOMEBREW_CASK_OPTS</code>を</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>と設定すると<code>/Applications</code>にインストールする様になります。
<code>brew cask install</code>コマンド時に直接<code>--appdir=/Applications</code>を加えてもOK<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<p>アンインストールは</p>

<pre><code>$ brew cask uninstall firefox
</code></pre>

<p>で<code>~/Applications/</code>のリンクも<code>.../Caskroom/</code>の実体も削除。</p>

<p>デフォルトのfirefoxは英語版ですが、日本語版をインストールしたい場合は</p>

<pre><code>$ brew cask edit firefox
</code></pre>

<p>とすると設定ファイルが開けるので、その中で</p>

<pre><code>-  url 'https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=en-US'
+  url 'https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=ja-JP-mac'
</code></pre>

<p>の様に、<code>url</code>の部分で<code>lang</code>を<code>en-US</code>から<code>ja-JP-mac</code>に変更します。</p>

<p>ここで注意が必要なのが、一回<code>cask install</code>すると、
<code>/Library/Caches/Homebrew/</code>に<code>firefox-latest</code>のキャシュが残ってて、
これを使ってしまうので、再度違う言語でインストールしたい場合には
このファイルを先に消しておく必要があります。
(caskでダウンロードされたキャッシュは<code>brew cleanup</code>等で消えないので、
手で消すしか無い？)</p>

<p>これをbrewdleで管理したい場合はBrewfileに</p>

<pre><code>cask 'firefox'
</code></pre>

<p>と書いて<code>brewdle</code>すれば良いだけです。</p>

<p>ただ、<a href="https://github.com/andrew/brewdler">brewdleのREADME</a>にあるように
いきなり<code>tap</code>での<code>cask</code>のインストールと<code>cask</code>でのインストールを</p>

<pre><code>tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>こんな感じで書いてもおいても、caskは無いと言われてしまいます。</p>

<p>なので、これらがインストールされてない状態からBrewfileを作る時は、</p>

<ol>
<li>tap 'phinze/homebrew-cask'</li>
<li>brew 'brew-cask'</li>
<li>cask 'firefox'</li>
</ol>


<p>の様にまず、caskを<code>tap</code>、caskをインストール、
その後に<code>cask</code>でインストールするもの、のように書いていく必要があります。</p>

<h1 id="まとめ">まとめ</h1>

<p>brewdlerが便利そうだな、と思って使ってみたんですが、いまいち単なる
リストと違って何が嬉しいのかわからないのが現状。
いっそのこと適当なスクリプトを自分で書いてしまった方が色々できて
良さそう。。。</p>

<p>ただ、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>と
<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>を
知れたのは良かったです。
差し当たり現在入れてある物はcaskで置き換えたりはしてませんが、
そのうち。</p>

<p>と、思って、<code>cask</code>についていろいろ調べてた時、
<code>cask</code>の実体が<code>/opt/</code>以下にあるのでちょっと<code>/opt/</code>行った所、
<code>boxen</code>ディレクトリを発見。
そう言えば、ちょっと前に</p>

<blockquote><p><a href="http://qiita.com/yuku_t/items/c6f20de0e4f4c352046c">Boxen使わなくても許されるのは2012年までだよね</a></p></blockquote>

<p>とかあったので<a href="http://boxen.github.com/">Boxen</a>
入れてみようと思って、
でも途中でMac1台しか持ってないし、まだ暫く買い換えなそうだし、
次Mac買うとも限らないし、、、と思って途中で辞めたのを思い出しました。</p>

<p>ただ、<a href="http://brew.sh/">Homebrew</a>
自体がBoxenで管理できたりするので、
まずはBoxenで管理出来るパッケージはBoxenでして、
それ以外をHomebrew(+cask)で管理する、と言う感じにするのが良いのかも。</p>

<p>そのうちやりたいところ。。。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://qiita.com/futoase/items/9a52ddd8bb19863372d0">homebrewのパッケージをGemfileみたく管理したい -> brewdlerがあった...</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a>でrubyと一緒に導入済。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>通常のHomebrewの各パッケージ用の設定ファイルは<code>/usr/local/Library/Formula/</code>内の<code>vim.rb</code>等。
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="https://github.com/phinze/homebrew-cask/blob/master/USAGE.md">homebrew-cask/USAGE.md</a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ウェブページを読みやすくするBeeLine Reader]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/10/computer/"/>
    <updated>2013-09-10T19:12:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/10/computer</id>
    <content type="html"><![CDATA[<p>Gigazineで紹介されてた<a href="http://www.beelinereader.com/">BeeLine Reader</a>がなかなか面白いです。</p>

<!-- more -->


<blockquote><p><a href="http://gigazine.net/news/20130910-beeline-reader/">ウェブページを読む速度が最大30％増加するブックマークレット「BeeLine Reader」</a></p></blockquote>

<p>BeeLine Readerはページ表示を行毎に色付けして表示しなおしてくれるブックマークレット
を提供してくれてます。</p>

<p>文章ばかりのページだとたまに左端に戻った時にどの行だったか
分かりづらい時がありますが、そんな時に行ごとに色付けしておけば
読みやすい、との原理。
横方向にもグラデーションをかけてどの辺りまで読んだかを視認しやすくしてくれます。</p>

<p>また、変換する際に、<a href="http://getpocket.com/">Pocket</a>
や<a href="http://evernote.com/">Evernote</a>の<a href="http://evernote.com/intl/jp/clearly/">Clearly</a>
みたいに余計な物を落としてくれるので、その点でも読みやすくなります。</p>

<p>あまりウェブで長い文章を読むことは無いですが、やってみると意外と読みやすいかも。</p>

<p>試しにこのページをやってみるとこんな感じ。</p>

<p><img src="/images/post/20130910_mypage.jpg" alt="" title="" class="pic" /></p>

<p>実際にこのページで試してみたい場合はここから<i class="icon-arrow-right"></i>
<a href="javascript:(function(){readStyle='style-athelas';readSize='size-large';readMargin='margin-medium';_readability_script=document.createElement('SCRIPT');_readability_script.type='text/javascript';_readability_script.src='http://www.beelinereader.com/beelinereader/readability.js?x='+Math.random();document.getElementsByTagName('head')[0].appendChild(_readability_script);_readability_css=document.createElement('LINK');_readability_css.rel='stylesheet';_readability_css.href='http://www.beelinereader.com/beelinereader/readability.css';_readability_css.type='text/css';_readability_css.media='all';document.getElementsByTagName('head')[0].appendChild(_readability_css);_readability_print_css=document.createElement('LINK');_readability_print_css.rel='stylesheet';_readability_print_css.href='http://www.beelinereader.com/beelinereader/readability_print.css';_readability_print_css.media='print';_readability_print_css.type='text/css';document.getElementsByTagName('head')[0].appendChild(_readability_print_css);}());javascript:(function(){var%20w=window,u='http://www.beelinereader.com/beelinereader/BlackBlueRed',l=w.location,d=w.document,s=d.createElement('script'),e=encodeURIComponent,x='undefined';function%20g(){if(d.readyState&&d.readyState!='complete'){setTimeout(g,2500);}else{if(typeof%20MainApp==x){s.setAttribute('src',u+'.js');d.body.appendChild(s);}function%20f(){if(typeof%20MainApp==x){setTimeout(f,2500)}else{MainApp.show();}}f();}}g();}())">チェック</a>。
たまに上手く行かずに1文字ずつ色が変化してしまう様になってしまう時がありますが、
もう一度やってみると上手く行くことがあります。
(但し、ブラウザの<code>戻る</code>をすると、1つ前のページに戻ってしまうので、代わりに<i class='key'>F5</i>等で
再読み込みをすると元に戻ります。)</p>

<p>これ、PDFとかWordとかで長い文章読むときに出来たら便利だな、と思って、
Firefox内でPDFをプレビュー表示するようにして、ブックマークレットを試してみましたが、
1ページ目だけ？が表示され、さらに単語毎に行分けされる様な感じで全然駄目でした。</p>

<p>これと同じ事をしてくれるPDF viewerとかそのうち出たら便利かもしれないな…と。</p>

<hr />
]]></content>
  </entry>
  
</feed>
