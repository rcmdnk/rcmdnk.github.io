<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computer | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-18T06:11:09+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim 7.4をCygwinへインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim/"/>
    <updated>2013-08-17T00:44:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim</id>
    <content type="html"><![CDATA[<p>Vim 7.4の正式版がリリースされたので、
Cygwinへもインストールしました。
現在のCygwinで配布されてるバイナリは7.3+patch 1-1110, 1112-1152
なので、ソースからビルドしてインストールです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Mercurielをインストール">Mercurielをインストール</h1>

<p>Mercurielをまだインストールしてなかったので
<a href="/blog/2013/08/08/computer-windows-cygwin/">apt-cyg</a>で</p>

<pre><code>apt-cyg -u install mercurial
</code></pre>

<p>最初大文字で<code>Mercurial</code>やコマンドの<code>hg</code>で探しても見つからなかったので
ソースからインストールしなきゃいけないのかと思いましたが、
普通に<code>mercurial</code>でありました。。。</p>

<h1 id="Vimをインストール">Vimをインストール</h1>

<p><a href="/blog/2013/08/11/computer-linux-windows-cygwin/">Stow</a>を使って管理するようにします。
オプションはマルチバイト対応とLuaやPythonなどいくつかのインタプリタを有効に。以前までの色々のオプションはざっくり落としてみました。(要らないものをdisableしてもあまり意味が無い感じがしてきたので。)</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ ./configure  --prefix=$HOME/usr/local/stow/vim-7.4  --enable-multibyte  --enable-luainterp=yes  --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ stow vim-7.4
</code></pre>

<p>こんな感じで<code>~/usr/local/</code>へ。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>MacではHomebrew版のHEADが7.4になってますのでHomebrewで入れればOK。
  (<a href="/blog/2013/08/07/computer-vim">Lua対応Vimをインストール</a>)
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stowでmake installしたパッケージを管理]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin/"/>
    <updated>2013-08-11T03:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003KOAR0G/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41PYjDYaZvL._SL160_.jpg" border="0"></a></p>

<p><a href="/blog/2013/08/04/computer-linux-mac/">pacoでmake installしたパッケージを管理</a>
で書いた様に、Linux(WindowsのcoLinuxも含む)で
make installしたパッケージも管理出来る様にしましたが、
Cygwinにもpacoを入れようとした所コンパイル出来なかったので
代わりにstowと言うインストーラーを入れました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Cygwinではpacoをコンパイル出来ない">Cygwinではpacoをコンパイル出来ない</h1>

<p>pacoのパッケージを取ってきてCygwinでコンパイルしようとすると</p>

<pre><code>log.c:67:20: error: ‘RTLD_NEXT’ undeclared (first use in this function)
</code></pre>

<p>と言った様なエラーが出てコンパイル出来ないのですが、これはglibcが入ってないからですが、
Cygwinではglibcは入れられない様です<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>いくつかそれっぽいものはありましたが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、素直に入れることは
出来なそうなのでpacoは辞めておくことに。</p>

<h1 id="stow">stow</h1>

<p><a href="http://www.gnu.org/software/stow/">stow</a>はpacoと同じ様な<code>make install</code>などで
<code>apt-get</code>などを通さず直接インストールするパッケージを管理する
インストーラーです。</p>

<h2 id="paco+v.s.+stow">paco v.s. stow</h2>

<p>pacoとstowの違いは</p>

<ul>
<li>paco: <code>/usr/local/var/log/paco</code>等のディレクトリ以下にパッケージ名情報ファイルを作り、
その情報を元にインストールされたファイルを管理する。</li>
<li>stow: <code>/usr/local/stow/</code>等のディレクトリ以下にパッケージ名ディレクトリを作り、
その中にパッケージをインストールする。
そこから<code>/usr/local/</code>などへリンクを張る。</li>
</ul>


<p>pacoでインストールした場合は、パッケージ自体は通常通りインストールされるので、<code>/usr/local/var/log/paco</code>自体を削除しても問題有りません。</p>

<p>stowの場合は<code>/usr/local/</code>へはリンクが貼られるだけなので
通常インストールとは形が変わります。
一方、stowは<code>/usr/local/stow/</code>からのリンクを管理するので、
例えば1つのパッケージでバージョンの違う物を両方インストールしておいて、
一時的に切り替える事が簡単に出来ます。
新しいバージョンを入れて取り敢えず試してみる、と言うことができるので、
その点でstowが結構便利かもしれません。</p>

<h2 id="stowインストール">stowインストール</h2>

<ul>
<li>Cygwin</li>
</ul>


<p><a href="/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>で</p>

<pre><code>$ apt-cyg install stow
</code></pre>

<ul>
<li>Mac</li>
</ul>


<p><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>で</p>

<pre><code>$ brew install stow
</code></pre>

<ul>
<li>Linux</li>
</ul>


<p>apt-getなど。root権限がないところでローカルに入れる場合は自分もstowで管理。</p>

<pre><code>$ cd ~/tmp/
$ wget http://ftp.gnu.org/gnu/stow/stow-2.2.0.tar.gz
$ tar xzf stow-2.2.0.tar.gz
$ cd stow-2.2.0
$ ./configure --prefix=$HOME/usr/local/stow/stow-2.2.0
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ ./stow-2.2.0/bin/stow stow-2.2.0
</code></pre>

<h2 id="stowの使い方">stowの使い方</h2>

<p>まず、stowで管理するパッケージをインストールするディレクトリを決めておきます。
通常は最終的にインストールするディレクトリ下にstowというディレクトリを作ります。
(上の場合は<code>$HOME/usr/local/</code>に<code>bin/stow</code>などをインストールするので
<code>$HOME/usr/local/stow</code>ディレクトリを作って入れています。)</p>

<p>パッケージをインストールする際は、prefix等でインストール先を
<code>$HOME/usr/local/stow</code>+<code>パッケージ名</code>に指定して後は通常通りインストールします。</p>

<p>インストール後、stowディレクトリへ行き、</p>

<pre><code>$ stow package
</code></pre>

<p>とすることで、package内から<code>../</code>の<code>/bin/</code>等へリンクが張られます。</p>

<p>アンインストールは</p>

<pre><code>$ stow -D package
</code></pre>

<p>とするとリンクが削除されます。パッケージがその後必要なければ
stowディレクトリから実体も削除すればOK。</p>

<p>バージョンの違う同じパッケージをインストールしてる場合は</p>

<pre><code>$ stow -D package-1.0
$ stow package-2.0
</code></pre>

<p>の様にすれば1.0から2.0へ切り替える事が出来、
実体は残ったままなので、同じ様に1.0に戻る事もすぐ出来ます。</p>

<pre><code>$ stow -n package-2.0
</code></pre>

<p>とすると、ドライランすることが出来ます。</p>

<p>通常は、カレントディレクトリがstowディレクトリ、親ディレクトリが
リンクを作るインストール先ですが、これを変えたい場合は</p>

<ul>
<li><code>-d stow_dir</code>、<code>--dir=stow_dir</code>でstowディレクトリを指定。</li>
<li><code>-t target_dir</code>、<code>--target=target_dir</code>でインストール先ディレクトリを指定。</li>
</ul>


<p>します。ただ、pacoの場合と違い、これらの情報は残らないので、
特別指定した場合はアンインストールする場合も指定する必要があるので、
管理上、最終的なインストール先の下にstowディレクトリを作るのが良いかと思います。</p>

<h2 id="すでにインストールしてあるパッケージに対してstowで再インストールする場合">すでにインストールしてあるパッケージに対してstowで再インストールする場合</h2>

<p>すでにパッケージがインストールしてあると、
リンクでなく実体が存在するのでstowでリンクを作ろうとすると
エラーが出ます。
(<code>-D</code>で削除しようとするとリンクじゃない、と言って削除してくれない。)
一旦それらのファイルを削除しないとstowで管理しようがないみたいで、
結構面倒です。</p>

<p>そこで<a href="https://github.com/rcmdnk/scripts/blob/master/stowReset.sh">stowReset.sh</a>
と言うスクリプトを作りました。</p>

<p>使い方は、まず、インストールしたいパッケージをstowディレクトリに
インストールした後、
stowディレクトリに行き、</p>

<pre><code>$ stowReset.sh package
</code></pre>

<p>とすると、packageに関連するファイルが親ディレクトリから削除されます。
stow同様に<code>-d</code>、<code>-t</code>、<code>-n</code>のオプションが使えます(<code>--dir</code>等2重ハイフンオプションは未対応)。</p>

<p>その後、通常通り、</p>

<pre><code>$ stow package
</code></pre>

<p>とすればリンクを作れる様になります。</p>

<h1 id="まとめ">まとめ</h1>

<p>pacoに比べて、新しいバージョンのテスト等にも便利に使えそうなので、
MacやLinuxでもpacoからstowへ移行しようと思います。</p>

<p>pacoだとconfigureの引数等の情報がそのまま残るのでちょっと便利ですが、
その点はちゃんとメモするようにしておけばOKかな、と。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://cygwin.com/faq.html#faq.programming.glibc">Where is glibc?</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.gurucoding.com/en/pc_cross_compiler/building_glibc_cygwin_vm.php">Building GLibc in the Cygwin VM</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://artfiles.org/cygwin.org/pub/glibc/releases/">Index of /cygwin.org/pub/glibc/releases</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-cygでsetup.iniが404 Not Foundになった]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/08/computer-windows-cygwin/"/>
    <updated>2013-08-08T22:10:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/08/computer-windows-cygwin</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/06/24/computer-windows-git-cygwin/">Cygwinでコマンドラインからパッケージ管理をする</a>で紹介した<code>apt-cyg</code>ですが、
久しぶりに使ったらミラーサイトで必要なsetupファイルが
見つからないと言ったエラーが出たのでその対処について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="apt-cygの修正">apt-cygの修正</h1>

<p>以前設定したまま<code>apt-cyg</code>してみると</p>

<pre><code>$ apt-cyg find vim
Working directory is /setup
Mirror is http://ftp.jaist.ac.jp/pub/cygwin/
--2013-08-08 xx:xx:xx--  http://ftp.jaist.ac.jp/pub/cygwin//setup.bz2
Resolving ftp.jaist.ac.jp (ftp.jaist.ac.jp)... 150.65.7.130
Connecting to ftp.jaist.ac.jp (ftp.jaist.ac.jp)|150.65.7.130|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2013-08-08 xx:xx:xx-- ERROR 404: Not Found.

--2013-08-08 xx:xx:xx--  http://ftp.jaist.ac.jp/pub/cygwin//setup.ini
Resolving ftp.jaist.ac.jp (ftp.jaist.ac.jp)... 150.65.7.130
Connecting to ftp.jaist.ac.jp (ftp.jaist.ac.jp)|150.65.7.130|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2013-08-08 xx:xx:xx ERROR 404: Not Found.

Error updating setup.ini, reverting
...
</code></pre>

<p>のようにsetupファイルが無いと言われて情報が更新出来ません。</p>

<pre><code>$ apt-cyg update -m http://ftp.jaist.ac.jp/pub/cygwin/
</code></pre>

<p>の様にしてみても同じ。</p>

<p><a href="http://ftp.jaist.ac.jp/pub/cygwin/">http://ftp.jaist.ac.jp/pub/cygwin/</a>
のサイトをブラウザで見てみると、<code>x86</code>、<code>x86_64</code>と言うディレクトリがあり、
それぞれの下にsetupファイルがあることがわかります。</p>

<p>手元にある32bit Windowsマシンで試しに</p>

<pre><code>$ apt-cyg update -m http://ftp.jaist.ac.jp/pub/cygwin/x86
</code></pre>

<p>としてみるとちゃんと設定出来た様子。
ただ、この状態で</p>

<pre><code>$ apt-cyg -u remove git
$ apt-cyg -u install git
</code></pre>

<p>等としてみると、</p>

<pre><code>$ apt-cyg -u install git
...
--2013-xx-xx xx:xx:xx--  http://ftp.jaist.ac.jp/pub/cygwin/x86/x86/release/git/git-1.7.9-1.tar.bz2
...
HTTP request sent, awaiting response... 404 Not Found
...
MD5 sum did not match, exiting
</code></pre>

<p>となり失敗します。
setup.ini等から得る各パッケージパス情報の中に、<code>x86</code>の部分が入ってしまっているため、
ミラーサイト名に<code>x86</code>までいれてしまうと余計に入ってしまてパッケージへのパスが間違ってる様。</p>

<p>仕方ないので<code>apt-cyg</code>自体を書き換えてみました。</p>

<hr />

<p>2013/08/12 追記</p>

<p>修正版をGitHubにUpしました。</p>

<p><a href="https://github.com/rcmdnk/apt-cyg">https://github.com/rcmdnk/apt-cyg</a></p>

<hr />

<hr />

<p>2013/08/13 追記</p>

<p>上のGitHubの修正版をにアップデートしました。
新しいものでは最後にx86等指定する必要がありませんので、
今までのapt-cygと完全に同じ様に使えます。</p>

<p>ちなみに、apt-cygのページをもう一度良く見てみたら、
gitHubにレポジトリが作られた様です
:<a href="https://github.com/tnscode-openranscode-open">transcode-open/apt-cyg</a>。
16日程前なので、恐らくその頃にこの問題が起こって指摘されて、
勝手に改造して使って、となったのでしょうか？
せっかく見つけたので、何も考えずにpull requestしてみましたが、
数日前にすでに他の人が出してたので取り下げました。(ちゃんと見ないと駄目ですね :sweat: )
数日放置されてるので、どうなるんでしょう？(pull requestされてる内容自体は指摘されてる様にもう1つ書き換える必要がありますが。)
正直に、これ見て、<code>uname</code>で自動で決めちゃえば良いか、と気づいてのアップデートです。</p>

<hr />

<p><div><script src='https://gist.github.com/6189422.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>ミラーサイトの情報が<code>/etc/setup/last-mirror</code>に書かれている様なので、
これに加えて<code>/etc/setup/last-arch</code>でアーキテクチャ情報を管理するようにしています。</p>

<p>ひと通りミラーサイトを見たところ、見た限りすべて<code>x86</code>、<code>x86_64</code>というディレクトリを
持っているので、<code>-m</code>でミラーサイトを指定するときに、最後にかならず
<code>x86</code>か<code>x86_64</code>を入れるようにし、
それらの情報をサイト情報とは分けて保存しておくようにしてあります。</p>

<p></p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua対応Vimをインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/07/computer-vim/"/>
    <updated>2013-08-07T20:36:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/07/computer-vim</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048677977/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41otNZcUklL._SL160_.jpg" border="0"></a></p>

<p>Vimでの補完機能のプラグインである<a href="https://github.com/Shougo/neocomplcache.vim">neocompletecache</a>
の後継版<a href="https://github.com/Shougo/neocomplete.vim">neocomplete</a>
を使うためにVimを再インストールした際の手順。
<a href="http://www.lua.org/home.html">Lua</a>自体がない環境もあったので、
Luaのインストールからです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Linux">Linux</h1>

<ul>
<li>su権限持っていないのでローカルにluaをインストール:</li>
</ul>


<p><a href="http://www.lua.org/ftp/">luaのダウンロードページ</a>より最新のを取ってきてインストール。
取り敢えずmakeしてみるとエラーがでた。</p>

<pre><code>$ cd ~/tmp/
$ wget http://www.lua.org/ftp/lua-5.2.2.tar.gz
$ tar xzf lua-5.2.2.tar.gz
$ cd lua-5.2.2
$ make linux
...
make[1]: Entering directory `/home/user/tmp/lua-5.2.2/src'
make all SYSCFLAGS="-DLUA_USE_LINUX" SYSLIBS="-Wl,-E -ldl -lreadline"
make[2]: Entering directory `/home/user/tmp/lua-5.2.2/src'
gcc -o lua   lua.o liblua.a -lm -Wl,-E -ldl -lreadline-
/usr/lib/../lib64/libreadline.so: undefined reference to `PC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetflag'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetent'
/usr/lib/../lib64/libreadline.so: undefined reference to `UP'
/usr/lib/../lib64/libreadline.so: undefined reference to `tputs'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgoto'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetnum'
/usr/lib/../lib64/libreadline.so: undefined reference to `BC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetstr'
collect2: ld returned 1 exit status
make[2]: *** [lua] Error 1
make[2]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make[1]: *** [linux] Error 2
make[1]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make: *** [linux] Error 2
</code></pre>

<p>libreadlineを調べてみると</p>

<pre><code>$ ldd -r /usr/lib64/libreadline.so
        linux-vdso.so.1 =&gt;  (0x00007fffbe3aa000)
        /$LIB/snoopy.so =&gt; /lib64/snoopy.so (0x00002b2a6a387000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b2a6a5af000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b2a6a907000)
        /lib64/ld-linux-x86-64.so.2 (0x00002b2a69f29000)
undefined symbol: PC    (/usr/lib64/libreadline.so)
undefined symbol: UP    (/usr/lib64/libreadline.so)
undefined symbol: BC    (/usr/lib64/libreadline.so)
undefined symbol: tgetflag      (/usr/lib64/libreadline.so)
undefined symbol: tgetent       (/usr/lib64/libreadline.so)
undefined symbol: tputs (/usr/lib64/libreadline.so)
undefined symbol: tgoto (/usr/lib64/libreadline.so)
undefined symbol: tgetnum       (/usr/lib64/libreadline.so)
undefined symbol: tgetstr       (/usr/lib64/libreadline.so)
</code></pre>

<p>こんな感じ。
これに関することが
<a href="http://lua.2524044.n2.nabble.com/ANN-Lua-5-2-2-rc1-now-available-td7646399i20.html">このthread</a>
にあったので、個々にある通り<code>-ltermcap</code>を加えてみる。</p>

<pre><code>$ make linux MYLIBS=-ltermcap
</code></pre>

<p>OK。<code>$HOME/usr/local</code>に<a href="/blog/2013/08/04/computer-linux-mac/">paco</a>に登録しつつインストール。</p>

<pre><code>$ paco -D "make install INSTALL_TOP=$HOME/usr/local"
</code></pre>

<ul>
<li>Vimをインストール</li>
</ul>


<p>ソースからコンパイルしてインストール。</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src
$ LDFLAGS="-L$HOME/usr/local/lib/" ./configure --with-lua-prefix=$HOME/usr/local --prefix=$HOME/usr/local --with-local-dir=$HOME/usr/local --disable-selinux --disable-xim --disable-darwin --disable-xsmp --disable-xsmp-interact --enable-netbeans --enable-multibyte --enable-gui=no --enable-gtk2-check=no --enable-gnome-check=no --enable-motif-check=no --enable-athena-check=no --enable-nextaw-check=no --enable-carbon-check=no --disable-gtktest --disable-acl --disable-gpm --disable-sysmouse --enable-luainterp=yes --enable-mzschemeinterp=no --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes --enable-cscope --disable-workshop --disable-sniff --enable-hangulinput --enable-fontset --enable-largefile --enable-nls
</code></pre>

<p><code>--enable-luainterp=yes</code>でluaオプションを有効にします。
他は適宣自分に合わせて設定。</p>

<p><code>LDFLAGS</code>や<code>--with-local-dir</code>で<code>$HOME/usr/local</code>にあるライブラリー等を使う様に
指定してますが、lua用に
<code>--with-lua-prefix=$HOME/usr/local</code>が別途必要の様。</p>

<p>ちゃんとluaが見つかれば、<code>./configure</code>時に、</p>

<pre><code>...
checking if link with -L/home/user/usr/local/lib -llua is sane... yes
...
</code></pre>

<p>の様に見つかった、と言ってくれます。
<code>--with-lua-prefix</code>を指定しないと<code>/usr/</code>を見に行き、</p>

<pre><code>checking --with-lua-prefix argument... no
checking LUA_PREFIX environment var... not set, default to /usr
checking --with-luajit... no
checking for lua... (cached) /usr/bin/lua
checking Lua version... (cached) 5.1
checking if lua.h can be found in /usr/include... no
checking if lua.h can be found in /usr/include/lua5.1... no
</code></pre>

<p>な感じで失敗します。</p>

<p>configureが成功したら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<ul>
<li>PATHの設定</li>
</ul>


<p><code>$HOME/usr/local</code>にPATHが通ってない場合は以下の設定を<code>~/.bashrc</code>に加えておきます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/usr/local/bin:<span class="nv">$PATH</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1 id="Windows+(Cygwin)">Windows (Cygwin)</h1>

<ul>
<li>setup.exeを使うか<a href="http://rcmdnk.github.io/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
でluaをインストール:</li>
</ul>


<p>apt-cygで</p>

<pre><code>$ apt-cyg install lua
</code></pre>

<ul>
<li>Vimのインストール</li>
</ul>


<p>現状のCygwinで配布されてるバイナリが1-1110, 1112-1152のパッチが当たっていて、
さらにLua対応でビルドされてるので、
最近インストールしたなら対応しているはずです。</p>

<p>もし対応してなかったり古い場合は取り直し。</p>

<p>apt-cygには<code>update</code>と言ったコマンドが無いので、一度削除してから入れなおします。</p>

<pre><code>$ apt-cyg remove vim
</code></pre>

<p>そして新たにインストール:</p>

<pre><code>$ apt-cyg install vim
</code></pre>

<h1 id="Mac">Mac</h1>

<ul>
<li><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>を使ってLuaをインストール:</li>
</ul>


<p>Homebrewでluaを</p>

<pre><code>$ brew install lua
</code></pre>

<ul>
<li>HomebrewでMacVimのHEADバージョンをインストール<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</li>
</ul>


<p>さらにvimも</p>

<pre><code>$ brew install macvim --with-cscope --with-lua --HEAD
$ sudo ln -s /usr/local/Cellar/macvim/HEAD/MacVim.app /Applications/
</code></pre>

<ul>
<li>ターミナル等から使うため<code>~/.bashrc</code>に次を追加:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;For+MacVim&quot;</span>&gt;For MacVim&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$OSTYPE&quot;</span> <span class="o">=</span>~ <span class="s2">&quot;darwin&quot;</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="o">[</span> -d /Applications/MacVim.app/Contents/MacOS <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Applications/MacVim.app/Contents/MacOS:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>ソースから直接コンパイルしてインストール</li>
</ul>


<p>Homebrew版でも現状7.4b版がHEADで使えて、さらに<code>--with-lua</code>オプションで
luaを有効に出来るので充分ですが、もしソースから直接コンパイルして
インストールしたい場合は</p>

<pre><code>$ brew install mercurial
</code></pre>

<p>でMercurial(hg)をインストールしてから上のLinuxとかの様に<code>hg</code>でソースを取ってきて
インストール。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/07/03/macvim-with-lua-features/">最新パッチ＆if_luaなMacVimで高速検索＆補完！</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pacoでmake installしたパッケージを管理]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/04/computer-linux-mac/"/>
    <updated>2013-08-04T09:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/04/computer-linux-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/8484640825/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/61moyMmCoxL._SL160_.jpg" border="0"></a></p>

<p>Linuxでapt-get、Macで<a href="/blog/2013/06/21/computer-mac/">Homebrew</a>、
Cygwinで<a href="/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
などでパッケージ管理出来ますが、
ソースからコンパイルして入れる場合やroot権限を持ってない環境で
<code>make install</code>して入れているパッケージが結構あります。</p>

<p>これら、適当なログはのこしてありますが、実際どのファイルが
どのパッケージに対応しているのかまでは分からなかったりします。</p>

<p>そんな中で<code>make install</code>で入れるパッケージを管理するための
<a href="http://paco.sourceforge.net/">paco</a>と言うソフトを見つけたで入れてみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="pacoのインストール">pacoのインストール</h1>

<p>pacoの<a href="http://paco.sourceforge.net/downloads.html">Downloads</a>
ページから最新版のバージョンを確認してダウンロードしてインストールします。</p>

<pre><code>$ wget -O paco-2.0.9.tar.gz http://sourceforge.net/projects/paco/files/paco/2.0.9/paco-2.0.9.tar.gz/download
$ tar xzf paco-2.0.9.tar.gz
$ cd paco-2.0.9
$ ./configure --prefix=$HOME/usr/local --disable-gpaco --with-paco-logdir=$HOME/usr/local/var/log/paco
</code></pre>

<p>ここで、<code>--disable-gpaco</code>はGUI版のpacoを無効にしています。
GUI版をインストールするためには
gtkmmが必要で、インストールされてない状態で<code>--disbale-gpaco</code>オプションを
入れないと</p>

<pre><code>...
No package 'gtkmm-2.4' found 
...
</code></pre>

<p>等と怒られます。<code>gtkmm</code>を入れても良いのですが、
GUI版を使う予定がないのでオプションで外しておきます。</p>

<p><code>--with-paco-logdir</code>はpacoでインストールされたパッケージ情報を管理するファイルの場所で、
初期値が<code>/var/log/paco</code>になっていて、root権限が無いと書き込めないので、
変更しておきます。</p>

<p>この変更をしておかないと、root権限以外で<code>make install</code>した時に</p>

<pre><code>mkdir: /var/log/paco: Permission denied
</code></pre>

<p>と怒られます。</p>

<p>configureできたら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<p>でインストール完了。</p>

<p>Macで使えない、と言った話もいくつか見かけましたが、Macでも問題なく使えます。</p>

<p>pacoのページを見ると</p>

<pre><code>Note:
Paco does not work on systems in which the executables involved in the installation of the packages (mv, cp, install...) are statically linked against libc, like FreeBSD and OpenBSD.
</code></pre>

<p>とありますが、その上の表で<code>NetBSD</code>では使える様になっています。</p>

<p>OS Xのベースの<a href="http://ja.wikipedia.org/wiki/Darwin_(%e3%82%aa%e3%83%9a%e3%83%ac%e3%83%bc%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0)">Darwin</a>はFreeBSDベース、となってますが、
NetBSDからも受け継いでる部分はあり<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、
そもそもシステムとして別物の様な物みたいですが
取り敢えず手元のLionでは問題なく動いてます。</p>

<p>Macでmvを調べてみると</p>

<pre><code>$ otool -L /bin/mv
/bin/mv:
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 159.1.0)
</code></pre>

<p>と言った感じでlibSystemという名の共有ライブラリ<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>だけにリンクしています。
(ので、上の注意にあるFreeBSDの様な状況には当たらない。)</p>

<p>Linuxだと(Debianなど)、</p>

<pre><code>$ ldd /bin/mv
...
libc.so.6 =&gt; /lib/libc.so.6 (0xb7746000)
...
</code></pre>

<p>と言った感じでlibcの共有ライブラリにリンクしていて、
Cygwinなんかはまた別ですが、libcの静的ライブラリにはリンクしてません。</p>

<p>FreeBSDが手元にないのでわかりませんがMacとはmvの状況が少し違うみたいです。</p>

<h2 id="pacoの使い方">pacoの使い方</h2>

<p>ここで、まず自分自身をパッケージコントロールするため、
pacoのインストール用パッケージディレクトリ(makeした場所)で</p>

<pre><code>$ make logme
</code></pre>

<p>を実行します。これでpaco自身が登録されます。</p>

<p>他のパッケージを登録するには<code>make install</code>する代わりに</p>

<pre><code>$ paco -lp vim-7.4b "make install"
</code></pre>

<p>など。
もし、Makefileがあるディレクトリがpacoの様にパッケージ名だったりする場合、</p>

<pre><code>$ paco -lD "make install"
</code></pre>

<p>の様に<code>D</code>オプションを使うと、ディレクトリ名がパッケージ名として登録されます。
version情報もここでの<code>-</code>以降になるので、
ディレクトリにバージョン情報がない場合でバージョンを把握してる場合は
<code>p</code>オプションで正しく指定して置いた方が良いかもしれません。</p>

<p>Vimなどは<code>src</code>以下にMakefileがあるので<code>D</code>オプションでやってしまうと
<code>src</code>と言うなのパッケージで登録されてしまうので注意です。
もし、間違って登録したら、
<code>$HOME/usr/local/var/log/paco/src</code>と言うファイルが出来て居るはずなので、
このファイルを<code>vim-7.4b</code>に名前を変えて、
中身の<code>Name</code>と<code>Version</code>項目を</p>

<pre><code>#:Name:     vim
#:Version:  7.4b
</code></pre>

<p>と変更しておきます。</p>

<p>登録されたパッケージ一覧を表示するには</p>

<pre><code>$ paco -a
paco-2.0.9 vim-7.4b
</code></pre>

<p>各パッケージの情報を見るには
<code>paco -i &lt;package&gt;</code>:</p>

<pre><code>$ paco -i paco
------------
paco-2.0.9
------------

Name:     paco
Version:  2.0.9
Summary:  Source code package organizer
</code></pre>

<p><code>&lt;package&gt;</code>に関してはversion入(<code>paco-2.0.9</code>)でもversion無し(<code>paco</code>)でもOK。
ここで出てくる情報の</p>

<p>インストール時に使ったconfigureのオプションを表示するには
<code>paco -o &lt;package&gt;</code>:</p>

<pre><code>$ paco -o paco
--prefix=/home/user/usr/local --disable-gpaco --with-paco-logdir=/home/user/usr/local/var/log/paco
</code></pre>

<p>インストールされたファイル一覧とファイルサイズ等を見るには</p>

<pre><code>$ paco -fst paco
paco-2.0.9:
  8k  /home/user/usr/local/share/paco/README
 40k  /home/user/usr/local/lib/libpaco-log.a
  4k  /home/user/usr/local/lib/libpaco-log.la
...
1.3M  Total
</code></pre>

<p>とします。</p>

<pre><code>$ paco -r paco
</code></pre>

<p>とすれば、上で表示されたファイル全部を消去するパッケージのアンインストールを行います。
(多分これが一番嬉しい機能。)</p>

<p>その他詳しくは<a href="http://paco.sourceforge.net/doc/paco.8.txt">pacoのmanページ</a>で。</p>

<h2 id="すでにインストールされたパッケージについて">すでにインストールされたパッケージについて</h2>

<p>pacoは<code>make install</code>時の情報を元に管理情報を作成するので、
すでにインストールされているパッケージについては情報を作る簡単な
方法はありません。</p>

<p>ソースが残っていれば再度<code>paco -lp &lt;package&gt; "make install"</code>
するのが一番簡単です。</p>

<p>無理矢理情報を追加しようと思えば、
<code>$HOME/usr/local/var/log/paco</code>にある他のパッケージのファイルを参考に、
各パッケージのファイルを作ってあげれば良いと思うのですが
すでに複数パッケージを同じディレクトリ下にインストールしてある場合は
結構面倒です。</p>

<p>各パッケージ情報のファイルの中身はconfigure情報などの後に、
ファイル一覧が</p>

<pre><code>ファイル名|サイズ|-2|-2
</code></pre>

<p>の様になっていて、サイズは適当でも良いのでファイル名だけすべて
入れておけばアンインストールは簡単に出来ます。
もしあるディレクトリ下に1つのパッケージしかインストールされてない状態なら、
ファイル一覧が簡単に作れるので、サイズは適当でもいいから
登録しておくだけでもよいかもしれませんが、
すでに複数ある場合は名前だけから判断するのも難しいファイルもあるので、
次にインストールし直すときに登録しなおすか
同じものでも<code>make install</code>し直す方が結果的には楽で正しく出来るかな、と。</p>

<hr />

<p>追記 2013/08/11</p>

<p><a href="/blog/2013/08/11/computer-linux-windows-cygwin/">stowでmake installしたパッケージを管理</a>でstowを導入してみましたが、
新しいバージョンなどをテストしたりするのにstowだと簡単に元に戻したりできるので、
stowのが便利かな、と思いstowに全面的に移行。</p>

<p>追記終わり</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://www.netbsd.org/gallery/products.html#darwin">Products based on NetBSD</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://en.wikipedia.org/wiki/Comparison_of_BSD_operating_systems">Comparison of BSD operating systems</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://d.hatena.ne.jp/kanonji/20121018/1350538932">.soや.dylibや.aファイル、共有ライブラリなどについて調べてみた</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
