<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: git | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/git/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2018-08-23T00:51:36+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitとかでタグを付けるときのバージョニングについて(Semantic Versioning)]]></title>
    <link href="https://rcmdnk.com/blog/2017/10/07/computer-git-github/"/>
    <updated>2017-10-07T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/10/07/computer-git-github</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/0198700032?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=0198700032&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51xTs%2BTZNXL._SS200_.jpg" alt="Semantics: Primes and Universals (St. in Classification Data Analysis)" /></a>
</div>

<p><a href="https://rcmdnk.com/blog/2017/10/05/computer-git/">Gitのタグの話</a>をしたので
そのタグを付ける際のバージョニングについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#semantic-versioning" id="markdown-toc-semantic-versioning">Semantic Versioning</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="semantic-versioning">Semantic Versioning</h2>

<p>ソフトウェアのバージョンなどを見ていると大体X.Y.Zみたいな形を
しているかと思いますが、
そのバージョン付けの方針として
<a href="http://semver.org/">Semantic Versioning</a>
というものが広く知られています。</p>

<blockquote>
  <p><a href="http://semver.org/">Semantic Versioning 2.0.0  Semantic Versioning</a></p>
</blockquote>

<blockquote>
  <p><a href="http://semver.org/lang/ja/">セマンティック バージョニング 2.0.0  Semantic Versioning</a></p>
</blockquote>

<blockquote>
  <p><a href="https://en.wikipedia.org/wiki/Software_versioning">Software versioning - Wikipedia</a></p>
</blockquote>

<p>Semantic Versioningの方針ではX.Y.Zと言った
<code>.</code>で区切られた3つの数字を使って</p>

<ul>
  <li>X: メジャーバージョン。後方互換性が無いアップデートを含む場合に上げる。上げた際はY、Zは0に戻す。Xが0の時は開発段階。1以降で正式リリース。</li>
  <li>Y: マイナーバージョン。後方互換性のある機能追加等を行った場合に上げる。上げた場合はZは0に戻す。</li>
  <li>Z: パッチバージョン。後方互換製のあるバグフィックスを行った場合に上げる。</li>
</ul>

<p>というのが基本。</p>

<p>さらに、アルファ/ベータリリースの様な場合、
<code>1.0.0-alpha</code>と言った形で通常バージョンの後ろに<code>-</code>で繋いで数字やアルファベットを付ける事も出来ます。</p>

<p>また、
GitHubにあるレポジトリを見ていると、大概のレポジトリで<code>v1.2.3</code>の様に
バージョンの前に<code>v</code>が付いているものが多いです。</p>

<p>この辺についてSemantic Versioning 2.0.0では何も言及してませんが
これはバージョニングの考えの範囲外、ということで今は外されています。</p>

<p>1.0.0の時は
<code>Tagging Specification (SemVerTag)</code>という項目があって
そこにGitとかのバージョン管理システムを使う場合は<code>vX.Y.Z</code>という形を取らなくてはならない(MUST)と書いてありました。</p>

<blockquote>
  <p><a href="https://github.com/mojombo/semver/issues/204">specify prefixed by ‘v’ or not · Issue #204 · mojombo/semver</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/mojombo/semver/pull/234">Address “v” prefixing in the FAQ by beck · Pull Request #234 · mojombo/semver</a></p>
</blockquote>

<blockquote>
  <p><a href="http://semver.org/spec/v1.0.0.html">Semantic Versioning 1.0.0  Semantic Versioning</a></p>
</blockquote>

<p>ということで現在のSemantic Versioningでは特に言及はしていませんが、
<a href="https://github.com/mojombo/semver/releases">Semantic Versioning自体のバージョニング</a>
では<code>v</code>を付けたバージョニングを使っています(現在v2.0.0)。</p>

<p>この辺をきっちり書いたものは見つかりませんでしたが、慣習として
Git等のバージョン管理システムを使う場合は<code>vX.Y.Z</code>としている、という感じです。</p>

<p>Linuxのカーネルもこの形です。</p>

<blockquote>
  <p><a href="https://github.com/torvalds/linux/releases">Releases · torvalds/linux</a></p>
</blockquote>

<blockquote>
  <p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git">kernel/git/torvalds/linux.git - Linux kernel source tree</a></p>
</blockquote>

<p>Git-Flowなんかの説明でも特に深く言及すること無くさらっと<code>vX.Y.Z</code>の形が出てきたりします。</p>

<p><a href="https://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html">git-flow cheatsheet</a></p>

<p>ということで、gitのタグ付けでバージョンを切ったりリリースを作る様な時は
<code>vX.Y.Z</code>の形で書いておくのが無難だと思います。</p>

<p>複数人で行ってるプロジェクトなどは最初にこの辺を決めておくと思いますが、
決まってない場合はとりあえずこれに従う形にしておけばOKです。</p>

<p>個人で作ってるものでも
なんとなく数字を変えてくだけではなくて
意味のあるバージョン付けが出来る様にしておいた方が後々便利です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B075VRJNTJ?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B075VRJNTJ&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/71Fm0nzgejL._SS90_CR0,0,120,90_.jpg" alt="[タグ・ホイヤー] TAG HEUER メンズ腕時計 アクアレーサー クロノタイマー CAF1010.BA0821 ブラック文字盤【中古】 [並行輸入品]" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/10/05/computer-git/">Gitでタグを自動でインクリメントするエイリアス</a></div></li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでタグを自動でインクリメントするエイリアス]]></title>
    <link href="https://rcmdnk.com/blog/2017/10/05/computer-git/"/>
    <updated>2017-10-05T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/10/05/computer-git</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B075VRJNTJ?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B075VRJNTJ&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/71Fm0nzgejL._SS200_.jpg" alt="[タグ・ホイヤー] TAG HEUER メンズ腕時計 アクアレーサー クロノタイマー CAF1010.BA0821 ブラック文字盤【中古】 [並行輸入品]" /></a>
</div>

<p>Gitでタグを新しく作る際、
1つ前のバージョンを調べて数字を変えて、というのが面倒なので
その辺を自動でやってくれるエイリアスを作って使っています。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#tag-new" id="markdown-toc-tag-new">tag-new</a></li>
  <li><a href="#tag-renew" id="markdown-toc-tag-renew">tag-renew</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="tag-new">tag-new</h2>

<p><code>tag-new</code>では
タグは<code>vX.Y.Z</code>の様な形で作っているとして
特に指定がない場合は
パッチアップデートな<code>Z</code>に関してだけインクリメントして
現在のHEADをタグするエイリアスです。</p>

<pre><code>[alias]
  tag-new = "!f () {\
    if [ \"$1\" = \"-v\" ];then \
      tag=\"$2\";\
      shift;shift;\
    else \
      tag=v$(git tag|sed s/v//g|sort -t . -n -k1,1 -k2,2 -k3,3|tail -n1);\
      tag_minor=${tag##*.};\
      ((tag_minor++));\
      tag=${tag%.*}.${tag_minor};\
    fi;\
    if [ $# -ne 0 ];then \
      comment=\"$*\";\
    else \
      comment=\"$(git log -1|tail -n +5)\";\
    fi;\
    echo comment: $comment;\
    tagcheck=$(git tag|grep ${tag});\
    if [ \"$tagcheck\" != \"\" ];then \
      echo \"tag: ${tag} exists\"\
      echo \"Please check tag or use tag-renew.\"\
      return 1;\
    fi;\
    git tag -a ${tag} -m \"${comment}\";\
    git push --tag;\
  };f"
</code></pre>

<p>これを使って</p>

<pre><code>$ git tag-new
</code></pre>

<p>とすれば現在居るレポジトリの最新タグが<code>v1.2.3</code>だったら
<code>v1.2.4</code>という新しいタグを作って<code>push</code>します。</p>

<p>その際のコメントは一番最後のコミットのコメントがそのまま入ります。</p>

<p>コメントを指定したい場合にはコマンドの後に続いて書けばそれがそのままコメントになります。</p>

<pre><code>$ git tag-new "Comment for tag"
</code></pre>

<p>メジャーバージョン(<code>X</code>)やマイナーバージョン(<code>Y</code>)を変更したい場合は
<code>-v</code>オプションでバージョンを指定します。</p>

<pre><code>$ git tag-new -v v2.3.4 "Comment for tag"
</code></pre>

<p>Gitのエイリアスに関しては以下を参照。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00FOSOUKE?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00FOSOUKE&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41lqan5MweL._SS90_CR0,0,120,90_.jpg" alt="Nendoroid Ghost Shell GitS Tachikoma PVC Figure GSC フィギュア 人形 おもちゃ (並行輸入)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/12/20/computer-git/">Gitのエイリアスで引数を使う</a></div></li></ul>

<h2 id="tag-renew">tag-renew</h2>

<p><code>tag-renew</code>では最新のタグを一度削除して現在のHEADで書き換えるエイリアスです。</p>

<pre><code>[alias]
  tag-renew = "!f () {\
    if [ \"$1\" = \"-v\" ];then \
      tag=\"$2\";\
      shift;shift;\
    else \
      tag=v$(git tag|sed s/v//g|sort -t . -n -k1,1 -k2,2 -k3,3|tail -n1);\
    fi;\
    if [ $# -ne 0 ];then \
      comment=\"$*\";\
    else \
      comment=\"$(git log -1|tail -n +5)\";\
    fi;\
    tagcheck=$(git tag|grep ${tag});\
    if [ \"$tagcheck\" != \"\" ];then \
      git tag -d ${tag};\
      git push origin :${tag};\
    fi;\
    git tag -a ${tag} -m \"${comment}\";\
    git push --tag;\
  };f"
</code></pre>

<p>基本的な使い方は<code>tag-new</code>と一緒で
もし最新以外の特定のタグを書き換えたい場合は<code>-v</code>でバージョン指定、
コメントも最後のコミットのメッセージがデフォルトで使われますが
指定したい場合は引数に書きます。</p>

<pre><code>$ git tag-renew "Comment for renew tag"
</code></pre>

<p>過去のタグを書き換えるのは余り意味が無いので
こちらは<code>-v</code>は使うことは通常は無いですが。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/0198700032" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51xTs%2BTZNXL._SS90_CR0,0,120,90_.jpg" alt="Semantics: Primes and Universals (St. in Classification Data Analysis)" /></a>
</div>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/10/07/computer-git-github/">Gitとかでタグを付けるときのバージョニングについて(Semantic Versioning)</a></div></li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitで過去のコミットのAuthorやCommitterを修正するスクリプト]]></title>
    <link href="https://rcmdnk.com/blog/2017/10/04/computer-git/"/>
    <updated>2017-10-04T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/10/04/computer-git</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B06XTY4GP5?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B06XTY4GP5&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41gq4qY2BPL._SS200_.jpg" alt="Amazon | git commit murder (English Edition) [Kindle edition] by Michael Warren Lucas | Mystery | Kindleストア" /></a>
</div>

<p>Gitのコミットを後から変えるのは出来るだけ避けるべきですが、
新しい環境で<strong>.gitconfig</strong>などでユーザー名とかをきちんと設定してなかったり
メールアドレスが変わったりしてどうしても変更した方が良い時もあります。</p>

<p>そんな時にAuthorやCommitterの情報を変更したい時の話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#gitで過去のコミットのauthorやcommitterを修正するスクリプト" id="markdown-toc-gitで過去のコミットのauthorやcommitterを修正するスクリプト">Gitで過去のコミットのAuthorやCommitterを修正するスクリプト</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="gitで過去のコミットのauthorやcommitterを修正するスクリプト">Gitで過去のコミットのAuthorやCommitterを修正するスクリプト</h2>

<p>以下を参照。</p>

<blockquote>
  <p><a href="https://stackoverflow.com/questions/750172/change-the-author-and-committer-name-and-e-mail-of-multiple-commits-in-git">version control - Change the author and committer name and e-mail of multiple commits in Git - Stack Overflow</a></p>
</blockquote>

<p>下のスクリプトでは
過去のcommitの中に
AuthorかCommitterに訂正したい名前やメールアドレスがあった時に
名前とアドレスを適当なものに変更しています。</p>

<figure class="code"><figcaption><span>fix_git_commit.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="ch">#!/usr/bin/env bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">FIX_NAME</span><span class="o">=</span><span class="s2">&quot;fix&quot;</span>
</span><span class="line"><span class="nv">FIX_EMAIL</span><span class="o">=</span><span class="s2">&quot;fix@example.com&quot;</span>
</span><span class="line"><span class="nv">CORRECT_NAME</span><span class="o">=</span><span class="s2">&quot;correct&quot;</span>
</span><span class="line"><span class="nv">CORRECT_EMAIL</span><span class="o">=</span><span class="s2">&quot;correct@example.com&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> ! git log --pretty<span class="o">=</span>format:<span class="s2">&quot;%an %ae %cn %cn&quot;</span><span class="p">|</span>grep -q -e <span class="s2">&quot;</span><span class="nv">$FIX_NAME</span><span class="s2">&quot;</span> -e <span class="s2">&quot;</span><span class="nv">$FIX_EMAIL</span><span class="s2">&quot;</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">exit</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line">
</span><span class="line">git filter-branch -f --env-filter <span class="s2">&quot;</span>
</span><span class="line"><span class="s2">if [ \&quot;\$GIT_AUTHOR_NAME\&quot; = \&quot;</span><span class="nv">$FIX_NAME</span><span class="s2">\&quot; ] || [ \&quot;\$GIT_AUTHOR_EMAIL\&quot; = \&quot;</span><span class="nv">$FIX_EMAIL</span><span class="s2">\&quot; ];then</span>
</span><span class="line"><span class="s2">    export GIT_AUTHOR_NAME=\&quot;</span><span class="nv">$CORRECT_NAME</span><span class="s2">\&quot;</span>
</span><span class="line"><span class="s2">    export GIT_AUTHOR_EMAIL=\&quot;</span><span class="nv">$CORRECT_EMAIL</span><span class="s2">\&quot;</span>
</span><span class="line"><span class="s2">fi</span>
</span><span class="line"><span class="s2">if [ \&quot;\$GIT_COMMITTER_NAME\&quot; = \&quot;</span><span class="nv">$FIX_NAME</span><span class="s2">\&quot; ] || [ \&quot;\$GIT_COMMITTER_EMAIL\&quot; = \&quot;</span><span class="nv">$FIX_EMAIL</span><span class="s2">\&quot; ];then</span>
</span><span class="line"><span class="s2">    export GIT_COMMITTER_NAME=\&quot;</span><span class="nv">$CORRECT_NAME</span><span class="s2">\&quot;</span>
</span><span class="line"><span class="s2">    export GIT_COMMITTER_EMAIL=\&quot;</span><span class="nv">$CORRECT_EMAIL</span><span class="s2">\&quot;</span>
</span><span class="line"><span class="s2">fi</span>
</span><span class="line"><span class="s2">&quot;</span> --tag-name-filter cat -- --branches --tags
</span></code></pre></td></tr></table></div></figure>

<p>最初にcommitの中に該当の文字列があるかどうかチェックしています。
<code>%an</code>はAuthorの名前、<code>%ae</code>がメールアドレス、
<code>%cn</code>がCommitterの名前、<code>%ce</code>がメールアドレス。</p>

<p><code>git filter-branch</code>で上の様な変更を2回以上しようとすると</p>

<pre><code>Cannot create a new backup.
A previous backup already exists in refs/original/
Force overwriting the backup with -f
</code></pre>

<p>みたいなエラーがでるので<code>-f</code>が必要です。</p>

<p>リモートに<code>push</code>する時は</p>

<pre><code>$ git push -f
</code></pre>

<p>で。</p>

<p>他の場所で既にcloneしてある時、そのまま<code>pull</code>すると</p>

<pre><code>fatal: refusing to merge unrelated histories
</code></pre>

<p>というエラーが出ます。</p>

<pre><code>$ git pull --allow-unrelated-histories
</code></pre>

<p>とするとこのエラーを無視してmergeすることが出来ますが、
その際履歴が再び残ってしまう様な形になってしまうので
上の様な変更を行う際は他での変更は全てリモートに送った上で
一箇所で変更して、すべての場所でリモートにあるものをcloneしなおして使うようにするしかないかな、と。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでエイリアスを確認するエイリアスを作る(サブコマンドについても)]]></title>
    <link href="https://rcmdnk.com/blog/2017/10/02/comptuer-git/"/>
    <updated>2017-10-02T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/10/02/comptuer-git</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B000008CRT?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B000008CRT&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61oz10qKNFL._SS200_.jpg" alt="Alias" /></a>
</div>

<p>Gitのエイリアスが増えてきたので
それを簡単にチェックするためのエイリアスを作ってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#gitのエイリアスを確認するエイリアス" id="markdown-toc-gitのエイリアスを確認するエイリアス">Gitのエイリアスを確認するエイリアス</a></li>
  <li><a href="#サブコマンド一覧" id="markdown-toc-サブコマンド一覧">サブコマンド一覧</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="gitのエイリアスを確認するエイリアス">Gitのエイリアスを確認するエイリアス</h2>

<p><strong>~/.gitconfig</strong>に以下の様なものを追加します。</p>

<pre><code>[alias]
  al = "!f() {\
    if [ \"$#\" -eq 0 ];then \
      git config --name-only --get-regexp ^alias\\.|cut -d"." -f2|column;\
      return;\
    fi;\
    ret=0;\
    for a in \"$@\";do \
      git config --get-regexp ^alias\\.\"$a\"$;\
      rettmp=$?;\
      if [ $rettmp != 0 ];then \
        ret=$rettmp;\
        printf \"\\e[31malias.$a is not defined as alias\\n\\e[m\";\
      fi;\
    done;\
    return $ret;\
  };f"
</code></pre>

<p>エイリアス名は<code>alias</code>とかも使いたいのですが、
<code>hub</code>コマンドを使って<code>git</code>をラップしていて、
<code>hub</code>コマンドが<code>alias</code>というサブコマンドを持っていてそれに取られてしまうので
<code>alias</code>というエイリアスは使えない状態です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00AQMSHWU?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00AQMSHWU&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/518mKZKXzgL._SS90_CR0,0,120,90_.jpg" alt="The Wrapper" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/08/21/computer-git-github/">hub: git clone時等に'git@github.com:'等を補完してくれるラッパー</a></div></li></ul>

<p>なのでエイリアス名は<code>al</code>に。</p>

<p>引数がない場合には全てのエイリアス一覧を表示します。</p>

<pre><code>$ git al
ad              ce              log-graph       sh              dns             dw              d10             pull-dry-run    update
ba              ci              log-tag         st              dm              d1              d               pull-dry-run-s  up
br              cl              ls              su              dw              d2              sm              tag-renew       deleted
current-branch  co              mh              top             dc              d3              smfe            tag-new         restore
cb              git-dir         rbm             root            ds              d4              smad            cancel          al
checkout-empty  log-all         sb              p               dd              d5              smrm            check
</code></pre>

<p>こんな感じ。</p>

<pre><code>git config --name-only --get-regexp ^alias\.
</code></pre>

<p>でconfigの中のエイリアス一覧を取ってきて<code>--name-only</code>で名前だけ表示にできます(エイリアスの内容を非表示に)。
一覧は<code>alias.ad</code>みたいな感じなので<code>alias.</code>の部分を削除。</p>

<p>順番は<strong>~/.gitconfig</strong>に書かれた順で表示されるのでアルファベット順にソート。
もし書かれた順に表示したい場合は上の<code>sort|</code>の部分を削除してください。</p>

<p>最後に<code>column</code>で整形。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4798039438?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4798039438&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41XOsTwe1UL._SS90_CR0,0,120,90_.jpg" alt="lsを読まずにプログラマを名乗るな!" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/05/26/computer-linux-bash-zsh/">lsコマンドのcolumnな表示について</a></div></li></ul>

<p>引数がある場合にはその引数に対応するエイリアスの内容を表示します。</p>

<pre><code>$ git al top
alias.top rev-parse --show-toplevel
</code></pre>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00FOSOUKE?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00FOSOUKE&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41lqan5MweL._SS90_CR0,0,120,90_.jpg" alt="Nendoroid Ghost Shell GitS Tachikoma PVC Figure GSC フィギュア 人形 おもちゃ (並行輸入)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/12/20/computer-git/">Gitのエイリアスで引数を使う</a></div></li></ul>

<h2 id="サブコマンド一覧">サブコマンド一覧</h2>

<p>ついでにサブコマンドについても。</p>

<p>サブコマンド一覧は<code>git help -a</code>で見ることが出来ます。</p>

<pre><code>$ git help -a
usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]
           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]
           &lt;command&gt; [&lt;args&gt;]

available git commands in '/usr/local/Cellar/git/2.14.2/libexec/git-core'

  add                       credential-store          index-pack                patch-id                  shortlog
  add--interactive          cvsexportcommit           init                      prune                     show
  am                        cvsimport                 init-db                   prune-packed              show-branch
  annotate                  cvsserver                 instaweb                  pull                      show-index
  apply                     daemon                    interpret-trailers        push                      show-ref
  archimport                describe                  log                       quiltimport               stage
  archive                   diff                      ls-files                  read-tree                 stash
  bisect                    diff-files                ls-remote                 rebase                    status
  bisect--helper            diff-index                ls-tree                   rebase--helper            stripspace
  blame                     diff-tree                 mailinfo                  receive-pack              submodule
  branch                    difftool                  mailsplit                 reflog                    submodule--helper
  bundle                    difftool--helper          merge                     remote                    svn
  cat-file                  fast-export               merge-base                remote-ext                symbolic-ref
  check-attr                fast-import               merge-file                remote-fd                 tag
  check-ignore              fetch                     merge-index               remote-ftp                unpack-file
  check-mailmap             fetch-pack                merge-octopus             remote-ftps               unpack-objects
  check-ref-format          filter-branch             merge-one-file            remote-http               update-index
  checkout                  fmt-merge-msg             merge-ours                remote-https              update-ref
  checkout-index            for-each-ref              merge-recursive           remote-testsvn            update-server-info
  cherry                    format-patch              merge-resolve             repack                    upload-archive
  cherry-pick               fsck                      merge-subtree             replace                   upload-pack
  citool                    fsck-objects              merge-tree                request-pull              var
  clean                     gc                        mergetool                 rerere                    verify-commit
  clone                     get-tar-commit-id         mktag                     reset                     verify-pack
  column                    grep                      mktree                    rev-list                  verify-tag
  commit                    gui                       mv                        rev-parse                 web--browse
  commit-tree               gui--askpass              name-rev                  revert                    whatchanged
  config                    hash-object               notes                     rm                        worktree
  count-objects             help                      p4                        send-email                write-tree
  credential                http-backend              pack-objects              send-pack
  credential-cache          http-fetch                pack-redundant            sh-i18n--envsubst
  credential-cache--daemon  http-push                 pack-refs                 shell

git commands available from elsewhere on your $PATH

  clang-format            credential-netrc        credential-osxkeychain  generate-changelog      subtree

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help &lt;command&gt;' or 'git help &lt;concept&gt;'
to read about a specific subcommand or concept.

hub custom commands

  alias  browse  ci-status  compare  create  fork  issue  pull-request  release  selfupdate  version
</code></pre>

<p>上みたいなコマンドだけを取ってきたかったらこれを整形する必要がありますが、
通常はこれで十分だと思います。</p>

<p>ちなみにサブコマンドは<strong>git-add</strong>の様に<code>git- + &lt;subcommand&gt;</code>みたいな名前のファイルが用意されていて
それが呼ばれる様になっています。</p>

<p>なので自分でPATHが通った所に適当な<code>git-mycommand</code>みたいな実行ファイルを置いておけば
上記出力の
<code>git commands available from elsewhere on your $PATH</code>
の欄に出てきて実際に<code>git mycommand</code>という形で使う事が出来ます。</p>

<p>これは<code>git</code>と全く関係ないものでもなんでも良くて
シェルスクリプトでもc++とかで書いてコンパイルした実行ファイルでも
なんでも可能です。</p>

<p>要は<code>git mycommand</code>というのがそのまま<code>git-mycommand</code>に置き換わるだけ。</p>

<p>また、サブコマンドに関してヘルプがある場合は</p>

<pre><code>$ git add -h
</code></pre>

<p>とかでそのサブコマンドのヘルプを見れます。</p>

<p>さらにマニュアルがある場合には</p>

<pre><code>$ man git-add
</code></pre>

<p>とするとそのマニュアルが開けます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitで過去に削除したファイルを検索、復元させる方法]]></title>
    <link href="https://rcmdnk.com/blog/2017/10/01/computer-git/"/>
    <updated>2017-10-01T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/10/01/computer-git</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4295400645?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4295400645&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51zoHpug84L._SS200_.jpg" alt="まんがでわかる 復縁方法 〜 また元カレと恋をする 〜" /></a>
</div>

<p>Gitはバージョン管理システムなのでソースコードなどで
古い記述を残さないで消してしまっても後から簡単に見ることが出来るので
余計な記述をどんどん消していく事ができます。</p>

<p>一方消したファイルも履歴に残っていますが、
いざ探そうと思うとちょっと面倒だったりするので
とりあえず残しておこう、とか思う事もあるかもしれません。</p>

<p>そんなことをせずにレポジトリを綺麗にしておくためにも、
過去に削除したファイルを簡単に検索、復元させられる様にしておこう、
という話し。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#過去に削除したファイルの検索" id="markdown-toc-過去に削除したファイルの検索">過去に削除したファイルの検索</a></li>
  <li><a href="#過去に削除したファイルを復元する" id="markdown-toc-過去に削除したファイルを復元する">過去に削除したファイルを復元する</a></li>
  <li><a href="#gitconfigにaliasを書いて簡単に検索復元出来る様にする" id="markdown-toc-gitconfigにaliasを書いて簡単に検索復元出来る様にする">.gitconfigにaliasを書いて簡単に検索、復元出来る様にする</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="過去に削除したファイルの検索">過去に削除したファイルの検索</h2>

<pre><code>git log --diff-filter=D --summary
</code></pre>

<p>をすることで過去に削除したファイルを検索できます。</p>

<pre><code>$ git log --diff-filter=D --summary
commit b318eb6b0875cffcc6e7c6c4990d5ef90177ad40
Author: rcmdnk &lt;rcmdnk@gmail.com&gt;
Date:   Thu Jun 12 18:03:06 2014 +0900

    removed .mailto

 delete mode 100644 .mailto

commit 7be0877bc3d8510fed4252e1dbc3d8074e2d4c11
Author: rcmdnk &lt;rcmdnk@gmail.com&gt;
Date:   Fri May 23 13:11:47 2014 +0900

    removed unnecessary screen files

 delete mode 100644 .screen/.hostForScreen
 delete mode 100644 .screen/.hostForScreen-e
</code></pre>

<p>基本的には<code>log</code>を見るわけですが、
<code>--diff-filter=D</code>を使えば何かを削除した<code>commit</code>のみを取ってこれます。</p>

<p>さらに<code>--summary</code>で<code>rm</code>や<code>add</code>などをした時のファイル一覧が出るので
上みたいな感じに表示されて実際に削除されたファイルを見ることが出来ます。</p>

<h2 id="過去に削除したファイルを復元する">過去に削除したファイルを復元する</h2>

<pre><code>git checkout &lt;commit&gt;^ -- &lt;file_name&gt;
</code></pre>

<p>これで削除したファイルを取ってこれます。
上の<code>.mailto</code>を復元したいなら、</p>

<pre><code>$ git checkout b318eb6b0875cffcc6e7c6c4990d5ef90177ad40^ -- .mailto
</code></pre>

<p>commit番号の後ろに<code>^</code>を付けるのを忘れないように。
<code>^</code>を付けると1つ前のcommitを意味する様になります。</p>

<p><code>b318...</code>は<code>.mailto</code>を削除したcommitなのでそれより1つ前のファイルが有る所からでないと取ってこれません。</p>

<p><code>--</code>はそれ以降はオプション出ないことを知らせる引数で最後にファイル名を書きます。</p>

<h2 id="gitconfigにaliasを書いて簡単に検索復元出来る様にする">.gitconfigにaliasを書いて簡単に検索、復元出来る様にする</h2>

<p>コマンドを覚えて確認して復元して、ということでも良いですが、
Gitにはせっかく<code>alias</code>機能があるのでそれを使います。</p>

<pre><code>[alias]
  deleted = log --diff-filter=D --summary
  restore = "!f () {\
    if [ \"$#\" -eq 0 ];then \
      echo 'usage: git restore &lt;file_name&gt; [file_name_2 [file_name_3 [...]]]';\
      return 1;\
    fi;\
    ret=0;\
    for f in \"$@\";do \
      if [ -a \"$(git rev-parse --show-toplevel)/$f\" ];then \
        printf \"\\e[31m$f exists\\n\\e[m\";\
        ret=2;\
        continue;\
      fi;\
      c=$(git rev-list -n 1 HEAD -- \"$f\");\
      if [ -n \"$c\" ];then \
        git checkout \"$c\"^ -- \"$f\";\
        echo \"$f\" has been restored;\
      else \
        printf \"\\e[31m$f is not in the log\\n\\e[m\";\
        ret=2;\
      fi;\
    done;\
    return $ret;\
  };f"
</code></pre>

<p>こんな感じで<code>deleted</code>と<code>restore</code>という2つのエイリアスを<strong>~/.gitconfig</strong>の中に書いておきます。
エイリアスに関して詳しくは下のポストで。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00FOSOUKE?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00FOSOUKE&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41lqan5MweL._SS90_CR0,0,120,90_.jpg" alt="Nendoroid Ghost Shell GitS Tachikoma PVC Figure GSC フィギュア 人形 おもちゃ (並行輸入)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/12/20/computer-git/">Gitのエイリアスで引数を使う</a></div></li></ul>

<p><code>deleted</code>の方は単に上で紹介したコマンドをそのままエイリアス化しただけです。</p>

<p><code>restore</code>の方はまずは</p>

<pre><code>[ -a "$(git rev-parse --show-toplevel)/&lt;file_name&gt;" ]
</code></pre>

<p>でレポジトリにファイルが存在しているかどうかを確認しています。</p>

<pre><code>git rev-parse --show-toplevel
</code></pre>

<p>は現在いるレポジトリのトップディレクトリ(ルートディレクトリ)の絶対パスを返します。</p>

<p><code>restore</code>ではレポジトリのどこに居ようがトップディレクトリからのパスでファイルを指定することにしています。</p>

<p>ファイルがある場合にはそれについてはスキップ。</p>

<p>その次は</p>

<pre><code>git rev-list -n 1 HEAD -- &lt;file_name&gt;
</code></pre>

<p>によってそのファイルに関する最後のcommitを取ってきています。
これは削除されたファイルに関しては削除された時のcommit番号が返って来る事になります。</p>

<p>もし過去にもcommitしたことが無いファイルだとこれは空文字を返しますが、
終了ステータスは0で正常終了になるので
空文字出ないことを確認します。</p>

<p>空文字でなければ上で紹介したコマンドで復元。</p>

<p>複数のファイルを与えた場合でもそれぞれについて復元を試みます。</p>

<h2 id="まとめ">まとめ</h2>

<p>Gitはサブコマンドが非常に多い上にそれらのオプションも多種多様なので
とてもではないですが全ては覚えられません。</p>

<p>その中でも必要なものをエイリアス化しておけばコマンドを打つのも楽になりますし
簡単に覚えられます。</p>

<p>必要そうなものをとりあえずエイリアスにしておけば、
自分の<strong>~/.gitconfig</strong>を見ることでどういうコマンドがあったか、
ということを確認することも可能です。</p>

<p>これで心置きなく要らないファイルを消すことが出来ると思います。</p>
]]></content>
  </entry>
  
</feed>
