<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Git | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/git/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-09T19:48:47+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub Actions用のアクションを自作する]]></title>
    <link href="https://rcmdnk.com/blog/2020/04/23/computer-git-github/"/>
    <updated>2020-04-23T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/04/23/computer-git-github</id>
    <content type="html"><![CDATA[<p>GitHub Actionsで自作アクションを作る際に気づいた点など。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#github-actions" id="markdown-toc-github-actions">GitHub Actions</a></li>
  <li><a href="#アクションの使い方" id="markdown-toc-アクションの使い方">アクションの使い方</a></li>
  <li><a href="#アクションの作り方" id="markdown-toc-アクションの作り方">アクションの作り方</a></li>
  <li><a href="#dockerファイルを使った方法" id="markdown-toc-dockerファイルを使った方法">Dockerファイルを使った方法</a></li>
  <li><a href="#javascriptを使った方法" id="markdown-toc-javascriptを使った方法">JavaScriptを使った方法</a></li>
  <li><a href="#inputsパラメーター" id="markdown-toc-inputsパラメーター">Inputsパラメーター</a></li>
  <li><a href="#secrets" id="markdown-toc-secrets">Secrets</a></li>
  <li><a href="#アクションを公開する方法" id="markdown-toc-アクションを公開する方法">アクションを公開する方法</a></li>
  <li><a href="#アクションのバージョンの付け方" id="markdown-toc-アクションのバージョンの付け方">アクションのバージョンの付け方</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="github-actions">GitHub Actions</h2>

<p>GitHub ActionsはGitHubで使えるCI/CDツールです。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190819_githubactions1_120_90.jpg" width="120" height="90" alt="20190819_githubactions1_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/">GitHubで新しいActionsが使えるようになっていたのでCI/CDをやってみた</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2020/04/16/blog-octopress-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20200416_githubactions_120_90.png" width="120" height="90" alt="20200416_githubactions_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2020/04/16/blog-octopress-github/">ブログのビルド環境をGitHub Actionsに変更</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2020/04/20/computer-git-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20200420_githubactionsbadge_120_90.jpg" width="120" height="90" alt="20200420_githubactionsbadge_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2020/04/20/computer-git-github/">GitHub Actionsに関する追記</a></div></li></ul>

<h2 id="アクションの使い方">アクションの使い方</h2>

<p>自分のWorkflowの中で人が作ったものや自分が作ったアクションを使いたい場合には
<code>jobs.&lt;jobid&gt;.steps</code>の中で</p>

<pre><code>jobs:
  myjob:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    ...
</code></pre>

<p>の様に<code>uses</code>に該当のレポジトリ名を記入することで使えます。
また、最後に<code>@</code>の後ろにリリース番号やコミット番号を指定することで
バージョン指定することが可能です。</p>

<p>また、<code>with</code>は、そのアクションが用意しているパラメーターを設定する項目で、
ここでは<code>submodules</code>というパラメーターに<code>recursive</code>という値を設定しています。</p>

<h2 id="アクションの作り方">アクションの作り方</h2>

<p>アクションを作る際にはDockerilsを使ったものかJavaScriptを使ったものを作ることになります。</p>

<p>DockerはLinuxのみ、JavaScriptはLinux、macOS、Windowsでも使えます。</p>

<p>このどちらかを選んで作ることになります。</p>

<h2 id="dockerファイルを使った方法">Dockerファイルを使った方法</h2>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/building-actions/creating-a-docker-container-action">Docker コンテナのアクションを作成する - GitHub ヘルプ</a></p>
</blockquote>

<p>基本的にはDockerファイルを用意して、その中で実行するべきスクリプトを用意する、と言った感じ。</p>

<p>GitHubのレポジトリに</p>

<ul>
  <li>action.yml</li>
  <li>Dockerfile</li>
  <li>entrypoint.sh (Dockerfileの中で呼ぶもの)</li>
</ul>

<p>を用意します。</p>

<p>action.ymlには最小限以下の様な物を書きます。</p>

<figure class="code"><figcaption><span>action.yml  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;my</span><span class="nv"> </span><span class="s">action&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">description</span><span class="p p-Indicator">:</span> <span class="s">&#39;my</span><span class="nv"> </span><span class="s">action</span><span class="nv"> </span><span class="s">unit&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">author</span><span class="p p-Indicator">:</span> <span class="s">&#39;rcmdnk&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">branding</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">icon</span><span class="p p-Indicator">:</span> <span class="s">&#39;meh&#39;</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">color</span><span class="p p-Indicator">:</span> <span class="s">&#39;gray-dark&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">runs</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">using</span><span class="p p-Indicator">:</span> <span class="s">&#39;docker&#39;</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">image</span><span class="p p-Indicator">:</span> <span class="s">&#39;Dockerfile&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>name</code>、<code>description</code>は適当に好きなものを。</p>

<p><code>author</code>には自分の名前を。</p>

<p><code>branding</code>ですが、これはアクアションを公開する時に表示されるアイコンを指定します。</p>

<blockquote>
  <p><a href="https://feathericons.com/">Feather – Simply beautiful open source icons</a></p>
</blockquote>

<p>にあるIconマークと、背景カラーをバッジの背景カラー。 カラーはwhite、yellow、blue、green、orange、red、purple、gray-darkのいずれか。</p>

<p>Dockerに関しては一番簡単には<code>runs</code>でDockerfileを指定するだけ。</p>

<p>簡単なコマンドを実行するだけならDockerfileの中で実行ファイルを呼ぶ様に</p>

<figure class="code"><figcaption><span>entrypoint.sh  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>FROM ubuntu:latest
</span><span class="line">
</span><span class="line">COPY entrypoint.sh /entrypoint.sh
</span><span class="line">
</span><span class="line">ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/entrypoint.sh&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>として<strong>entrypoint.sh</strong>を呼ぶようにします。</p>

<h2 id="javascriptを使った方法">JavaScriptを使った方法</h2>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/building-actions/creating-a-javascript-action">JavaScript アクションを作成する - GitHub ヘルプ</a></p>
</blockquote>

<p>こちらで用意する必要があるのは</p>

<ul>
  <li>action.yml</li>
  <li>index.js (action.ymlで呼ぶもの)</li>
</ul>

<p>を用意します。</p>

<figure class="code"><figcaption><span>action.yml  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;my</span><span class="nv"> </span><span class="s">action&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">description</span><span class="p p-Indicator">:</span> <span class="s">&#39;my</span><span class="nv"> </span><span class="s">action</span><span class="nv"> </span><span class="s">unit&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">author</span><span class="p p-Indicator">:</span> <span class="s">&#39;rcmdnk&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">branding</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">icon</span><span class="p p-Indicator">:</span> <span class="s">&#39;meh&#39;</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">color</span><span class="p p-Indicator">:</span> <span class="s">&#39;gray-dark&#39;</span>
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">runs</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">using</span><span class="p p-Indicator">:</span> <span class="s">&#39;node12&#39;</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">main</span><span class="p p-Indicator">:</span> <span class="s">&#39;index.js&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>runs</code>の所で<code>using</code>に<code>node12</code>を指定し使うJavaScriptファイルを<code>main</code>で指定します。</p>

<p>あとはJavaScriptでの処理を<code>index.js</code>に書いておけばOK。</p>

<h2 id="inputsパラメーター">Inputsパラメーター</h2>

<p><code>inputs</code>は最初の例であった<code>with</code>でユーザーが設定できる様にするための<strong>action.yml</strong>内の設定です。</p>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/building-actions/metadata-syntax-for-github-actions#">GitHub Actionsのメタデータ構文 - GitHub ヘルプ</a></p>
</blockquote>

<pre><code>inputs:
  numOctocats:
    description: 'Number of Octocats'
    required: false
    default: '1'
  octocatEyeColor:
    description: 'Eye color of the Octocats'
    required: true
</code></pre>

<p>のような感じで指定すると、<code>numOctocats</code>と<code>octocatEyeColor</code>という値を
<code>with</code>で設定できる様になります。</p>

<p>これらの値は環境変数として使える様になり、
先頭に<code>INPUT_</code>を付けてすべて大文字、空白は<code>_</code>に変換した状態になります。
<code>numOctocats</code>ならシェルスクリプトとかで<code>$INPUT_NUMOCTOCATS</code>と呼べば値が読めます。</p>

<p>ここで<code>required</code>と<code>default</code>という設定があるのですが、
これら設定がいまいちちゃんと動いてないように見えます。</p>

<p>Documentの記述と、自分的な感覚では</p>

<ul>
  <li><code>required</code>が<code>true</code>: ユーザーが必ず指定しなくてはいけない</li>
  <li><code>default</code>が設定されている: <code>required</code>は<code>false</code>でユーザーが指定しないときにはその値が使われる</li>
</ul>

<p>と言ったものだと思ってました。</p>

<p>ただ、実際動かしてみると、</p>

<ul>
  <li><code>required</code>が<code>true</code>で<code>default</code>の値が設定してあるとユーザーが指定しない場合に<code>default</code>の値が使われる
    <ul>
      <li><code>default</code>が無くてもから変数として生成される(エラーにはならない)</li>
    </ul>
  </li>
  <li><code>required</code>が<code>false</code>の場合、ユーザーが指定しないと<code>default</code>の値があってもそれは無視される
    <ul>
      <li>厳密にはそのinputパラメーターが環境変数として生成されない</li>
    </ul>
  </li>
</ul>

<p>という感じでした。なので<code>default</code>を指定したい場合には必ず<code>required: true</code>にする必要があります。</p>

<p>もしかしたら何か勘違いしてるかもしれないのですが、結構色々確かめた上で今の所こんな感じでした。</p>

<p>なので今の所READMEとかに書く際には<code>required</code>の値は関係なしに、必ずユーザー側で指定してもらいたいものかどうか
を書く必要があります。</p>

<p>逆にREADMEがちゃんと無いと、<code>action.yml</code>を見ただけだとその変数を自分で設定する必要があるかどうかがちょっと分からない状態です。</p>

<h2 id="secrets">Secrets</h2>

<p>各レポジトリで<strong>Settings</strong><i class="fa fa-arrow-right"></i><strong>Secrets</strong>というセクションに行くと
秘密のワードを暗号化して保存しておくことが出来る様になっています。</p>

<p>これを</p>

<pre><code>- name: ssh test
  env:
    MY_SSH_KEY: ${{secrets.SSH_KEY}}
  run: ssh -i $MY_SSH_KEY example.sh echo test
</code></pre>

<p>のような形で<strong>action.yml</strong>の中で使うことが出来ます。</p>

<p><strong>action.yml</strong>の中では<code>${{ }}</code>で囲った形で<code>secrets.</code>というprefixを使って参照することが出来ます。</p>

<p>上の例ではそれをbashのコマンドで呼びたいので一度環境変数に入れて、環境変数の形で
<code>run</code>の中で使うようにしています。</p>

<p>アクションの<code>with</code>に直接渡す事もできます。</p>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets">暗号化されたシークレットの作成と保存 - GitHub ヘルプ</a></p>
</blockquote>

<h2 id="アクションを公開する方法">アクションを公開する方法</h2>

<p>パブリックレポジトリで<strong>action.yml</strong>(もしくは<strong>action.yaml</strong>)がルートディレクトリにある場合、
そのレポジトリでリリースを作ろうとすると自動的に
<a href="https://github.com/marketplace?type=actions">GitHub Marketplace</a>
に登録するかどうかの項目が出る様になっています。</p>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/building-actions/publishing-actions-in-github-marketplace">GitHub Marketplaceでのアクションの公開 - GitHub ヘルプ</a></p>
</blockquote>

<p><strong>action.yml</strong>の中で指定する<code>name</code>に関して、他のアクションとかぶってはいけなかったり
ユーザー名やOrganization名、またはGitHubの機能名など予約されているものと一致してしまうと
公開できないので、あまり簡単なユニークでなさそうな名前だと出来ないのでちょっと注意が必要です。</p>

<p>あと2要素認証を使っていないと出来ないようになっているので、
してない人はしましょう。</p>

<p>リリースを作るだけでMarketplaceに公開されるので
公開する敷居はかなり低い感じがしました。</p>

<p>一つ公開してみた際、上にあるようなMarketplaceへの公開の機能が
リリースを作ろうとしても出てこなくて困ったことがありました。</p>

<p>これは<strong>action.yml</strong>ではなく、<strong>actions.yml</strong>という名前でアクションファイルを置いていたからでした。</p>

<p>ただ、これでも他のレポジトリから</p>

<pre><code>- uses: rcmdnk/octopress-action
</code></pre>

<p>みたいな感じでレポジトリを指定すると使えてました。
Marketplaceに公開するのでなければアクションを定義するYAMLファイルの名前は何でも良い?様です。</p>

<h2 id="アクションのバージョンの付け方">アクションのバージョンの付け方</h2>

<p>バージョンの付け方は
<a href="https://semver.org/">Semantic Versioning</a>
が推奨されています。</p>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/building-actions/about-actions#versioning-your-action">アクションについて - GitHub ヘルプ</a></p>
</blockquote>

<p>vX.Y.Zで</p>

<ul>
  <li>X: メジャーバージョン。後方互換性が無いアップデートを含む場合に上げる。上げた際はY、Zは0に戻す。Xが0の時は開発段階。1以降で正式リリース。</li>
  <li>Y: マイナーバージョン。後方互換性のある機能追加等を行った場合に上げる。上げた場合はZは0に戻す。</li>
  <li>Z: パッチバージョン。後方互換製のあるバグフィックスを行った場合に上げる。</li>
</ul>

<p>といった定義。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/0198700032?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=0198700032&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51xTs%2BTZNXL._SS90_CR0,0,120,90_.jpg" alt="Semantics: Primes and Universals (St. in Classification Data Analysis)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/10/07/computer-git-github/">Gitとかでタグを付けるときのバージョニングについて(Semantic Versioning)</a></div></li></ul>

<p>さらに、破壊的変更がない場合(メジャーバージョンが変わらない場合)メジャーバージョンを指定するだけで自動で追いかけられるよう、<code>v1</code>などのタグを作り、
マイナー/パッチバージョンを上げた際に<code>v1</code>などのタグをそのGit refに移動させることが推奨されています。</p>

<p>ただ、アクション側でその様に用意してなければ使えないわけなので、
各アクションのREADMEなどを読んで使えるものを使う必要があります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubのパブリックレポジトリに秘密鍵をアップロードすると一時的に利用不可にしてくれる]]></title>
    <link href="https://rcmdnk.com/blog/2020/04/21/computer-git-github/"/>
    <updated>2020-04-21T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/04/21/computer-git-github</id>
    <content type="html"><![CDATA[<p>ちょっとテスト用のGitHubのレポジトリに<code>push</code>出来る鍵を一時的に作って
秘密鍵を他のパブリックレポジトリに置いて見たところ
その鍵が一時的に利用負荷になりました。</p>

<p>そういったチェックをしてくれてる様です。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#githubで使ってる秘密鍵をcommitしてpushしてみる" id="markdown-toc-githubで使ってる秘密鍵をcommitしてpushしてみる">GitHubで使ってる秘密鍵をcommitしてpushしてみる</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="githubで使ってる秘密鍵をcommitしてpushしてみる">GitHubで使ってる秘密鍵をcommitしてpushしてみる</h2>

<p>と、以下の様なメールが support@github.com から来ます。</p>

<blockquote>
  <p>[GitHub] SSH private deploy key found in commit</p>

  <p>We noticed that a valid SSH private key of yours was committed to a public GitHub repository. This key is configured as a deploy key for the rcmdnk/en repository. Publicly disclosing a valid SSH private key would allow other people to interact with this repository, potentially altering data.</p>

  <p>As a precautionary measure, we have unverified the SSH key. You should should generate a new SSH key and add it to the repository. We recommend you review you security log to ensure that no malicious activity has occurred: https://help.github.com/articles/reviewing-your-security-log/</p>

  <p>The commit in question is at https://github.com/rcmdnk/octopress-action/blob/xxx</p>

  <p>Please feel free to contact us at https://github.com/contact if you have any questions or concerns.</p>

  <p>Thanks,
GitHub.com</p>
</blockquote>

<p>そしてこの鍵を使った操作ができなくなります。</p>

<p>操作するレポジトリに行って<strong>Settings</strong><i class="fa fa-arrow-right"></i><strong>Deploy keys</strong>に行くと
件の鍵が<strong>unverified automatically</strong>になっています。</p>

<p><img src="https://rcmdnk.com/images/post/20200421_githubkey.jpg" alt="20200421_githubkey.jpg" class="pic" /></p>

<p>ここで<strong>Approve</strong>ボタンを押すとまた使える様になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Actionsに関する追記]]></title>
    <link href="https://rcmdnk.com/blog/2020/04/20/computer-git-github/"/>
    <updated>2020-04-20T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/04/20/computer-git-github</id>
    <content type="html"><![CDATA[<p>GitHub Actionsをもう少し色々触ってみたので
そのメモ。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#github-actions" id="markdown-toc-github-actions">GitHub Actions</a></li>
  <li><a href="#github-actionsを学ぶ" id="markdown-toc-github-actionsを学ぶ">GitHub Actionsを学ぶ</a></li>
  <li><a href="#とりあえずやるための設定" id="markdown-toc-とりあえずやるための設定">とりあえずやるための設定</a></li>
  <li><a href="#気づいたこと気になったことなど" id="markdown-toc-気づいたこと気になったことなど">気づいたこと、気になったことなど</a>    <ul>
      <li><a href="#メールでの通知を細かくは設定できない" id="markdown-toc-メールでの通知を細かくは設定できない">メールでの通知を細かくは設定できない？</a></li>
      <li><a href="#pythonなどを使う場合にはsetupを呼ぶべし" id="markdown-toc-pythonなどを使う場合にはsetupを呼ぶべし">Pythonなどを使う場合にはsetupを呼ぶべし</a></li>
      <li><a href="#バッジ" id="markdown-toc-バッジ">バッジ</a></li>
      <li><a href="#トリガーの自由度は高い" id="markdown-toc-トリガーの自由度は高い">トリガーの自由度は高い</a></li>
      <li><a href="#skip-ci" id="markdown-toc-skip-ci">skip ci</a></li>
      <li><a href="#自作アクション" id="markdown-toc-自作アクション">自作アクション</a></li>
    </ul>
  </li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="github-actions">GitHub Actions</h2>

<p>去年から使えるようになっていたGitHub Actionsですが、
それまでTravis CIやWerckerというサービスを使っていて、
それらをわざわざ移す必要もないかな、と思ってたのですが
便利そうな部分も多いのでいくつか移行してみました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2020/04/16/blog-octopress-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20200416_githubactions_120_90.png" width="120" height="90" alt="20200416_githubactions_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2020/04/16/blog-octopress-github/">ブログのビルド環境をGitHub Actionsに変更</a></div></li></ul>

<p>その中で気づいたことなどについてメモしておきます。</p>

<h2 id="github-actionsを学ぶ">GitHub Actionsを学ぶ</h2>

<p>公式ドキュメントが充実しているのでまずはそれ参照。</p>

<blockquote>
  <p><a href="https://help.github.com/ja/actions">GitHub Actionsのドキュメント - GitHub ヘルプ</a></p>
</blockquote>

<blockquote>
  <p><a href="https://help.github.com/en/actions">GitHub Actions Documentation - GitHub Help</a></p>
</blockquote>

<p>日本語版だと一部英語だったりして逆に読みにくいところもあるので
英語読める人は英語版の方が読みやすいかと。</p>

<div class="github-widget" data-repo="actions/starter-workflows"></div>

<p>には<a href="https://github.com/actions/starter-workflows/tree/master/ci">ci</a>
のディレクトリに色々な用途別の例があります。</p>

<div class="github-widget" data-repo="sdras/awesome-actions"></div>

<p>には公式以外も含めて色々と有用なものがまとめられています。</p>

<p>以下は最初に使える様になった時に試したときのもの。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190819_githubactions1_120_90.jpg" width="120" height="90" alt="20190819_githubactions1_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/">GitHubで新しいActionsが使えるようになっていたのでCI/CDをやってみた</a></div></li></ul>

<h2 id="とりあえずやるための設定">とりあえずやるための設定</h2>

<p>GitHubのレポジトリに<strong>.github/workflows</strong>というディレクトリを作って、その中に
YAML形式の設定ファイルを置くことでGitHub Actionsが動きます。</p>

<p>まだ置いてないときは、レポジトリの上にある<strong>Actions</strong>というタブを開くと
<strong>Get started with GitHub Actions</strong>というページに行って
例の中から選んでスタートファイルとして使うことも出来ます。</p>

<p>とりあえず、まずやりたいこと、といえばレポジトリに<code>push</code>した際に
そのレポジトリの中身を色々チェックしたりすることだと思います。</p>

<p>それをするための簡単な設定は</p>

<figure class="code"><figcaption><span>.github/workflows/test.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Test</span>
</span><span class="line">
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">on</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">push</span><span class="p p-Indicator">:</span>
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">branches</span><span class="p p-Indicator">:</span>
</span><span class="line">      <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">master</span>
</span><span class="line">
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">jobs</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">myjob</span><span class="p p-Indicator">:</span>
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">runs-on</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">ubuntu-latest</span>
</span><span class="line">
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">steps</span><span class="p p-Indicator">:</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">uses</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">actions/checkout@v2</span>
</span><span class="line">
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Check my repository</span>
</span><span class="line">      <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">|</span>
</span><span class="line">        <span class="no">echo checking...</span>
</span><span class="line">        <span class="no">ls ./</span>
</span></code></pre></td></tr></table></div></figure>

<p>ファイル名は何でもよくて、YAML形式のファイルを<code>yml</code>もしくは<code>yaml</code>という拡張子で
<strong>.github/workflows/</strong>の中に保存すると
見てくれる様になります。</p>

<p><code>name</code>は適当に。</p>

<p><strong>master</strong>ブランチに<code>push</code>されたとき、をトリガーにするなら上の様な<code>on</code>の設定に。</p>

<p><code>jobs</code>の設定では<code>myjob</code>というジョブを定義してますが、この名前は何でもOK。</p>

<p>このジョブの中でまず環境を設定します。ここではUbuntuの最新版。</p>

<p>使えるものは以下を参照。</p>

<div class="github-widget" data-repo="actions/virtual-environments"></div>

<p>Ubuntu, macOS, Windowsがあります。</p>

<p>Ubuntuの最新版の環境とかは<a href="https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md">Ubuntu1804-README.md</a>
を参照。
Homebrewとかも入ってます。</p>

<p>その後で<code>steps</code>として処理を書いていきます。
予め用意されたアクションを使う場合には<code>uses</code>、コマンドを書く場合には<code>run</code>で指定します。</p>

<p>これらのアクションはすべて<code>GITHUB_WORKSPACE</code>で定義されるディレクトリ
(Ubuntuだと
<strong>/home/runner/work/&lt;repository name&gt;/&lt;repository name&gt;</strong>
)
で行われます。</p>

<p>事前のアクションでディレクトリを変更していても次のアクションはすべてここからスタートします。</p>

<p><code>run</code>の方にはわかりやすいように<code>name</code>を指定してますが無くても良いですし<code>uses</code>の方で<code>name</code>を指定してもOK。</p>

<p><code>run</code>で複数処理をしたい場合には分けても良いですし、上の様にYAML的な複数行の書き方で書いてもOK。
(<code>echo checking... &amp;&amp; ls ./</code>みたいなことも出来ます。)</p>

<p>このコマンドを打つ前に<code>uses: actions/checkout@v2</code>を呼んでますが、
GitHub Actionsでは用意される環境にはレポジトリがチェックアウトされてない状態なので
まずそれを取ってくる作業です。
これで<code>GITHUB_WORKSPACE</code>がレポジトリのトップになります。</p>

<p>自分でTOKENなどを使って取ることも出来ますが、<code>actions/checkout@v2</code>
を使うのがデファクトスタンダードです。</p>

<h2 id="気づいたこと気になったことなど">気づいたこと、気になったことなど</h2>

<p>細かい設定などは公式を参照すれば十分とは思うので省きますが
特に気づいたことや気になったことなど。</p>

<h3 id="メールでの通知を細かくは設定できない">メールでの通知を細かくは設定できない？</h3>

<blockquote>
  <p><a href="https://help.github.com/ja/github/receiving-notifications-about-activity-on-github/choosing-the-delivery-method-for-your-notifications">通知の配信方法を選択する - GitHub ヘルプ</a></p>
</blockquote>

<p>上記では他のGitHubの通知と共にGitHub Actionsに関しても記述がありますが、
設定はアカウント全体での設定で、</p>

<ul>
  <li>Email</li>
  <li>Web</li>
  <li>Send notifications for failed workflows only</li>
</ul>

<p>という3つにチェックを入れるかどうか、だけです。</p>

<p>今はこれのEmailとSend notifications for failed workflows only
にチェックを入れて失敗したときだけメールを送る、という設定にしています。</p>

<p>Travis CIとかだと各CIの設定ファイルの中で通知設定が出来て、
失敗後、成功した場合にも通知(成功が続いた場合は通知しない)、など細かい設定も出来ます。</p>

<p>この辺はまたそのうちアップデートがあるんじゃないかな、と期待してます。</p>

<h3 id="pythonなどを使う場合にはsetupを呼ぶべし">Pythonなどを使う場合にはsetupを呼ぶべし</h3>

<p>Pythonのツールで<code>pip</code>を使ってインストールするものに関して、
そのまま<code>pip install ...</code>とやったところ、通常PATHの中に実行ファイルがインストールされるべきところ
されず使えない状態になってました。(どこにインストールされたか、もしくはモジュールがインストールされただけでPATHの中にはしてないのかはちゃんと確認してません。)</p>

<p><code>ubuntu-latest</code>のデフォルトのPATHは</p>

<pre><code>/usr/share/rust/.cargo/bin:/home/runner/.config/composer/vendor/bin:/home/runner/.dotnet/tools:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
</code></pre>

<p>です。</p>

<p>PATHをちゃんと設定すれば、と思って試しましたがよくわからず。</p>

<p>そんな中、Pythonのセットアップアクションがあったのでそれを使ってみました。</p>

<pre><code>- name: Setup python
  uses: actions/setup-python@v1
  with:
    python-version: 2.x
    architecture: x64
- name: python tool ...
  run: |
    pip install ...
</code></pre>

<p>こんな感じで
<a href="https://github.com/actions/setup-python">actions/setup-python</a>
を呼ぶと、<strong>/usr/bin/python</strong>ではなく、
<strong>/opt/hostedtoolcache/Python/2.7.17/x64/bin/python (pip)</strong>
が使われるようになり、pipでインストールされるものも
<strong>/opt/hostedtoolcache/Python/2.7.17/x64/bin</strong>にインストールされる様になります。</p>

<p>また、このアクションを呼んだ時点で
このディレクトリがPATHに追加されます。</p>

<p>他にも
<a href="https://github.com/actions?q=setup&amp;type=source&amp;language=">Node.js, Java, goやRuby</a>
などのsetupもあるのでそういったものを<code>run</code>で使いたい場合には
これらを使ってセットアップした方が捗るかもしれません。</p>

<h3 id="バッジ">バッジ</h3>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2014/09/08/computer-github-travis/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/thumbnail/icon128_120_90.png" width="120" height="90" alt="icon128_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/09/08/computer-github-travis/">Travis CIを使ってみた: GitHubのレポジトリにバッジを貼りたかったから</a></div></li></ul>

<p>Travis CIとかで使えるビルドの結果などの状態の表示をするバッジ。</p>

<p>GitHub Actionsでも使えます。</p>

<blockquote>
  <p><a href="https://help.github.com/ja/actions/configuring-and-managing-workflows/configuring-a-workflow">ワークフローのステータスバッジをリポジトリに追加する</a></p>
</blockquote>

<p>各レポジトリのActionsタブの各ワークフローのページからもバッジのスニペットを取得することも出来ます。</p>

<p><img src="https://rcmdnk.com/images/post/20200420_githubactionsbadge.jpg" alt="20200420_githubactionsbadge.jpg" class="pic" /></p>

<p>ただ、これらのものは状態表示の絵のURLがあるだけで、その状態を示すページへのリンクとかになってません。</p>

<pre><code>![](https://github.com/actions/hello-world/workflows/Hello%20World/badge.svg)
</code></pre>

<p>クリックして結果ページに飛ぶようにするためには自分でURLを加える必要があります。</p>

<pre><code>[![](https://github.com/actions/hello-world/workflows/Hello%20World/badge.svg)](https://github.com/actions/hello-world/actions?query=workflow%3A%22Hello+World%22)
</code></pre>

<h3 id="トリガーの自由度は高い">トリガーの自由度は高い</h3>

<p>GitHub謹製のツールなので、ということがあり、実行に使えるトリガーは豊富です。</p>

<p><code>push</code>だけでなく、IssueなどGitと直接関係ないものも含め、ありとあらゆるレポジトリの
変化に対してワークフローが実行出来ます。</p>

<p>また、定期的な実行も<code>schedule.cron</code>で通常のcronジョブの様な書き方で
指定できるのも良いところかと。</p>

<h3 id="skip-ci">skip ci</h3>

<p>レポジトリに対して何かアップデートをして<code>push</code>し直す、ということは良くあることですが、
何も考えずにやるとその<code>push</code>に対して再びCIが走ってしまい、
延々と繰り返されることになってしまいます。</p>

<p>これを避けるためにTravis CIとかだとコミットログに<code>[skip ci]</code>などが含まれていると
CIを実行しない様になっています。</p>

<blockquote>
  <p><a href="https://github.community/t5/GitHub-Actions/GitHub-Actions-does-not-respect-skip-ci/td-p/42834">GitHub Actions does not respect [skip ci] - GitHub Community Forum</a></p>
</blockquote>

<p>今の所GitHub Actionsではそのような機能はないのですが、
同じようなことを</p>

<pre><code>myjob:
  runs-on: ubuntu-latest
  if: "!contains(github.event.head_commit.message, '[skip ci]')"

  ...
</code></pre>

<p>と、<code>jobs.&lt;job_id&gt;.if</code>で<code>[skip ci]</code>をコミットログに含まない場合、という
指定をすることで再現することが出来ます。</p>

<p>多分この辺もそのうち改善されるのではないかな、と思うところ。</p>

<h3 id="自作アクション">自作アクション</h3>

<p>別に書こうと思います。</p>

<div class="postscript">
  <p><strong>追記: 2020/04/23 </strong></p>

  <ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2020/04/23/computer-git-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20200423_actionhero_120_90.png" width="120" height="90" alt="20200423_actionhero_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2020/04/23/computer-git-github/">GitHub Actions用のアクションを自作する</a></div></li></ul>

  <p><strong>追記ここまで</strong></p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ghqのデフォルトrootディレクトリが~/.ghqから~/ghqに変更された]]></title>
    <link href="https://rcmdnk.com/blog/2020/01/06/computer-git/"/>
    <updated>2020-01-06T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/01/06/computer-git</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07KPWLW9Z?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07KPWLW9Z&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41gq%2BSpKyIL._SS200_.jpg" alt="Amazon.co.jp： ゴー・ホーム・クイックリー (文春e-book) eBook: 中路 啓太: Kindleストア" /></a>
</div>

<p>ローカルにcloneしてきたGitのレポジトリの管理ツール
<a href="https://github.com/motemen/ghq">ghq</a>
のデフォルトのrootディレクトリが<strong>~/.ghq</strong>から<strong>~/ghq</strong>に変更されたようです。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#ghq" id="markdown-toc-ghq">ghq</a></li>
  <li><a href="#rootディレクトリ" id="markdown-toc-rootディレクトリ">rootディレクトリ</a></li>
  <li><a href="#rootディレクトリの変更" id="markdown-toc-rootディレクトリの変更">rootディレクトリの変更</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="ghq">ghq</h2>

<div class="github-widget" data-repo="motemen/ghq"></div>

<p>ghqはGoで作られたGitのローカルレポジトリ管理ツールで、
<code>ghq</code>コマンドを使ってレポジトリを管理することが出来ます。</p>

<p>ローカルにレポジトリをcloneする際にどこにcloneするか、とか
考えなくて済むようになるので常に複数のレポジトリで開発を行ってる場合には
かなり便利な環境が作れます。</p>

<p>ghq関連だと<a href="https://github.com/peco/peco">peco</a>
とかを用いたシェル関数とかを作っておくとさらに便利になる、というのは良く見る話です。</p>

<p>私の設定だと<code>ghq go</code>とかでレポジトリ一覧を表示して選択した所に移動するような関数とかを作っています。</p>

<ul>
  <li><a href="https://github.com/rcmdnk/dotfiles/blob/b068640baac2cdadfd1a4eb48ecb2a6a2c78ae67/.commonrc#L455">rcmdnk/dotfiles/.commonrc</a></li>
</ul>

<p>ここでは
<a href="https://github.com/rcmdnk/sentaku/">sentaku</a>
を使ってますがコマンドをそのまま<code>peco</code>にしても使えるかと思います。</p>

<h2 id="rootディレクトリ">rootディレクトリ</h2>

<p>どこにcloneするか考えなくて良くなるとはいえ、実体は取ってくるのでどこかにあります。</p>

<p>以前のデフォルト設定だとこれは<strong>~/.ghq</strong>というドットから始まる隠しディレクトリになってました。
その下に**~/.ghq/<server>/<user>/<repository>**
の様なディレクトリ構造で管理される様になっています。</repository></user></server></p>

<p>これが、2020年1月1日にリリースされたv0.99.0から<strong>~/ghq</strong>という
見えるディレクトリに変更されました。</p>

<blockquote>
  <p><a href="https://github.com/motemen/ghq/releases">Releases · motemen/ghq</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/motemen/ghq/issues/60">Default value for <code>ghq.root</code> · Issue #60 · motemen/ghq</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/motemen/ghq/pull/237">[incompatible] make ~/ghq default root by Songmu · Pull Request #237 · motemen/ghq</a></p>
</blockquote>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Please choose which one is better. If you have other good ones, reply to this tweet. This is only a reference questionnaire, and even the most answered option may not be adopted.</p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/1202199772636909569?ref_src=twsrc%5Etfw">December 4, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>元々の問題、となっているIssuesで<code>not convenient</code>と言っていますが、
Windowsだから、とかいう理由ではなく、単に普段から手動で<code>cd</code>で移動して
作業するので隠しディレクトリだとやりにくい、ということでしょうか?</p>

<p>個人的には上に書いたような移動する関数を使っているので
むしろ明には見えてない方が嬉しくて、多分最初に作ったときもそういう理由だったのでは、とは思いますが。</p>

<p>ただ、今のメンテナ−の人が正式リリース1.0.0に向けて変更したい、ということでアンケートを取って、
予想に反して<strong>~/src</strong>が人気を得てしまいましたが結局予定していた<strong>~/ghq</strong>への変更になった様です。</p>

<p>ghqはMacでもLinuxでもHomebrewで管理していて、
Homebrewのパッケージは毎日自動でアップデートするようにしているので、
年明けのある時、<strong>ghq go</strong>として作業開始しようとしたらレポジトリが一個もなくてちょっと焦りました。</p>

<p>場合によっては<strong>$HOME</strong>以下が何らかの理由で壊れた、という可能性すらあるので。</p>

<p>特に年明けのタイミング、ということで何か変なことが起こったのか、とかボケてる間に自分がなにかしたのか、とか。</p>

<p>ただ、<code>ls ~/.ghq</code>したら全部ちゃんとあって、なんでだと思って調べたら上の様な変更でした。</p>

<h2 id="rootディレクトリの変更">rootディレクトリの変更</h2>

<p>もともと<strong>~/.ghq</strong>という隠しディレクトリでの管理が気に入っていたので、
それを引き続き使いたいと思います。</p>

<p>設定は<strong>~/.gitconfig</strong>に</p>

<figure class="code"><figcaption><span>.gitconfig </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="o">[</span>ghq<span class="o">]</span>
</span><span class="line">  <span class="nv">root</span> <span class="o">=</span> ~/.ghq
</span></code></pre></td></tr></table></div></figure>

<p>の様な設定をすればOK。</p>

<pre><code>$ git config --global ghq.root ~/.ghq
</code></pre>

<p>でも設定できます。</p>

<p>こういったこともあるので、ghqに限らず、変更されたら困る様なデフォルト値がある場合には
なるべく自分で明に設定しておいた方が良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[settingsでdotfilesなどをまとめた]]></title>
    <link href="https://rcmdnk.com/blog/2019/10/22/computer-git-github/"/>
    <updated>2019-10-22T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/10/22/computer-git-github</id>
    <content type="html"><![CDATA[<p>Bashの設定など色々を<strong>dotfiles</strong>などでまとめてますが、
他にも自作スクリプト群などいくつか同じ様に扱っている
ファイル群があるのでそれらをまとめて<strong>settings</strong>というレポジトリを作って
管理するようにしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#settings" id="markdown-toc-settings">settings</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="settings">settings</h2>

<p>管理体制として親レポジトリの
<a href="https://github.com/rcmdnk/settings">settings</a>
というものを作りました。</p>

<div class="github-widget" data-repo="rcmdnk/settings"></div>

<p>その中に<a href="https://github.com/rcmdnk/dotfiles/tree/76c77cc1fb65e607997c08453be8426462b66079">dotfiles</a>
などのレポジトリをサブモジュールとして登録してあります。</p>

<p><strong>.bashrc</strong>などの中から参照するものとして、これまで<strong>.localrc</strong>というファイルで
必要に応じてその端末特有の設定を別途設定できる様にしていましたが
今回新たに<strong>.privaterc</strong>という設定を加えて
共通に使いたいけど公開したく無い様なものを設定できるようにしました。</p>

<p>こんな感じにしておけばファイルが存在する場合だけ読むように出来ます。</p>

<figure class="code"><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>...
</span><span class="line">_source_file <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -lt <span class="m">1</span> <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;ERROR!!! Usage: _source_file &lt;file&gt;&quot;</span>
</span><span class="line">    <span class="k">return</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line">  <span class="nv">file</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">[[</span> -r <span class="s2">&quot;</span><span class="nv">$file</span><span class="s2">&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class="line">    <span class="nb">source</span> <span class="s2">&quot;</span><span class="nv">$file</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">...
</span><span class="line"><span class="c1"># Private settings</span>
</span><span class="line">_source_file ~/.privaterc
</span><span class="line">
</span><span class="line"><span class="c1"># File for special settings for each machine</span>
</span><span class="line">_source_file ~/.localrc
</span><span class="line">...
</span></code></pre></td></tr></table></div></figure>

<p>この<strong>.privaterc</strong>は<strong>private</strong>というプライベートレポジトリを作ってGitHubに置くようにしました。
private、とは言ってもパスワードとか漏れたら困る様なものは入ってるわけではないんですが。</p>

<p>これで<strong>settings</strong>のレポジトリにある<a href="https://github.com/rcmdnk/settings/blob/master/update.sh">update.sh</a>を使うことで一通りの設定をインストールできるようにしました。</p>
]]></content>
  </entry>
  
</feed>
