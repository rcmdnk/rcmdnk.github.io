<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Python | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/python/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-14T00:23:49+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[poetryでtensorflow (2.1.0)をaddすると出るエラー]]></title>
    <link href="https://rcmdnk.com/blog/2020/03/18/computer-python/"/>
    <updated>2020-03-18T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/03/18/computer-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4839970270?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4839970270&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51MMNt8XCgL._SS200_.jpg" alt="TensorFlowとKerasで動かしながら学ぶ ディープラーニングの仕組み ~畳み込みニューラルネットワーク徹底解説~ (Compass Booksシリーズ)" /></a>
</div>

<p>Poetryでプロジェクトを作ってTensorFlowを使おうと思ったら
エラーが出た件。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#poetry" id="markdown-toc-poetry">Poetry</a></li>
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
  <li><a href="#対処法" id="markdown-toc-対処法">対処法</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="poetry">Poetry</h2>

<p>PoetryはPythonのプロジェクトの依存関係などを管理するためのツール。</p>

<p>詳細は以下参照:</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/02/04/computer-python/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190204_poetry_120_90.jpg" width="120" height="90" alt="20190204_poetry_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/02/04/computer-python/">PoetryでPython CLIツールを簡単にPyPiに登録する</a></div></li></ul>

<h2 id="起こった問題">起こった問題</h2>

<p>Poetryのプロジェクトを作って、TensorFlowを入れてなにかしてみようとしたときに起こったエラー。</p>

<pre><code>$ poetry add tensorflow
$ grep tensorflow pyproject.toml
tensorflow = "^2.1.0"
</code></pre>

<p>な感じで、今(2020/03/18)バージョン指定しないで入れると2.1.0が入ります。</p>

<p>このプロジェクトで、</p>

<pre><code>$ poetry install
$ poetry shell
$ python
&gt;&gt; import tensorflow
...
AttributeError: module 'tensorflow' has no attribute 'compat'
</code></pre>

<p>みたいな感じで<strong>pyproject.toml</strong>で指定された仮想環境に入って
TensorFlowを使ってみようとすると上の様なエラーメッセージが出ます。</p>

<p>この問題はTensorFlow側のパッケージメタデータファイルの内容が原因で、
Poetry側でどうこうするのではなく、これを変更してもらわないといけない問題みたいです。</p>

<blockquote>
  <p><a href="https://github.com/tensorflow/tensorflow/issues/37525">AttributeError: module ‘tensorflow’ has no attribute ‘compat’ when importing tensorflow · Issue #37525 · tensorflow/tensorflow</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/python-poetry/poetry/issues/1330">can’t install tensorflow==2.0.0rc0 with poetry (python3.6.5) · Issue #1330 · python-poetry/poetry</a></p>
</blockquote>

<h2 id="対処法">対処法</h2>

<p>現状
<strong>tensorflow-estimator</strong>を加えるとこの辺の依存関係が修復されて使えるようになります。</p>

<pre><code>$ poetry add tensorflow-estimator
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewからのPython2の削除]]></title>
    <link href="https://rcmdnk.com/blog/2020/03/09/computer-homebrew-python/"/>
    <updated>2020-03-09T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/03/09/computer-homebrew-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873117380?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873117380&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51%2Bxv65qdBL._SS200_.jpg" alt="入門 Python 3" /></a>
</div>

<p>一ヶ月前ほどで今更気づきましたが、
HomebrewからPython2のFormulaが削除されています。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#python2の削除" id="markdown-toc-python2の削除">Python2の削除</a></li>
  <li><a href="#python3" id="markdown-toc-python3">Python3</a></li>
  <li><a href="#セットアップの更新" id="markdown-toc-セットアップの更新">セットアップの更新</a></li>
  <li><a href="#pythonスクリプトの更新" id="markdown-toc-pythonスクリプトの更新">Pythonスクリプトの更新</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="python2の削除">Python2の削除</h2>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873117380?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873117380&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51%2Bxv65qdBL._SS90_CR0,0,120,90_.jpg" alt="入門 Python 3" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/03/02/computer-mac-homebrew/">Homebrewの'python'でインストールされるものがpython3になった</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873112109?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873112109&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51W3A9A9N2L._SS90_CR0,0,120,90_.jpg" alt="初めてのPython 第2版" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/03/10/computer-mac-homebrew-python/">Homebrewでインストールされる/usr/local/bin/pythonが再びPython2に変更</a></div></li></ul>

<p>Homebrewで2年ほど前にPython3への移行で少しごたごたがありましたが、
2020年1月1日でPython2のサポートが終了したので
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
これを機にHomebrewでも
Python2を削除したようです。</p>

<p>もともと上のときから<code>python</code>というFormulaはPython 3をインストールするようになっていましたが、
今回<code>python@2</code>及び、そのエイリアスの<code>python2</code>が削除されました。</p>

<blockquote>
  <p><a href="https://github.com/Homebrew/homebrew-core/commit/028f11f9e40e4812a57e84fb670bbf2f30a60525">python@2: delete (#49796) · Homebrew/homebrew-core@028f11f</a></p>
</blockquote>

<p>削除されてももともと入れていた場合、<code>brew list</code>とかでpython@2とかが見れるし入ったままになっていると思いますが、
一旦削除すると再インストールはできない状態になります。</p>

<p>上のコミットメッセージに</p>

<pre><code>python@2: delete (#49796)

EOL 1 January 2020.
We gave it 1 month more to live so that people had time to migrate.
All in all, developers had 11 years to do their migration.

You can use the `brew extract` command and maintain python@2 in your own
tap if necessary:
https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap
</code></pre>

<p>とありますが、<code>brew extract</code>が上手くいかないので、もし今後どうしても
HomebrewでPython2をインストールしたい場合、</p>

<pre><code>$ brew install brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/86a44a0a552c673a05f11018459c9f5faae3becc/Formula/python@2.rb
</code></pre>

<p>の様に過去のFormulaを直接参照するような形にすれば入れることはできます。</p>

<blockquote>
  <p><a href="https://stackoverflow.com/questions/60298514/brew-reinstalling-python2">macos - Brew - reinstalling python@2 - Stack Overflow</a></p>
</blockquote>

<h2 id="python3">Python3</h2>

<p>Python3に関しては<code>python</code>というFormulaが担当してます。
Python2が削除されても<code>brew install python</code>で<strong>/usr/local/bin/python</strong>へリンクを作ることは今のところしないようで、
<code>python3</code>や<code>pip3</code>コマンドを使うように、としています。</p>

<p><code>python</code>や<code>pip</code>で3を呼びたいときは
<strong>/usr/local/opt/python/libexec/bin</strong>にリンクがあるので
ここへPATHを通せば<code>python</code>で<code>python3</code>が呼べるようにはなります。</p>

<p>site-packagesは<code>$(brew --prefix)/lib/pythonX.Y/site-packages</code>。</p>

<blockquote>
  <p><a href="https://docs.brew.sh/Homebrew-and-Python">Python — Homebrew Documentation</a></p>
</blockquote>

<p>現時点で<code>python</code>が入れるPythonは3.7.6です。</p>

<p>これとは別に<code>python@3.8</code>というフォーミュラが用意されていて、
<code>/usr/local/opt/python@3.8/bin/python3</code>にインストールされます。
site-packagesは<strong>/usr/local/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages</strong>。</p>

<h2 id="セットアップの更新">セットアップの更新</h2>

<p>とりあえずPython2についてどうしようか、と思いましたが、
削除してしまいました。</p>

<pre><code>$ brew rm python@2
</code></pre>

<p>まだ、macOSデフォルトの<strong>/usr/bin/python</strong>(2.7.16)は存在しています。</p>

<p>現状Shebangで</p>

<pre><code>#!/usr/bin/env python
</code></pre>

<p>と呼んでる物がまだ結構あって(Python3に対応しているものでも)、Python3への対応をどうしようか、と思ってるんですが、
とりあえず様子見として<strong>/usr/local/opt/python/libexec/bin</strong>へもPATHを通して
<code>python</code>でも<code>python3</code>を呼ぶようにして見ようと思います。</p>

<p>以下の様な設定を<strong>.bashrc</strong>とかに追加。</p>

<pre><code>_set_homebrew_path () {
  brew_prefix=$(command brew --prefix 2&gt;/dev/null)
  ret=$?
  if [ $ret -ne 0 ];then
    return
  fi
  export PATH="$brew_prefix/bin:$PATH"
  export PATH="$brew_prefix/sbin:$PATH"
  export LD_LIBRARY_PATH="$prefix/lib:$LD_LIBRARY_PATH"
  #...
  #...
  local python3=$("$brew_prefix/bin/python3" --version 2&gt;/dev/null)
  local ret=$?
  if [ $ret -eq 0 ];then
    export PATH="/usr/local/opt/python/libexec/bin:$PATH"
    python_version=$(echo "$python3"|cut -d' ' -f2|cut -d '.' -f 1,2)
    export PYTHONPATH="$brew_prefix/lib/python$python_version/site-packages"
  fi
  #...
  #...
}

_set_homebrew_path
</code></pre>

<h2 id="pythonスクリプトの更新">Pythonスクリプトの更新</h2>

<p>今後、各OSでPythonをどう扱っていくかわかりませんが、
Python2の代わりにPython3を標準的に入れてくようにはなると思います。</p>

<p>一部のOSとかで標準的にPython3を<strong>/usr/bin/python</strong>に入れるものもあるみたいですが、
一般的にはPython3は<code>python3</code>で呼ぶような状態で、
しばらくはそのままだと思います。</p>

<p>ただ、今更Python2用のコードを書いても仕方ないので、
これを機に使ってるスクリプトは基本的に</p>

<pre><code>#!/usr/bin/env python3
</code></pre>

<p>に置き換えて使える様に変更していかないとな、といったところ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonでlistからfor loopでremoveする際の注意]]></title>
    <link href="https://rcmdnk.com/blog/2020/01/14/computer-python/"/>
    <updated>2020-01-14T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/01/14/computer-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4906941060?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4906941060&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41cj3K0OawL._SS200_.jpg" alt="正確なフォルムコントロールのためのスライス徹底マスター (HAIR MODE URESTA!人気スタイリストへの近道シ)" /></a>
</div>

<p>Pythonでリストに対してfor文を回す場合、
そのfor文の中でリストを操作してしまうとバグを生む可能性が高い、という話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#pythonでlistからfor-loopでremoveする際の注意" id="markdown-toc-pythonでlistからfor-loopでremoveする際の注意">Pythonでlistからfor loopでremoveする際の注意</a></li>
  <li><a href="#リストのコピーに関して" id="markdown-toc-リストのコピーに関して">リストのコピーに関して</a></li>
  <li><a href="#関数の引数に関しても注意" id="markdown-toc-関数の引数に関しても注意">関数の引数に関しても注意</a></li>
  <li><a href="#単に削除したいだけのとき" id="markdown-toc-単に削除したいだけのとき">単に削除したいだけのとき</a></li>
  <li><a href="#homebrew-fileのバグ" id="markdown-toc-homebrew-fileのバグ">Homebrew-fileのバグ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="pythonでlistからfor-loopでremoveする際の注意">Pythonでlistからfor loopでremoveする際の注意</h2>

<p>Pythonでlistに対してfor文を回して条件によって削除したい、と思った場合、</p>

<pre><code>my_list = ['a', 'b', 'c', 'd', 'e']
for x in my_list:
    print(x)
    if x in ('c', 'd'):
        my_list.remove(x)
print(my_list)
</code></pre>

<p>とすると予期せぬことが起こります。</p>

<p>結果は</p>

<pre><code>a
b
c
e
['a', 'b', 'd', 'e']
</code></pre>

<p>となり、<code>d</code>が抜けてません。途中で<code>print</code>してるところでも出てないので
<code>d</code>がskipされています。</p>

<p>これはfor文が、<code>my_list</code>の中身を順番に見ていく、のではなく、
中でカウンタを利用し、そのカウンタを1回ずつ上げながら
<code>my_list</code>というリストからそのカウンタの数に対応する順番のものを抜き出す、という作業をしているからです。</p>

<p>つまり、<code>d</code>は元々<code>my_list[3]</code>の位置にあるわけですが、
<code>c</code>(この時点で<code>my_list[2]</code>のもの)のときにループが終わる前に
<code>my_list</code>から<code>c</code>を<code>remove</code>しているので、
この時点で<code>d</code>は繰り上がって<code>my_list[2]</code>の位置になります。</p>

<p>一方で、カウンタは<code>c</code>の時点で<code>2</code>、ループ終了時に<code>3</code>に移るので、
次に見るのは<code>my_list[3]</code>、でこの時点で<code>my_list[3]</code>は<code>e</code>に変わっています。</p>

<p>これは<code>remove</code>だけでなく、<code>insert</code>とかで途中に追加した場合でも同じです。</p>

<p>いずれにしろfor文とかで回すとき、回しているリストをfor文のなかで操作するのは
バグになるので辞めた方が良いです。</p>

<blockquote>
  <p><a href="https://docs.python.org/ja/3/reference/compound_stmts.html#the-for-statement">8. 複合文 (compound statement) — Python 3.8.1 ドキュメント</a></p>
</blockquote>

<p>公式ドキュメントにも注記があって、この様な事をしたい場合には</p>

<pre><code>my_list = ['a', 'b', 'c', 'd', 'e']
for x in my_list[:]:
    print(x)
    if x in ('c', 'd'):
        my_list.remove(x)
print(my_list)
</code></pre>

<p>とすべき、とのこと。これだと</p>

<pre><code>a
b
c
d
e
['a', 'b', 'e']
</code></pre>

<p>とちゃんと予期したとおりになります。</p>

<h2 id="リストのコピーに関して">リストのコピーに関して</h2>

<p>違いはfor文で回すリストを<code>my_list</code>から<code>my_list[:]</code>に変えてるだけですが、
これによって、新しいリストを作成して、その上でfor文を回しているので、
<code>my_list</code>への操作はループに対しては影響せず、
きちんと<code>d</code>も含めて全部に対して処理が出来ている、ということです。</p>

<p>ちょっと注意が必要なのは単に</p>

<pre><code>my_list_copy = my_list
for x in my_list_copy:
    ...
</code></pre>

<p>みたいなことをしても最初と同じ問題が起こります。</p>

<p>基本的にPythonでは参照渡しが行われるので
<code>=</code>で渡した場合には同じオブジェクトを見るようになるだけです。</p>

<p>なので上の場合だと<code>my_list</code>を変更すると<code>my_list_copy</code>も変更される状態になっています。</p>

<p><code>my_list[&lt;start&gt;:&lt;end&gt;]</code>はスライスと呼ばれるもので、
<code>start</code>の位置から<code>end</code>の前までを切り出す、というものです。</p>

<p><code>end</code>の方はその位置まで、ではなく、その前まで、なのでちょっと注意。
指定しないとそれぞれ最初と最後を指定したことになります。</p>

<pre><code>&gt;&gt;&gt; my_list = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; my_list[1:3]
['b', 'c']
&gt;&gt;&gt; my_list[2:]
['c', 'd', 'e']
&gt;&gt;&gt; my_list[:2]
['a', 'b']
&gt;&gt;&gt; my_list[:]
['a', 'b', 'c', 'd', 'e']
</code></pre>

<p>で、<code>[:]</code>だとそのまま同じものを返すわけですが、これは違うオブジェクトになっています。</p>

<pre><code>&gt;&gt;&gt; my_list = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; my_list_copy = my_list
&gt;&gt;&gt; my_list_slice = my_list[:]
&gt;&gt;&gt; id(my_list)
4434973232
&gt;&gt;&gt; id(my_list_copy)
4434973232
&gt;&gt;&gt; id(my_list_slice)
4434935472
&gt;&gt;&gt; my_list == my_list_copy
True
&gt;&gt;&gt; my_list is my_list_copy
True
&gt;&gt;&gt; my_list == my_list_slice
True
&gt;&gt;&gt; my_list is my_list_slice
False
</code></pre>

<p>な感じで単なる<code>=</code>は同じidを持っていて、全く同じであることがわかります。
一方、スライスで渡したものは別のidを持っています。</p>

<p>中身は一緒なので、<code>==</code>でチェックすると<code>True</code>を返しますが、
<code>is</code>でチェックすると違うオブジェクトなので<code>False</code>を返します。</p>

<h2 id="関数の引数に関しても注意">関数の引数に関しても注意</h2>

<p>この辺はfor文だけではなく、関数の引数として渡す場合にも
予期せぬことが起こり得るので注意が必要です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00P2EG5QM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00P2EG5QM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/517aCE1URqL._SS90_CR0,0,120,90_.jpg" alt="パーフェクトPython" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/07/08/computer-python/">Pythonでの引数の取り扱いの罠等</a></div></li></ul>

<h2 id="単に削除したいだけのとき">単に削除したいだけのとき</h2>

<p>上の作業ではfor文を回して削除しているだけですが、想定としては
これ以外にも色々と<code>x</code>を使って作業することを想定しています。</p>

<p>もし、単に削除したいだけなら</p>

<pre><code>my_list = [x for x in my_list if x not in ('c', 'd')]
</code></pre>

<p>の様な内包表記を使ったほうがちゃんと思ったとおりになり
見た目的にもすっきりするので
良いかと思います。</p>

<h2 id="homebrew-fileのバグ">Homebrew-fileのバグ</h2>

<p>今回これを書いたのは自分でやらかしてたからです。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/homebrew-file/issues/87">Brewfile gets reordered making it difficult to see what changed · Issue #87 · rcmdnk/homebrew-file</a></p>
</blockquote>

<p>すいません、バグですがbrew-fileを使っていた場合、
<code>cask</code>のリストが一つ新しいものを追加しただけで大幅に変更されたりしていたと思います。</p>

<p>中身自体は全てBrewfileに書き出されるのでBrewfileそのものを見たりしない限り問題はないのですが、
Gitで管理したりしていると意味がわからない変更が何度も入ってたりするかもしれません。</p>

<p>これは上のfor文ループのバグで、本来書かれるべき場所とは別の場所に書き出されてしまっていたからです。</p>

<p>履歴を見てみると、すぐ上に<code>brew</code>のパッケージに関してはちゃんと<code>[:]</code>を使うようになっていて、
この辺2016年に書いてました。
その際に<code>cask</code>の方は見てなかったのでずーっとこの状態が続いていたようです。</p>

<p>自分でもBrewfileに関しては中身を直接弄ったり見たりすることはほとんどないので
気づいてませんでした。</p>

<p>まあ、brew-fileは思想的に、自分でBrewfileの中身を気にしないでも
勝手にアップデートされて勝手に管理される、ということを目指して作ったものなので。</p>

<p>とはいえ、バグはバグなので直しました。</p>

<p>実はもう一つ、引数の処理のところでも同じ様なことをしていて、
こちらは結構クリティカルで、複数の引数を渡した場合、正しく動作してなかった場合があったと思います。</p>

<p>それほど複数の引数を渡したり複雑なことをするものではないのですが、
確かになにか変だな、と思うところはあって、でも普段支障がないのでちゃんと見てませんでしたが、
違和感の原因はこれ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonで長い行を書くとき、は改行は演算子の前にすべし]]></title>
    <link href="https://rcmdnk.com/blog/2019/11/04/computer-python/"/>
    <updated>2019-11-04T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/11/04/computer-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4773089105?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4773089105&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51MXIgQ9WZL._SS200_.jpg" alt="少しかしこくなれる数式の話" /></a>
</div>

<p>Pythonで長い行を改行して書きたいとき、式などで<code>+</code>や<code>and</code>などの演算子が混じってるときは
その前後で改行することが多いと思いますが、
その際に改行を演算子の前にするのか、後にするのか、は迷うところです。</p>

<p>これに関してPythonのコーディング規約であるPEP 8では改行は演算子の前にすることを推奨しています。
ただ、実はこれは2016年頃に変わったもので、それ以前は逆に改行は演算子の後にすることが推奨されていました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#pep-8による改行を演算子の前後どちらでするかの定義" id="markdown-toc-pep-8による改行を演算子の前後どちらでするかの定義">PEP 8による改行を演算子の前後どちらでするか、の定義</a></li>
  <li><a href="#flake8での定義" id="markdown-toc-flake8での定義">Flake8での定義</a></li>
  <li><a href="#blackでの定義" id="markdown-toc-blackでの定義">blackでの定義</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="pep-8による改行を演算子の前後どちらでするかの定義">PEP 8による改行を演算子の前後どちらでするか、の定義</h2>

<p>演算子の後で改行をする、というのは以下の様なケース。</p>

<pre><code>abc = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +
       bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +
       ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) *\
    ddd
</code></pre>

<p>これだと<code>+</code>の後で改行が行われています。
一方、</p>

<pre><code>abc = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
       + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
       + ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc)\
    * ddd
</code></pre>

<p>だと改行後、演算子から新しい行が始まっています。</p>

<p>これに関して以下に記述があります。</p>

<blockquote>
  <p><a href="https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator">Should a Line Break Before or After a Binary Operator?</a></p>
</blockquote>

<blockquote>
  <p><a href="https://pep8-ja.readthedocs.io/ja/latest/">はじめに — pep8-ja 1.0 ドキュメント</a></p>
</blockquote>

<p>演算子が行の最後に来ることで、演算子の場所がバラバラになることと、
その演算子がかかる項目(次に来る変数/数字)との距離が離れてパット見わかりにくくなる、
という弊害がある、とのこと。</p>

<p>一方数学論文などでは文章中の数式であれば演算子の後に改行するが
別行立て(LaTexでいうディスプレイ数式の様な)の場合には改行の後に数式を置くようにしている、ということで
これに従ったほうが良いだろう、となったようです。</p>

<p>上のケースを見てみると、確かに下の方が<code>+</code>に位置が揃っていて見やすい感じがするし、
最後の<code>* ddd</code>も<code>ddd</code>は全体への掛け算で使われるのだな、ということがすぐにわかります。</p>

<p>もちろん場合によっては上の方が良いやすい場合もあります。
例えば上の例でもカッコ内が全て足されるだけ、とわかっているなら最初の項だけ特別扱いする様な下の書き方より
上の方が統一的、ともいえます。</p>

<p>とはいえ、こういった書き方を良くする数学の論文では下の様な書き方を採用しているのだから
おそらく多くの場合は下の方が見やすいのでしょう、ということだと思います。</p>

<h2 id="flake8での定義">Flake8での定義</h2>

<p>Pythonのリントツールである<a href="https://github.com/PyCQA/flake8">Flake8</a>では
以下の様な2つのWarningの定義があります。</p>

<blockquote>
  <p><a href="https://lintlyci.github.io/Flake8Rules/rules/W503.html">Line break occurred before a binary operator (W503)</a></p>
</blockquote>

<blockquote>
  <p><a href="https://lintlyci.github.io/Flake8Rules/rules/W504.html">Line break occurred after a binary operator (W504)</a></p>
</blockquote>

<p>W503は改行が演算子の前に来ていることを注意するもの、
W504は改行が演算子の後に来ていることを注意するもの。</p>

<p>つまりこれらは矛盾していて、両方を満たすためには演算子の前後で改行をしない様にしなくてはいけません。</p>

<p>Flake8では決してそういった改行両方するな、ということを推奨しているわけではなく、
もともとW503があったところに
途中(2016年)からPEP 8の定義が変わったため逆を注意するW504を作ったという感じです。</p>

<p>とはいってもFlake8の履歴を見る限り、W504の方に対応したのは2018年頃で、
この頃から両方をチェックしてどうしたってwarningになって困る、
みたいな議論はあったみたいです。</p>

<blockquote>
  <p><a href="https://github.com/LintlyCI/Flake8Rules/commits/master/_rules/W503.md">W503.md: History for _rules/W503.md - LintlyCI/Flake8Rules</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/LintlyCI/Flake8Rules/commits/master/_rules/W504.md">W504.md: History for _rules/W504.md - LintlyCI/Flake8Rules</a></p>
</blockquote>

<p>現状ではどちらかをデフォルトでなくす、ということはせず、必要な方をignoreする、という方針にしています。</p>

<p>現在のPEP 8に従うのであれば、</p>

<pre><code>$ flake8 gfm.py  --ignore=W503
</code></pre>

<p>として<code>W503</code>を無視します。</p>

<p>もしくは<strong>~/.config/flake8</strong>に</p>

<pre><code>[flake8]
ignore=W503
</code></pre>

<p>と書いて設定しておきます。これでW503の方が無視されるようになります。</p>

<h2 id="blackでの定義">blackでの定義</h2>

<p>最近話題?のフォーマッターである<a href="https://github.com/psf/black">black</a>では
改行後に演算子を置くようにフォーマットされる様になっています。に</p>

<p>上の</p>

<pre><code>abc = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +
       bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +
       ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc) *\
    ddd
</code></pre>

<p>をblackにかければ</p>

<pre><code>abc = (
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    + ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
) * ddd
</code></pre>

<p>の様に変わります。</p>

<h2 id="まとめ">まとめ</h2>

<p>Pythonでの演算子と改行の位置、についての話でしたが、
基本的には他の言語でも同じことが言えます。</p>

<p>確かに式として本や論文に載っているとき、複数行に渡る時には
演算子が前側で揃っていることがほとんどでそれの方が見やすいと思います。</p>

<p>なのでPythonでも他の言語でもその方が見やすいことが多いはずです。</p>

<p>なんとなく長年適当にいつもどっちかな、と毎回思いながらやっていた部分ですが
今後は気をつけて行きたいところです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubで公開されてるipynbファイルをGoogle Colaboratoryで開くブックマークレット]]></title>
    <link href="https://rcmdnk.com/blog/2019/05/24/computer-github-python/"/>
    <updated>2019-05-24T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/05/24/computer-github-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4839965250?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4839965250&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51qa-jgfYTL._SS200_.jpg" alt="東京大学のデータサイエンティスト育成講座 ~Pythonで手を動かして学ぶデ―タ分析~" /></a>
</div>

<p>GitHubで公開されているJupyter Notebookのファイルは
ファイルのURLをちょっと変えるだけで直接Google Colaboratoryで開くことができます。</p>

<p>そのちょっと変えることをやるブックマークレットを用意しました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#bookmarklet-for-github-to-colaboratory" id="markdown-toc-bookmarklet-for-github-to-colaboratory">Bookmarklet for GitHub to Colaboratory</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="bookmarklet-for-github-to-colaboratory">Bookmarklet for GitHub to Colaboratory</h2>

<p>以下のリンクをブラウザのブックマークツールバーなどに持っていって
ブックマークレット化してください。</p>

<blockquote>
  <p><a href="javascript:void(location.href.match(/github\.com/)&amp;&amp;(location.href=location.href.replace(&quot;github.com&quot;,&quot;colab.research.google.com/github&quot;)))">GitHub to Colaboratory</a></p>
</blockquote>

<p>それで例えば最近公開された
東京大学の松尾研究室のDL4USのノート</p>

<blockquote>
  <p><a href="https://github.com/matsuolab-edu/dl4us/blob/master/lesson0/lesson0_exercise.ipynb">https://github.com/matsuolab-edu/dl4us/blob/master/lesson0/lesson0_exercise.ipynb</a></p>
</blockquote>

<p>をブラウザで開き、その上で上のブックマークレットを実行すると</p>

<blockquote>
  <p><a href="https://colab.research.google.com/github/matsuolab-edu/dl4us/blob/master/lesson0/lesson0_exercise.ipynb">https://colab.research.google.com/github/matsuolab-edu/dl4us/blob/master/lesson0/lesson0_exercise.ipynb</a></p>
</blockquote>

<p>とうURLに飛んでColaboratoryで開かれます。</p>

<p>やってることは単に</p>

<figure class="code"><figcaption><span>GitHub to Colaboratory </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/github\.com/</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;github.com&quot;</span><span class="p">,</span><span class="s2">&quot;colab.research.google.com/github&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>とURLの先頭を変更してるだけです。</p>

<blockquote>
  <p><a href="https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb#scrollTo=wKJ4bd5rt1wy">colab-github-demo.ipynb - Colaboratory</a></p>
</blockquote>

<p><strong>Open in Colab</strong>というバッジもあるみたいなので、
自分でJupyter NotebookのファイルをGitHubに公開するときに
はこのバッジを使ってリンクを貼っておくといいかもですね。</p>

<p>上のURLも</p>

<p><a href="https://colab.research.google.com/github/matsuolab-edu/dl4us/blob/master/lesson0/lesson0_exercise.ipynb"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab" /></a></p>

<p>のようにできます。</p>

<p>最近は確認してないですが、FirefoxなどではGitHub上でブックマークレットが動作しない場合があるので
以下の様なことをチェックしてみてください。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00JVWP8D2?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00JVWP8D2&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/313Dvba7Q6L._SS90_CR0,0,120,90_.jpg" alt="[コスモカウ]CosmoCow ファッション スタイル ピンクゴールドメッキ火狐面 指輪 長さ調整可能 JE5051 [インポート]" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/07/26/computer-firefox/">FirefoxでGitHub等のページでブックマークレットを有効にする</a></div></li></ul>
]]></content>
  </entry>
  
</feed>
