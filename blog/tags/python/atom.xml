<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Python | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/python/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2022-03-07T00:51:01+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Read the Docsでビルドが失敗している件]]></title>
    <link href="https://rcmdnk.com/blog/2021/11/03/computer-github-python/"/>
    <updated>2021-11-03T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/11/03/computer-github-python</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rcmdnk/homebrew-file">homebrew-file</a>
などのドキュメントを
<a href="https://readthedocs.org/">Read the Docs</a>
というサービスを使って公開しているのですが、
そこでドキュメントのビルドが1週間ほど前から失敗するようになっていたので
それを直した話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#read-the-docs" id="markdown-toc-read-the-docs">Read the Docs</a></li>
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
  <li><a href="#read-the-docsの環境設定" id="markdown-toc-read-the-docsの環境設定">Read the Docsの環境設定</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="read-the-docs">Read the Docs</h2>

<p><a href="https://readthedocs.org/">Read the Docs</a>
はSphinxというPython製のドキュメントビルダーを使って
ドキュメントを作成してWebに公開してくれるサービスです。</p>

<p>GitHubと連携して、GitHubと連携して、GitHubのレポジトリにドキュメントのソースファイルを入れておくと、
push時に自動的にレポジトリを取得してドキュメントをビルドして公開してくれます。</p>

<p>もともとSphinxはPythonのドキュメンテーション用に作られたもので
また、Read the Docsも
サービスがDjangoで作られたりしていて、
PythonのモジュールのドキュメントとかがよくSphinxでビルドしたものがあって、
Read the Docsで公開されているものも多くあります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/05/01/computer-brew-file-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160501_readthedocs_120_90.jpg" width="120" height="90" alt="20160501_readthedocs_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/05/01/computer-brew-file-github/">Read the Docs(Sphinx)でオープンソースのドキュメントをいい感じに書いてみる</a></div></li></ul>

<p>SphixはreStructuredTextというマークアップを利用しますが、
Markdownのビルドにも一応対応しています。</p>

<p>GitHubで公開したツールとかに対して、GitHubのReadmeとは一味違った
形でドキュメントを付けるにはお手軽で良い感じに出来るかと思います。</p>

<p>基本的には無料で、表示される広告を消したい場合などは有料で消すこともできます。</p>

<h2 id="起こった問題">起こった問題</h2>

<p>んな感じのエラーを出していました:</p>

<pre><code>Running Sphinx v1.8.5
loading translations [en]... done
making output directory...
building [mo]: targets for 0 po files that are out of date
building [html]: targets for 10 source files that are out of date
updating environment: 10 added, 0 changed, 0 removed
reading sources... [ 10%] brew-wrap
reading sources... [ 20%] completion

Traceback (most recent call last):
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/cmd/build.py", line 304, in build_main
    app.build(args.force_all, filenames)
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/application.py", line 341, in build
    self.builder.build_update()
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/builders/__init__.py", line 347, in build_update
    len(to_build))
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/builders/__init__.py", line 360, in build
    updated_docnames = set(self.read())
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/builders/__init__.py", line 468, in read
    self._read_serial(docnames)
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/builders/__init__.py", line 490, in _read_serial
    self.read_doc(docname)
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/builders/__init__.py", line 534, in read_doc
    doctree = read_doc(self.app, self.env, self.env.doc2path(docname))
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/io.py", line 318, in read_doc
    pub.publish()
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/docutils/core.py", line 219, in publish
    self.apply_transforms()
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/docutils/core.py", line 200, in apply_transforms
    self.document.transformer.apply_transforms()
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/transforms/__init__.py", line 90, in apply_transforms
    Transformer.apply_transforms(self)
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/docutils/transforms/__init__.py", line 171, in apply_transforms
    transform.apply(**kwargs)
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/transforms/__init__.py", line 245, in apply
    apply_source_workaround(n)
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/util/nodes.py", line 94, in apply_source_workaround
    for classifier in reversed(node.parent.traverse(nodes.classifier)):
TypeError: 'generator' object is not reversible

Exception occurred:
  File "/home/docs/checkouts/readthedocs.org/user_builds/homebrew-file/envs/stable/lib/python3.7/site-packages/sphinx/util/nodes.py", line 94, in apply_source_workaround
    for classifier in reversed(node.parent.traverse(nodes.classifier)):
TypeError: 'generator' object is not reversible
The full traceback has been saved in /tmp/sphinx-err-fwowl5pk.log, if you want to report the issue to the developers.
Please also report this if it was a user error, so that a better error message can be provided next time.
A bug report can be filed in the tracker at &lt;https://github.com/sphinx-doc/sphinx/issues&gt;. Thanks!
</code></pre>

<p>ドキュメントのソースがおかしいのかな、と思って手元でビルドしてみると特に問題は出ず。</p>

<p>で、ちょっと調べて見ると、どうやら
<a href="https://pypi.org/project/docutils/">docutils</a>
というモジュールの0.18というバージョンが出て、
Sphinxがその変更に対応できていない、とのこと。</p>

<blockquote>
  <p><a href="https://github.com/ivadomed/ivadomed/issues/973">“TypeError: ‘generator’ object is not reversible” during RTD builds · Issue #973 · ivadomed/ivadomed</a></p>
</blockquote>

<p>2021年10月26日にdocutilsの0.18がリリースされてるのでそのあたりから問題が出ていたようです。</p>

<p>一方でSphinx最新の4.2ではdocutilsへの依存性を&lt;0.18以下というrequirementsにすることで
一旦回避しています。</p>

<blockquote>
  <p><a href="https://github.com/sphinx-doc/sphinx/issues/9777">Update Sphinx to work with docutils-0.18.x · Issue #9777 · sphinx-doc/sphinx</a></p>
</blockquote>

<p>なので手元でSphinxを(<code>pip install sphinx</code>で)入れて試したときは問題なかったようです。</p>

<p>ただ、Read the Docsではsphinxのバージョンを&lt;2で要求していて、
これだとdocutils&gt;=0.11で要求しているので最新の物が入り問題が起きていた模様。</p>

<p>したがってとりあえずはビルド環境でdocutils-0.18より前のバージョンを使う
かsphinxの新しいバージョンを入れるようにすれば問題が解決できそうです。</p>

<p>Read the Docsの設定もsphinx-4.2.0を入れる様に変更された(される?)みたいですが、
現状ではまだ実際に実行するとsphinx&lt;2のバージョンで実行されています。</p>

<blockquote>
  <p><a href="https://github.com/readthedocs/readthedocs.org/blob/master/requirements/pip.txt#L15">readthedocs.org/pip.txt at master · readthedocs/readthedocs.org</a></p>
</blockquote>

<h2 id="read-the-docsの環境設定">Read the Docsの環境設定</h2>

<p>Read the Docsに関してはレポジトリを連携するだけで特に細かい設定をしてませんでしたが、
GitHubのレポジトリに設定ファイルを置くことでビルド環境を設定することができます。</p>

<blockquote>
  <p><a href="https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html">Reproducible Builds — Read the Docs 6.1.1 documentation</a></p>
</blockquote>

<p>まずは以下の様な<strong>.readthedocs.yaml</strong>というファイルをレポジトリのトップディレクトリに用意します。</p>

<figure class="code"><figcaption><span>.readthedocs.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="nt">version</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">2</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Build from the docs/ directory with Sphinx</span>
</span><span class="line"><span class="nt">sphinx</span><span class="p">:</span>
</span><span class="line">  <span class="nt">configuration</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">docs/conf.py</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Explicitly set the version of Python and its requirements</span>
</span><span class="line"><span class="nt">python</span><span class="p">:</span>
</span><span class="line">  <span class="nt">version</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">3.7</span>
</span><span class="line">  <span class="nt">install</span><span class="p">:</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="nt">requirements</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">docs/requirements.txt</span>
</span></code></pre></td></tr></table></div></figure>

<p>Pythonのバージョンは現状では3.9はまだ使えないようです。
3.7にしてあるのはドキュメントとかでそうなっていたから、というだけで
3.8は使おうと思えば使えます。</p>

<p><strong>docs/conf.py</strong>はsphinxで<code>sphinx-quickstart</code>とかで初期化していれば
最初にできているかと思います。</p>

<p>この指定はデフォルトでこの値なので書かなくても同じです。</p>

<p>一方でPythonの設定は、Pythonのバージョンはデフォルトで3.7ですが、
インストールに関しては指定しないとRead the Docsのデフォルトのパッケージを取得するだけで、
<strong>docs/requirements.txt</strong>があったとしてもその中身は読まれません。</p>

<p>上のドキュメントにもありますが、<strong>requirements.txt</strong>を使って
モジュールのバージョン指定などをきちんといておきなさい、と。</p>

<p>というわけで、以下を用意します。</p>

<figure class="code"><figcaption><span>docs/requirements.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>sphinx&gt;<span class="o">=</span><span class="m">4</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでsphinx-4以上のものが入ります。</p>

<p>もしくは、</p>

<figure class="code"><figcaption><span>docs/requirements.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>docutils&lt;<span class="m">0</span>.18
</span></code></pre></td></tr></table></div></figure>

<p>でもOK。せっかくだからSphinxの新しいものを使おうかと、上の方を使います。</p>

<p>これらを<code>add</code>して<code>commit</code>して<code>push</code>すればOK。</p>

<p><strong>requirements.txt</strong>を使うようにすると、ビルドのところで、
下の絵の様に7番目のタスクとして<strong>requirements.txt</strong>を使ったインストールが追加されます。</p>

<p><img src="https://rcmdnk.com/images/post/20211103_readthedocs.jpg" alt="20211103_readthedocs.jpg" class="pic" /></p>

<p>その上の部分でRead the Docsデフォルトのパッケージが追加されていますが、そこを見ると</p>

<pre><code>Collecting sphinx&lt;2
  Downloading Sphinx-1.8.5-py2.py3-none-any.whl (3.1 MB)
...
Collecting docutils&gt;=0.11
  Downloading docutils-0.18-py2.py3-none-any.whl (569 kB)
</code></pre>

<p>みたいな感じでsphinxのバージョン2未満と、docutilsの最新の0.18が入れられてる事がわかります。</p>

<p>これらを上書きする形で次のタスクで必要なものが入っていればビルドが成功します。</p>

<p>Read the Docsの対応などを見る感じ、何もしなくてもそのうち
ビルドがうまく行くようにもなるとは思いますが、
もし現在ビルドの失敗が気になるようならこれで直すことができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pythonでのos.path.expandvarsは定義されてない変数はそのまま返してくる]]></title>
    <link href="https://rcmdnk.com/blog/2020/11/30/computer-python/"/>
    <updated>2020-11-30T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/11/30/computer-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4295003379?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4295003379&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61qCGR2QqGL._SS200_.jpg" alt="[第2版]Python 機械学習プログラミング 達人データサイエンティストによる理論と実践 (impress top gear)" /></a>
</div>

<p>Pythonでシェルで設定されている環境変数を返してくれる関数いろいろありますが、
そのうち<code>os.path.expandvars</code>は定義されてない変数は
シェルスクリプトのように空文字にするのではなく、その文字列まま
返すという仕様だったという話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#pythonで環境変数を取得する" id="markdown-toc-pythonで環境変数を取得する">Pythonで環境変数を取得する</a></li>
  <li><a href="#未定義変数に対して空文字を返す" id="markdown-toc-未定義変数に対して空文字を返す">未定義変数に対して空文字を返す</a></li>
  <li><a href="#その他諸々を考慮したもの" id="markdown-toc-その他諸々を考慮したもの">その他諸々を考慮したもの</a></li>
  <li><a href="#おまけ" id="markdown-toc-おまけ">おまけ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="pythonで環境変数を取得する">Pythonで環境変数を取得する</h2>

<p>Pythonで環境変数を取得するには、一番シンプルには</p>

<pre><code>os.environ.get('SHELL')
</code></pre>

<p>の様にします。これにより、<code>$SHELL</code>で設定されている環境変数が取得できます。</p>

<p>もし設定されていない場は空文字ではなく、<code>None</code>が返されます。</p>

<p>ただし、この関数は第2引数に変数が設定されてない場合に返すものを指定することができ、</p>

<pre><code>os.environ.get('SHELL', '')
</code></pre>

<p>の様にすれば<code>SHELL</code>が設定されてないときには空文字が返されます。</p>

<p>もう一つ、<code>os.path.expandvars</code>という関数があり、
これを使うと<code>$XXX</code>や<code>${XXX}</code>といったシェルの変数的な文字列を変換してくれます。</p>

<p><code>path</code>の関数ですが、<code>/</code>を含むパス形式ではない通常の文字列でも
その中に<code>$XXX</code>や<code>${XXX}</code>が含まれていれば展開してくれます。
(区切りは通常のシェルスクリプトのように空白や<code>/</code>、<code>.</code>など。もちろん<code>{}</code>で囲めばその中のみ使う。)</p>

<pre><code>os.path.expandvars('$SHELL')
</code></pre>

<p>とすると上の場合と一緒になります。
<code>expandvars</code>の場合は他の文字列と組み合わせて、</p>

<pre><code>os.path.expandvars('$HOME/mydir')
</code></pre>

<p>のようにすることもでき、この場合は<code>$HOME</code>だけが変換され、
<code>/home/user/mydir</code>の様な感じの文字列を返します。</p>

<p>これが、シェルスクリプト的な考えで行くと、<code>$HOME</code>が設定されていない場合、</p>

<pre><code>/mydir
</code></pre>

<p>が返されるような気がしますが、実際には</p>

<pre><code>$HOME/mydir
</code></pre>

<p>という文字列をそのまま返します。</p>

<blockquote><p>不正な変数名や存在しない変数名の場合には変換されず、そのまま返します。</p><footer><strong>os.path --- 共通のパス名操作 — Python 3.9.1rc1 ドキュメント</strong> <cite><a href="https://docs.python.org/ja/3/library/os.path.html">docs.python.org/ja/3/library/&hellip;</a></cite></footer></blockquote>

<p>Pythonでも他の言語でも、ほとんど場合は設定されてない変数があればエラーが出るわけで、
この様に指定されてない可能性のある変数、を許しながら、むしろ使いながら扱うのは
シェルスクリプト特有の話なのでPythonの中で扱う際にはそういうユースケースは無しにする、
というのが一番かもしれません。</p>

<p>ただ、そうはいってもこんな感じで展開する以上、やはり
シェルスクリプト的な感じで定義されてないものは空文字を返す、というのが欲しいところ。</p>

<h2 id="未定義変数に対して空文字を返す">未定義変数に対して空文字を返す</h2>

<p>そんな関数がデフォルトで別にちゃんと定義されてるかな、と思ったんですが
現状はない模様。</p>

<p>なので、以下にあるように正規表現を使って
<code>$XXX</code>などを見つけて、<code>os.environ.get</code>で変数を探し、
未定義は空文字を返すようにして置き換える、というもの。</p>

<blockquote>
  <p><a href="https://stackoverflow.com/questions/30734967/how-to-expand-environment-variables-in-python-as-bash-does">How to expand environment variables in python as bash does? - Stack Overflow</a></p>
</blockquote>

<p>上を参考に、一番シンプルにやるには以下の様な関数を定義してやれば良いと思います。</p>

<figure class="code"><figcaption><span>expandpath.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span></span><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">expandpath</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(?&lt;!</span><span class="se">\\</span><span class="s1">)\$(\w+|\{([^}]*)\})&#39;</span><span class="p">,</span>
</span><span class="line">                  <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="ow">or</span> <span class="n">x</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class="line">                  <span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>まず、正規表現による検索で、<code>$XXX</code>、もしくは<code>${XXX}</code>となってるものを探しています。</p>

<p><code>\$(\w+|\{([^}]*)\})</code>で変数部を抜き出します。</p>

<p>最初の<code>(?&lt;!\\)</code>は変数の前がバックスラッシュで無いこと(<code>$</code>がエスケープされてないこと)を要請しています。</p>

<p>この正規表現で各<code>$XXX</code>や<code>${XXX}</code>の部分が該当して抜き出されますが、
<code>re.sub</code>の第2引数ではこれらを変更する先の値を入れます。</p>

<p>関数も入れることが出来るのでここではlambda式を入れていますが、
この引数となるのは上でマッチした文字列そのものではなく、Matchオブジェクトです。</p>

<p>そもそも今回の例では<code>()</code>が入れ子になってるので2つ抜き出される可能性があるわけですが。</p>

<p><code>$XXX</code>なら<code>XXX</code>、<code>${XXX}</code>なら<code>{XXX}</code>と<code>XXX</code>が抜き出されています。</p>

<p>これらは<code>Match.group(1)</code>、<code>Match.group(2)</code>で取れますが、
<code>$XXX</code>の様な場合には中のカッコ内に該当が無いので2つ目が<code>None</code>になります。</p>

<p>なので、</p>
<ul>
  <li>‘$XXX’ -&gt; (‘XXX’, None)</li>
  <li>’${XXX}’ -&gt; (‘{XXX}’, ‘XXX’)</li>
</ul>

<p>となってるため、<code>os.environ.get</code>の引数に</p>

<pre><code>x.group(2) or x.group(1)
</code></pre>

<p>を入れることで、必ず<code>XXX</code>になるようにしています。
(<code>None</code>の場合には<code>or</code>を通して<code>x.group(1)</code>の<code>XXX</code>まで行くため。)</p>

<p><code>os.environ.get</code>の第2引数で空文字を入れることでもし定義されてなければ消すだけに。</p>

<p><code>re.sub</code>で変換したあと、最後に<code>.replace('\\$', '$')</code>
をしてますが、これは
シェルスクリプトで</p>

<pre><code>$ echo "hoge\$hoge"
hoge$hoge
</code></pre>

<p>の様にエスケープが外れるのと同じ動作にしてあります。</p>

<p>まあこの辺気にするなら他のバックスラッシュも全部消すべきか?などともなるのですが、
今回は変数周りの動作ということでここまでで。</p>

<p>これで<code>os.path.expandvars</code>に比べてよりシェルスクリプト的な
変数展開が出来る関数ができました。</p>

<h2 id="その他諸々を考慮したもの">その他諸々を考慮したもの</h2>

<p>上の関数で環境変数は埋め込みますが、パスを考えたとき、<code>$HOME</code>を示す<code>~</code>を使う可能性があります。
これは上の関数では変更されず、<code>os.path.expanduser</code>を使う必要があります。</p>

<p>もう一つ、よく使う変数で<code>$HOSTNAME</code>というものがあると思います。
ただ実はこれ環境変数ではなく、シェル変数です。</p>

<pre><code>$ env|grep HOSTNAME
</code></pre>

<p>としても何も出ません(少なくともmacOSやUbuntu上のBashでは)。</p>

<p>なのでサブプロセスとして立ち上がるPythonには変数が渡されず、使うことができません。
<code>export HOSTNAME</code>としたり、<code>HOSTNAME=$HOSTNAME test.py</code>みたいにすれば使うこともできますが。</p>

<p>ただ、これ使いたい変数だったときがあって、そのため、</p>

<pre><code>import os

hostname = os.uname()[1]
path.replace('$HOSTNAME', hostname).replace('$HOSTNAME', hostname)
</code></pre>

<p>みたいな感じで<code>$HOSTNAME</code>と同じ値を持つ<code>os.uname()</code>の2つ目の項目を取ってきて無理やり変換しました。</p>

<p>これらをまとめて</p>

<figure class="code"><figcaption><span>expandpath.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span></span><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">expandpath</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(?&lt;!</span><span class="se">\\</span><span class="s1">)\$(\w+|\{([^}]*)\})&#39;</span><span class="p">,</span>
</span><span class="line">                  <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="ow">or</span> <span class="n">x</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class="line">                  <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;$HOSTNAME&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">uname</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">                  <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;$</span><span class="si">{HOSTNAME}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">uname</span><span class="p">()[</span><span class="mi">1</span><span class="p">]))</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいなものを作ると<code>$HOSTNAME</code>や<code>~</code>も使えるパス展開関数ができます。</p>

<h2 id="おまけ">おまけ</h2>

<p>上で<code>HOSTNAME</code>が環境変数でない、といってますが、同じ様にシステムの値を示す、
<code>HOSTTYPE</code>、<code>OSTYPE</code>、<code>MACHTYPE</code>なども環境変数になっておらず<code>os.environ.get</code>で取れません。</p>

<p><code>HOSTTYPE</code>に関してはUbuntuだと環境変数になっていましたが、macOSだとなってませんでした。</p>

<p>特に<code>OSTYPE</code>はmacOSやLinuxを区別するのに便利なので使えれば、と思うのですが。
<code>$OSTYPE</code>はmacOSだと<code>darwin19</code>など、Linuxだと<code>linux-gnu</code>などになります。</p>

<p>Pythonの中で近い情報だと、</p>

<p>macOS:</p>

<ul>
  <li><code>os.uname()[0]</code>: <code>Darwin</code></li>
  <li><code>os.uname()[3]</code>: <code>19.6.0</code></li>
  <li><code>sys.platform</code>: <code>darwin</code></li>
  <li><code>platform.platform</code>: <code>macOS-10.15.7-x86_64-i386-64bit</code></li>
</ul>

<p>Linux (WSL, Ubuntu):</p>

<ul>
  <li><code>os.uname()[0]</code>: <code>Linux</code></li>
  <li><code>os.uname()[3]</code>: <code>4.19.104-microsoft-standard</code></li>
  <li><code>sys.platform</code>: <code>linux</code></li>
  <li><code>platform.platform</code>: <code>Linux-4.19.104-microsoft-standard-x86_64-with-glibc2.2.5</code></li>
</ul>

<p>な感じ。macOSだけなら<code>sys.platform + os.uname()[3].splot('.')[0]</code>とかで出来ますが、
Linuxの場合にはこれだと<code>$HOSTNAME</code>とは違うものになります。</p>

<p>ある程度自分で使う範囲でパターンを集めれば上の情報からでも
再現出来るようには出来るとは思いますが、
汎用的にすればどうすれば、と。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span></span><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class="line"><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s1">&#39;echo $HOSTNAME&#39;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>の様にしてもシェル変数は取得できません。</p>

<p>PythonだけでOSを判定したるするだけなら、<code>sys.platform</code>とかで十分なのですが、
やりたいこととしては、Pythonのアプリで扱う設定ファイルに、
シェルスクリプトの感覚で変数を埋め込む、ということなので
シェルで使っている変数をそのまま使いたいわけです。</p>

<p>以下のIssueとかで悩んでたりするのでなにか良い方法があれば教えていただきたいなと思ってます。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/homebrew-file/issues/98">Add <code>$OSTYPE</code> value support for file command · Issue #98 · rcmdnk/homebrew-file</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poetryでtensorflow (2.1.0)をaddすると出るエラー]]></title>
    <link href="https://rcmdnk.com/blog/2020/03/18/computer-python/"/>
    <updated>2020-03-18T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/03/18/computer-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4839970270?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4839970270&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51MMNt8XCgL._SS200_.jpg" alt="TensorFlowとKerasで動かしながら学ぶ ディープラーニングの仕組み ~畳み込みニューラルネットワーク徹底解説~ (Compass Booksシリーズ)" /></a>
</div>

<p>Poetryでプロジェクトを作ってTensorFlowを使おうと思ったら
エラーが出た件。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#poetry" id="markdown-toc-poetry">Poetry</a></li>
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
  <li><a href="#対処法" id="markdown-toc-対処法">対処法</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="poetry">Poetry</h2>

<p>PoetryはPythonのプロジェクトの依存関係などを管理するためのツール。</p>

<p>詳細は以下参照:</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/02/04/computer-python/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190204_poetry_120_90.jpg" width="120" height="90" alt="20190204_poetry_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/02/04/computer-python/">PoetryでPython CLIツールを簡単にPyPiに登録する</a></div></li></ul>

<h2 id="起こった問題">起こった問題</h2>

<p>Poetryのプロジェクトを作って、TensorFlowを入れてなにかしてみようとしたときに起こったエラー。</p>

<pre><code>$ poetry add tensorflow
$ grep tensorflow pyproject.toml
tensorflow = "^2.1.0"
</code></pre>

<p>な感じで、今(2020/03/18)バージョン指定しないで入れると2.1.0が入ります。</p>

<p>このプロジェクトで、</p>

<pre><code>$ poetry install
$ poetry shell
$ python
&gt;&gt; import tensorflow
...
AttributeError: module 'tensorflow' has no attribute 'compat'
</code></pre>

<p>みたいな感じで<strong>pyproject.toml</strong>で指定された仮想環境に入って
TensorFlowを使ってみようとすると上の様なエラーメッセージが出ます。</p>

<p>この問題はTensorFlow側のパッケージメタデータファイルの内容が原因で、
Poetry側でどうこうするのではなく、これを変更してもらわないといけない問題みたいです。</p>

<blockquote>
  <p><a href="https://github.com/tensorflow/tensorflow/issues/37525">AttributeError: module ‘tensorflow’ has no attribute ‘compat’ when importing tensorflow · Issue #37525 · tensorflow/tensorflow</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/python-poetry/poetry/issues/1330">can’t install tensorflow==2.0.0rc0 with poetry (python3.6.5) · Issue #1330 · python-poetry/poetry</a></p>
</blockquote>

<h2 id="対処法">対処法</h2>

<p>現状
<strong>tensorflow-estimator</strong>を加えるとこの辺の依存関係が修復されて使えるようになります。</p>

<pre><code>$ poetry add tensorflow-estimator
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewからのPython2の削除]]></title>
    <link href="https://rcmdnk.com/blog/2020/03/09/computer-homebrew-python/"/>
    <updated>2020-03-09T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/03/09/computer-homebrew-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873117380?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873117380&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51%2Bxv65qdBL._SS200_.jpg" alt="入門 Python 3" /></a>
</div>

<p>一ヶ月前ほどで今更気づきましたが、
HomebrewからPython2のFormulaが削除されています。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#python2の削除" id="markdown-toc-python2の削除">Python2の削除</a></li>
  <li><a href="#python3" id="markdown-toc-python3">Python3</a></li>
  <li><a href="#セットアップの更新" id="markdown-toc-セットアップの更新">セットアップの更新</a></li>
  <li><a href="#pythonスクリプトの更新" id="markdown-toc-pythonスクリプトの更新">Pythonスクリプトの更新</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="python2の削除">Python2の削除</h2>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873117380?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873117380&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51%2Bxv65qdBL._SS90_CR0,0,120,90_.jpg" alt="入門 Python 3" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/03/02/computer-mac-homebrew/">Homebrewの'python'でインストールされるものがpython3になった</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873112109?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873112109&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51W3A9A9N2L._SS90_CR0,0,120,90_.jpg" alt="初めてのPython 第2版" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/03/10/computer-mac-homebrew-python/">Homebrewでインストールされる/usr/local/bin/pythonが再びPython2に変更</a></div></li></ul>

<p>Homebrewで2年ほど前にPython3への移行で少しごたごたがありましたが、
2020年1月1日でPython2のサポートが終了したので
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
これを機にHomebrewでも
Python2を削除したようです。</p>

<p>もともと上のときから<code>python</code>というFormulaはPython 3をインストールするようになっていましたが、
今回<code>python@2</code>及び、そのエイリアスの<code>python2</code>が削除されました。</p>

<blockquote>
  <p><a href="https://github.com/Homebrew/homebrew-core/commit/028f11f9e40e4812a57e84fb670bbf2f30a60525">python@2: delete (#49796) · Homebrew/homebrew-core@028f11f</a></p>
</blockquote>

<p>削除されてももともと入れていた場合、<code>brew list</code>とかでpython@2とかが見れるし入ったままになっていると思いますが、
一旦削除すると再インストールはできない状態になります。</p>

<p>上のコミットメッセージに</p>

<pre><code>python@2: delete (#49796)

EOL 1 January 2020.
We gave it 1 month more to live so that people had time to migrate.
All in all, developers had 11 years to do their migration.

You can use the `brew extract` command and maintain python@2 in your own
tap if necessary:
https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap
</code></pre>

<p>とありますが、<code>brew extract</code>が上手くいかないので、もし今後どうしても
HomebrewでPython2をインストールしたい場合、</p>

<pre><code>$ brew install brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/86a44a0a552c673a05f11018459c9f5faae3becc/Formula/python@2.rb
</code></pre>

<p>の様に過去のFormulaを直接参照するような形にすれば入れることはできます。</p>

<blockquote>
  <p><a href="https://stackoverflow.com/questions/60298514/brew-reinstalling-python2">macos - Brew - reinstalling python@2 - Stack Overflow</a></p>
</blockquote>

<h2 id="python3">Python3</h2>

<p>Python3に関しては<code>python</code>というFormulaが担当してます。
Python2が削除されても<code>brew install python</code>で<strong>/usr/local/bin/python</strong>へリンクを作ることは今のところしないようで、
<code>python3</code>や<code>pip3</code>コマンドを使うように、としています。</p>

<p><code>python</code>や<code>pip</code>で3を呼びたいときは
<strong>/usr/local/opt/python/libexec/bin</strong>にリンクがあるので
ここへPATHを通せば<code>python</code>で<code>python3</code>が呼べるようにはなります。</p>

<p>site-packagesは<code>$(brew --prefix)/lib/pythonX.Y/site-packages</code>。</p>

<blockquote>
  <p><a href="https://docs.brew.sh/Homebrew-and-Python">Python — Homebrew Documentation</a></p>
</blockquote>

<p>現時点で<code>python</code>が入れるPythonは3.7.6です。</p>

<p>これとは別に<code>python@3.8</code>というフォーミュラが用意されていて、
<code>/usr/local/opt/python@3.8/bin/python3</code>にインストールされます。
site-packagesは<strong>/usr/local/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages</strong>。</p>

<h2 id="セットアップの更新">セットアップの更新</h2>

<p>とりあえずPython2についてどうしようか、と思いましたが、
削除してしまいました。</p>

<pre><code>$ brew rm python@2
</code></pre>

<p>まだ、macOSデフォルトの<strong>/usr/bin/python</strong>(2.7.16)は存在しています。</p>

<p>現状Shebangで</p>

<pre><code>#!/usr/bin/env python
</code></pre>

<p>と呼んでる物がまだ結構あって(Python3に対応しているものでも)、Python3への対応をどうしようか、と思ってるんですが、
とりあえず様子見として<strong>/usr/local/opt/python/libexec/bin</strong>へもPATHを通して
<code>python</code>でも<code>python3</code>を呼ぶようにして見ようと思います。</p>

<p>以下の様な設定を<strong>.bashrc</strong>とかに追加。</p>

<pre><code>_set_homebrew_path () {
  brew_prefix=$(command brew --prefix 2&gt;/dev/null)
  ret=$?
  if [ $ret -ne 0 ];then
    return
  fi
  export PATH="$brew_prefix/bin:$PATH"
  export PATH="$brew_prefix/sbin:$PATH"
  export LD_LIBRARY_PATH="$prefix/lib:$LD_LIBRARY_PATH"
  #...
  #...
  local python3=$("$brew_prefix/bin/python3" --version 2&gt;/dev/null)
  local ret=$?
  if [ $ret -eq 0 ];then
    export PATH="/usr/local/opt/python/libexec/bin:$PATH"
    python_version=$(echo "$python3"|cut -d' ' -f2|cut -d '.' -f 1,2)
    export PYTHONPATH="$brew_prefix/lib/python$python_version/site-packages"
  fi
  #...
  #...
}

_set_homebrew_path
</code></pre>

<h2 id="pythonスクリプトの更新">Pythonスクリプトの更新</h2>

<p>今後、各OSでPythonをどう扱っていくかわかりませんが、
Python2の代わりにPython3を標準的に入れてくようにはなると思います。</p>

<p>一部のOSとかで標準的にPython3を<strong>/usr/bin/python</strong>に入れるものもあるみたいですが、
一般的にはPython3は<code>python3</code>で呼ぶような状態で、
しばらくはそのままだと思います。</p>

<p>ただ、今更Python2用のコードを書いても仕方ないので、
これを機に使ってるスクリプトは基本的に</p>

<pre><code>#!/usr/bin/env python3
</code></pre>

<p>に置き換えて使える様に変更していかないとな、といったところ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonでlistからfor loopでremoveする際の注意]]></title>
    <link href="https://rcmdnk.com/blog/2020/01/14/computer-python/"/>
    <updated>2020-01-14T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/01/14/computer-python</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4906941060?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4906941060&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41cj3K0OawL._SS200_.jpg" alt="正確なフォルムコントロールのためのスライス徹底マスター (HAIR MODE URESTA!人気スタイリストへの近道シ)" /></a>
</div>

<p>Pythonでリストに対してfor文を回す場合、
そのfor文の中でリストを操作してしまうとバグを生む可能性が高い、という話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#pythonでlistからfor-loopでremoveする際の注意" id="markdown-toc-pythonでlistからfor-loopでremoveする際の注意">Pythonでlistからfor loopでremoveする際の注意</a></li>
  <li><a href="#リストのコピーに関して" id="markdown-toc-リストのコピーに関して">リストのコピーに関して</a></li>
  <li><a href="#関数の引数に関しても注意" id="markdown-toc-関数の引数に関しても注意">関数の引数に関しても注意</a></li>
  <li><a href="#単に削除したいだけのとき" id="markdown-toc-単に削除したいだけのとき">単に削除したいだけのとき</a></li>
  <li><a href="#homebrew-fileのバグ" id="markdown-toc-homebrew-fileのバグ">Homebrew-fileのバグ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="pythonでlistからfor-loopでremoveする際の注意">Pythonでlistからfor loopでremoveする際の注意</h2>

<p>Pythonでlistに対してfor文を回して条件によって削除したい、と思った場合、</p>

<pre><code>my_list = ['a', 'b', 'c', 'd', 'e']
for x in my_list:
    print(x)
    if x in ('c', 'd'):
        my_list.remove(x)
print(my_list)
</code></pre>

<p>とすると予期せぬことが起こります。</p>

<p>結果は</p>

<pre><code>a
b
c
e
['a', 'b', 'd', 'e']
</code></pre>

<p>となり、<code>d</code>が抜けてません。途中で<code>print</code>してるところでも出てないので
<code>d</code>がskipされています。</p>

<p>これはfor文が、<code>my_list</code>の中身を順番に見ていく、のではなく、
中でカウンタを利用し、そのカウンタを1回ずつ上げながら
<code>my_list</code>というリストからそのカウンタの数に対応する順番のものを抜き出す、という作業をしているからです。</p>

<p>つまり、<code>d</code>は元々<code>my_list[3]</code>の位置にあるわけですが、
<code>c</code>(この時点で<code>my_list[2]</code>のもの)のときにループが終わる前に
<code>my_list</code>から<code>c</code>を<code>remove</code>しているので、
この時点で<code>d</code>は繰り上がって<code>my_list[2]</code>の位置になります。</p>

<p>一方で、カウンタは<code>c</code>の時点で<code>2</code>、ループ終了時に<code>3</code>に移るので、
次に見るのは<code>my_list[3]</code>、でこの時点で<code>my_list[3]</code>は<code>e</code>に変わっています。</p>

<p>これは<code>remove</code>だけでなく、<code>insert</code>とかで途中に追加した場合でも同じです。</p>

<p>いずれにしろfor文とかで回すとき、回しているリストをfor文のなかで操作するのは
バグになるので辞めた方が良いです。</p>

<blockquote>
  <p><a href="https://docs.python.org/ja/3/reference/compound_stmts.html#the-for-statement">8. 複合文 (compound statement) — Python 3.8.1 ドキュメント</a></p>
</blockquote>

<p>公式ドキュメントにも注記があって、この様な事をしたい場合には</p>

<pre><code>my_list = ['a', 'b', 'c', 'd', 'e']
for x in my_list[:]:
    print(x)
    if x in ('c', 'd'):
        my_list.remove(x)
print(my_list)
</code></pre>

<p>とすべき、とのこと。これだと</p>

<pre><code>a
b
c
d
e
['a', 'b', 'e']
</code></pre>

<p>とちゃんと予期したとおりになります。</p>

<h2 id="リストのコピーに関して">リストのコピーに関して</h2>

<p>違いはfor文で回すリストを<code>my_list</code>から<code>my_list[:]</code>に変えてるだけですが、
これによって、新しいリストを作成して、その上でfor文を回しているので、
<code>my_list</code>への操作はループに対しては影響せず、
きちんと<code>d</code>も含めて全部に対して処理が出来ている、ということです。</p>

<p>ちょっと注意が必要なのは単に</p>

<pre><code>my_list_copy = my_list
for x in my_list_copy:
    ...
</code></pre>

<p>みたいなことをしても最初と同じ問題が起こります。</p>

<p>基本的にPythonでは参照渡しが行われるので
<code>=</code>で渡した場合には同じオブジェクトを見るようになるだけです。</p>

<p>なので上の場合だと<code>my_list</code>を変更すると<code>my_list_copy</code>も変更される状態になっています。</p>

<p><code>my_list[&lt;start&gt;:&lt;end&gt;]</code>はスライスと呼ばれるもので、
<code>start</code>の位置から<code>end</code>の前までを切り出す、というものです。</p>

<p><code>end</code>の方はその位置まで、ではなく、その前まで、なのでちょっと注意。
指定しないとそれぞれ最初と最後を指定したことになります。</p>

<pre><code>&gt;&gt;&gt; my_list = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; my_list[1:3]
['b', 'c']
&gt;&gt;&gt; my_list[2:]
['c', 'd', 'e']
&gt;&gt;&gt; my_list[:2]
['a', 'b']
&gt;&gt;&gt; my_list[:]
['a', 'b', 'c', 'd', 'e']
</code></pre>

<p>で、<code>[:]</code>だとそのまま同じものを返すわけですが、これは違うオブジェクトになっています。</p>

<pre><code>&gt;&gt;&gt; my_list = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; my_list_copy = my_list
&gt;&gt;&gt; my_list_slice = my_list[:]
&gt;&gt;&gt; id(my_list)
4434973232
&gt;&gt;&gt; id(my_list_copy)
4434973232
&gt;&gt;&gt; id(my_list_slice)
4434935472
&gt;&gt;&gt; my_list == my_list_copy
True
&gt;&gt;&gt; my_list is my_list_copy
True
&gt;&gt;&gt; my_list == my_list_slice
True
&gt;&gt;&gt; my_list is my_list_slice
False
</code></pre>

<p>な感じで単なる<code>=</code>は同じidを持っていて、全く同じであることがわかります。
一方、スライスで渡したものは別のidを持っています。</p>

<p>中身は一緒なので、<code>==</code>でチェックすると<code>True</code>を返しますが、
<code>is</code>でチェックすると違うオブジェクトなので<code>False</code>を返します。</p>

<h2 id="関数の引数に関しても注意">関数の引数に関しても注意</h2>

<p>この辺はfor文だけではなく、関数の引数として渡す場合にも
予期せぬことが起こり得るので注意が必要です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00P2EG5QM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00P2EG5QM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/517aCE1URqL._SS90_CR0,0,120,90_.jpg" alt="パーフェクトPython" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/07/08/computer-python/">Pythonでの引数の取り扱いの罠等</a></div></li></ul>

<h2 id="単に削除したいだけのとき">単に削除したいだけのとき</h2>

<p>上の作業ではfor文を回して削除しているだけですが、想定としては
これ以外にも色々と<code>x</code>を使って作業することを想定しています。</p>

<p>もし、単に削除したいだけなら</p>

<pre><code>my_list = [x for x in my_list if x not in ('c', 'd')]
</code></pre>

<p>の様な内包表記を使ったほうがちゃんと思ったとおりになり
見た目的にもすっきりするので
良いかと思います。</p>

<h2 id="homebrew-fileのバグ">Homebrew-fileのバグ</h2>

<p>今回これを書いたのは自分でやらかしてたからです。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/homebrew-file/issues/87">Brewfile gets reordered making it difficult to see what changed · Issue #87 · rcmdnk/homebrew-file</a></p>
</blockquote>

<p>すいません、バグですがbrew-fileを使っていた場合、
<code>cask</code>のリストが一つ新しいものを追加しただけで大幅に変更されたりしていたと思います。</p>

<p>中身自体は全てBrewfileに書き出されるのでBrewfileそのものを見たりしない限り問題はないのですが、
Gitで管理したりしていると意味がわからない変更が何度も入ってたりするかもしれません。</p>

<p>これは上のfor文ループのバグで、本来書かれるべき場所とは別の場所に書き出されてしまっていたからです。</p>

<p>履歴を見てみると、すぐ上に<code>brew</code>のパッケージに関してはちゃんと<code>[:]</code>を使うようになっていて、
この辺2016年に書いてました。
その際に<code>cask</code>の方は見てなかったのでずーっとこの状態が続いていたようです。</p>

<p>自分でもBrewfileに関しては中身を直接弄ったり見たりすることはほとんどないので
気づいてませんでした。</p>

<p>まあ、brew-fileは思想的に、自分でBrewfileの中身を気にしないでも
勝手にアップデートされて勝手に管理される、ということを目指して作ったものなので。</p>

<p>とはいえ、バグはバグなので直しました。</p>

<p>実はもう一つ、引数の処理のところでも同じ様なことをしていて、
こちらは結構クリティカルで、複数の引数を渡した場合、正しく動作してなかった場合があったと思います。</p>

<p>それほど複数の引数を渡したり複雑なことをするものではないのですが、
確かになにか変だな、と思うところはあって、でも普段支障がないのでちゃんと見てませんでしたが、
違和感の原因はこれ。</p>

]]></content>
  </entry>
  
</feed>
