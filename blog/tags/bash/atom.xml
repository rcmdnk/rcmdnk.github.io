<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Bash | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/bash/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-10T19:28:04+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Terminalを試す]]></title>
    <link href="https://rcmdnk.com/blog/2020/05/31/computer-ubuntu-bash/"/>
    <updated>2020-05-31T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/05/31/computer-ubuntu-bash</id>
    <content type="html"><![CDATA[<p>Windowsの純正のターミナルアプリが正式リリースされたので試してみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#windows-terminal" id="markdown-toc-windows-terminal">Windows Terminal</a></li>
  <li><a href="#設定項目" id="markdown-toc-設定項目">設定項目</a></li>
  <li><a href="#追加した設定" id="markdown-toc-追加した設定">追加した設定</a>    <ul>
      <li><a href="#defaultprofileをwslに" id="markdown-toc-defaultprofileをwslに">defaultprofileをWSLに</a></li>
      <li><a href="#その他のglobal設定" id="markdown-toc-その他のglobal設定">その他のGlobal設定</a>        <ul>
          <li><a href="#initialcols-initialrows" id="markdown-toc-initialcols-initialrows">initialCols, initialRows</a></li>
          <li><a href="#alwaysshowtabs-showtabasintitlebar" id="markdown-toc-alwaysshowtabs-showtabasintitlebar">alwaysShowTabs, showTabasInTitlebar</a></li>
          <li><a href="#copyonselect" id="markdown-toc-copyonselect">copyOnSelect</a></li>
          <li><a href="#copyformatting" id="markdown-toc-copyformatting">copyFormatting</a></li>
          <li><a href="#confirmclosealltabs" id="markdown-toc-confirmclosealltabs">confirmCloseAllTabs</a></li>
        </ul>
      </li>
      <li><a href="#wslubuntuの設定変更" id="markdown-toc-wslubuntuの設定変更">WSL(Ubuntu)の設定変更</a>        <ul>
          <li><a href="#startingdirectory" id="markdown-toc-startingdirectory">startingDirectory</a></li>
          <li><a href="#scrollbarstate" id="markdown-toc-scrollbarstate">scrollbarState</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#プロファイルの追加" id="markdown-toc-プロファイルの追加">プロファイルの追加</a></li>
  <li><a href="#ショートカットを作って特定のプロファイルを直接起動" id="markdown-toc-ショートカットを作って特定のプロファイルを直接起動">ショートカットを作って特定のプロファイルを直接起動</a></li>
  <li><a href="#気になる事" id="markdown-toc-気になる事">気になる事</a>    <ul>
      <li><a href="#タブを別ウィンドウに分けられない" id="markdown-toc-タブを別ウィンドウに分けられない">タブを別ウィンドウに分けられない</a></li>
      <li><a href="#explorerから現在のフォルダをターミナルで開く" id="markdown-toc-explorerから現在のフォルダをターミナルで開く">Explorerから現在のフォルダをターミナルで開く?</a></li>
      <li><a href="#cursorshapeが設定できない" id="markdown-toc-cursorshapeが設定できない">cursorShapeが設定できない</a></li>
      <li><a href="#日本語入力中が汚くなる" id="markdown-toc-日本語入力中が汚くなる">日本語入力中が汚くなる</a></li>
    </ul>
  </li>
  <li><a href="#windows-terminal以外のターミナル" id="markdown-toc-windows-terminal以外のターミナル">Windows Terminal以外のターミナル</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="windows-terminal">Windows Terminal</h2>

<p>Windows TerminalはMicrosoft Storeから入手出来ます。</p>

<blockquote>
  <p><a href="https://www.microsoft.com/ja-jp/p/windows-terminal/9n0dx20hk701?rtc=1&amp;activetab=pivot:overviewtab">Windows Terminal を入手 - Microsoft Store ja-JP</a></p>
</blockquote>

<p>これまでもコマンドプロンプトやPowerShell専用のもの、
WSLのターミナルなどはありましたが、
Windows Terminalを使うとそれらを一つのターミナルから使える様になります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/06/05/computer-windows-ubuntu-bash/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160605_bashonubuntuonwindows_120_90.jpg" width="120" height="90" alt="20160605_bashonubuntuonwindows_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/06/05/computer-windows-ubuntu-bash/">Windowsに採用されたBash (Ubuntu)を試してみる</a></div></li></ul>

<p>また、タブ機能や画面を分割して使う機能などがあり
細かな設定も出来るようになっていてかなり充実したターミナルアプリになっていると感じました。</p>

<p>ドキュメントも結構頑張って作っている感じ。</p>

<blockquote>
  <p><a href="https://docs.microsoft.com/ja-jp/windows/terminal/">Windows ターミナルの概要  Microsoft Docs</a></p>
</blockquote>

<p>OSSなのでソースコードはGitHubにあり開発に参加することも出来ます。</p>

<div class="github-widget" data-repo="microsoft/terminal"></div>

<p>今回使っているのは
バージョン1.0.1401.0です。</p>

<h2 id="設定項目">設定項目</h2>

<p>Windows Terminalの設定は設定項目が書かれたJSONファイルを直接編集する形で
設定変更を行います。</p>

<p>ターミナル上のタブの右側にあるボタンを押すか、ターミナル上で<i class="key">Ctrl</i>-<i class="key">,</i>
を押すと設定用JSONファイルを開けます。</p>

<p>ただ、最初は<strong>.json</strong>をどのアプリで編集するか紐付けられてません。
推奨するアプリも設定されてないみたいで、
<strong>Microsoft Storeでアプリを探す</strong>が出てきますが、<strong>その他のアプリ</strong>から
メモ帳なりVimを選んで、常にそのアプリで開く様にチェックを入れて開きます。</p>

<p>開くとJSONファイルですが、
以下の様な感じになっています。</p>

<figure class="code"><figcaption><span>settings.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span></span><span class="p">{</span>
</span><span class="line">    <span class="nt">&quot;$schema&quot;</span><span class="p">:</span> <span class="s2">&quot;https://aka.ms/terminal-profiles-schema&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&quot;defaultProfile&quot;</span><span class="p">:</span> <span class="s2">&quot;{XXXXXXXX-XXXXXXXXX-XXXX-XXXXXXXXXXXX}&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&quot;profiles&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="p">[</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="err">//</span> <span class="err">Make</span> <span class="err">changes</span> <span class="err">here</span> <span class="err">to</span> <span class="err">the</span> <span class="err">powershell.exe</span> <span class="err">profile</span>
</span><span class="line">            <span class="nt">&quot;guid&quot;</span><span class="p">:</span> <span class="s2">&quot;{XXXXXXXX-XXXXXXXXX-XXXX-XXXXXXXXXXXX}&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Windows PowerShell&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;commandline&quot;</span><span class="p">:</span> <span class="s2">&quot;powershell.exe&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;hidden&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="err">//</span> <span class="err">Make</span> <span class="err">changes</span> <span class="err">here</span> <span class="err">to</span> <span class="err">the</span> <span class="err">cmd.exe</span> <span class="err">profile</span>
</span><span class="line">            <span class="nt">&quot;guid&quot;</span><span class="p">:</span> <span class="s2">&quot;{XXXXXXXX-XXXXXXXXX-XXXX-XXXXXXXXXXXX}&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;cmd&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;commandline&quot;</span><span class="p">:</span> <span class="s2">&quot;cmd.exe&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;hidden&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="nt">&quot;guid&quot;</span><span class="p">:</span> <span class="s2">&quot;{XXXXXXXX-XXXXXXXXX-XXXX-XXXXXXXXXXXX}&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;hidden&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Ubuntu&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Windows.Terminal.Wsl&quot;</span>
</span><span class="line">        <span class="p">},</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="nt">&quot;guid&quot;</span><span class="p">:</span> <span class="s2">&quot;{XXXXXXXX-XXXXXXXXX-XXXX-XXXXXXXXXXXX}&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;hidden&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Azure Cloud Shell&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;Windows.Terminal.Azure&quot;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">],</span>
</span><span class="line">
</span><span class="line">    <span class="err">//</span> <span class="err">Add</span> <span class="err">custom</span> <span class="err">color</span> <span class="err">schemes</span> <span class="err">to</span> <span class="err">this</span> <span class="err">array</span>
</span><span class="line">    <span class="nt">&quot;schemes&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class="line">
</span><span class="line">    <span class="err">//</span> <span class="err">Add</span> <span class="err">any</span> <span class="err">keybinding</span> <span class="err">overrides</span> <span class="err">to</span> <span class="err">this</span> <span class="err">array.</span>
</span><span class="line">    <span class="err">//</span> <span class="err">To</span> <span class="err">unbind</span> <span class="err">a</span> <span class="err">default</span> <span class="err">keybinding,</span> <span class="err">set</span> <span class="err">the</span> <span class="err">command</span> <span class="err">to</span> <span class="nt">&quot;unbound&quot;</span>
</span><span class="line">    <span class="s2">&quot;keybindings&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>defaultProfile</code>に起動時に開くプロファイルのGUID、
<code>profiles</code>にPowerShellやWSLの情報が入っています。</p>

<p>WSLはインストールすると自動的に追加されるようです。</p>

<p>ここに追加の設定を書いたり、プロファイルを加えたり変更したりすればOK。</p>

<p>有効な設定値などは以下を参照。</p>

<blockquote>
  <p><a href="https://docs.microsoft.com/ja-jp/windows/terminal/customize-settings/global-settings">Windows ターミナルのグローバル設定  Microsoft Docs</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md">terminal/SettingsSchema.md at master · microsoft/terminal</a></p>
</blockquote>

<p>色も変更可能:</p>

<blockquote>
  <p><a href="https://docs.microsoft.com/ja-jp/windows/terminal/customize-settings/color-schemes">Windows ターミナルの配色  Microsoft Docs</a></p>
</blockquote>

<p>直接設定ファイルをいじれる様になってるのでかなり自由度が高く変更が可能です。</p>

<p>ただ、GUIな設定画面がないのでどの様な設定が出来るか、フォントとかは何が選べるのか、
とかは上を見ながら、とかしないといけないのでちょっと面倒ではあります。</p>

<p>普段からLinuxとか使ってるとこういった設定は慣れてる人もいるかも知れませんが、
ちょっとハードルが高いと感じる人もいるかも知れません。</p>

<p>ファイルは</p>

<pre><code>**C:\Users\&lt;user&gt;\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json**
</code></pre>

<p>といったところにあり、<code>WindowsTerminal_8wekyb3d8bbwe</code>という部分にランダムな?ものがついたフォルダを作っています。</p>

<p>この辺よく理解してませんが、WSLとかが加わってダイナミックにプロファイルを作成する際に新たに作る必要があるためにこの様なフォルダを作っているのでしょうか?</p>

<p>このファイルを別途直接管理しようと思うとこの様なランダムな文字列が入ってくるのでちょっと面倒そうです。(wtコマンドとかで調べることが出来るのかもしれませんが。)</p>

<p>JSONファイルへの設定変更ですが、ファイルを保存した瞬間に
ターミナル上へも反映されます。</p>

<p>文法が間違ってたりするとエラー表示が出て、変更を読み込まないまま続行するといった注意が出たりします。</p>

<p>ただ、タブに関する部分とか、再度ターミナルを立ち上げ直さないと有効にならないものも一部あります。</p>

<h2 id="追加した設定">追加した設定</h2>

<h3 id="defaultprofileをwslに">defaultprofileをWSLに</h3>

<p><code>defaultPrifle</code>のGUIDを<code>"name": "Ubuntu"</code>のプロファイルのGUIDにして
起動時にWSLを立ち上げる様にしました。</p>

<h3 id="その他のglobal設定">その他のGlobal設定</h3>

<p>ターミナル全体で有効になる設定として、
<code>defaultProfile</code>の下に以下を加えました。</p>

<pre><code>"initialCols": 90,
"initialRows": 20,
"alwaysShowTabs": false,
"showTabsInTitlebar": false,
"copyOnSelect": true,
"copyFormatting": false,
"confirmCloseAllTabs": false,
</code></pre>

<h4 id="initialcols-initialrows">initialCols, initialRows</h4>

<p>ターミナルの横、縦の長さ(文字数)。デフォルトはそれぞれ120、30。
これは好み。</p>

<p><code>launtMode</code>に<code>maximized</code>を設定すると起動時に最大化された状態で始める事もできます。</p>

<h4 id="alwaysshowtabs-showtabasintitlebar">alwaysShowTabs, showTabasInTitlebar</h4>

<p>タブが一つの場合でもタブを表示するかどうか、と
タブをタイトルバーの中に表示するか、タイトルバーと分けるか、という設定。</p>

<p>デフォルトはそれぞれ<code>true</code>と<code>true</code>。</p>

<p>デフォルト状態だとこんな感じ。</p>

<p><img src="https://rcmdnk.com/images/post/20200531_notitle.png" alt="20200531_notitle.png" class="pic" /></p>

<p><code>showTabsInTitlebar</code>をFalseにすると</p>

<p><img src="https://rcmdnk.com/images/post/20200531_titletab.png" alt="20200531_titletab.png" class="pic" /></p>

<p>こんな感じでタイトルバーが別に現れます。</p>

<p>タイトルバーは右クリックすると最大化、などのメニューが出てきますが、
タイトルに書かれるものはタブのものと一緒だし、
タイトルバーをダブルクリックして最大化、みたいなことは
タブをタイトルバーに入れてもタブ以外の部分をダブルクリックすれば出来ます。</p>

<p>なので、もしタブを常に表示させている場合、タイトルバーを表示させてるメリットはあまりないので
<code>showTabsInTitlebar</code>は<code>false</code>の方が良いかと。</p>

<p>一方で、<code>alwaysShowTabs</code>を<code>false</code>にして<code>showTabsInTitlebar</code>も<code>false</code>にすると、
タブが一つだけの場合、タブがなくなりタイトルバーだけになります。</p>

<p><img src="https://rcmdnk.com/images/post/20200531_notab.png" alt="20200531_notab.png" class="pic" /></p>

<p>この場合、わずかにタイトルバー無しでタブだけの表示の場合よりも上側の
部分が短くなります。</p>

<p>ただし、タブが2つ以上になるとタイトルバーに加えてタブのバーが別に現れます。</p>

<p>現状、タブを使うつもりはないので、<code>false</code>、<code>false</code>にしてあります。</p>

<p>この状態にすると設定を開くボタンが消えてしまうので、<i class="key">Ctrl</i>-<i class="key">,</i>
で開ける、ということを忘れずに。</p>

<p>ただ、タイトルバーが白いので、なんとなく黒に統一したいと思ったら<code>true</code>、<code>true</code>
のデフォルト表示のが良いかも、とは迷い中。</p>

<h4 id="copyonselect">copyOnSelect</h4>

<p>Linuxとかのターミナルの様に、ターミナル上でマウスで文字列を選択した段階で
コピーをするかどうか。</p>

<p><code>false</code>の場合には選択してから右クリックするか
<i class="key">Ctrl</i>-<i class="key">Shift</i>-<i class="key">C</i>でコピーします。</p>

<p>通常の右クリックからコピーというメニューを選ぶ、というものでもないため、
<code>false</code>の場合でも選択してから右クリックでコピー、でも十分かもしれません。
(PowerShellとかと同じ仕様)</p>

<p>CLCLなどクリップボード履歴を使っていると、ターミナル上でちょっと文字を選択しただけで
どんどん履歴に入っていってしまうのは邪魔くさいので要検討。
(ただ、Macとかでは選択してそのままコピー、という感覚で使うので同じにしたい。)</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/08/21/computer-windows/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190821_clipboardlist_120_90.jpg" width="120" height="90" alt="20190821_clipboardlist_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/08/21/computer-windows/">Windowsの履歴利用や他のPCと共有 ができる新しいクリップボードを試してみた</a></div></li></ul>

<p>とりあえずデフォルトが<code>false</code>なので有効にするために<code>true</code>にしておきます。</p>

<h4 id="copyformatting">copyFormatting</h4>

<p>コピー時に色やフォーマットも記憶するか、プレーンテキストとして記憶するか、の設定。</p>

<p>デフォルトは<code>true</code>になってます。</p>

<p>たとえばEvernoteとかにコピーしようとするとコードとか、
色つけのママ出来て嬉しい、とかあるかもしれませんが、
ただ、そういった場合でも大概はプレーンテキストのままのが便利なことが多いです。</p>

<p>というか、フォーマットをコピーして嬉しいことってのが殆どないのに、
MacでもWindowsでもそのへんコピーするのがデフォルトになってるのが面倒。</p>

<p><i class="key">Ctrl</i>-<i class="key">Shift</i>-<i class="key">V</i>とかで貼り付け時にフォーマットを削除して
貼り付け、ということが出来るので、大概これを押す羽目に。</p>

<p>ということで、<code>false</code>にしています。</p>

<p>加えて、日本語を使ってる人は絶対に<code>false</code>にしたほうが良いです。</p>

<p><code>true</code>のままだと日本語をコピーすると化けます。
<i class="key">Ctrl</i>-<i class="key">Shift</i>-<i class="key">V</i>でフォーマットを削除しても
化けたものは化けたまま。</p>

<p>なのでフォーマットどうこう関係なしにも<code>false</code>にするしかない状況です。</p>

<h4 id="confirmclosealltabs">confirmCloseAllTabs</h4>

<p>タブを複数開いているとき、閉じるボタンでターミナルを閉じようとした時に
閉じてよいかどうか尋ねるかどうか。</p>

<p>ブラウザとかでもあるやつですが、ターミナルだと閉じるときは<i class="key">Ctrl</i>-<i class="key">D</i>
とかでそれを閉じるし、
全部消したい時に閉じるボタンを押す、という感じなので余計なお世話。</p>

<p>デフォルト<code>true</code>なので<code>false</code>にします。</p>

<h3 id="wslubuntuの設定変更">WSL(Ubuntu)の設定変更</h3>

<p><code>profiles</code>の中の<code>Ubuntu</code>の項目に</p>

<pre><code>{
    "guid": "{XXXXXXXX-XXXXXXXXX-XXXX-XXXXXXXXXXXX}",
    "hidden": false,
    "name": "Ubuntu",
    "source": "Windows.Terminal.Wsl",
    "startingDirectory": "//wsl$/Ubuntu/home/&lt;ubuntu_user&gt;",
    "scrollbarState": "hidden"
},
</code></pre>

<p>な感じに<code>startingDirectory</code>と<code>scrollbarState</code>を加えました。</p>

<h4 id="startingdirectory">startingDirectory</h4>
<p>Windows Terminalでは<code>startingDirectory</code>という項目が<code>profiles</code>の設定項目として他にあり、
これがデフォルトで<code>%USERPROFILE%</code>になっていて、これはWindowsのユーザーディレクトリです。
(<strong>\C:\Users&lt;user&gt;</strong>、WSL的には**/mnt/c/Users/<user>**)</user></p>

<p>これをUbuntuのHOMEになるようにするには上記の様な<code>//wsl$/&lt;name&gt;/home/&lt;user&gt;</code>
という値を与えます。</p>

<p>もしくは</p>

<pre><code>    "commandline": "wsl.exe ~ -d Ubuntu",
</code></pre>

<p>という設定を<code>startingDirectory</code>の代わりに設定しても同じことが出来ます。
この項目は実際にWSLを起動するコマンド自体を変更するもので、
最初に<code>~</code>を渡してUbuntuのHOMEディレクトリからスタートする、という形にしています。</p>

<p>以前は<code>startingDirectory</code>に<code>wsl$</code>の様なWSLのパスを設定する方法がなかったので
こちらが使われてましたが、
現在は<code>wsl$</code>を使って<code>startingDirectory</code>での設定が可能になっています。</p>

<blockquote>
  <p><a href="https://docs.microsoft.com/ja-jp/windows/terminal/troubleshooting">Windows ターミナルのトラブルシューティング  Microsoft Docs</a></p>
</blockquote>

<p>ただ、<code>commandline</code>の方がユーザー名を含まないで済むので使い回しはしやすいという点はあります。</p>

<p>ここではとりあえずDocumentに沿って<code>startingDirectory</code>を設定しています。</p>

<h4 id="scrollbarstate">scrollbarState</h4>

<p>スクロールバーを見せるか見せないか。デフォルトでは見せる様になっていますが、
ターミナル上ではGNU screenを使って作業したりするのでスクロールとかは必要ないので
隠す設定。</p>

<p>ただ、Windows Terminalのスクロールバーは通常のスクロールバーと違ってものすごく細いので、
あってもウィンドウ幅とかにはあまり影響がないので無理に隠す必要はないかもしれません。</p>

<h2 id="プロファイルの追加">プロファイルの追加</h2>

<p>Windows Terminalの面白い機能として、プロファイルに<code>ssh</code>なものを加えられます。</p>

<p>どういうものかというと</p>

<pre><code>{
    "guid": "{0151badc-f0d2-41ab-b017-56d14afd71dc}",
    "hidden": false,
    "name": "ssh_example.com",
    "commandline": "ssh -i ~/.ssh/id_rsa user@example.com"
}
</code></pre>

<p>というものを加えると、<code>example.com</code>に<code>ssh</code>した状態で開始出来る様になります。</p>

<p>こういった自作のプロファイルを作る場合、メニューから選択するだけなら<code>guid</code>は要りませんが、
デフォルトに設定したい場合には必要です。</p>

<p>GUIDは桁数とかさえあってれば何でも良いのですが、
<a href="https://www.guidgen.com/">Generate GUIDs online</a>
とかで適当なものを作ってくれるので作って設定しておきます。</p>

<p><code>commandline</code>で<code>ssh</code>コマンドを指定しますが、この<code>ssh</code>は
<strong>C:\Users&lt;user&gt;.ssh</strong>がsshの設定ディレクトリになります。
<strong>config</strong>は<strong>C:\Users&lt;user&gt;.ssh\config</strong>。</p>

<p>また、このコマンドの中で<code>~</code>を使ったディレクトリ指定は(HOMEは)<em>*C:\Users&lt;user&gt;*</em>になります。</p>

<p>なので
<strong>C:\Users&lt;user&gt;.ssh\id_rsa</strong>みたいな鍵を使いたければ上記の様な指定をすればOK。</p>

<p>Cywginとかを加えることも出来ます。</p>

<blockquote>
  <p><a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/ThirdPartyToolProfiles.md">terminal/ThirdPartyToolProfiles.md at master · microsoft/terminal</a></p>
</blockquote>

<p>これで新しいプロファイルが加わります。</p>

<p><img src="https://rcmdnk.com/images/post/20200531_profiles.png" alt="20200531_profiles.png" class="pic" /></p>

<h2 id="ショートカットを作って特定のプロファイルを直接起動">ショートカットを作って特定のプロファイルを直接起動</h2>

<p><code>defaultProfile</code>は一つしか指定できないので、それ以外のプロファイルは
一度Widnows Terminalを立ち上げてから選択して立ち上げる必要があります。</p>

<p>ただ、上記の様なsshの設定でいくつかのサーバーに直接入りたいとき、
そのターミナルを直接立ち上げたい、という場合もあると思います。</p>

<p>そういった場合にはショートカットを作ってリンク先をいじってそこから直接起動する、
という方法が出来ます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2013/08/30/computer-windows/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20130720_magicformation_120_90.jpg" width="120" height="90" alt="20130720_magicformation_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/08/30/computer-windows/">Windowsでのショートカットの起動オプション for MagicFormation</a></div></li></ul>

<p>Windows Terminalの実行ファイルは</p>

<pre><code>C:\Users\&lt;user&gt;\AppData\Local\Microsoft\WindowsApps\wt.exe
</code></pre>

<p>にあります。(この手のMicrosoft Storeからインストールしたものはスタートメニューアイコンを右クリックしても<strong>その他</strong>に<strong>ファイルの場所を開く</strong>がないので最初どこにあるかわからなかった。。。)</p>

<p>このショートカットを作って
プロファイルを開き、<strong>リンク先</strong>の<strong>…wt.exe</strong>となっている部分に、
<code>-p &lt;profile name&gt;</code>を追加します。</p>

<p>これでOKを押して、このショートカットをダブルクリックとかして立ち上げると
指定したプロファイルが立ち上がるはずです。</p>

<p>このショートカットをデスクトップに置いたり、スタートにピン留めとかしておけば
簡単に好きなプロファイルを直接開ける様になります。</p>

<h2 id="気になる事">気になる事</h2>

<h3 id="タブを別ウィンドウに分けられない">タブを別ウィンドウに分けられない</h3>

<p>ブラウザとかでタブ機能があるものだと、タブをドラッグして外に持っていくと新しいウィンドウが出来ます。</p>

<p>また、別のウィンドウの方に持っていくとタブを移動することが出来ます。</p>

<p>ただ、Windows Terminalでは現状タブはウィンドウのなかだけでしか移動できず、
新しいウィンドウを作ることも出来ません。</p>

<p>ショートカットとかでも新しいタブを作るものはありますが、新しいウィンドウを作る、というものはありません。</p>

<p>別ウィンドウを作りたい場合、無理やり、</p>

<pre><code>$ cmd.exe /c wt.exe &amp;
</code></pre>

<p>とかして新しいWindows Terminalを立ち上げる、という事は出来ます。</p>

<p>これだと新しいウィンドウは古いウィンドウのターミナルの子プロセスになるので
古いウィンドウを消すと新しいほうも落ちてしまいそうな感じがしますが、
やってみたところ古い方を消しても新しい方は続けて使えました。</p>

<p>なのでこれで一応<strong>新しいウィンドウ</strong>的な事はできますが、タブの移動とかはやっぱり出来ません。</p>

<p>まあ、この辺は自分ではあまり使わない部分なのでそれ程問題ないのですが。</p>

<h3 id="explorerから現在のフォルダをターミナルで開く">Explorerから現在のフォルダをターミナルで開く?</h3>

<blockquote>
  <p><a href="https://github.com/microsoft/terminal/issues/1060">Add “open Windows terminal here” into right-click context menu · Issue #1060 · microsoft/terminal</a></p>
</blockquote>

<p>右クリックメニューとかでExplorer上から開いてるフォルダをターミナルで開く、
ということも頑張れば出来るらしい。</p>

<p>ただ、現状やるのはちょっと面倒。</p>

<p>一方で、</p>

<blockquote><p>Not currently supported "out of the box" (See issue #1060). However, you can open Windows Terminal in current directory by typing wt -d . in the Explorer address bar.</p><footer><strong>terminal/index.md at master · microsoft/terminal</strong> <cite><a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md">github.com/microsoft/terminal/&hellip;</a></cite></footer></blockquote>

<p>というのがあるんですが、Explorerのアドレスバーに<code>wt -d .</code>と打ってみてもうまく行きませんでした。</p>

<p>バージョンが違うのか何か間違っているのか。。。</p>

<h3 id="cursorshapeが設定できない">cursorShapeが設定できない</h3>

<p>グローバル設定で<code>cursorShape</code>という項目があり、デフォルトが<code>bar</code>で細い先が
文字の間に表示される状態です。</p>

<p>VimのInsert Mode的な状態。</p>

<p>Macとかのターミナルとかだと挿入位置にブロック表示になるので
(VimのNormal Mode的な状態)
これと同じ様にしたければ<code>filledBox</code>にする、か<code>emptyBox</code>が近いもの。</p>

<p>ただ、Macとかではこれらが点滅し、さらに下の文字が点滅に応じて反転して
常に見える様な状態になります。</p>

<p>現状Windows Terminalのカーソルは点滅もしないので文字列の途中に行くと、下の文字がカーソルに隠れて見てなくなってしまう様な状態。</p>

<p>なので<code>emptyBox</code>と言ったものを作っているようです。</p>

<blockquote>
  <p><a href="https://github.com/microsoft/terminal/issues/1203">Feature Request: Show character under cursor when cursorShape is set to filledBox · Issue #1203 · microsoft/terminal</a></p>
</blockquote>

<p>多分これは将来的に他のターミナルの様に点滅で下が見える様なものが出来ると思います。</p>

<p>ということなのですが、今使ってみた所ではそもそも<code>cursorShape</code>に何を設定しても
状態が変わりません。</p>

<p>それどころか、Vimを開いてもNormal Modeでもブロック表示になりません。</p>

<p>変更できない、といったバグ報告見たいのは見かけないので、やっぱり何か手元の設定がおかしい…? (<strong>settings.json</strong>は元に戻して<code>cursorShape</code>だけ加えてもやっぱり出来ないのですが。)</p>

<h3 id="日本語入力中が汚くなる">日本語入力中が汚くなる</h3>

<p>すでに文字列がある部分に日本語を挿入しようとすると
すでにある文字列と重なって汚い表示んになってしまいます。</p>

<p><img src="https://rcmdnk.com/images/post/20200531_jpwt.jpg" alt="20200531_jpwt.jpg" class="pic" /></p>

<p>決定すればちゃんと挿入されて大丈夫なんですが、入力中が
非常に見づらいです。</p>

<p>他のターミナルではどうなのか、というと、</p>

<p><img src="https://rcmdnk.com/images/post/20200531_jpwsltty.jpg" alt="20200531_jpwsltty.jpg" class="pic" /></p>

<p>こんな感じで背景、文字の色を反転させて下の文字が見えないような状態にして
入力が行われます。</p>

<p>これが結構日本語を使う上では辛い。</p>

<h2 id="windows-terminal以外のターミナル">Windows Terminal以外のターミナル</h2>

<p>Windows用のターミナルは結構いろいろなものがあります。</p>

<blockquote>
  <p><a href="https://www.hanselman.com/blog/WhatsTheDifferenceBetweenAConsoleATerminalAndAShell.aspx">What’s the difference between a console, a terminal, and a shell? - Scott Hanselman</a></p>
</blockquote>

<blockquote>
  <p><a href="https://blog.kamijin-fanta.info/2019/12/windows-wsl-terminal/">Windows10 WSLのターミナル事情 - kamijin-fanta</a></p>
</blockquote>

<blockquote>
  <p><a href="https://www.reddit.com/r/neovim/comments/8k99gn/best_terminal_for_neovim_and_wsl_on_windows_10/">Best terminal for neovim and WSL on Windows 10 : neovim</a></p>
</blockquote>

<p>WSLをインストールするとデフォルトで使える様になるものや
Cygwin時代から使われているmintty、それをWSL用にしたものなど。</p>

<blockquote>
  <p><a href="https://www.atmarkit.co.jp/ait/articles/1812/13/news031.html">WSLのコンソールを便利で高機能な「wsltty」に置き換える：Tech TIPS - ＠IT</a></p>
</blockquote>

<p>また、Electronで作ったマルチプラットフォームなHyperも使えます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/07/24/computer-mac/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/20160724_hyperterm.gif" width="120" height="90" alt="20160724_hyperterm" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/07/24/computer-mac/">ターミナル作業が爽快になるターミナルエミュレーター: HyperTerm</a></div></li></ul>

<p>HyperとかならMacとかと共通で使えます。</p>

<p>今回関係ないですが、Mac用のものもいろいろなものがあります。</p>
<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/02/14/computer-mac/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/MacApp/thumbnail/Terminal_120_90.jpg" width="120" height="90" alt="Terminal_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/02/14/computer-mac/">Macで使えるターミナルエミュレーターアプリ達</a></div></li></ul>

<p>この中でWSLのデフォルトのターミナルを最初使ってましたが、
これだとVimのモード変換時に変なずれが起こる様になってました。</p>

<p>今年のはじめくらいに色々試してた時にそういったメモが残ってるんですが、
今やってみるとそんな問題はなくなっている様でした。</p>

<p>ただ、一つ問題として、フォントがデフォルトでMSゴシックなんですが、
これをコード用のCascadia Monoとかにしてみると、
日本語もこのフォントで表示しようとするのか化けてしまいます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/09/23/computer-windows-mac-putty-iterm2/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190923_puttycascadiacode_120_90.jpg" width="120" height="90" alt="20190923_puttycascadiacode_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/09/23/computer-windows-mac-putty-iterm2/">Microsoftの新しいフォントCascadia Codeを試す</a></div></li></ul>

<p>上記のVimの問題がHyperとかでも起こっていたので、
使っていたのはwslttyでした。</p>

<p>wslttyでは最初からVimのずれな問題も起きず、フォントを英字用フォントにしても
日本語はちゃんと日本語フォントで表示してくれます。</p>

<p>一つ気になるのがウィンドウをリサイズした時に、それに引っ張られてフォントのサイズが変わってしまうこと。</p>

<p>毎回<i class="key">Ctrl</i>-<i class="key">0</i>を押して元のフォントサイズに戻したりしています。</p>

<p>ただ他に比べると問題が一番少ないので利用中。</p>

<p>Windows Terminalに関してはこのVimな問題も無く、
リサイズしてもフォントの大きさは変わらず、良いな、とは思ったのですが。</p>

<h2 id="まとめ">まとめ</h2>

<p>Windows Terminalがバージョン1.0で正式リリースされたということですが、
画面分割などかなり頑張ってるな、という印象。</p>

<p>ただ、個人的にその辺はMacなどのターミナルでもそうなんですが一切使っておらず必要のない部分。
タブも同様不要な機能。</p>

<p>単に安定して、まともに日本語が扱えるターミナル、というのが求めるものなのですが、
上にも書いたとおりちょっとまだ日本語とかは難しい点がありそうです。</p>

<p>カーソル表示もちょっと気になる所。</p>

<p>その辺の気になる点があり、結局今の所wslttyを使い続けようかな、と思っています。</p>

<p>ただ、Windows Terminalはsshを直接するプロファイルが作れたり、色々と面白い点もありますし、
OSSで開発も活発っぽいので、
フィードバックしたりして使いやすいものになって行ってくれれば、とは思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxにHomebrewでShellCheckをインストールしたい(が、諦める)]]></title>
    <link href="https://rcmdnk.com/blog/2020/01/24/computer-linux-bash/"/>
    <updated>2020-01-24T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/01/24/computer-linux-bash</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4774186945?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4774186945&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41i956UyusL._SS200_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB+DB PRESS plus)" /></a>
</div>

<p>シェルスクリプトのチェックツールShellCheckをHomebrewでインストールしようとしたら
ちょっと面倒だった件。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#shellcheck" id="markdown-toc-shellcheck">ShellCheck</a></li>
  <li><a href="#linuxでのshellcheckのインストール" id="markdown-toc-linuxでのshellcheckのインストール">LinuxでのShellCheckのインストール</a></li>
  <li><a href="#gcc8をwithout-glibcで入れられるように" id="markdown-toc-gcc8をwithout-glibcで入れられるように">gcc@8を–without-glibcで入れられるように</a></li>
  <li><a href="#without-glibcなgcc8でトライ" id="markdown-toc-without-glibcなgcc8でトライ">without-glibcなgcc@8でトライ</a></li>
  <li><a href="#without-glibcなgcc9でトライ" id="markdown-toc-without-glibcなgcc9でトライ">without-glibcなgcc@9でトライ</a></li>
  <li><a href="#gcc7とか" id="markdown-toc-gcc7とか">gcc@7とか</a></li>
  <li><a href="#gccとか全部なしでやって見る" id="markdown-toc-gccとか全部なしでやって見る">gccとか全部なしでやって見る</a></li>
  <li><a href="#直接cabal-install" id="markdown-toc-直接cabal-install">直接cabal install</a></li>
  <li><a href="#諦めて直接" id="markdown-toc-諦めて直接">諦めて直接</a></li>
  <li><a href="#macでのshecllcheck" id="markdown-toc-macでのshecllcheck">MacでのShecllCheck</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="shellcheck">ShellCheck</h2>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2014/11/26/computer-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20141126_shellcheckcli_120_90.jpg" width="120" height="90" alt="20141126_shellcheckcli_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/11/26/computer-bash-zsh/">シェルスクリプトを簡単にチェックできるShellCheck, Vimでも使える</a></div></li></ul>

<p>ShellCheckはシェルスクリプトの文法をチェックしてくれるツールで、
Vimとかと連携しておくと捗ります。</p>

<h2 id="linuxでのshellcheckのインストール">LinuxでのShellCheckのインストール</h2>

<p>インストールするのはCentOS 7です。</p>

<p>LinuxbrewがHomebrewに統合されたのを機に、
ユーザーローカルエリアにインストールするツールはLinuxでもHomebrewで行うようにしてきました。</p>

<p>その話は随分前の話なんですがなんですが、今更ShecllCheckが入ってないことに気が付きました。</p>

<p>ということでインストールしてみようとすると、</p>

<pre><code>$ brew install shellcheck
Updating Homebrew...
==&gt; Auto-updated Homebrew!
Updated 1 tap (homebrew/core).
No changes to formulae.
==&gt; Installing dependencies for shellcheck: pandoc
==&gt; Installing shellcheck dependency: pandoc
==&gt; Downloading https://hackage.haskell.org/package/pandoc-2.9.1.1/pandoc-2.9.1.1.tar.gz
Already downloaded: /home/user/.cache/Homebrew/downloads/4292bf61443a19f2a8957e8af9c220e56e8b2d83a1497b14fbbb1715811569f5--pandoc-2.9.1.1.tar.gz
==&gt; cabal v1-sandbox init
==&gt; cabal v1-update
==&gt; cabal v1-sandbox init
==&gt; cabal v1-install --jobs=32 --max-backjumps=100000 --only-dependencies
Last 15 lines from /home/user/.cache/Homebrew/Logs/pandoc/04.cabal:
2020-XX-XX XX:XX:XX +0900
cabal
v1-install
--jobs=32
--max-backjumps=100000
--only-dependencies
gcc-5: error: unrecognized command line option '-no-pie'
`gcc-5' failed in phase `C Compiler'. (Exit code: 1)
READ THIS: https://docs.brew.sh/Troubleshooting
</code></pre>

<p>というエラー。
探してみるとこんなIssueが。</p>

<blockquote>
  <p><a href="https://github.com/Homebrew/linuxbrew-core/issues/10694">shellcheck fails to install · Issue #10694 · Homebrew/linuxbrew-core</a></p>
</blockquote>

<p>ここで</p>

<pre><code>brew install gcc@8
brew install shellcheck -svd --cc=gcc-8
</code></pre>

<p>というのがありますが、ちょっと注意が必要なのは何も考えずに<code>gcc@8</code>を入れると
<code>glibc</code>が入って環境によっては問題が起こる点。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/">Linuxbrew改めHomebrew@Linuxでrelocation errorに対する対処法</a></div></li></ul>

<p><code>gcc</code>には<code>--without-glibc</code>というオプションがあるのですが、<code>gcc@8</code>の<a href="https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc@8.rb">Formula</a>にはその様なオプションはありません。</p>

<p>ということで仕方ないので自作。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/homebrew-rcmdnkpac/blob/master/rcmdnk-gcc%408.rb">homebrew-rcmdnkpac/rcmdnk-gcc@8.rb at master · rcmdnk/homebrew-rcmdnkpac</a></p>
</blockquote>

<p><a href="https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc@8.rb">gcc@8のFormula</a>
に
<a href="https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc.rb">gccのFormula</a>
のglibcのところをちょっと足しただけですが。</p>

<p>これで、Linuxで</p>

<pre><code>$ brew install rcmdnk/rcmdnkpac/rcmdnk-gcc@8 --without-glibc
</code></pre>

<p>でglibcなしでgcc@8が入れられます。</p>

<p>これでOK、と思ってたら</p>

<pre><code>$ brew install shellcheck --cc=gcc-8
Warning: You passed `--cc=gcc-8`.
You will encounter build failures with some formulae.
Please create pull requests instead of asking for help on Homebrew's GitHub,
Discourse, Twitter or IRC. You are responsible for resolving any issues you
experience while you are running this unsupported configuration.
==&gt; Installing dependencies for shellcheck: pandoc
==&gt; Installing shellcheck dependency: pandoc
Error: An exception occurred within a child process:
  RuntimeError: The requested Homebrew GCC was not installed. You must:
    brew install gcc@8
</code></pre>

<p>どうやら<code>--cc</code>オプションはHomebrewの中でFormulaから処理しているらしく、
<code>gcc@8</code>の名前で入ってないとだめ、ということに。。。</p>

<p>同じ名前のFormulaを別のTapで入れるとconflictを起こして問題になるので、
Linuxbrew-coreのFormulaをアップデートするしかありません。</p>

<h2 id="gcc8をwithout-glibcで入れられるように">gcc@8を–without-glibcで入れられるように</h2>

<blockquote>
  <p><a href="https://github.com/Homebrew/linuxbrew-core/pull/19054">add –without-glibc option to gcc@X by rcmdnk · Pull Request #19054 · Homebrew/linuxbrew-core</a></p>
</blockquote>

<p>gccのFormulaを参考にすれば簡単にできるのでgcc@8なども<code>--without-glibc</code>出来るように変更。</p>

<p>Pull Requestを出してある状態ですが、とりあえず自分でFormula(gcc@8.rbなど)を</p>

<pre><code>~/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core/Formula
</code></pre>

<p>にコピーしてインストール。</p>

<pre><code>$ brew install gcc@8  --without-glibc
</code></pre>

<p>入りました。</p>

<p>すでにPull Requestはマージされてるので<code>brew update</code>すれば<code>gcc@8</code>なども<code>--without-glibc</code>で入れられるはずです。</p>

<h2 id="without-glibcなgcc8でトライ">without-glibcなgcc@8でトライ</h2>

<p>これでもう一度トライ:</p>

<pre><code>$ brew install shellcheck -svd --cc=gcc-8
...
Downloaded   aeson-1.4.6.0
Starting     aeson-1.4.6.0
Building     JuicyPixels-3.3.4
Building     aeson-1.4.6.0
Completed    hxt-9.3.1.18
Failed to install JuicyPixels-3.3.4
Build log ( /tmp/pandoc-20200115-158652-15h1ohp/pandoc-2.9.1.1/.cabal-sandbox/logs/ghc-8.8.1/JuicyPixels-3.3.4-683Rg9ZKIIHL6oz4xD5Bes.log ):
cabal: Entering directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
Configuring JuicyPixels-3.3.4...
Preprocessing library for JuicyPixels-3.3.4..
Building library for JuicyPixels-3.3.4..
[ 1 of 30] Compiling Codec.Picture.InternalHelper ( src/Codec/Picture/InternalHelper.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/InternalHelper.o )
[ 2 of 30] Compiling Codec.Picture.Metadata.Exif ( src/Codec/Picture/Metadata/Exif.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata/Exif.o )
[ 3 of 30] Compiling Codec.Picture.Metadata ( src/Codec/Picture/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata.o )
[ 4 of 30] Compiling Codec.Picture.Tiff.Internal.Types ( src/Codec/Picture/Tiff/Internal/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Types.o )
[ 5 of 30] Compiling Codec.Picture.Tiff.Internal.Metadata ( src/Codec/Picture/Tiff/Internal/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Metadata.o )
[ 6 of 30] Compiling Codec.Picture.Types ( src/Codec/Picture/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Types.o )
&lt;command line&gt;: /lib/libz.so: wrong ELF class: ELFCLASS32
cabal: Leaving directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
Completed    cryptonite-0.26
Completed    aeson-1.4.6.0
cabal: Error: some packages failed to install:
JuicyPixels-3.3.4-683Rg9ZKIIHL6oz4xD5Bes failed during the building phase. The
exception was:
ExitFailure 1
/home/user/.linuxbrew/opt/curl/bin/curl --version
java -version
/home/user/.linuxbrew/Homebrew/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading /home/user/.linuxbrew/Homebrew/Library/Taps/linuxbrew/homebrew-xorg/Formula/xorg.rb
</code></pre>

<p>で止まってしまいます。</p>

<pre><code>Failed to install JuicyPixels-3.3.4
    Build log ( /tmp/pandoc-20200115-158652-15h1ohp/pandoc-2.9.1.1/.cabal-sandbox/logs/ghc-8.8.1/JuicyPixels-3.3.4-683Rg9ZKIIHL6oz4xD5Bes.log ):
</code></pre>

<p>の辺が失敗している模様。</p>

<p>このログを見てみると</p>

<pre><code>cabal: Entering directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
Configuring JuicyPixels-3.3.4...
Preprocessing library for JuicyPixels-3.3.4..
Building library for JuicyPixels-3.3.4..
[ 1 of 30] Compiling Codec.Picture.InternalHelper ( src/Codec/Picture/InternalHelper.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/InternalHelper.o )
[ 2 of 30] Compiling Codec.Picture.Metadata.Exif ( src/Codec/Picture/Metadata/Exif.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata/Exif.o )
[ 3 of 30] Compiling Codec.Picture.Metadata ( src/Codec/Picture/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata.o )
[ 4 of 30] Compiling Codec.Picture.Tiff.Internal.Types ( src/Codec/Picture/Tiff/Internal/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Types.o )
[ 5 of 30] Compiling Codec.Picture.Tiff.Internal.Metadata ( src/Codec/Picture/Tiff/Internal/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Metadata.o )
[ 6 of 30] Compiling Codec.Picture.Types ( src/Codec/Picture/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Types.o )
&lt;command line&gt;: /lib/libz.so: wrong ELF class: ELFCLASS32
cabal: Leaving directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
</code></pre>

<p>どうも<code>/lib/libz.so</code>を見てるのが悪いようですが、
<code>~/.linuxbrew/lib/libz.so</code>にもちゃんとHomebrewで入れたのが入っていて、
環境変数<code>LD_LIBRARY_PATH</code>にも<code>~/.linuxbrew/lib/libz.so</code>は入っています。</p>

<h2 id="without-glibcなgcc9でトライ">without-glibcなgcc@9でトライ</h2>

<p>もう一つ新しいgccがあるのでそれを入れてみる</p>

<pre><code>$ brew install gcc@9  --without-glibc
Updating Homebrew...
==&gt; Auto-updated Homebrew!
Updated Homebrew from 13f508d0d to 50354852f.
No changes to formulae.
==&gt; Downloading https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.xz
==&gt; ../configure --with-bugurl=https://github.com/Homebrew/linuxbrew-core/issues --disable-multilib --prefix=/home/user/.linuxbrew/Cellar/gcc@9/9.2.0_1 --libdir=/home/user/.linuxbrew/Cellar/gcc@9/9.2.0_1/lib/gcc/9 --enable-languages=c,c++,objc,obj-c++,fortran --disable-nls --enable-checking=release --program-suffix=-9 --with-gmp=/home/user/.linuxbrew/opt/gmp --with-mpfr=/home/user/.linuxbrew/opt/mpfr --with-mpc=/home/user/.linuxbrew/opt/libmpc --with-isl=/home/user/.linuxbrew/opt/isl --with-pkgversion=Homebrew GCC 9.2.0_1 --without-glibc
==&gt; make
Last 15 lines from /home/user/.cache/Homebrew/Logs/gcc@9/02.make:
/bin/sh ../../gcc/../move-if-change tmp-constrs.h tm-constrs.h
/bin/sh ../../gcc/../move-if-change tmp-preds.c insn-preds.c
echo timestamp &gt; s-constrs-h
/bin/sh ../../gcc/../move-if-change tmp-preds.h tm-preds.h
echo timestamp &gt; s-preds
/bin/sh ../../gcc/../move-if-change tmp-condmd.c build/gencondmd.c
echo timestamp &gt; s-preds-h
echo timestamp &gt; s-conditions
rm gcc.pod
make[3]: Leaving directory `/tmp/gcc@9-20200115-163739-1cqulwf/gcc-9.2.0/build/gcc'
make[2]: *** [all-stage1-gcc] Error 2
make[2]: Leaving directory `/tmp/gcc@9-20200115-163739-1cqulwf/gcc-9.2.0/build'
make[1]: *** [stage1-bubble] Error 2
make[1]: Leaving directory `/tmp/gcc@9-20200115-163739-1cqulwf/gcc-9.2.0/build'
make: *** [all] Error 2
sh: line 1: 193696 Segmentation fault      /usr/bin/gcc --version 2&gt; /dev/null
READ THIS: https://docs.brew.sh/Troubleshooting
These open issues may also help:
llvm: can't pick up gcc-toolchain if run from opt/llvm/bin/clang++  https://github.com/Homebrew/linuxbrew-core/issues/18601
</code></pre>

<p>ここでsegmentation fault…</p>

<p>これは面倒なのでこれ以上見てません。。。</p>

<h2 id="gcc7とか">gcc@7とか</h2>

<p>もうちょっと前のgccを使ってみてもインストールは出来ましたがshellcheckのインストールで
<code>gcc@8</code>の場合と同じようになりました。</p>

<h2 id="gccとか全部なしでやって見る">gccとか全部なしでやって見る</h2>

<p>その他、<code>gcc</code>自体も<code>brew rm</code>して、とかもやってみましたが何も上手く行かず。。。</p>

<p>Homebrewではどうやってもうまく行きません。</p>

<h2 id="直接cabal-install">直接cabal install</h2>

<p>shellcheckのインストール時に、<code>cabal</code>を使っているので直接使ってみる</p>

<pre><code>$ cabal install ShellCheck
</code></pre>

<p>が、これも最初のものと同じエラーが出ます。。。</p>

<h2 id="諦めて直接">諦めて直接</h2>

<div class="github-widget" data-repo="koalaman/shellcheck"></div>

<p>のREADMEに従ってpre-compiledされたものを入れてしまうことにしました。</p>

<pre><code>$ scversion="stable"
$ wget -qO- "https://storage.googleapis.com/shellcheck/shellcheck-${scversion?}.linux.x86_64.tar.xz" | tar -xJv
$ cp shellcheck-${shellcheck} ~/usr/bin
</code></pre>

<p>もうこれで良しとしておきます。。。</p>

<h2 id="macでのshecllcheck">MacでのShecllCheck</h2>

<p>Macでも確認したらなぜか入ってなくてHomebrewで再インストールしたのですが、
その際にBrewfileにすでにあるよ、という
<a href="https://github.com/rcmdnk/homebrew-file">homebrew-file</a>
のwarningが出て、おかしいなと思って
<a href="https://github.com/rcmdnk/Brewfile/blob/master/Brewfile">Brewfile</a>
の履歴を見ると<code>shellcheck</code>自体は2017年に追加されてそのままでした。
それだと前のMacのときのものなので、Mac新しくしてからずっと使ってなかった?
(でも最近でもVimでシェルスクリプトのチェックを見たような気がするが。。。)</p>

<p>確かに再インストール前はVim+Aleでチェックが効いてなかったのが、</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/09/25/computer-vim/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20170925_vimale_120_90.jpg" width="120" height="90" alt="20170925_vimale_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/09/25/computer-vim/">VimのSyntaxチェッカーをALEにした</a></div></li></ul>

<p>インストール後には効くようになりました、当たり前だけど。</p>

<p>なぞ。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Actionsを使ってsentakuのシェルスクリプトに対するテストの実装]]></title>
    <link href="https://rcmdnk.com/blog/2019/10/15/computer-github-bash-zsh-sentaku/"/>
    <updated>2019-10-15T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/10/15/computer-github-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<p>GitHub Actionsを使っていきたいのでまだテストをきちんと作っていない
<a href="https://github.com/rcmdnk/sentaku">sentaku</a>のテストを追加しました。</p>

<p>まだ取り敢えず、の状態ですがGitHub Actionsを使っていくスタートとして。</p>

<p>シェルスクリプトなのでbatsを使っています。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#sentaku" id="markdown-toc-sentaku">sentaku</a></li>
  <li><a href="#bats" id="markdown-toc-bats">bats</a></li>
  <li><a href="#github-actions" id="markdown-toc-github-actions">GitHub Actions</a></li>
  <li><a href="#設定" id="markdown-toc-設定">設定</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="sentaku">sentaku</h2>

<p>対話的に入力項目の中から選択が出来るシェルスクリプト製のツール。</p>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2014/01/24/computer-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/20140124_sentaku.gif" width="120" height="90" alt="20140124_sentaku" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/01/24/computer-bash-zsh/">シェルスクリプトで対話的な選択を出来るようにするスクリプトを作った:sentaku</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/20190930_sentakucontentview.gif" width="120" height="90" alt="20190930_sentakucontentview" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku/">sentakuでファイルの中身を選択中に表示する</a></div></li></ul>

<h2 id="bats">bats</h2>

<p>シェルスクリプトのテストツールとして恐らく一番有名なツール。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B0002J57FM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B0002J57FM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51XWTT0N0XL._SS90_CR0,0,120,90_.jpg" alt="BATS~蝙蝠地獄~ コレクターズ・エディション [DVD]" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/10/11/computer-github-bash/">Batsを使ったシェルスクリプトのテスト</a></div></li></ul>

<h2 id="github-actions">GitHub Actions</h2>

<p>まだベータ版ですが申し込むと順次使える様になります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190819_githubactions1_120_90.jpg" width="120" height="90" alt="20190819_githubactions1_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/">GitHubで新しいActionsが使えるようになっていたのでCI/CDをやってみた</a></div></li></ul>

<p>新しくなってYAML形式のファイルをレポジトリの<strong>.github/workflows/</strong>の中に入れておくと
条件に応じてActionsが実行されます。</p>

<p>今のところまだベータ版ということもありますが非常にさくさく動いてくれます。</p>

<p>GitHub純正の連携なので、push後の動作はTravis CIなどに比べても早いということのがあると思います。</p>

<h2 id="設定">設定</h2>

<p>レポジトリに<strong>.github/workflows/</strong>というディレクトリを作りそこにActionを定義したYAMLファイルを置くと
それに応じてGitHub側でActionを起こしてくれます。</p>

<p>今回は以下の様なファイルを用意:</p>

<figure class="code"><figcaption><span>sentaku/.github/workflows/test.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">CI</span>
</span><span class="line">
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">on</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">push</span><span class="p p-Indicator">]</span>
</span><span class="line">
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">jobs</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">function_test</span><span class="p p-Indicator">:</span>
</span><span class="line">
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">runs-on</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">ubuntu-latest</span>
</span><span class="line">
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">steps</span><span class="p p-Indicator">:</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">uses</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">actions/checkout@v1</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">sudo apt install bats</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">cd tests &amp;&amp; ./get_bats_libs.sh</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">|</span>
</span><span class="line">        <span class="no">export PATH=$PWD/bin:$PATH</span>
</span><span class="line">        <span class="no">export TERM=dumb</span>
</span><span class="line">        <span class="no">./tests/function_check.bats</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>push</code>されたときにUbuntuの環境を用意して、レポジトリを取ってきて<code>bats</code>をインストール、
必要なライブラリ(bats-assert, bats-support)も取ってきて(<a href="https://github.com/rcmdnk/sentaku/blob/6378b384769320f7b645173530ce82fba82459ce/tests/get_bats_libs.sh">get_bats_libs.sh</a>)
テストスクリプト
(<a href="https://github.com/rcmdnk/sentaku/blob/6378b384769320f7b645173530ce82fba82459ce/tests/function_check.bats">function_check.bats</a>)
を実行、といった感じです。</p>

<p>各部分の説明については
<a href="https://rcmdnk.com/blog/2019/10/11/computer-github-bash/">前回のポストを</a>参照。</p>

<p>テストスクリプトは取り敢えず全部関数を並べて簡単に出来るものだけテストを入れただけです。</p>

<p>インタラクティブツールなのでちょっとどこまでテストできるかと言うのが難しい。</p>

<p>あと、ちょっと面倒だったのがsentakuの中では<code>tput</code>とかを利用してターミナルの幅(<code>tput cols</code>)の情報を得たり
カーソルを移動させたりしているわけですが、
こういったテストではターミナルが定義されてないのでそこで</p>

<pre><code>tput: No value for $TERM and no -T specified
</code></pre>

<p>といったエラーが出ます。</p>

<p>とりあえずこれを抑えるためには適当な定義として</p>

<pre><code>export TERM=dumb
</code></pre>

<p>と、ダミーの端末
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
を与えことで<code>tput cols</code>とかに関してはエラーを回避できます。</p>

<p>ただ、これでも完全には回避できなくて、</p>

<pre><code>tput cnorm &gt;/dev/tty 2&gt;/dev/null || tput vs &gt;/dev/tty 2&gt;/dev/null
</code></pre>

<p>という一度隠したカーソルをもう一度表示するコマンドのところで</p>

<pre><code> sentaku: line 285: /dev/tty: No such device or address
</code></pre>

<p>というエラーが出てしまいます。</p>

<p>ちょっとこの辺は面倒なのでとりあえずテストを飛ばしています。</p>

<p>pushするとこんな感じで結果が見れます:</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/sentaku/commit/fbb6c432d2f3d0dc85ef66dc3b71045896282b93/checks?check_suite_id=264975133">Merge branch ‘bats’ · rcmdnk/sentaku@fbb6c43</a></p>
</blockquote>

<h2 id="まとめ">まとめ</h2>

<p>GitHub Actionsを使ったテストを作ってみました。</p>

<p>他のレポジトリでも今後はGitHub Actions中心で良いかな、という感じがします。</p>

<p>sentakuのテスト自身に関しては細かい部分のテストはまだしも、
インタラクテ思った以上に難しそう。。。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batsを使ったシェルスクリプトのテスト]]></title>
    <link href="https://rcmdnk.com/blog/2019/10/11/computer-github-bash/"/>
    <updated>2019-10-11T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/10/11/computer-github-bash</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B0002J57FM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B0002J57FM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51XWTT0N0XL._SS200_.jpg" alt="BATS~蝙蝠地獄~ コレクターズ・エディション [DVD]" /></a>
</div>

<p>(Bashの)シェルスクリプトに関してテストを導入するために
フレームワークとしてBatsを導入します。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#bats" id="markdown-toc-bats">bats</a></li>
  <li><a href="#batsの使い方" id="markdown-toc-batsの使い方">batsの使い方</a></li>
  <li><a href="#assertion" id="markdown-toc-assertion">assertion</a></li>
  <li><a href="#シェルスクリプトでなくても使える" id="markdown-toc-シェルスクリプトでなくても使える">シェルスクリプトでなくても使える</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="bats">bats</h2>

<p>シェルスクリプトのテストツールとして恐らく一番有名なツール。</p>

<p>オリジナルはこちら。</p>

<div class="github-widget" data-repo="sstephenson/bats"></div>

<p>こちらは4年くらい前に更新が止まっていますが、
個人でメンテナンスを続けていくことが難しくなったときに
みんなで続けていこうとして使われる様になったのが
以下のレポジトリ。</p>

<div class="github-widget" data-repo="bats-core/bats-core"></div>

<p><code>bats</code>というアカウントはすでに他に取られていたのでこういう名前になった模様。</p>

<blockquote>
  <p><a href="https://github.com/sstephenson/bats/issues/150">Call for Maintainers · Issue #150 · sstephenson/bats</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/sstephenson/bats/issues/236">Information about community-maintained fork · Issue #236 · sstephenson/bats</a></p>
</blockquote>

<p>なので基本的にはbats-coreを使ったほうが新しい機能が入っていたりして良いです。</p>

<p>どちらもインストールするコマンドは<code>bats</code>です。</p>

<p>ただ、<code>bats</code>は<code>yum</code>や<code>apt</code>で入れられますが、これらはオリジナルの方のもので、
<code>ba-ts-core</code>に関してはまだ用意されていません。</p>

<blockquote>
  <p><a href="https://github.com/bats-core/bats-core/issues/103">Create bats-core packages to install easilly on linux · Issue #103 · bats-core/bats-core</a></p>
</blockquote>

<p>bats-coreの方で特に新しい機能としてはbatsファイル探すときに<code>-r</code>によるリカーシブな検索ができるかどうか、というのが一番大きいところです。</p>

<blockquote>
  <p><a href="https://github.com/bats-core/bats-core/releases">Releases · bats-core/bats-core</a></p>
</blockquote>

<p>それが必要なければ取り敢えずは古い<code>bats</code>でも使える事は使えます。</p>

<p>Linuxでyumやaptで入れたい場合には古いので我慢するのもあり。</p>

<p>一方、Homebrewにはbats-coreもあります。</p>

<pre><code>$ brew install bats-core
</code></pre>

<p>で入れられます。<code>bats</code>のFormulaも残っているので、これと同時に入れてしまうとファイルが衝突してしまうので
気をつけてください。通常<code>bats-core</code>の方だけ入れておけばOKです。</p>

<p>LinuxでもHomebrewを使って<code>bats-core</code>を入れる事もできます。</p>

<h2 id="batsの使い方">batsの使い方</h2>

<p>スクリプト言語の様にShebangに<code>bats</code>を指定してスクリプトを書いていくか、
書いたスクリプトを<code>bats</code>コマンドの引数に渡すことで実行します。</p>

<figure class="code"><figcaption><span>test.bats </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="ch">#!/usr/bin/env bats</span>
</span><span class="line">
</span><span class="line">setup<span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="nv">test_file</span><span class="o">=</span><span class="s2">&quot;./test.txt&quot;</span>
</span><span class="line">  touch <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">teardown<span class="o">()</span> <span class="o">{</span>
</span><span class="line">  rm -f <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;addition using bc&quot;</span> <span class="o">{</span>
</span><span class="line">  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;</span><span class="k">$(</span><span class="nb">echo</span> <span class="m">2</span>+2 <span class="p">|</span> bc<span class="k">)</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="o">[</span> <span class="s2">&quot;</span><span class="nv">$result</span><span class="s2">&quot;</span> -eq <span class="m">4</span> <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;addition using bc (fail)&quot;</span> <span class="o">{</span>
</span><span class="line">  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;</span><span class="k">$(</span><span class="nb">echo</span> <span class="m">2</span>+1 <span class="p">|</span> bc<span class="k">)</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="o">[</span> <span class="s2">&quot;</span><span class="nv">$result</span><span class="s2">&quot;</span> -eq <span class="m">4</span> <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;check file&quot;</span> <span class="o">{</span>
</span><span class="line">  <span class="o">[</span> -f <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span> <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;skip test&quot;</span> <span class="o">{</span>
</span><span class="line">  skip
</span><span class="line">  <span class="o">[</span> ! -f <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span> <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;normal command&quot;</span> <span class="o">{</span>
</span><span class="line">  ls
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じのファイル。</p>

<p>各テストユニットは<code>@test "&lt;description&gt;" { &lt;test&gt; }</code>
といった感じの書式で定義します。</p>

<p>テスト内容はシェルスクリプトで書いていけばOK。</p>

<p>上の例だと最後にテスト演算子(<code>[</code>, <code>]</code>)で最後のチェックを行っているのが多いですが、
最後のテストのように通常のコマンドだけでもテストは出来ます。</p>

<p>途中でエラーステータスを返す行があればそこで終了です。</p>

<p>また、成功した場合にはコマンドの出力は表示されません、</p>

<p>失敗した場合、その失敗したコマンドが出力を出していればそれも表示します。</p>

<p>また、<code>@test</code>ユニットの中に<code>skip</code>コマンドを入れるとそのテストはスキップされます。</p>

<p>各テストは独立に環境が作られますが、
<code>setup()</code>関数を定義しておくとここで共通の設定が定義できます。</p>

<p>また<code>teardown()</code>関数ですべてのテストが終わった後の処理を定義することも出来ます。</p>

<p>とりあえず上のファイルを実行して見ると、</p>

<pre><code>$ chmod 755 ./test.bats
$ ./test.bats
 ✓ addition using bc
 ✗ addition using bc (fail)
   (in test file a.bats, line 19)
     `[ "$result" -eq 4 ]' failed
 ✓ check file
 - skip test (skipped)
 ✓ normal command

5 tests, 1 failure, 1 skipped
</code></pre>

<p>と言った具合に結果が出ます。</p>

<p>こんな感じで<code>bats</code>自体が<code>bash</code>で書かれているため
bash用のテストツールという感じが強いですが、
使い方としてはコマンドラインで実行できることがらであれば
そのまま簡単にテストにすることが出来ます。</p>

<h2 id="assertion">assertion</h2>

<p><code>bats</code>の機能だと、各テストの結果として成功か失敗か、しか分からず
どの様な失敗だったのかちょっと分かりづらいところがあります。</p>

<p>これを解決するために<code>bats</code>用のassertionツールが色々作られていますが、
以下のものが多分一番使われているもの。</p>

<div class="github-widget" data-repo="ztombol/bats-assert"></div>

<p>使えるのは以下の関数:</p>

<ul>
  <li>assert: 引数に置く評価が成功する</li>
  <li>refute: 引数に置く評価が失敗する</li>
  <li>assert_equal: 第一引数が第二引数に一致</li>
  <li>assert_success: 直前のコマンドが成功する(終了ステータス0)</li>
  <li>assert_failure: 直前のコマンドが失敗する(終了ステータス0以外)。引数を与えた場合にはその終了ステータスでの終了。</li>
  <li>assert_output: 直前コマンドの出力と引数が一致する</li>
  <li>refute_output: 直前コマンドの出力と引数が一致しない</li>
  <li>assert_line: 直前コマンドの出力の中に引数と一致する行がある</li>
  <li>refute_line: 直前コマンドの出力の中に引数と一致する行がない</li>
</ul>

<p>下4つにある出力との比較には正規表現も使えます。</p>

<p>bats-assertを使うにはまず
<a href="https://github.com/ztombol/bats-assert">bats-assert</a>、
<a href="https://github.com/ztombol/bats-support">bats-support</a>
の2つを用意する必要があります。</p>

<p>適当なディレクトリで、</p>

<pre><code>$ git clone https://github.com/ztombol/bats-assert
$ git clone https://github.com/ztombol/bats-support
</code></pre>

<p>しておきます。</p>

<p>これらに対して<code>setup()</code>の中で</p>

<pre><code>setup() {
  load ./bats-assert/load
  load ./bats-support/load
  ...
}
</code></pre>

<p>の様に<code>load</code>を使ってレポジトリ内の<code>load</code>ファイルを呼ぶことで
必要な関数を読み込むことができます。</p>

<p>これらを使って上のテストスクリプトを書き換えると</p>

<figure class="code"><figcaption><span>test_assert.bats </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="ch">#!/usr/bin/env bats</span>
</span><span class="line">
</span><span class="line">setup<span class="o">()</span> <span class="o">{</span>
</span><span class="line">  load ./bats-assert/load
</span><span class="line">  load ./bats-support/load
</span><span class="line">
</span><span class="line">  <span class="nv">test_file</span><span class="o">=</span><span class="s2">&quot;./test.txt&quot;</span>
</span><span class="line">  touch <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">teardown<span class="o">()</span> <span class="o">{</span>
</span><span class="line">  rm -f <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;addition using bc&quot;</span> <span class="o">{</span>
</span><span class="line">  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;</span><span class="k">$(</span><span class="nb">echo</span> <span class="m">2</span>+2 <span class="p">|</span> bc<span class="k">)</span><span class="s2">&quot;</span>
</span><span class="line">  assert_equal <span class="s2">&quot;</span><span class="nv">$result</span><span class="s2">&quot;</span> <span class="m">4</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;addition using bc (fail)&quot;</span> <span class="o">{</span>
</span><span class="line">  <span class="nv">result</span><span class="o">=</span><span class="s2">&quot;</span><span class="k">$(</span><span class="nb">echo</span> <span class="m">2</span>+1 <span class="p">|</span> bc<span class="k">)</span><span class="s2">&quot;</span>
</span><span class="line">  assert_equal <span class="s2">&quot;</span><span class="nv">$result</span><span class="s2">&quot;</span> <span class="m">4</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;check file&quot;</span> <span class="o">{</span>
</span><span class="line">  assert <span class="o">[</span> -f <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span> <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;skip test&quot;</span> <span class="o">{</span>
</span><span class="line">  skip
</span><span class="line">  refute <span class="o">[</span> -f <span class="s2">&quot;</span><span class="nv">$test_file</span><span class="s2">&quot;</span> <span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">@test <span class="s2">&quot;normal command&quot;</span> <span class="o">{</span>
</span><span class="line">  ls
</span><span class="line">  assert_success
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じになります。</p>

<p>これを実行すると</p>

<pre><code>$ chmod 755 ./test_assert.bats
$ ./test_assert.bats
 ✓ addition using bc
 ✗ addition using bc (fail)
   (from function `assert_equal' in file ./bats-assert/src/assert.bash, line 91,
    in test file test.bats, line 22)
     `assert_equal "$result" 4' failed

   -- values do not equal --
   expected : 4
   actual   : 3
   --

 ✓ check file
 - skip test (skipped)
 ✓ normal command

5 tests, 1 failure, 1 skipped
</code></pre>

<p>といった出力になります。
失敗したときに<code>4</code>であるべきところが<code>3</code>であった、という事がわかります。</p>

<p>先程は評価式そのものが表示されるだけだったので
どういう値になってしまって失敗したか分かりませんでしたが、
これなら<code>3</code>になってしまった事が分かるので対処しやすくなります。</p>

<h2 id="シェルスクリプトでなくても使える">シェルスクリプトでなくても使える</h2>

<p>Bats自体がBashのシェルスクリプトで作られてることがあり
Bash用のテストフレームワークと言う面がありますが、
実際には上記の様にコマンドの結果をチェックすることを行う、という形なので
Zshでも他の言語で作られたコマンドラインツールでも
実行結果をチェックすることには使えます。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentakuでファイルの中身を選択中に表示する]]></title>
    <link href="https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku/"/>
    <updated>2019-09-30T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rcmdnk/sentaku/">sentaku</a>
で<code>ls</code>などでファイル一覧を渡して選ぶ時に
現在カーソルがある行のファイルの中身を見れるようにしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#sentaku" id="markdown-toc-sentaku">sentaku</a></li>
  <li><a href="#ファイルの中身を常に表示する" id="markdown-toc-ファイルの中身を常に表示する">ファイルの中身を常に表示する</a></li>
  <li><a href="#sによる内容表示" id="markdown-toc-sによる内容表示"><code>s</code>による内容表示</a></li>
  <li><a href="#表示内容を変更する" id="markdown-toc-表示内容を変更する">表示内容を変更する</a></li>
  <li><a href="#他のツールでの状況" id="markdown-toc-他のツールでの状況">他のツールでの状況</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="sentaku">sentaku</h2>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<p>シェルスクリプトで作った対話的な選択ができるツールです。</p>

<p>pecoだとかfzfと言ったツールと似たような事が出来ます。</p>

<div class="github-widget" data-repo="peco/peco"></div>

<div class="github-widget" data-repo="junegunn/fzf"></div>

<p>sentakuのデフォルトは一覧を表示してVimっぽく<code>j</code>や<code>k</code>などで上下選択する様になっています。</p>

<p>pecoやfzfっぽくしたい場合は<code>sentaku -E</code>としてemacsモードで立ち上げると
<code>C-n</code>/<code>C-p</code>で上下選択すると同時に、適当なキーを打てばそれで絞り込み検索が出来るので
pecoやfzfっぽくなります。</p>

<p>シェルスクリプトなのでちょっともっさり感は出てしまいますが、
中にある関数を直接流用して対話的な選択ができるツールの拡張が
簡単に?できる様にしてある点が特徴です。
その辺はほとんど使われてないとは思いますが。。。</p>

<h2 id="ファイルの中身を常に表示する">ファイルの中身を常に表示する</h2>

<p>今回新たに以下の様なオプションを加えました。</p>

<pre><code>-C         Show the file content at the list view
-R         Show the file content in the right (default: right)
-U         Show the file content under the list (default: right)
-L         Number of lines to show the file content under the list (default: 10)
-S         Show the file content of the colleslponding line at s
           instead of full line of the selected one
</code></pre>

<p><code>-U</code>は以前は選択行をハイライトする代わりにアンダーラインを引く、
というためのオプションでしたが上みたいに揃えるために<code>-U</code>は上で使って
元々あったアンダーライン用オプションは<code>-u</code>にしました。
(なぜ元々大文字を使っていたのか思い出せない。。。)</p>

<pre><code>-u         Use underline to show selected line, instead of highlighting.
</code></pre>

<p>このうち<code>-C</code>/<code>-R</code>/<code>-U</code>を使うとファイルを選択項目としてリストしている時
選択行がファイルの場合に右側や下側にその内容を表示できる様になります。</p>

<p><img src="https://rcmdnk.com/images/post/20190930_sentakucontentview.gif" alt="20190930_sentakucontentview.gif" class="pic" /></p>

<p>こんな感じ。</p>

<p>デフォルトが右側表示なので何も設定してなければ<code>-C</code>と<code>-R</code>は同じです。</p>

<pre><code>export SENTAKU_CONTENT_SHOW_UNDER=1
</code></pre>

<p>の様に環境変数を設定しておくとデフォルト表示が下側表示でになって<code>-C</code>と<code>-U</code>が同じ動作になります。</p>

<p><code>-L</code>は下側に表示する時に内容表示に使う行数です。
デフォルトは10で<code>-L</code>で変更できる他、</p>

<pre><code>export SENTAKU_CONTENT_LINES=20
</code></pre>

<p>という環境変数の設定でも変更可能です。</p>

<p>下側表示の場合には十分なスペースが確保出来ない場合には表示されません。
なのであまり<code>-L</code>や<code>SENTAKU_CONTENT_LINES</code>で大きな数字を指定してしまうと
表示されない様になってしまうので気をつけてください。</p>

<p>ちなみに中身を表示できるものはテキストファイルのみです。</p>

<p>チェックは<code>file &lt;file&gt;|grep -q text</code>で行っています。</p>

<h2 id="sによる内容表示"><code>s</code>による内容表示</h2>

<p>もともと選択画面で<code>s</code>を押すとその行の文字列を表示する、という機能がありました。</p>

<p>これは長いファイル名だったり文章を選択する際に
画面に収まる様に切って表示しているので、そういったものの全部を確認するための機能です。</p>

<p>この<code>s</code>を押した際に、文字列を表示する代わりにテキストファイル出あった場合には
中身を<code>${VISUAL:-less}</code>で開いて確認できるようになります。</p>

<p>上のgifではVISUALがvimに設定されてるのでvimで開いています。
閉じれば元の選択画面に戻ります。</p>

<h2 id="表示内容を変更する">表示内容を変更する</h2>

<p>選択中に表示するものも<code>s</code>で表示するものも<code>_sf_get_content</code>という関数で取得しています。</p>

<figure class="code"><figcaption><span>sentaku </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>_sf_get_content <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="k">if</span> ! file <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">|</span>grep -q text<span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;Not a text file&quot;</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    cat <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じ。</p>

<p>なのでこれを変更してやると該当する行のものに対する好きな情報を表示させることも出来ます。</p>

<p>例えば、<code>ls -l</code>の内容を表示させたいのであれば</p>

<figure class="code"><figcaption><span>file_detail </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span><span class="ch">#!/usr/bin/env bash</span>
</span><span class="line">
</span><span class="line">. sentaku -n
</span><span class="line">
</span><span class="line">_sf_get_content <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  ls -l <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">ls <span class="p">|</span> _sf_main -U -L <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいなスクリプトを作って</p>

<pre><code>$ ./file_detail
</code></pre>

<p>と実行すれば現在いるディレクトリのファイル一覧を表示して、
カーソル下のファイルの<code>ls -l</code>の結果を一番下に表示するようなツールが作れます。</p>

<p>もしくは<strong>.bashrc</strong>などで</p>

<figure class="code"><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>file_detail <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="o">(</span>
</span><span class="line">    . sentaku -n
</span><span class="line">
</span><span class="line">    _sf_get_content <span class="o">()</span> <span class="o">{</span>
</span><span class="line">        ls -l <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">
</span><span class="line">    ls <span class="p">|</span> _sf_main -U -L <span class="m">1</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>の様に関数として定義したほうが便利かもしれません。</p>

<p><code>. sentaku -n</code>で関数を読み込んでロードするので、
現環境を汚さないために<code>()</code>で囲ってサブシェルの中で実行する様にしています。</p>

<h2 id="他のツールでの状況">他のツールでの状況</h2>

<p>元々これをちゃんとsentakuに入れようと思ったのは以下のエントリーを見てから。</p>

<blockquote>
  <p><a href="https://petitviolet.hatenablog.com/entry/20190708/1562544000">fzfで快適なターミナルライフ - petitviolet_blog</a></p>
</blockquote>

<p>fzfだと<code>--preview</code>というオプションにコマンドを指定すると
そのコマンドを選択中の行に対して適用して結果を表示する、というもの。</p>

<p>実はこの様な機能はsentaku自身には入ってませんでしたが、
拡張例として<code>file_selector</code>というスクリプトで似たようなことができる様にしていました。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/sentaku/blob/master/bin/file_selector">sentaku/file_selector at master · rcmdnk/sentaku</a></p>
</blockquote>

<p>また、<code>s</code>による内容確認の変更は
ゴミ箱ツールのtrashの中でも行っていて、
これだとファイルの中身や削除した日、元々の場所、現在の実体の位置、
などが表示される様になっています。</p>

<div class="github-widget" data-repo="rcmdnk/trash"></div>

<p>このゴミ箱ツールもシェルスクリプトで、LinuxでもMacでもどこでも動くので便利です(宣伝)。</p>

<p>というわけで、fzfにpreview機能があってpecoより便利だよ、という話があったので
sentakuもできるよ、ということにしたかったので本体の方に組み込んでみました。</p>

<p>fzfの<code>--preview</code>オプションの様に表示の内容を変更したい場合には
上の例の様にスクリプトや関数を作って使って貰えればsentakuでも同じ様な設定が出来ます。</p>

<h2 id="まとめ">まとめ</h2>

<p>sentakuでファイルの中身を確認しながら選択できる機能を追加しました。</p>

<p>関数などを作って確認する内容を自分で設定することも可能です。</p>

<p>sentakuに関してはシェルスクリプトで作る、ということにこだわってやっていくので、
もし何か別の面白そうな機能などがありましたら
<a href="https://github.com/rcmdnk/sentaku/issues">Issues</a>
とかで提案していただけたら嬉しいです。</p>

]]></content>
  </entry>
  
</feed>
