<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: bash | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/bash/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-18T17:44:45+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Alt(Cmd)とControlの交換]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/14/computer-windows-mac-bash/"/>
    <updated>2013-06-14T10:57:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/14/computer-windows-mac-bash</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0984333924/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/413lC0hqeYL._SL160_.jpg" border="0"></a></p>

<p>最近<a href="/blog/2013/06/01/computer-bash-linux-mac/">色々キー設定をいじり直した</a>
こともあって、ちょっと久しぶりにキーバインドを大幅に変更してみようと、
2週間くらいの間<i class='key'>Alt</i>(Macでは<i class='key'>Command</i>)と<i class='key'>Control</i>
の位置変えをして試してみました。</p>

<p>主な目的はコマンドラインで作業している時の小指(Control)の負担を減らすことです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="小指の酷使">小指の酷使</h1>

<p>コマンドライン作業ではEmacs的な移動用のショートカットや
さらにGnu screenでのショートカットで<i class='key'>Control</i>を酷使します。</p>

<p>vim編集だとそれ程モディファイヤーキーを使わないですが、
<i class='key'>Esc</i>の代わりに<i class='key'>Control</i>-<i class='key'>[</i>を使いますし、
まあ、何だかんだでemacs編集程ではないにしろ使います。</p>

<p>当然<i class='key'>Control</i>が左下のままでは使い物にならないので
<i class='key'>CapsLock</i>があるキーボードでは<i class='key'>CapsLock</i>をControl化してますが
それでもたまに小指を使い過ぎな感がしていました。</p>

<p>と、そこで<i class='key'>Alt</i>関連のキーを調べてる時に押して居たら<i class='key'>Control</i>
(<i class='key'>CapsLock</i>の位置)よりよっぽど押しやすいんじゃなか、と思ったので、
今更ながらちょっと挑戦<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<h1 id="Alt(Cmd)+i+class=+icon-arrow-exchange+>+/i>Controlの設定">Alt(Cmd)<i class="icon-arrow-exchange"></i>Controlの設定</h1>

<p>Windowsでは<a href="/blog/tags/yamy/">yamy</a>、Macでは
<a href="/blog/tags/keyremap4macbook/">KeyRemap4MacBook</a>でキーバインドを変更しているので、
これらで変更します。</p>

<h2 id="Windows+++yamy">Windows &amp; yamy</h2>

<p>Windowsの場合は元々<i class='key'>CapsLock</i>の場所を<i class='key'>Control</i>にする設定も
yamyで行なっているため、今回は</p>

<ul>
<li><i class='key'>CapsLock</i><i class="icon-arrow-right"></i>Alt</li>
<li>左右の<i class='key'>Alt</i><i class="icon-arrow-right"></i>Control</li>
<li>右の<i class='key'>Control</i><i class="icon-arrow-right"></i>Alt</li>
</ul>


<p>となるようにします。元々<i class='key'>Control</i>の位置にあるキーはまず押さないので
どちらでも良いのですが、ちょっと思い通りに動かない所があって
<i class='key'>Alt</i>をCntrol化した時に実際の<i class='key'>Control</i>キー
との動作の違いを見る必要があったので左はそのままにしてあります。</p>

<p>右<i class='key'>Control</i>キーについては、たまに右手だけで<i class='key'>Alt</i>-<i class='key'>&#x21e0;</i>/<i class='key'>&#x21e2;</i>
のショートカットキーでブラウザなど戻る/進むを使う時があるので
変更してあります<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p>右<i class='key'>Alt</i>についても、右<i class='key'>Control</i>を今のところ使えてないので
無理に替える必要もないのですが、取り敢えず変更。
(<i class='key'>Alt</i>の位置に来れば使えたら便利かもしれない、と。)</p>

<p><code>.mayu</code>用設定項目は以下の通り。</p>

<p><div><script src='https://gist.github.com/5781580.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>CapsLockの機能は一応右下に付いている
アプリケーションキーや右Windowsキーがあったらそれに当てる様にしています。
(NumLockにも)<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。</p>

<p><i class='key'>Alt</i>/<i class='key'>Control</i>-<i class='key'>Tab</i>についてはかなり頻繁に使うキーで
逆にすると使い勝手が余りに悪かったので元の使い方が出来るように
マップしてあります。</p>

<p>その他これ以外にも<i class='key'>Alt</i>を含んで自分でマップしている様な設定については
適時直してあります<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。</p>

<h2 id="Mac+++KeyRemap4MacBook">Mac &amp; KeyRemap4MacBook</h2>

<p>Macの場合は<i class='key'>CapsLock</i>については環境設定から<i class='key'>Control</i>
に変更しているので</p>

<ul>
<li>左右の<i class='key'>Command</i><i class="icon-arrow-right"></i>Control</li>
<li>右の<i class='key'>Control</i><i class="icon-arrow-right"></i>Command</li>
</ul>


<p>の変更でKeyRemap4MacBookでの設定は下の様な項目。</p>

<p><div><script src='https://gist.github.com/5781810.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>この変更については、他のキーバインド変更の後で行なっても
有効になる様です<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<h1 id="その他の変更">その他の変更</h1>

<p>Gnu screenでこれまでprefixキーを<i class='key'>t</i>にしてきましたが、
左親指を内側に曲げた状態で右上のキーを打つことになってかなり打ちづらいので、
<i class='key'>q</i>に変更しました。</p>

<p><i class='key'>Control</i>-<i class='key'>t</i>はコマンドラインでは前後の文字を入れ替える、と言う誰が使うか分からない
操作で、一方<i class='key'>Control</i>-<i class='key'>q</i>
ターミナルコマンドで出力の再開、ですが、<a href="/blog/2013/06/01/computer-bash-linux-mac/">出力を止める<i class='key'>Control</i>-<i class='key'>s</i>
を消しているので</a>
これも必要の無いキーです。</p>

<p>親指との押し安さ度は圧倒的に<i class='key'>q</i>なのでこれに変更です<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>。</p>

<h1 id="問題点">問題点</h1>

<p>Mac上での操作に関しては今のところ動作的におかしな動きは出ていません。
仮におかしな点があったとしても、いざとなれば環境設定から
この辺りのキー変更を行えば問題なくなると思います。</p>

<p>一方、Windowsの方はyamyで変更しきれてない部分があるらしくちょっと
おかしな動きを示します。</p>

<p>まず、<i class='key'>Control</i>-<i class='key'>[</i>を全ての場所で
<i class='key'>Esc</i>になる様に設定していましたが、
これがControlキー化した<i class='key'>Alt</i>を使うと<i class='key'>Alt</i>-<i class='key'>Esc</i>
の様な働きをします(<i class='key'>Control</i>も効いているがさらに<i class='key'>Alt</i>成分が残っている)。</p>

<p>また、<i class='key'>Control</i>-<i class='key'>h</i>=<i class='key'>BS</i>となる設定をしていますが、
これがメモ帳だと、最初に押した時は効かず、一度<i class='key'>Control</i>(へ変更した<i class='key'>Alt</i>)
と<i class='key'>Alt</i>(へ変更した<i class='key'>Control</i>)を押してから<i class='key'>Alt</i>だけ離して
<i class='key'>h</i>を押すと<i class='key'>BS</i>として働く、と言った奇妙な動きをします。</p>

<p>ここで不思議なのは、この現象が起こるソフトと起こらないソフトがあることで、
Thunderbirdなどでは正しく動きます。</p>

<p>さらに、sshクライアントとして使っているPuttyで
<i class='key'>Control</i>-<i class='key'>h</i>が正しく動きませんでした<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup>。
上にあるようにこのキーは<i class='key'>BS</i>にマップしてあるわけですが、
<i class='key'>BS</i>単体では正しく前の一文字を消せるので、また何か余計に動作しているみたいです<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup>。
これに関してはPutty上だけ<i class='key'>Control</i>-<i class='key'>h</i>=<i class='key'>Control</i>-<i class='key'>h</i>
としてそのままのキーを送る様にしてやると取り敢えずまともに動く様になりました。</p>

<p>ちなみにCygwinで使っているターミナル達ではこの問題は起こっていません。</p>

<p>これらの問題を左下に残した本来の<i class='key'>Control</i>で試すと
何も問題が無いのでやはり
<i class='key'>Alt</i><i class="icon-arrow-exchange"></i><i class='key'>Control</i>
変換の所で問題が起こっている様です。</p>

<p>そこで、レジストリーレベルでキーを変更してみたりもしてみたのですが<sup id='fnref:9'><a href='#fn:9' rel='footnote'>9</a></sup>、
yamyを動かすと変更が無効になるような動作をするので、上手くいかず。</p>

<p>この辺り、どれがどのようなレベルでどうやって変更しているのかちゃんと
理解しないといけませんが<sup id='fnref:10'><a href='#fn:10' rel='footnote'>10</a></sup>、
今のところ完璧に正しくは出来ていません。</p>

<p>やる気が出たら他のソフトでも試してみたい所ですが<sup id='fnref:11'><a href='#fn:11' rel='footnote'>11</a></sup></p>

<p>差し当たり、Puttyで問題が解決出来て、Thunderbird/cygwin/vimでも問題が無いので、
このまましばらく行こうと思います。</p>

<h1 id="これまでのところの感想">これまでのところの感想</h1>

<p>2週間くらい続けた感じでは、いままでたまに小指がウラウラしてたのが無くなったので
かなり快適です。</p>

<p>左親指を常に内側に曲げている様な形になるので、最初は暫くちょっと窮屈でしたが、
痛くなる様な形では無いし、慣れれば平気になりました。
ちょっとスペースを押すのが今までに比べて右手が多くなったかもしれません。
(余り意識してないので実際良くわからない。。。)</p>

<p>小指で<i class='key'>Control</i>を押す必要が無いので、
<i class='key'>Control</i>-<i class='key'>a</i>と言ったショートカットも手の位置をそのままに
<i class='key'>a</i>を小指で押せます。</p>

<p>また、Firefox+Vimperatorだと、右手でトラックパッドやマウスなどで操作しながら
左手で<i class='key'>Control</i>-<i class='key'>f</i>/<i class='key'>b</i>でページを上下、
することが多いので、これは親指Controlのが近いので楽です。</p>

<p>ただ、小指を使わなくなった分、左<i class='key'>Shift</i>へ手を伸ばすの事態が億劫になった
感がちょっとありますが、まあ慣れでしょう。</p>

<p>右<i class='key'>Alt</i>の位置にあるControlについては、今まで使う癖がなかったので
今のところ使えて無いですが、どうなんでしょうか...?
<i class='key'>Shift</i>についてはなんか上手い具合に左右を使っているわけですが<sup id='fnref:12'><a href='#fn:12' rel='footnote'>12</a></sup>、
意識的に使っていったら便利なのかもしれないと思い、
たまーに使う様に努力しています。
ただ、自分の癖か、右手の下の方が割りと左に偏ってる感がある<sup id='fnref:13'><a href='#fn:13' rel='footnote'>13</a></sup>のと、
キーボードよっては右<i class='key'>Alt</i>の方が遠い事が多いので
スペース右側のキーはそれ程押しやすいキーではなく、多分、編集やら
コマンドライン作業では使わなそうです。</p>

<p>ということで、もうしばらくこのまま行ってみたいと思っています。</p>

<h1 id="おまけ:+キーボードについて">おまけ: キーボードについて</h1>

<p>Macだと日本語キーボードでもUSキーボードでも大体左右対称です。</p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B005DPEZ4Y/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/31Ea1Mk60GL._SL160_.jpg" border="0"></a>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B005DPEZOY/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/41CkqLKMxgL._SL160_.jpg" border="0"></a></p>

<p>手元にあるMBA(USキーボードも)それぞれ左右<i class='key'>x</i>、<i class='key'>,</i>の下に
<i class='key'>&#x2318;</i>が来ています。</p>

<p>一方でWindows用(と言うかMac専用用以外)ではUSキーボドだと若干右に
スペースキーが偏ってるのが多くて、
今使ってるシンプルなキーボード代表のHHKでも若干右に偏っています。</p>

<p>  <a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXZ0VC/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/41WFYKNEMPL._SL160_.jpg" border="0"></a></p>

<p>さらにこれなんかだと、もっと遠くでちょっと手を大きく動かさないと親指では届かなそう。</p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00B5SEHNC/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/41Tavlhy-uL._SL160_.jpg" border="0"></a></p>

<p>日本語キーボードだと<i class='key'>無変換</i>だとかいったキーがスペースキーの両サイドに来て、
そもそも<i class='key'>Alt</i>が右側にない、というのも多いかも。</p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BJZ2JWC/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/31iiePrAx4L._SL160_.jpg" border="0"></a></p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B001KWJTD6/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/41GoIiLqe4L._SL160_.jpg" border="0"></a></p>

<p>日本語キーボードの場合はMacの場合でも、これら日本語用のキーが来て
<i class='key'>Alt</i>/<i class='key'>Command</i>は遠くなってしまうので、
使うならこれらスペース横のキーをControlなりAltなりに変更するべきです。
そうするとむしろUSキーボードより真ん中になるので打ちやすいかも。
(これらのキーは位置的にはスペースでの日本語変換に準じて変換を行えるように
ここにあるんでしょうね。使ったことが一切無いですが...)</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>あまり根本的な所を変えるのもどうかと思いましたが、
  人のPCなどだと所詮Control遥か左下にあるので、まあ、関係ないか、と。
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p>これらのキーはControl-o/iにマップして使ってます。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>なんらかの拍子でCapsLock状態になった時のため、と思ってやってますが、
  キーを潰しておけばまず入ら無いしいざとなればyamyを一時停止すれば良いので、
  やっぱり当てないほうが良いかも(微妙な位置にあるので)
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p>今回は主にコマンドラインベースのショートカットキーの変更が目的なので、
  その他の部分で、特に自分で変更しているAlt/Control
  関連のショートカットキーはなるべくそのままの使い勝手になるようにしてます。
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p>先にCommand-a=bの様な設定をしていても
  いずれかの場所で(この設定の前でも後ろでも)
  ControlをCommandに変える設定をすれば
  Ctonrol-aと押せばbが実行される。
  <a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p>小指Controlの場合だとqにしてしまうと手全体が左に動いてしまって
  ちょっと嫌な感じになるかも。
  <a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p>Control-uの様な左の文字を一気に消す、になる。
  <a href='#fnref:7' rev='footnote'>↩</a></p>
</li><li id='fn:8'><p>Puttyの設定ではBSを押した時にどのようなキーを送るか
  (Control-h or Control-?)と言う設定はありますが
  その他に細かいキー設定は無い(と思う、少なくとも見た限り)。
  <a href='#fnref:8' rev='footnote'>↩</a></p>
</li><li id='fn:9'><p><a href="http://www.asahi-net.or.jp/~ee7k-nsd/">KeySwap</a>、[Change Key][http://satoshi3.sakura.ne.jp/f_soft/dw_win.htm]
  と言ったソフトを使用。両方共レジストリーを書き換えてるだけだと思うので
  同じことをしているんだと思います。これらで変更した後、yamyを止めているときは
  正しく動きますが、yamyで初期のキー設定をロードしただけの状態でも
  キー配置が元に戻ります。ただし、<code>調査</code>でみてみると交換されているようにも見える。
  <a href='#fnref:9' rev='footnote'>↩</a></p>
</li><li id='fn:10'><p><a href="http://d.hatena.ne.jp/LM-7/20090614/1244980470">Vista/Windows 7におけるキーボードカスタマイズ問題 - A Successful Failure</a>
  <a href='#fnref:10' rev='footnote'>↩</a></p>
</li><li id='fn:11'><p><a href="/windows/windowssoftware/#Yet+Another+Mado+tsukai+no+Yuutsu+(yamy">Yamyとその他のキーカスタマイズソフトについて</a>　+#9733;+#9733;+#9733;+#9733;+#9733;)
  <a href='#fnref:11' rev='footnote'>↩</a></p>
</li><li id='fn:12'><p>これも実際どのキーの時どっちを押してるか自分でも良く分かってないですが...
  <a href='#fnref:12' rev='footnote'>↩</a></p>
</li><li id='fn:13'><p>人差し指でキーボードの真ん中辺りを指すと左右の指がそれぞれg/h
  辺りをさして丁度真ん中ですが、親指を置いてみると左がvで右がb
  辺りに来ている。
<a href='#fnref:13' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ターミナルキーバインドの設定等]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/01/computer-bash-linux-mac/"/>
    <updated>2013-06-01T00:13:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/01/computer-bash-linux-mac</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/30/computer-bash-screen-linux/">前回</a>、
<a href="/blog/2013/05/29/computer-bash-screen-linux/">前々回</a>
で色々調べてた所で
readlineのキーバインドとかを全く活用してなかった事に今更ながら気付いたので
まとめと改めて設定したものなど</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="端末コマンドの削除">端末コマンドの削除</h1>

<p>いくつかstty<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>で設定されている端末コマンドで
余計な物を削除するため(readlineでのkeymapで使ったりするため)
<code>.bashrc</code>に以下の様にしてあります。</p>

<pre><code>tty -s &amp;&amp; stty stop undef # C-s
tty -s &amp;&amp; stty start undef # C-q
if [[ "$OSTYPE" =~ "darwin" ]];then
  tty -s &amp;&amp; stty discard undef # C-o
fi
</code></pre>

<p><code>C-s</code>の設定は良くある設定で画面出力の設定を消して
bashでの履歴検索に使います<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p><code>C-o</code>についてはMac(BSD sttyのデフォルト?)だと
<code>discard</code>に割り当てられていて使えないのでこれを除きます。
Linuxと共通の物を使いたいので<code>darwin</code>でMacを判別。
(他のBSD系の端末は今のところ使っていないので)</p>

<p><i class='key'>C</i>-<i class='key'>q</i>は便利な位置にあるキーなので
いつか何かに割り当てようかと。(<code>C-s</code>を潰した以上使わないので)</p>

<h1 id="よく使う+覚えておきたい端末コマンド/bashキーマップ">よく使う&amp;覚えておきたい端末コマンド/bashキーマップ</h1>

<p>大概の場合の初期設定+上の端末コマンド削除後に使えるコマンドのうち、
取り敢えず必要なものと便利そうな物のまとめ<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>(今更感)。
(sttyとbashキーマップごちゃまぜです。)</p>

<p>以下で<code>M-</code>はエスケープシーケンス(<code>\e</code>で設定される項目)です。</p>

<h2 id="制御、端末">制御、端末</h2>

<table>
<thead>
<tr>
<th align="left">キー</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>C-c</code></td>
<td align="left">実行中のプロセスを終了</td>
</tr>
<tr>
<td align="left"><code>C-z</code></td>
<td align="left">実行中のプロセスを中断 (<code>fg</code>/<code>bg</code>で再開)</td>
</tr>
<tr>
<td align="left"><code>C-d</code></td>
<td align="left">ログアウト</td>
</tr>
<tr>
<td align="left"><code>C-l</code></td>
<td align="left">画面クリア</td>
</tr>
<tr>
<td align="left"><code>C-x C-r</code></td>
<td align="left"><code>.inputrc</code>の再読み込み</td>
</tr>
</tbody>
</table>


<h2 id="コマンド">コマンド</h2>

<table>
<thead>
<tr>
<th align="left">キー</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>TAB</code></td>
<td align="left">補完</td>
</tr>
<tr>
<td align="left"><code>C-j</code>/<code>C-m</code></td>
<td align="left">コマンドを実行(Return/Enter)</td>
</tr>
<tr>
<td align="left"><code>C-o</code></td>
<td align="left">コマンドを実行して次の行にも同じコマンドを表示</td>
</tr>
<tr>
<td align="left"><code>C-x C-u</code></td>
<td align="left">取り消す(undo)</td>
</tr>
<tr>
<td align="left"><code>C-v</code></td>
<td align="left">直後の入力を直接入力にする(<code>C-a</code>等)</td>
</tr>
<tr>
<td align="left"><code>C-x C-e</code></td>
<td align="left">エディタでコマンドを入力</td>
</tr>
<tr>
<td align="left"><code>C-x (</code></td>
<td align="left">　キーボードマクロ記録開始</td>
</tr>
<tr>
<td align="left"><code>C-x )</code></td>
<td align="left">　キーボードマクロ記録停止</td>
</tr>
<tr>
<td align="left"><code>C-x e</code></td>
<td align="left">　キーボードマクロ実行</td>
</tr>
</tbody>
</table>


<p>この<code>C-o</code>を使うために上で端末コマンドを削除。
ただ余り使う機会はないかも。</p>

<p><code>C-x C-e</code>で使うエディタは環境変数<code>EDITOR</code>で指定されたものです。
<code>.bashrc</code>で</p>

<pre><code>export EDITOR=vim
</code></pre>

<p>としてあります。(emacsにしたかったら<code>export EDITOR='emacs -nw</code>とか。)
履歴とかで表示してからでも<code>C-x C-e</code>をすれば
表示された状態から編集できるので長いコマンドを変更するには結構便利。</p>

<p>キーボードマクロは、例えば</p>

<pre><code>$ &lt;C-x (&gt; echo test
test
$ echo test2
test2
$ &lt;C-x )&gt;
</code></pre>

<p>等とすると(<code>&lt;</code>~<code>&gt;</code>は表示されない部分)次に<code>C-x e</code>と押すと
<code>echo test;echo test2</code>が実行出来る様になります。</p>

<p>エディタとキーボードマクロも今更初めて知りました。
エディタの方はたまに使います。</p>

<p>マクロの方は初めて使った時軽く衝撃的でしたが、
実用性はそれ程ないかもしれません...</p>

<h2 id="履歴">履歴</h2>

<table>
<thead>
<tr>
<th align="left">キー</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>C-p</code></td>
<td align="left">1つ前のコマンドを表示</td>
</tr>
<tr>
<td align="left"><code>C-n</code></td>
<td align="left">1つ後のコマンドを表示</td>
</tr>
<tr>
<td align="left"><code>C-&lt;</code></td>
<td align="left">履歴を最初のコマンドを表示</td>
</tr>
<tr>
<td align="left"><code>C-&gt;</code></td>
<td align="left">履歴を最後のコマンドを表示</td>
</tr>
<tr>
<td align="left"><code>C-r</code></td>
<td align="left">履歴を古い方向へインクリメンタルサーチ</td>
</tr>
<tr>
<td align="left"><code>C-s</code></td>
<td align="left">履歴を新しい方向へインクリメンタルサーチ</td>
</tr>
<tr>
<td align="left"><code>C-.</code></td>
<td align="left">1つ前のコマンドの最後の引数を貼り付け</td>
</tr>
</tbody>
</table>


<p><code>C-s</code>はここで必要。
<code>C-.</code>は初めて知りましたが、<code>C-o</code>以上に使わないかも。</p>

<h2 id="移動系">移動系</h2>

<table>
<thead>
<tr>
<th align="left">キー</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>C-f</code></td>
<td align="left">1文字進む</td>
</tr>
<tr>
<td align="left"><code>C-b</code></td>
<td align="left">1文字戻る</td>
</tr>
<tr>
<td align="left"><code>M-f</code></td>
<td align="left">1単語進む</td>
</tr>
<tr>
<td align="left"><code>M-b</code></td>
<td align="left">1単語戻る</td>
</tr>
<tr>
<td align="left"><code>C-a</code></td>
<td align="left">行頭へ</td>
</tr>
<tr>
<td align="left"><code>C-e</code></td>
<td align="left">行末へ</td>
</tr>
</tbody>
</table>


<p>必須。GNU screenのデフォルトだと<code>C-a</code>をescapeとして潰してしまいますが、
変更必須。</p>

<h2 id="削除、貼り付け、変更">削除、貼り付け、変更</h2>

<table>
<thead>
<tr>
<th align="left">キー</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>C-h</code></td>
<td align="left">直前の1文字削除</td>
</tr>
<tr>
<td align="left"><code>C-d</code></td>
<td align="left">直後の1文字削除</td>
</tr>
<tr>
<td align="left"><code>C-w</code></td>
<td align="left">直前の1単語削除</td>
</tr>
<tr>
<td align="left"><code>M-d</code></td>
<td align="left">直後の1単語削除</td>
</tr>
<tr>
<td align="left"><code>C-u</code></td>
<td align="left">行頭まで削除</td>
</tr>
<tr>
<td align="left"><code>C-k</code></td>
<td align="left">行末まで削除</td>
</tr>
<tr>
<td align="left"><code>C-y</code></td>
<td align="left">貼り付け</td>
</tr>
<tr>
<td align="left"><code>M-y</code></td>
<td align="left">削除リングの最後を消して1つ前を代わりに貼り付け(<code>C-y</code>/<code>M-y</code>した後にだけ使用可能)</td>
</tr>
<tr>
<td align="left"><code>M-u</code></td>
<td align="left">次の単語を全て大文字に</td>
</tr>
<tr>
<td align="left"><code>M-l</code></td>
<td align="left">次の単語を全て小文字に</td>
</tr>
<tr>
<td align="left"><code>M-c</code></td>
<td align="left">次の単語の先頭を大文字に</td>
</tr>
<tr>
<td align="left"><code>C-t</code></td>
<td align="left">カーソル前後の文字を交換</td>
</tr>
<tr>
<td align="left"><code>M-t</code></td>
<td align="left">カーソル前後の単語を交換</td>
</tr>
</tbody>
</table>


<p><code>M-y</code>も初めて知りました。readlineにも削除履歴(kill ring)があったんですね。
<code>C-t</code>は元々使い道が余り無いので、GNU screenのescapeとして使ってます。
<code>M-t</code>の単語交換の方はたまーに使います。</p>

<h1 id="`.inputrc`での設定"><code>.inputrc</code>での設定</h1>

<h2 id="readline環境設定">readline環境設定</h2>

<p>readlineの設定は</p>

<pre><code>set bell-style none
set expand-tilde off

set convert-meta off
set input-meta on
set output-meta on
</code></pre>

<p>の様な感じで</p>

<ul>
<li>beep音/visualベルをオフに</li>
<li><code>~</code>を展開表示しない</li>
<li>日本語を通る様に</li>
</ul>


<p><code>expand-tilde</code>の項目は新たに加えました。(いちいち展開されるのが鬱陶しいので))</p>

<h2 id="キーバインド設定">キーバインド設定</h2>

<p><div><script src='https://gist.github.com/5690734.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<ul>
<li><code>M-g</code>などでgrepのテンプレート</li>
<li>カーソル下、または前の単語を<code>M-'</code>でクォートしたり括弧で囲ったり</li>
<li><code>M-q</code>で<code>${}</code>記入して括弧内へ</li>
<li><code>M-l</code>で<code>less</code>に出力して実行</li>
<li><code>M-s</code>で<code>ls</code></li>
<li><code>M-u</code>で1つ上のディレクトリへ移動</li>
<li><code>M-d</code>でカレントディレクトリの各項目の大きさを調査</li>
<li><code>M-;</code>/<code>M-:</code>で標準出力、またはエラー出力も表示させない様にして実行</li>
</ul>


<p>など。差し当たり普段使わないキーに対する割り当てなので、
慣れなかったらやめれば良いだけなので、取り敢えず。</p>

<p>ちなみにキーバインドをするとき、
<a href="http://blog.livedoor.jp/add20/archives/4554645.html">絶対にやってはいけないこと</a>
にあるように<code>C-m</code>に割り当てをすると<code>Return</code>(<code>Enter</code>)
の変更とも解釈されるのでするべきではありません。(<code>C-j</code>はOK。)
これは<code>C-m</code>と<code>Return</code>が同じコード(CR:キャリッジ・リターン)なのに対して
<code>C-j</code>は"改行"で<code>Return</code>とコードが違うため<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup><sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。
同様に、<code>C-h</code>、<code>C-i</code>もそれぞれBackspace、TABと解釈されるので駄目。</p>

<p>Alt/Cmdを頻繁に使う様にしてみようとしていたら、
ちょっといっその事Alt/CmdとCtrl(CapsLockの所)自体を交換した方が良いんじゃないかと思い始めた今日このごろ。
(どうせ自分以外の環境で作業しなきゃいけないときはCtrlとか遠いところに
あって普段通りに使えないので自分の所だけで慣れていても問題ないかな、と。)</p>

<h2 id="`set+editing-mode+vi`"><code>set editing-mode vi</code></h2>

<p>上での設定は通常コマンドラインで初期設定となっている
<code>emacs</code>モードです。
普段エディタとしては<code>vim</code>を使っているので何度か
viモードにして試してますが、いまいち使いこなせないままです。
(インサートモード時の設定を一通りemacsモードと同じ様にすれば
それ程ストレス無く使えるかもですが。)</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> sttyはshort for Set TeleTYpeの略らしい(<a href="http://wiki.linuxquestions.org/wiki/Stty">Stty</a>)
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> 黒い画面を使い初めてしばらくして、
  <code>C-r</code>/<code>C-s</code>
  で履歴を検索出来る、と言う事を初めて知った時に画面が止まってしまう罠。
  <code>C-q</code>が再開コマンドですがそれが分かるようなら
  罠に陥らないわけで。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://d.hatena.ne.jp/hogem/20090411/1239451878">bashのキーバインド(キーボードショートカット) まとめ - readlineとbind、ついでにstty編</a>,
  <a href="http://kazmax.zpp.jp/cmd/b/bash.1.html">bash - コマンド (プログラム) の説明 - Linux コマンド集 一覧表</a>,
  <a href="http://www.asahi-net.or.jp/~wg5k-ickw/html/online/gdb-5.0/gdb-ja_22.html">コマンドライン編集</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://ja.wikipedia.org/wiki/ASCII">Wikipedia:ASCII</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><code>C-m</code>だと<code>m</code>(01101101)の下位5ビットだけ(00001101)が送られ、
  これがRetrun(CR)に等しい。Ref:<a href="http://ja.wikipedia.org/wiki/Ctrl%e3%82%ad%e3%83%bc">Wikipedia:コントロールキー</a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタキー/ESCについて: iTermでそれらのキーを送る設定も]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/30/computer-bash-screen-linux/"/>
    <updated>2013-05-30T21:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/30/computer-bash-screen-linux</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/29/computer-bash-screen-linux">前回</a>
コマンドラインで文字化けしてたのは<code>\M-c</code>を<code>.inputrc</code>で設定してたからだ、
という話を書きましたが、
ついでにメタキーやらエスケープ入力やらを少し調べたので
まとめておきたいと思います。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="MacのiTerm(ターミナル)でのメタキー、エスケープシーケンスの設定">MacのiTerm(ターミナル)でのメタキー、エスケープシーケンスの設定</h1>

<p>まず、Macの場合ちょっと特殊なので、iTerm(ここではiTerm2)等で
メタキープレフィックス状態やエスケープシーケンスを送る方法をまとめておきます。</p>

<p>iTerm(ターミナル.appでも一緒)
ではCommandキー(<i class='key'>&#x2318;</i>)との同時押しはターミナルに直接送られないで、
アプリケーションのショートカットとなるので
<i class='key'>&#x2318;</i>+<i class='key'>f</i>
はサーチウィンドウが開いてしまいます。</p>

<p>これに対処するにはいくつか方法がありますが、
まずはiTerm自体でキー直接送るよう、設定をする方法があります。</p>

<p><img src="/images/post/20130530_iTerm_preference.jpg" title="" alt=""></p>

<p><code>Preferences</code><i class="icon-arrow-right"></i>
<code>Profiles</code><i class="icon-arrow-right"></i>
<code>Keys</code>の項目で、上の図の様に
<i class='key'>&#x2318;</i>+<i class='key'>f</i>
に対して
<code>Send Escape Sequence</code>+<code>f</code>と言う様に設定します。
これで<i class='key'>&#x2318;</i>+<i class='key'>f</i>
を押すと<i class='key'>ESC</i> <i class='key'>f</i>が送らる様になるので
コマンドライン上で1単語進める様になります。</p>

<p>ターミナル.appでも
<code>環境設定</code><i class="icon-arrow-right"></i>
<code>設定</code><i class="icon-arrow-right"></i>
<code>キーボード</code>に
同じ様な設定項目があるので、同様に設定出来ます。</p>

<p>また、上の図の下の方を見るとOption(<i class='key'>&#x2325;</i>)の設定が
<code>Normal</code>、<code>Meta</code>、<code>+Esc</code>のうちから選べる様になっているので、
<code>Meta</code>を選べばメタキー、<code>+Esc</code>を選べば入力キーと共にエスケープシーケンス
(上のCommandに対するのと同様の働き)、</p>

<p>として働かす事が出来ます。</p>

<p>また、もし<a href="http://pqrs.org/macosx/keyremap4macbook/index.html">KeyRemap4MacBook</a>
を使っているなら下のような設定を入れておけば直接
<i class='key'>&#x2318;</i>+<i class='key'>&lowast;</i>
を<i class='key'>ESC</i> <i class='key'>&lowast;</i>
に置き換えてやることもできます。
(沢山入れたい時はこちらの方が楽。)</p>

<p><div><script src='https://gist.github.com/5681243.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h1 id="メタプレフィックスとエスケープシーケンス、それから`Alt`キー">メタプレフィックスとエスケープシーケンス、それから<code>Alt</code>キー</h1>

<p>前置きが長くなりましたが、本題へ。</p>

<p>そもそもメタプレフィックス(<code>\M-</code>、メタキーと同時押し)と
エスケープシーケンス(<code>\e</code>、ESCを押して一旦離して次のキーを押す)
が全く一緒だと思ってたんですが
基本的には区別されます。</p>

<p>以下に行く前に取り敢えず前回の設定の</p>

<pre><code>set convert-meta off
set input-meta on
set output-meta on
</code></pre>

<p>は設定してあることを前提とします。(<code>convert-meta</code>はすぐに変えますが。)</p>

<h2 id="`convert-meta`が`on`の場合"><code>convert-meta</code>が<code>on</code>の場合</h2>

<p>前回で設定した<code>convert-meta</code>が<code>off</code>でなく<code>on</code>になっていると
メタキープレフィックスがエスケープシーケンスと区別されなくなります。</p>

<p>これは、まず</p>

<ul>
<li>メタキーが8bit目を1にするためのキーであること。</li>
</ul>


<p>一方</p>

<ul>
<li><code>convert-meta</code>が<code>on</code>である場合、8bit目が1のキー入力が来た時は
8bit目を落として、<code>ESC</code>を先に1回押した状態、と同じにする。</li>
<li>さらにこのような<code>ESC+*</code>の状態をメタキープレフィックス状態と同値とみなす様になる。</li>
</ul>


<p>ということから結果的に<code>\M-f</code>と<code>\ef</code>の様なキーを全く同一とみなす様になります。
(この辺理解がちょっと怪しい...)</p>

<p>実際に<code>set convert-meta on</code>と<code>.inputrc</code>で設定した場合、
まず、<code>bind -p</code>等とすると設定されている項目は<code>\C-</code>等Control関係のものなどのものに混じって
<code>\M-f</code>等、メタキープレフィックスな状態だけが表示されます。</p>

<p>MacのiTerm上では、
<i class='key'>&#x2318;</i>+<i class='key'>f</i>、
<i class='key'>&#x2325;</i>+<i class='key'>f</i>
(これらについては上にあるように設定してあるとします)、
及び<i class='key'>ESC</i><i class='key'>f</i>
は全て初期設定の1単語進む(<code>forward-word</code>)、の動きをします。
Windows/Linuxでも
<i class='key'>Alt</i><i class='key'>f</i>、
<i class='key'>ESC</i><i class='key'>f</i>
が同様に動作します。</p>

<p>ここで、</p>

<pre><code>$ bind '"\ef":backward-word'
</code></pre>

<p>としても</p>

<pre><code>$ bind '"\M-f":backward-word'
</code></pre>

<p>としても、いずれの場合でも全てのキーが1単語戻る、の動作をするように変更されます。</p>

<p>また、<code>bind -p|grep backward-word</code>で確認すると、上記両方共設定した場合でも</p>

<pre><code>$ bind '"\M-f":backward-word'
$ bind '"\ef":backward-word'
$ `bind -p|grep backward`
"\M-f": backward-word
</code></pre>

<p>の様に<code>\M-f</code>しか表示されません。試しに違う設定を入れてみれば</p>

<pre><code>$ bind '"\M-f":backward-char'
$ bind '"\ef":backward-word'
$ `bind -p|grep backward`
"\M-f": backward-word

$ bind '"\ef":backward-word'
$ bind '"\M-f":backward-char'
$ `bind -p|grep backward`
"\M-f": backward-char
</code></pre>

<p>の様に<code>\ef</code>、<code>\M-f</code>のいずれか後で設定した物がbindの<code>\M-f</code>の結果として
表示される事が分かります(上の表示は必要ない出力は省いています。)。</p>

<h2 id="`convert-meta`が`off`の場合"><code>convert-meta</code>が<code>off</code>の場合</h2>

<p><code>convert-meta</code>が<code>off</code>の場合、<code>\M-f</code>と<code>ESC f</code>は区別されます。</p>

<p>まず、<code>bind -p</code>などとすると<code>\e</code>の項目だけで<code>\M-</code>となっているものはありません。</p>

<p>ここでキーを試して見ると、Macでの
<i class='key'>&#x2318;</i>+<i class='key'>f</i>、
<i class='key'>ESC</i><i class='key'>f</i>、
また
Windows/Linuxでの
<i class='key'>Alt</i><i class='key'>f</i>、
<i class='key'>ESC</i><i class='key'>f</i>
は1単語進む(<code>forward-word</code>)、の動きをします。</p>

<p>一方、Macでメタキーとして設定した
<i class='key'>&#x2325;</i>+<i class='key'>f</i>
だけは
<code>forward-word</code>の動きはせず文字化けしたものを表示したりします。</p>

<p>従ってメタキープレフィックスな状態とエスケープシーケンスが区別されていて、
さらに<code>Alt</code>キーはメタキーとしてではなく、エスケープシーケンスを作る様に
働く事が分かります。
<code>Alt</code>についてはCygwinやらLinuxでのxterm等で試しましたが、
試した限りでは全てエスケープシーケンス的に動いています。
(ここが意外だった所。ターミナルやその他の環境によって
もしかしたら違うのかもしれません。)</p>

<p>次に、bindでキー変更してみると、</p>

<pre><code>$ bind '"\ef":backward-word'
</code></pre>

<p>とした場合は<i class='key'>&#x2325;</i>+<i class='key'>f</i>以外のキーが</p>

<pre><code>$ bind '"\M-f":backward-word'
</code></pre>

<p>とした場合は<i class='key'>&#x2325;</i>+<i class='key'>f</i>だけが変更されます。</p>

<p><code>bind -P</code>とすると</p>

<pre><code>$ bind -P |grep backword-word
"\eb": backward-word
"\ef": backward-word
"*": backward-word
</code></pre>

<p>の様な感じで、最後の文字化け(*としてある)部分が<code>\M-f</code>です。
(文字化け部分はfのコード(01100110)の8bit目が1になったもの。)</p>

<h2 id="`input-meta`/`output-meta`について"><code>input-meta</code>/<code>output-meta</code>について</h2>

<p><code>input-meta</code>が<code>off</code>の場合、端末がサポートして居ない場合、
8bit目を落とします。<code>on</code>だと端末の状況関係なく8bit目も受け入れます。
手元の環境ではこの設定は<code>off</code>にしても影響が出るものはありませんでした。
この値は古くは<code>meta-flag</code>と言う名前で定義されていましたが、
この名前は現在は<code>input-meta</code>と同義で、
<code>input-meta</code>で定義しても<code>bind -v</code>等で見るとき等は<code>input-meta</code>の値として反映されます。</p>

<p><code>output-meta</code>は<code>on</code>の時には出力時に8bit目が1の入力を直接表示し、
<code>off</code>の時はメタプレフィックスエスケープシーケンスとして表示します。
<code>output-meta</code>を<code>off</code>にしてさらに<code>convert-meta</code>を<code>off</code>にした状態で
<i class='key'>&#x2318;</i>+<i class='key'>f</i>
を打つと<code>\346</code>と表示され、
これは11100110(fのコードの8bit目を1にしたもの)の8進法表示になってる
事が確認出来ます。(メタキーが8bit目を1にしたことを確認出来る。)</p>

<h1 id="Emacsでのキーバインド">Emacsでのキーバインド</h1>

<p>Emacsにおいては少なくとも初期設定のままでは
エスケープシーケンスのみが有効でメタキーは効きませんでした。</p>

<p>キーバインドで</p>

<pre><code>(define-key global-map "\M-f" 'backward-word)
</code></pre>

<p>と書こうが、</p>

<pre><code>(define-key global-map "\ef" 'backward-word)
</code></pre>

<p>と書こうが<i class='key'>&#x2318;</i>+<i class='key'>f</i>
は1単語戻る、になりましたが、
<i class='key'>&#x2325;</i>+<i class='key'>f</i>
は何故か<code>A</code>を出力するだけでした。 <sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<h1 id="Happy+Hacking+Keyboardのメタキー?">Happy Hacking Keyboardのメタキー?</h1>

<p>HHKにはモードを変更してスペースの両端にあるキーを変更できたりするんですが、
両端にあるダイヤモンド型のマークの有るキーが
Wikipediaの
<a href="http://ja.wikipedia.org/wiki/%e3%83%a1%e3%82%bf%e3%82%ad%e3%83%bc">メタキーのページ</a>
で紹介されているので違いがあるかな、と思ったんですが、
このキーは何も機能しない様でした。</p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXZ0VC/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/41WFYKNEMPL._SL160_.jpg" border="0"></a></p>

<p><a href="http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html">HHKモード</a>
にして、キー自体が送られていることは<a href="/blog/2013/03/13/yamy">yamy</a>の
スキャンコードの機能で確かめました。
コード自体は以前も調べたのですが、左右がそれぞれ<code>0x7b</code>、<code>0x79</code>です。
これらは日本語配列キーボードの無変換、変換に当たるキーコードなので、
この部分だけは日本語配列と同じ
<i class='key'>Alt</i>-<i class='key'>無変換</i>-<i class='key'>Space</i>-<i class='key'>変換</i>
<i class='key'>Alt</i>
の状態になっているわけですね。</p>

<p>というわけで、未だメタキーを直接送れるキーボードがあるかどうか自体が謎。
(Wikiの<a href="http://ja.wikipedia.org/wiki/Alt%e3%82%ad%e3%83%bc">Altの歴史</a>
なんかを見てもメタキーの存在はもう無い感じですかね...?)</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> <code>.emacs</code>を数年ぶりにいじる上、昔の設定を消していたのでどうやるか
  分からなくて調べた...
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コマンドラインでの文字化け解決?: '&#92;M-c'とは...]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/29/computer-bash-screen-linux/"/>
    <updated>2013-05-29T14:23:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/29/computer-bash-screen-linux</id>
    <content type="html"><![CDATA[<p>前に<a href="/blog/2013/05/29/computer-bash-screen-linux">Macでの文字化け対策用のGNU screenのインストール</a>で書いた様に日本語ファイルの表示は出来る様にしてあったのですが、
コマンドラインから日本語を打つと化けると言う現象に悩まされてました。</p>

<p>普段は殆ど必要としないので特に調べないで居たんですが、
色々設定をいじっているうちにとりあえず何が悪いかは分かりました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="+#92;M-c+in+.inputrc">&#92;M-c in .inputrc</h1>

<p>問題は<code>.inputrc</code>の中で</p>

<pre><code>"\M-c": capitalize-word
</code></pre>

<p>と設定してあることでした。</p>

<p>この設定いつ書いたかうる覚えですが、
<code>.inputrc</code>に一通りreadline<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>のショートカットが
再定義してあって、恐らくこれはMacに移った時に<code>Command</code>
ボタンがMeta Keyとして効かない、と思った時に
取り敢えず、と言うことで書いてみたんだと思います。
(この辺りのことはまた次回辺り書きたいと思います。)</p>

<p>この設定を外してbashを立ち上げれば日本語を使えるし
日本語ファイルもコマンドラインから操作できる様になりました。
これでiTermから一通り全て日本語が使えます。</p>

<p>ただ、ちょっとまだわからないのが、この<code>\M-c</code>を設定した時だけ日本語が化ける、
と言う点。</p>

<p>実際にファイルには他の項目も<code>\M-</code>の様な書き方で設定してあったんですが、
これらは悪さしてませんでした。</p>

<p>試しに、これらを<code>.inputrc</code>から外して、日本語が書けることを確認した後、</p>

<pre><code>$ bind '"\M-c": capitalize-word'
</code></pre>

<p>の様に<code>bind</code>コマンドで再定義してやっても日本語が化ける様になります。
この場合、コマンドラインで<code>M-c</code><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>を打つ限りは期待通り次の単語の先頭が
大文字になる動きをします。</p>

<pre><code>$ bind '"\M-c": "test"'
</code></pre>

<p>の様に他の物にしても駄目。この場合<code>M-c</code>を送ると<code>test</code>と出力される様になるわけですが、
日本語をうって<code>Return</code>を押すと書く文字の前に<code>test</code>と表示され
文字化けがその後に出ます。<code>テスト</code>という文字で決定すると<code>test*test*test*</code>
の様な感じに。
<code>\M-c</code>と<code>Enter</code>が何か関係しているのか...?</p>

<p>他の</p>

<pre><code>$ bind '"\M-b": "test"'
</code></pre>

<p>等は影響が無いみたいで日本語がそのまま打てます。</p>

<p>ざっと調べた所、よく分からなかったので、取り敢えず<code>\M-c</code>については
設定しちゃだめ、ということだけで置いておきます...</p>

<p>6/1追記
キーコードをつらつら見ていたらちょっと分かりました。
<code>c</code>のAsciiコードは(従ってUTF-8でのコードも)<code>01100011</code>
なんですがメタキーを利かすと最上位が1になるので
<code>11100011</code>になります。</p>

<p>一方で、UTF-8でのひらがなとカタカナのコードは3バイトで表現されますが、
全ての文字が1バイト目が<code>11100011</code>で始まります。</p>

<p>従って、ひらがなやカタカナを入力した時、決定した瞬間にまず1バイト目が
<code>\M-c</code>で定義されていてしまうとそれに変換されてしまい、
残りの2バイト分が意味不明な状態で残ってしまうわけです。
なので
 <code>テスト</code>という文字で決定すると<code>test*test*test*</code>
の様にそれぞれの文字の1バイト目が変換っされた形になります。</p>

<p>また、漢字は1バイト目が違うので、<code>\M-c</code>を設定した状態でも文字化けしません。
例えば<code>漢字</code>は2進法だと
<code>11100110 10111100 10100010</code>と
<code>11100101 10101101 10010111</code>
で、それぞれの1バイト目の8ビットを除いた数、<code>01100110</code>と<code>01100101</code>は
それぞれ<code>f</code>と<code>e</code>です。
従って、<code>bind '"\M-f":"meta-f"';bind '"\M-e":"meta-e"'</code>の様な設定をすれば
<code>漢字</code>と打って決定した時に<code>meta-f*meta-e*</code>の様な表示になります。</p>

<p>ということなので、<code>convert-meta off</code>に設定した時はメタプレフィックスな
設定はしちゃ駄目、と言うのが正しい様です。</p>

<h1 id="meta+in+inputrc">meta in inputrc</h1>

<p>それからコマンドラインで日本語を表示/使用したいとき、
readlineの設定で</p>

<pre><code>set convert-meta off
set input-meta on
set output-meta on
</code></pre>

<p>の様になってる必要があります<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。(<code>bind -v</code>で確認。)</p>

<p>この設定も<code>.inputrc</code>でそのまま書いておけば反映されます。
(書いた後に反映する場合は<code>C-x C-r</code>)</p>

<p>ただ、使っているLinux端末だと英語環境で使ってますがこれらは
<code>/etc/inputrc</code>に最初から書いてあり
MacやらWindowsやらでは<code>/etc/inputrc</code>が見当たりませんが、
デフォルトで上の様に設定されていました。</p>

<h1 id="LANG">LANG</h1>

<p>上のmetaに関する設定で日本語ファイルを作ったりは出来ますが、
<code>ls</code>などでは化けます。
これを表示するためには</p>

<pre><code>$ echo $LANG
</code></pre>

<p>で何になってるか確認してUTF8系でなかったら</p>

<pre><code>$ export LANG=en_GB.UTF-8
</code></pre>

<p>などとします(<code>.bashrc</code>に加えておく)。<code>ja_JP.UTF-8</code>にすればコマンド出力等も一部表示が日本語化されます。
<code>en_US.UTF-8</code>もあって、<code>en_GB</code>と殆ど変わらないんですが、
<code>date</code>の表示がイギリス式のが好きなのでGBにしてあります。</p>

<pre><code>$ export LANG=en_GB.UTF-8
$ date
Wed 29 May 2013 HH:MM:SS XXXX
$ export LANG=en_US.UTF-8
$ date
Wed May 29 HH:MM:SS XXXX 2013
$ export LANG=ja_JP.UTF-8
$ date
2013年 5月29日 水曜日 HH時MM分SS秒 XXXX
</code></pre>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> <a href="http://www.nxmnpg.com/ja/3/readline">manページ  — READLINE</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> これも次回書こうと思いますが、iTermだとOptionキーでMetaキーを送る事が出来ます。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p> <a href="http://ja.wikipedia.org/wiki/UTF-8">Wiki: URF-8</a>
  <a href="http://www.eva.hi-ho.ne.jp/cgi-bin/user/zxcv/decodeUTF8.cgi">UTF8エンコードをデコードする</a>
  <a href="http://mikeneko.creator.club.ne.jp/~lab/kcode/encode.html">エンコードの種類</a>
  <a href="http://www.bugbearr.jp/?FreeBSD%2FUTF-8%E5%8C%96">FreeBSD/UTF-8化</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macのターミナル.appでのPROMPT_COMMAND]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/01/computer-mac-bash-prompt/"/>
    <updated>2013-05-01T16:03:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/01/computer-mac-bash-prompt</id>
    <content type="html"><![CDATA[<p>Macでは普段iTerm2を使っているのですが、
ふと、もともと入ってるターミナル.appを立ち上げた所、
<code>PROMPT_COMMAND</code>がおかしくてエラーがでたので修正しました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="`.bashrc`での`PROMPT_COMMAND`の設定"><code>.bashrc</code>での<code>PROMPT_COMMAND</code>の設定</h1>

<p>自分用の<code>.bashrc</code>内で、いくつか</p>

<pre><code>PROMPT_COMMAND="${PROMPT_COMMAND:+${PROMPT_COMMAND};}command"
</code></pre>

<p>という形で新しい<code>command</code>を<code>PROMPT_COMMAND</code>に追加しています。<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<p>これは、<code>PROMPT_COMMAND</code>に何らかのコマンドがあれば、最後に<code>;</code>を加えて
新しいコマンドを付け加える、というつもりで、
前提として<code>PROMPT_COMMAND</code>の最後に<code>;</code>がついてないということがありました。</p>

<h1 id="ターミナル.app上での`PROMPT_COMMAND`">ターミナル.app上での<code>PROMPT_COMMAND</code></h1>

<p>Macのターミナル.appには新しいウィンドウやタブを開くとき、
現在作業中の所と同じディレクトリで開く事が出来るオプションがあります。</p>

<p><img src="/images/post/20130501_terminalsetting.jpg" title="" alt=""></p>

<p>このディレクトリの定義はエスケープシーケンスを使って保存していて、
<code>/etc/.bashrc</code>を見ると</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="System-wide+.bashrc+file+for+interactive+bash(1)+shells.">System-wide .bashrc file for interactive bash(1) shells.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>if [ -z "$PS1" ]; then
</span><span class='line'>   return
</span><span class='line'>fi&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>PS1='\h:\W \u\$ '&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="Make+bash+check+its+window+size+after+a+process+completes">Make bash check its window size after a process completes&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>shopt -s checkwinsize&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="Tell+the+terminal+about+the+working+directory+at+each+prompt.">Tell the terminal about the working directory at each prompt.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>if [ "$TERM_PROGRAM" == "Apple_Terminal" ] &amp;&amp; [ -z "$INSIDE_EMACS" ]; then&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>update_terminal_cwd() {
</span><span class='line'>    # Identify the directory using a "file:" scheme URL,
</span><span class='line'>    # including the host name to disambiguate local vs.
</span><span class='line'>    # remote connections. Percent-escape spaces.
</span><span class='line'>local SEARCH=' '
</span><span class='line'>local REPLACE='%20'
</span><span class='line'>local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
</span><span class='line'>printf '\e]7;%s\a' "$PWD_URL"
</span><span class='line'>}
</span><span class='line'>PROMPT_COMMAND="update_terminal_cwd; $PROMPT_COMMAND"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>fi</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>と言った様になっていて、<code>update_terminal_cwd</code>と言う関数内で
<code>\e]7;~\a</code>にディレクトリ情報を送り、この情報をターミナル.appは使っている様です。
この関数を<code>PROMPT_COMMAND</code>で呼んでいます。</p>

<p>従って、上のターミナル.appの環境設定の一番下にもある注意の様に、もし<code>.bashrc</code>
等で<code>PROMPT_COMMAND</code>を上書きしてこの設定を消してしまえば
この環境設定で<code>同じ作業ディレクトリ</code>を選んでも機能しなくなります。</p>

<p>この設定は<code>TERM_PROGRAM</code>が<code>Apple_Terminal</code>(ターミナル.app)
の場合(かつemacs内でのshellで無い場合)
のみに加わるのでiTerm等、他のターミナルアプリでは
<code>/etc/bashrc</code>は<code>PS1</code>を設定するのみになります。</p>

<h1 id="問題点">問題点</h1>

<p>問題なのは</p>

<pre><code>PROMPT_COMMAND="update_terminal_cwd; $PROMPT_COMMAND"
</code></pre>

<p>となっている部分で、この時点で<code>PROMPT_COMMAND</code>が定義されていないと、
結果的に</p>

<pre><code>PROMPT_COMMAND="update_terminal_cwd;"
</code></pre>

<p>と言う様に最後が<code>;</code>で終わる形になってしまいます。</p>

<p>このまま上のある様に<code>;</code>をさらに付け加えてしまうと</p>

<pre><code>-bash: syntax error near unexpected token `;'
</code></pre>

<p>の様なエラーが毎回コマンド打つ事に出て来るようになってしまいます。</p>

<p>普段使ってるLinux(Redhat系)では<code>/etc/bashrc</code>内で</p>

<pre><code>PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
</code></pre>

<p>と言った様に最後が<code>;</code>で無い形で終わっているので
両者で動かすためにちょっと修正が必要です。</p>

<h1 id="`.bashrc`の修正"><code>.bashrc</code>の修正</h1>

<p><code>.bashrc</code>の先頭の方で次の様にしました。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="In+Mac,+it+is+already+read.">In Mac, it is already read.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>if [[ ! "$OSTYPE" =~ "darwin" ]];then
</span><span class='line'>  if [ -r /etc/bashrc ];then&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>source /etc/bashrc
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  fi
</span><span class='line'>fi&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="Remove+the+last++;++from+PROMPT_COMMAND">Remove the last ";" from PROMPT_COMMAND&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>PROMPT_COMMAND=&lt;code>echo ${PROMPT_COMMAND}|sed 's/;$//'&lt;/code>
</span><span class='line'>...&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="}}}">}}}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>/etc/bashrc</code>を読み込んだ後に<code>PROMPT_COMMAND</code>の最後の<code>;</code>を取り除いています。</p>

<p>また、<code>.bashrc</code>の最初で<code>/etc/bashrc</code>を読み込むのですが、
Macの場合、新しいシェルの立ち上げ時に自動的に<code>/etc/bashrc</code>が
読み込まれる様で、上にある<code>update_terminal_cwd</code>が2重に
記述されていたので、
Macの場合(<code>"$OSTYPE" =~ "darwin"</code>)では<code>.bashrc</code>内からは
読み込まない様にもしました。</p>

<p>あまりこの辺の情報を探しても見つからなかったのですし、
<code>Macのターミナルの使い方</code>的な話でも普通に<code>/etc/bashrc</code>を
呼ぶ様な<code>.bashrc</code>を紹介しているようなページしか
見当たらなかったのですが、あまり気になる所ではないですかね...
(ま、今回まで自分も気付かなかったわけだし...)</p>

<h1 id="その他">その他</h1>

<p>と、今回気付いた点のもう一つが、普段使っているLinuxの方では上にあるように
<code>PROMPT_COMMAND</code>で
ウィンドウのタイトル、アイコン名(<code>\033]0;~\007</code>)を変更するように
<code>/etc/bashrc</code>内で設定している事です。</p>

<p>そういえばそうだった、という感じで、昔見た覚えがありますが、
最近これを<code>PS1</code>の変数内で行なっているので、2重に行なっていることになります。</p>

<p><code>PS1</code>の方が後に実行されるので問題は無いのですが、ちょっと気持ち悪い。
ただ、<code>PROMPT_COMMAND</code>にしても、後に付け加えれば2重になるので、
以前、その様に設定してた時も同じと言えば同じです。</p>

<p>基本的にはどこでも事前に設定されているコマンドが必要な事は
殆ど無いので、いっその事<code>.bashrc</code>内で1回リセットしてしまっても
良いのかもしれませんが、
今回のターミナルの様に特殊に使ってる場合もあるということが分かったので、
差し当たりそのままにしておきます。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> <code>${A:+B}</code>でAが定義されてない、またはNULL(空)の場合にはNULLを返し、
  NULL以外の何らかの値が入っていればBを返します。
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
