<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: PuTTY | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/putty/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-14T00:23:49+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microsoftの新しいフォントCascadia Codeを試す]]></title>
    <link href="https://rcmdnk.com/blog/2019/09/23/computer-windows-mac-putty-iterm2/"/>
    <updated>2019-09-23T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/09/23/computer-windows-mac-putty-iterm2</id>
    <content type="html"><![CDATA[<p>Microsoftがターミナルなどでコーディングする際に使うための
等幅フォントCascadia Codeをリリースしたので使ってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#フォント" id="markdown-toc-フォント">フォント</a></li>
  <li><a href="#cascadia-code" id="markdown-toc-cascadia-code">Cascadia Code</a></li>
  <li><a href="#インストール" id="markdown-toc-インストール">インストール</a></li>
  <li><a href="#比較" id="markdown-toc-比較">比較</a>    <ul>
      <li><a href="#windows-putty" id="markdown-toc-windows-putty">Windows PuTTY</a></li>
      <li><a href="#windows-subsystem-for-linuxwslデフォルトターミナル" id="markdown-toc-windows-subsystem-for-linuxwslデフォルトターミナル">Windows Subsystem for Linux(WSL)デフォルトターミナル</a></li>
      <li><a href="#mac-iterm2" id="markdown-toc-mac-iterm2">Mac iTerm2</a></li>
    </ul>
  </li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="フォント">フォント</h2>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00KEJOGVQ?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00KEJOGVQ&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41ik0BIdJ2L._SS90_CR0,0,120,90_.jpg" alt="フォント Font 数字 字体 アルファベット1-9 デカール水転写式 「並行輸入品」" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/07/15/computer-windows-mac/">フォントを変更してみる(M+とかMiguとか)</a></div></li></ul>

<h2 id="cascadia-code">Cascadia Code</h2>

<p>フォントはGitHubで公開されています。</p>

<div class="github-widget" data-repo="microsoft/cascadia-code"></div>

<h2 id="インストール">インストール</h2>

<p>Windowsなら
<a href="https://github.com/microsoft/cascadia-code/releases">Releases</a>
からCascadia.ttfをダウンロードしてダブルクリックで開いたフォントウィンドウの左上にある
<strong>インストールボタン</strong>を押します。</p>

<p><img src="https://rcmdnk.com/images/post/20190923_winfontinstall.jpg" alt="20190923_winfontinstall.jpg" class="pic" /></p>

<p>またはPowerShellなどを開いてChocolateyで</p>

<pre><code>&gt; choco install cascadiacode
</code></pre>

<p>で入れられます。</p>

<p>確認は<strong>設定</strong><i class="fa fa-arrow-right"></i><strong>個人用設定</strong><i class="fa fa-arrow-right"></i><strong>フォント</strong>でCascadia codeを探してみてください。</p>

<p>MacでもCascadia.ttfをダウンロードしてダブルクリックすれば
Font Bookが立ち上がりCascadia Codeのウィンドウも立ち上がるのでそこにある
<strong>フォントをインストール</strong>を押します。</p>

<p><img src="https://rcmdnk.com/images/post/20190923_macfontinstall.jpg" alt="20190923_macfontinstall.jpg" class="pic" /></p>

<p>もしくはHomebrewを使ってるのであればcaskで</p>

<pre><code>$ brew cask install homebrew/cask-fonts/font-cascadia
</code></pre>

<p>として入れられます。</p>

<p>Macの場合にはフォントをインストールした後、使用したいアプリがすでに動いている場合には
一旦アプリを再起動する必要があります。</p>

<p>ChocolateyもCaskもどちらもすぐに用意されていたようです。</p>

<h2 id="比較">比較</h2>

<h3 id="windows-putty">Windows PuTTY</h3>

<p><a href="https://rcmdnk.com/blog/2014/07/15/computer-windows-mac/#windowsputty">以前の比較</a>
を見るとCourier Newとかもキレイに日本語が見えていますが、
今回はMigu 1M以外はちょっと汚くなっています。</p>

<p>以前の比較では普段日本語を使うMacにログインした状態で見ていて、
今回のものはLinuxで日本語を普段使わない環境です。</p>

<p>その辺のログイン先の環境によっても違いが出る様なので要確認なところはまだありますが、
今回見てみたのは以下のもの。</p>

<ul>
  <li>Courier New:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_puttycouriernew.jpg" alt="20190923_puttycouriernew.jpg" class="pic" /></p>

<ul>
  <li>Consolas:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_puttyconsolas.jpg" alt="20190923_puttyconsolas.jpg" class="pic" /></p>

<ul>
  <li>Migu 1M:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_puttymigu1m.jpg" alt="20190923_puttymigu1m.jpg" class="pic" /></p>

<ul>
  <li>Cascadia Code:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_puttycascadiacode.jpg" alt="20190923_puttycascadiacode.jpg" class="pic" /></p>

<p>全体的な印象として、Cascadia Codeは一番縦に長い表示になっています。</p>

<p>横幅も結構広くてCourier Newの次に広い。</p>

<p>ConsolasとMigu 1Mではゼロの中に車線、Cascadia Codeではゼロの中にワンポイントあってアルファベットのオー(O)と区別しやすいようになっています。</p>

<p>また、小文字のエル(l)がMigu 1MとCascadi Codeでは左上から右下に足が出る様になっています。</p>

<p>あと、以前もあったMigu 1Mだと<code>ls</code>で日本語の濁点が上手く表示できない、
というのはやはりMacにログインすると起きました。
一方、Linux上では起こりませんでした。</p>

<h3 id="windows-subsystem-for-linuxwslデフォルトターミナル">Windows Subsystem for Linux(WSL)デフォルトターミナル</h3>

<p>WSLのデフォルトのターミナルではフォントはデフォルトでMSゴシックになっていました。
ウィンドウバーを右クリックして<strong>プロパティ</strong>を表示してそのから
フォントなどを変更できますが、
Courier Newなどは日本語が化けてしまいます。</p>

<p>Migu 1Mは化けずに表示できました。</p>

<ul>
  <li>MSゴシック</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_wslmsgothic.jpg" alt="20190923_wslmsgothic.jpg" class="pic" /></p>

<ul>
  <li>Courier New:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_wslcouriernew.jpg" alt="20190923_wslcouriernew.jpg" class="pic" /></p>

<ul>
  <li>Consolas</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_wslconsolas.jpg" alt="20190923_wslconsolas.jpg" class="pic" /></p>

<ul>
  <li>Migu 1M:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_wslmigu1m.jpg" alt="20190923_wslmigu1m.jpg" class="pic" /></p>

<ul>
  <li>Cascadia Code:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_wslcascadiacode.jpg" alt="20190923_wslcascadiacode.jpg" class="pic" /></p>

<p>WSLのターミナルで見ると文字の間隔、大きさがPuTTY上よりも違いが小さくなっています。</p>

<h3 id="mac-iterm2">Mac iTerm2</h3>

<p>日本語(Non-ASCII Font)はOsakaという別のフォントを指定できるので以下では日本語部分は共通になっているはずですが、通常のフォントに引っ張られて文字間隔とかは変わっています。</p>

<p>以前調べた時はWindowsで使われているConsolasもあったのですが、
何かと同時に知らないうちにインストールしていたのか、今回調べようとしたときにはありませんでした。
Caskでインストール出来たので以下でインストールしています。</p>

<pre><code>$ brew cask install homebrew/cask-fonts/font-consolas-for-powerline
</code></pre>

<p>また、以前フォント調査を行ってからMacを変えたりした段階から
デフォルト?のMenloをずっと使っていた様です。。。</p>

<ul>
  <li>Menlo:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_macmenlo.jpg" alt="20190923_macmenlo.jpg" class="pic" /></p>

<ul>
  <li>Courier New:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_maccouriernew.jpg" alt="20190923_maccouriernew.jpg" class="pic" /></p>

<ul>
  <li>Consolas for Powerline</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_macconsolas.jpg" alt="20190923_macconsolas.jpg" class="pic" /></p>

<ul>
  <li>Migu 1M:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_macmigu1m.jpg" alt="20190923_macmigu1m.jpg" class="pic" /></p>

<ul>
  <li>Cascadia Code:</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20190923_maccascadiacode.jpg" alt="20190923_maccascadiacode.jpg" class="pic" /></p>

<p>MacのiTerm2でもPuTTYに比べると大きさの違いが小さくなっています。</p>

<h2 id="まとめ">まとめ</h2>

<p>Cascadia Codeを見てみましたが、特徴としては比較的幅広めのフォントで縦に長いフォントになっています。
また、ゼロの表示が真ん中にワンポイント、といった表示になっています。</p>

<p>WindowsではChocolateyで、MacでもHomebrew Caskでインストールできるので
管理は簡単。</p>

<p>フォントなので好みですが、縦に長いほうが見やすい場合や
ゼロの表示が気に入ったのであればCascadia Codeを使ってみるのも良いと思いかとます。</p>

<div class="postscript">
  <p><strong>追記: 2020/05/30 </strong></p>

  <p>Cascadia Codeですが、<code>!=</code>を<code>≠</code>
と表示するような<strong>合字</strong>を含んで居ます。</p>

  <blockquote>
    <p><a href="https://docs.microsoft.com/ja-jp/windows/terminal/cascadia-code">Windows ターミナル Cascadia Code  Microsoft Docs</a></p>
  </blockquote>

  <p>文章を読むだけなら分かりやすいかもしれませんが、
コードを書いてるときはこの表示は邪魔でしか無い。</p>

  <p>なのでターミナルでこれを有効にすると逆に読み書きしづらくなるかと。</p>

  <p>一方、この<strong>合字</strong>を含まないCascadia Monoというフォントがあるので
ターミナル上で使うときにはこっちを使ったほうが良いです。</p>

  <p><strong>追記ここまで</strong></p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PuTTYの新しいバージョン0.68リリース]]></title>
    <link href="https://rcmdnk.com/blog/2017/02/22/computer-windows-putty/"/>
    <updated>2017-02-22T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/02/22/computer-windows-putty</id>
    <content type="html"><![CDATA[<p>Windowsのターミナルアプリの有名所の一つ
PuTTYのアップデートがリリースされました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#putty-068" id="markdown-toc-putty-068">PuTTY 0.68</a></li>
  <li><a href="#putty以外のターミナルアプリ" id="markdown-toc-putty以外のターミナルアプリ">PuTTY以外のターミナルアプリ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="putty-068">PuTTY 0.68</h2>

<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/index.html">PuTTY</a>
はオープンソースなターミナルエミュレーターアプリです。</p>

<p>リモートログイン専用のクライアントで
起動時にどこかのサーバーに接続しターミナルクライアントを立ち上げます。</p>

<p>1998年に最初のバージョンがリリースされ、昨日0.68がリリースされました。</p>

<blockquote><p>* Security fix: an integer overflow bug in the agent forwarding code. See vuln-agent-fwd-overflow.<br />* Security fix: the Windows PuTTY binaries should no longer be vulnerable to hijacking by specially named DLLs in the same directory (on versions of Windows where they previously were). See vuln-indirect-dll-hijack.<br />* Windows PuTTY no longer sets a restrictive process ACL by default, because this turned out to inconvenience too many legitimate applications such as NVDA and TortoiseGit. You can still manually request a restricted ACL using the command-line option -restrict-acl.<br />* The Windows PuTTY tools now come in a 64-bit version.<br />* The Windows PuTTY tools now have Windows's ASLR and DEP security features turned on.<br />* Support for elliptic-curve cryptography (the NIST curves and 25519), for host keys, user authentication keys, and key exchange.<br />* Support for importing and exporting OpenSSH's new private key format.<br />* Host key preference policy change: PuTTY prefers host key formats for which it already knows the key.<br />* Run-time option (from the system menu / Ctrl-right-click menu) to retrieve other host keys from the same server (which cross-certifies them using the session key established using an already-known key) and add them to the known host-keys database.<br />* The Unix GUI PuTTY tools can now be built against GTK 3.<br />* There is now a Unix version of Pageant.</p><footer><strong>PuTTY Change Log</strong> <cite><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/changes.html">www.chiark.greenend.org.uk/&hellip;</a></cite></footer></blockquote>

<p>主にはセキュリティー関係のアップデートな感じです。</p>

<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/changes.html">PuTTY Change Log</a>
を見ると前回のアップデートから1年位ぶりのアップデートです。</p>

<p>定期的なアップデートというよりは必要に応じてアップデートしている感じ。</p>

<p>なんとなくイメージでは2010年頃に全くアップデートとかないままだな、
と思ってたのが残っていたので、
改めて見ると割と最近アップデートしてたんだな、と言う感じがします。まだまだ現役です。</p>

<p><a href="https://rcmdnk.com/blog/tags/putty/">/blog/tags/putty/</a></p>

<p>余計なものが付いてこない分だけWindowsで外部サーバーに繋げるためのターミナルアプリとしては
一番便利かな、と。</p>

<h2 id="putty以外のターミナルアプリ">PuTTY以外のターミナルアプリ</h2>

<p>Windowsの中でLinuxといえばその昔はCygwinだったわけですが
外部にsshするためだけに使うにはちょっと重いです。</p>

<p><a href="https://rcmdnk.com/blog/tags/cygwin/">/blog/tags/cygwin/</a></p>

<p>sshクライアントとして使いやすいのはMobaXtermです。
これはPuTTYと違って最小限のLinux環境が付属していますが
直接リモート接続用クライアントとしても使えます。</p>

<p>また、デフォルトでmoshが使える様になってるところが良いところ。</p>

<p>さらにXサーバーが付属しているのですぐにX環境を手に入れられます。</p>

<p>PuTTYでX環境がほしいとなると別途用意しないといけないのでこの辺がとても便利。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/01/24/computer-windows-remote/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20150124_mobaxterm_120_90.jpg" width="120" height="90" alt="20150124_mobaxterm_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/01/24/computer-windows-remote/">MobaXterm: Windowsでのcygwinに代わるターミナル環境</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00I1M03OC?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00I1M03OC&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41P2fjXWPfL._SS90_CR0,0,120,90_.jpg" alt="MOSH (MOBILE SHELL): A New Era of Remote Access" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/06/30/computer-linux-mac/">Moshを使ってみる</a></div></li></ul>

<p>さらには
WindowsネイティブなLinuxもリリースされて
これも付属のBashターミナルがあるので
Windowsでも何も余計なものを入れずにUnixライクなsshとか出来る様になっています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/06/05/computer-windows-ubuntu-bash/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160605_bashonubuntuonwindows_120_90.jpg" width="120" height="90" alt="20160605_bashonubuntuonwindows_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/06/05/computer-windows-ubuntu-bash/">Windowsに採用されたBash (Ubuntu)を試してみる</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/08/04/computer-windows-ubuntu-bash/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160804_windows10dark_120_90.jpg" width="120" height="90" alt="20160804_windows10dark_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/08/04/computer-windows-ubuntu-bash/">Windows 10でBash on Ubuntu on Windowsも含まれるAnniversary Updateの提供開始</a></div></li></ul>

<p>これら以外のアプリもHacker NewsのPuTTYリリースの話題の中で
色々と出てきてるので一度見てみると面白いです。</p>

<blockquote>
  <p><a href="https://news.ycombinator.com/item?id=13700195">PuTTY 0.68 has been released  Hacker News</a></p>
</blockquote>

<p><a href="https://git-for-windows.github.io/">Git Bash</a>、<a href="https://www.bitvise.com/index">Bitvise</a>、<a href="https://www.netsarang.com/products/xsh_overview.html">Xshell 5</a>、
また<a href="https://www.fosshub.com/KiTTY.khtml">KiTTY</a>
などのPuTTYからの派生クライアントなど、結構色々あるものだな、と。</p>

<p>色々ありすぎてどれがどう良いのか調べるのも大変そうですが、
PuTTYが意外とまだきちんとメンテナンスされてるな、と言う感じがするので、
今後もsshクライアントとしてはWindowsではPuTTYを使っていこうかな、と思っています。</p>

<p>Windows内で直接Linux的なことをしたくなったらCygwinです。</p>

<p>PuTTYを使う時にXサーバーが必要な時はCygwinに付属しているXサーバーを立ち上げて使っています。</p>

<p>Bash on Ubuntu on WindowsはWindowsとは切り離されてる感が強いので
イマイチ使い勝手が悪くてあまり使っていません。</p>

<p>まだリリースされたばかりなので今後特にWindows側との融合の点で進化していってくれると嬉しいです。</p>

<p>ちなみにMacにも色々ターミナルアプリがありますが、
現状iTerm2で落ち着いています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/02/14/computer-mac/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/MacApp/thumbnail/Terminal_120_90.jpg" width="120" height="90" alt="Terminal_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/02/14/computer-mac/">Macで使えるターミナルエミュレーターアプリ達</a></div></li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MobaXterm: Windowsでのcygwinに代わるターミナル環境]]></title>
    <link href="https://rcmdnk.com/blog/2015/01/24/computer-windows-remote/"/>
    <updated>2015-01-24T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/01/24/computer-windows-remote</id>
    <content type="html"><![CDATA[<p>Windows内でUnix的な作業を行いたい場合には
<a href="https://rcmdnk.com/blog/tags/cygwin/">Cygwin</a>
を使っていて、
また、他の端末にsshして作業を行いたい場合には
<a href="https://rcmdnk.com/blog/tags/putty/">PuTTY</a>
を使っています。</p>

<p>Cygwinは古いマシンだと結構重くて、また、PuTTYだと
<a href="https://rcmdnk.com/blog/2014/06/30/computer-linux-mac/">Mosh</a>
を使う事が出来ません。</p>

<p>そこでたまに何か無いかな、と思って探してたんですが、
<a href="http://mobaxterm.mobatek.net/">MobaXterm</a>
というのが色々便利そうだったので使ってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#mobaxterm" id="markdown-toc-mobaxterm">MobaXterm</a></li>
  <li><a href="#mobaxtermの見た目" id="markdown-toc-mobaxtermの見た目">MobaXtermの見た目</a></li>
  <li><a href="#cygwinのパッケージをインストール" id="markdown-toc-cygwinのパッケージをインストール">Cygwinのパッケージをインストール</a></li>
  <li><a href="#mobaxterm用busybox用にbashrcをアップデートする" id="markdown-toc-mobaxterm用busybox用にbashrcをアップデートする">MobaXterm用(BusyBox用)に.bashrcをアップデートする</a></li>
  <li><a href="#prompt_command" id="markdown-toc-prompt_command">PROMPT_COMMAND</a></li>
  <li><a href="#windowsのファイル操作" id="markdown-toc-windowsのファイル操作">Windowsのファイル操作</a></li>
  <li><a href="#openコマンドcygstart" id="markdown-toc-openコマンドcygstart">openコマンド(cygstart)</a></li>
  <li><a href="#mosh-clientがデフォルトで入ってる" id="markdown-toc-mosh-clientがデフォルトで入ってる">mosh-clientがデフォルトで入ってる</a></li>
  <li><a href="#puttyのセッションが使える" id="markdown-toc-puttyのセッションが使える">PuTTYのセッションが使える</a></li>
  <li><a href="#日本語" id="markdown-toc-日本語">日本語</a></li>
  <li><a href="#設定項目" id="markdown-toc-設定項目">設定項目</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="mobaxterm">MobaXterm</h2>

<blockquote><p>MobaXterm</p><p>Enhanced terminal for Windows with X11 server, tabbed SSH client, network tools and much more</p><footer><strong>MobaXterm free Xserver and tabbed SSH client for Windows</strong> <cite><a href="http://mobaxterm.mobatek.net/">mobaxterm.mobatek.net/&hellip;</a></cite></footer></blockquote>

<p>ということで、Windows環境でUnix環境を提供してくれて、
X11サーバーも付随して使える様になります。</p>

<p>MobaXtermは<a href="http://www.busybox.net/">BusyBox</a>をベースとしていて、
本体自体は非常に軽い(20MB程度)ものになっています。
(インストール版とポータブル版があります。)</p>

<p>Cygwinの様にローカルでもUnix環境を使うことが出来ます。
また、SSHのセッション等の登録が出来るので、
それらを使うことでPuTTYの様にGUIベースでセッションを直接始めることも可能です。</p>

<p>Home Edition(フリー版)とProfessional Edition($69)
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
がありますが、
フリー版で殆ど問題無いと思います。</p>

<p>気になる所だと</p>

<ul>
  <li>Max. 12 sessions</li>
  <li>Max. 2 SSH tunnels</li>
  <li>Max. 4 macros</li>
</ul>

<p>という制限がありますが、これらはMobaXtermへ登録出来る数で、
普通にコマンドラインからsshしたりする分には影響無いので
特に問題無いと思います。</p>

<h2 id="mobaxtermの見た目">MobaXtermの見た目</h2>

<p>MobaXtermを立ち上げるとこんな感じのターミナルが立ち上がります。</p>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxterm.jpg" alt="mobaxterm" class="pic" /></p>

<p>ただし、この絵では既に見た目のSkinが変更されていて、
メニューバーや左のセッション等の表示をしないようにしてあります。</p>

<p>CygwinでMinttyを使う様な物と違って、1つのアプリケーションが立ち上がって居るような感じで、
このウィンドウで色々出来るボタンとかメニューが付いているのが特徴的。</p>

<p>ターミナル周りがゴタゴタしてしまいますが、
各タブを本体から切り離すことも出来て、
そうすると少しスッキリしたターミナルになります。</p>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermdetach.jpg" alt="mobaxtermdetach" class="pic" /></p>

<p>それでも上のメニューバーの部分を完全に消せないのがちょっと残念。。。</p>

<h2 id="cygwinのパッケージをインストール">Cygwinのパッケージをインストール</h2>

<p>また、環境自体はCygwinに合うように設計されている様で、
Cygwinのレポジトリにあるバイナリを使うことが出来ます。
つまり、
<a href="https://rcmdnk.com/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
を使ってパッケージをインストールすることが出来ます。</p>

<p><code>apt-cyg</code>はデフォルトでインストールされていて、
<code>apt-get</code>にもaliasされています。</p>

<p>ただし、注意としてこの<code>apt-cyg</code>は普通のCygwinで使う<code>apt-cyg</code>とは違う物で
互換性が無いので、
自分でCygwin用の<code>apt-cyg</code>をインストールしてしまうと使えません。</p>

<p>取り敢えず必要そうなものとして</p>

<pre><code>$ apt-cyg install make gcc-core git vim screen ncurses
</code></pre>

<p>こんな感じ(makeやgcc-coreはvimで<a href="https://github.com/Shougo/vimproc.vim">vimproc</a>を使う用)。
これで、Vimはif_luaでほぼ最新のパッチが当たった物が入りますし、
screenも4.2.1が入りました。</p>

<h2 id="mobaxterm用busybox用にbashrcをアップデートする">MobaXterm用(BusyBox用)に.bashrcをアップデートする</h2>

<p>BusyBoxではコマンドの機能を必要最小限にする、
と言う思想があって、通常のGNUコマンド等と違う部分があったりします。</p>

<p><code>ls</code>に関してとかだと
<code>show-~</code>のオプションがありません。</p>

<p>なので<strong>.bashrc</strong>とかで</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="nb">alias</span> <span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls --color=auto --show-control-char&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいなaliasを設定しているとエラーが出ます。</p>

<p>なので共有<strong>.bashrc</strong>を使いたい場合、MobaXtermであることを見つけて
設定を変更する必要があります。</p>

<p>MobaXtermでは環境変数<code>OSTYPE</code>はCygwin同様<code>cygwin</code>となっているので
これは使えません。</p>

<p>BusyBoxは<code>busybox</code>という1つのバイナリ実行ファイルがあって、
これが全てのコマンドを持っている
(<code>ls</code>なども全部このファイルに引数を与える事で実行する。実際にはそれをaliasしてあります。)
ので、このファイルがあるかどうかをチェック。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="nb">type</span> -a busybox &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="c1"># For MobaXterm(BusyBox)</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line">  <span class="c1"># For other than MobaXterm(BusyBox)</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>もしくは上の様なaliasであれば<code>ls</code>コマンドを直接調べて</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> ls --color<span class="o">=</span>auto --show-control-char &gt;/dev/null <span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">alias</span> <span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls --color=auto --show-control-char&#39;</span>
</span><span class="line">  <span class="nb">alias</span> <span class="nv">la</span><span class="o">=</span><span class="s1">&#39;ls -A --color=auto --show-control-char&#39;</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line">  <span class="nb">alias</span> <span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;ls --color=auto&#39;</span>
</span><span class="line">  <span class="nb">alias</span> <span class="nv">la</span><span class="o">=</span><span class="s1">&#39;ls -A --color=auto&#39;</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じで。</p>

<p>または、BusyBoxというだけではなくて、MobaXtermである、ということを確認するには
Homeディレクトリが通常どのユーザーでも<strong>/home/mobaxterm/</strong>
と設定されてるので</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="o">[</span> <span class="nv">$HOME</span> <span class="o">=</span> /home/mobaxterm/ <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="c1"># For MobaXterm</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>というのもOK。ちなみに<strong>/home/&lt;USER&gt;/</strong>というディレクトリも元々存在していて、
<strong>/home/mobaxterm/</strong>へのハードリンクの様になってるみたいです。</p>

<p>また、BusyBoxなので通常コマンドが全てaliasになっています。
例えば<code>ln</code>は<code>/bin/busybox.ext ln</code>です。</p>

<p>なので通常のコマンドにラッパー関数を割り当てたりしようとすると
aliasが優先されてしまうので注意する必要があります。</p>

<p>Cygwinでは<code>ln</code>コマンドをWindows側でも使えるシンボリックリンクにするため、
<code>cmd</code>でコマンドプロンプトのコマンド<code>mklink</code>を呼ぶ様な
ラッパー関数に割り当ててあります。</p>

<blockquote>
  <p><a href="https://rcmdnk.com/blog/2013/06/25/computer-windows-cygwin/">Cygwin内外でリンクを共有する</a></p>
</blockquote>

<p>これをそのままMobaXtermに持って行ってもBuxyBoxのaliasされた<code>ln</code>が優先されてしまうので、</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="nb">type</span> -a busybox &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">unalias</span> ln &gt;<span class="p">&amp;</span> /dev/null <span class="c1"># for BusyBox</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line"><span class="k">function</span> ln <span class="o">{</span>
</span><span class="line">  <span class="nv">opt</span><span class="o">=</span><span class="s2">&quot;/H&quot;</span>
</span><span class="line">  ...
</span></code></pre></td></tr></table></div></figure>

<p>の様に一度<code>ln</code>を<code>unalias</code>してから関数に割り当てる必要があります。</p>

<div class="postscript">
  <p><strong>追記: 2015/01/25</strong></p>

  <p>上の<a href="https://rcmdnk.com/blog/2013/06/25/computer-windows-cygwin/">Cygwin内外でリンクを共有する</a>
の方でコメントもらいましたが、
Cygwinでは<code>CYGWIN</code>という環境変数があって、これに<code>winsymlinks</code>という値を
設定すると通常の<code>ln -s</code>コマンドがWindowsのシンボリックリンクを作る様になります。</p>

  <p>試してみたところこれはMobaXtermでも使える様です。
この場合、aliasを解く必要もないので、Cygwin設定と同様、</p>

  <figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$OSTYPE</span><span class="s2">&quot;</span> <span class="o">=</span>~ cygwin <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nb">export</span> <span class="nv">CYGWIN</span><span class="o">=</span><span class="s2">&quot;winsymlinks </span><span class="nv">$CYGWIN</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

  <p>と設定するだけで<code>ln -s</code>コマンドでWindowsのシンボリックリンクを
作れる様になります。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<h2 id="prompt_command">PROMPT_COMMAND</h2>

<p><strong>.bashrc</strong>設定の続きですが、
上の最初の絵にあるように、MobaXtermでは</p>

<blockquote>
  <p>Each command status is specified by a special symbol</p>
</blockquote>

<p>ということを勝手にしてくれます。
が、これが邪魔です。</p>

<p>今使ってる設定と組み合わせるとこんな感じの表示に。</p>

<pre><code>hostname ~]$ ls
Desktop  LauncherFolder  MyDocuments  usr
                                                                             ✔
-----------------------------------------------------------------------------]
hostname ~]$
</code></pre>

<p>これは<code>PROMPT_COMMAND</code>に</p>

<pre><code>r0=$?;if [ -z "$NP" ]; then i0=0;s0="";while [ "$i0" -lt "${COLUMNS:-80}" ];do s0="q$s0";i0=$[$i0+1];done;builtin echo -ne "\n\E[1;30m\E(0$s0\E(B\E[0m"; [ $r0 == 0 ] &amp;&amp; builtin echo -ne "\e[1A\e[32m\e(0d\e(B\e[0m\e[1B" || builtin echo -ne "\e[1A\e[31m\e(0e\e(B\e[0m\e[1B";else unset NP;fi;
</code></pre>

<p>という値が入ってるためです。</p>

<p>これを最初に外しておくために、<strong>.bashrc</strong>の自分の<code>PROMPT_COMMAND</code>
を設定する前に</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="nb">type</span> -a busybox &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nv">PROMPT_COMMAND</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>といった感じでリセットしておきます。</p>

<h2 id="windowsのファイル操作">Windowsのファイル操作</h2>

<p>MobaXtermでは上のスクリーンショットにもあるように
<strong>/drives</strong>というディレクトリに<strong>c</strong>等のドライブ名が書かれたディテクトリがあって、
Windowsの環境へアクセス出来ます。</p>

<p>Cygwinとの互換性を持たせるために<strong>/cygdrive</strong>も<strong>/drives</strong>への
シンボリックリンクとして存在しています。</p>

<p>HomeディレクトリにはMy Documentなどへのリンクが元々貼られています。</p>

<p>このHomeディテクトリの実態は通常インストールしたものだと</p>

<pre><code>C:\Users\&lt;USER&gt;\Documents\MobaXterm\home
</code></pre>

<p>の位置でWindows側からアクセスできます。
なので初期状態ではCygwinとは違うHomeを使うことになります。
(下にCygwinと同じHomeにする設定があります。)</p>

<p>また、Windows側で作られたファイルのパーミッションがそれぞれどう見えるか、
ですが、これはCygwinの場合と同じで、
Windows側で作られたファイルは通常全て<code>700</code>のパーミッションを持ってるように見えます。</p>

<blockquote>
  <p><a href="https://rcmdnk.com/blog/2013/05/12/computer-octopress-git-github-dropbox/">Git + Dropbox使用時の注意点</a></p>
</blockquote>

<p>後は、上でやりましたが、通常の<code>ln -s</code>を使ってシンボリックを作ってしまうと、
それはWindows側からはリンクとして認識できないので、
ラッパー関数でコマンドプロンプトの<code>mklink</code>へ渡す様にします。</p>

<h2 id="openコマンドcygstart">openコマンド(cygstart)</h2>

<p>Macでは<code>open</code>というコマンドに引数でファイルを与えると、
適当なアプリを選択してファイルを選んでくれると言う機能があります。</p>

<p>これと同じことがCygwinでは<code>cygstart</code>と言うコマンドを使って出来ます。
わかりづらいのでCygwinでは</p>

<pre><code>alias open='cygstart`
</code></pre>

<p>としています。</p>

<p>MobaXtermにも<code>cygstart</code>というコマンドは入っていますが、
さらにこれが最初から<code>open</code>という名前でaliasされていました。</p>

<p>こういう細かい所で結構良い感じのオプティマイズが進んでる感じがします。</p>

<h2 id="mosh-clientがデフォルトで入ってる">mosh-clientがデフォルトで入ってる</h2>

<p>Windows環境での新たなターミナルっぽいものを求める1つの理由である
<a href="https://rcmdnk.com/blog/2014/06/30/computer-linux-mac/">Mosh</a>を簡単に使える、
と言う事をMobaXtermは実現してくれます。</p>

<p>現時点でMoshはCygwinのレポジトリには無いので、
Cygwinで使いたい場合自分でコンパイルして入れる
必要があります。</p>

<p>また、PuTTYでもやろうと思えば出来る
<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>
みたいなんですが、結構面倒です。</p>

<p>一方、MobaXtermには<code>mosh-client</code>がデフォルトで入っていていきなり使えます。</p>

<p>また、接続セッションを登録する際にも<code>ssh</code>だけでなく、
<code>mosh</code>接続と言う形でも登録することが出来ます。</p>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermnewsessions.jpg" alt="mobaxtermnewsessions" class="pic" /></p>

<p>上の絵を見て分かる通り、<code>ssh</code>や<code>mosh</code>だけでなく、VNCなども登録して使うことも出来ます。</p>

<h2 id="puttyのセッションが使える">PuTTYのセッションが使える</h2>

<p>PuTTYがインストールされていてセッションの登録があると、
MobaXtermは自動的にそのセッションの設定を取ってきて使えるようになります。</p>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermsessions.jpg" alt="mobaxtermsessions" class="pic" /></p>

<h2 id="日本語">日本語</h2>

<p>設定とかは全て英語のみですが、
ターミナル上で日本語を使うことは出来ました。</p>

<p>日本語ファイルを<code>ls</code>で表示したり、ファイルを<code>open</code>したり、
またVim等で日本語を編集することも問題ありません。</p>

<h2 id="設定項目">設定項目</h2>

<ul>
  <li>General</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermgeneral.jpg" alt="mobaxtermgeneral" class="pic" /></p>

<p>Homeディレクトリなどを設定できます。
ここで<strong>Persistent home directory</strong>に
<code>_CurrentDrive_:\cygwin\home\&lt;USER&gt;</code>に指定すれば
Cygwinと同じHomeを使うことも可能です。
(上に書いた様に<code>apt-cyg</code>が共有出来ないのでその辺を上手く処理しておく必要があります。)</p>

<ul>
  <li>Terminal</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermterminal.jpg" alt="mobaxtermterminal" class="pic" /></p>

<p>フォントやバックグラウンドなど、ターミナルの設定。</p>

<ul>
  <li>X11</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermx11.jpg" alt="mobaxtermx11" class="pic" /></p>

<p>X11の設定。デフォルトではMobaXtermが立ち上がると同時にX11も立ち上がります。</p>

<p>PuTTYの場合にはXを別途用意しないといけませんし、
Cygwinでもいちいち立ち上げる必要があったりするので、
何も考えずにX環境がいきなり使える、と言う点では結構うれしいポイントです。</p>

<ul>
  <li>Display</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermdisplay.jpg" alt="mobaxtermdisplay" class="pic" /></p>

<p>Skinを選んで見た目を変更したり、
ツールバーやサイドバー等の表示を設定したり出来ます。</p>

<p>上の設定では最小限の表示にしているつもりですが、
出来れば<strong>Menus and buttons</strong>とかで両方共表示しない、とかの項目があると嬉しい。。。</p>

<ul>
  <li>Toolbar</li>
</ul>

<p><img src="https://rcmdnk.com/images/post/20150124_mobaxtermtoolbar.jpg" alt="mobaxtermtoolbar" class="pic" /></p>

<p>Toolbarに何を置くかを設定できます。</p>

<h2 id="まとめ">まとめ</h2>

<p>使ってみた感じとしては、Cygwinなんかよりもキビキビ動く感じがしました。</p>

<p>最初に立ち上げる時に環境を立ち上げるために少し時間がかかりますが、
Cygwinでも最初の起動は時間がかかるのでそれよりは速い感じ。</p>

<p>また、初期では最小限度のコマンドしか無いとはいえ、
Cygwinと比べてインストール時間は圧倒的に速いです。
<code>apt-cyg</code>も使えるので後は好きにインストールしていけば良い、という感じ。</p>

<p>後はMoshがデフォルトで使える点と
X11サーバーも入っていてが自動で立ち上がって使える様になる所は
非常に便利だと思います。</p>

<p>Windowsを導入して初期状態でパッとUnix環境作るのであれば
Cygwinと比べて圧倒的に簡単に素早く出来ます。</p>

<p>SSHだけするでも、PuTTYだとX環境が必要だと別途用意する必要があるので、
MobaXtermなら自分でXも用意してくれるので便利。</p>

<p>ポータブル版もあるので、USBメモリに入れておけば他人のWindowsでも
即座に自分のUnix環境を使う、ということも可能。</p>

<p>最大のちょっとあれかな、と思う点は見た目で、
ごちゃごちゃした周りの物が消せないと余り使うきにはなれません。。。
Professional Editionでは、余計なGameとかを削除したり
最初の表示メッセージを変更したりは出来るみたいですが、
この辺の表示は特に変更ないみたいなので残念な所。
もうちょっとターミナルだけのシンプルな物にできたら嬉しいです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux/GNU ScreenでC-hにキーバインドする]]></title>
    <link href="https://rcmdnk.com/blog/2015/01/06/computer-tmux/"/>
    <updated>2015-01-06T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/01/06/computer-tmux</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00B40AK96?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00B40AK96&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41M0PQmQ8yL._SS200_.jpg" alt="Backspace (English Edition)" /></a>
</div>

<p>tmuxを使ってて少し違和感あるな、と思ったら
<i class="key">Prefix</i> <i class="key">Ctrl</i>-<i class="key">h</i>で左の<strong>Pane</strong>へ移る、
という操作設定がきちんと把握されてなかったのでその辺について。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#c-h" id="markdown-toc-c-h">C-h</a></li>
  <li><a href="#tmuxの場合" id="markdown-toc-tmuxの場合">tmuxの場合</a></li>
  <li><a href="#gnu-screenの場合" id="markdown-toc-gnu-screenの場合">GNU screenの場合。</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="c-h">C-h</h2>

<p><i class="key">Ctrl</i>-<i class="key">h</i>はターミナル上では基本的に<i class="key">Backspace</i>
と同じ信号を送ります。</p>

<p>これはターミナルの種類や設定、またはシェル側の設定でも変更できたりします
ので環境ごとにチェックが必要ですが基本的には<i class="key">Backspace</i>=<i class="key">Ctrl</i>-<i class="key">h</i>です。</p>

<p>最終的にtmuxなどソフトにどう認識されるか、が重要ですが、
手元のWindows + PuTTY/Cygwinでは<i class="key">Ctrl</i>-<i class="key">h</i>は
完全に<i class="key">Backspace</i>として見られ、
一方、Macのターミナルでは<i class="key">Ctrl</i>-<i class="key">h</i>はそのまま認識されてる様に
なっています。</p>

<p>ここで、問題になってくるのがキーバインドする時にどうするか、で、
もともとMacで</p>

<pre><code>bind-key -r C-h select-pane -L
bind-key -r C-j select-pane -D
bind-key -r C-k select-pane -U
bind-key -r C-l select-pane -R
</code></pre>

<p>みたいな感じでVimライクに<strong>Pane</strong>の移動をするようにしていましたが、
これだとWindowsで左へ移る、ができません。</p>

<h2 id="tmuxの場合">tmuxの場合</h2>

<p>これを有効にするためには、<i class="key">Ctrl</i>-<i class="key">h</i>の代わりに<i class="key">Backspace</i>をバインドしてあげる必要があり、</p>

<pre><code>bind-key -r C-h select-pane -L
bind-key -r BSpace select-pane -L # Backspace
</code></pre>

<p>と、tmuxでは<code>BSpace</code>と表します。</p>

<p>コレ意外にも、通常のキー以外では<code>Up</code>や<code>Left</code>などのカーソルキー等。
<i class="key">Delete</i>は<code>Delete</code>でも<code>DC</code>と短縮形でもOK。</p>

<p>また、<code>Enter</code>、<code>Escape</code>、<code>Space</code>、<code>Tab</code>などはそのまま、
<code>F1</code>などもそのまま書けます。</p>

<p><i class="key">BackSpace</i>だけがちょっと特殊で<code>BSpace</code>と<code>B</code>側を短縮しないといけません。</p>

<p>それから<i class="key">”</i>/<i class="key">’</i>などはクォートして<code>'"'</code>/<code>"'"</code>として使う必要が有ります。</p>

<p>取り敢えず環境によって<i class="key">Ctrol</i>-<i class="key">h</i>がどう捉えられるかわからないのと、
<i class="key">Backspace</i>は取り敢えず別途バインドする必要はないので、
上の様に両方書いておくのが吉です。</p>

<h2 id="gnu-screenの場合">GNU screenの場合。</h2>

<p>GNU screenの場合にも同じような問題はあって、
screenの場合に<i class="key">Backspace</i>をバインドしたい場合には、
<code>-k</code>という<code>termcap keyboard capability name</code>
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
で指定できるオプションを使って</p>

<pre><code>bind ^h eval    'focus left'
bind -k kb eval 'focus left' #Backspace
</code></pre>

<p>とします。(<code>kb</code>が<i class="key">Backspace</i>の名前。)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[特定のネットワーク内からしか見れないウェブページを外から見る方法]]></title>
    <link href="https://rcmdnk.com/blog/2014/09/04/computer-remote/"/>
    <updated>2014-09-04T13:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2014/09/04/computer-remote</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00BEFTQWI?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00BEFTQWI&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41mrG3%2BDMjL._SS200_.jpg" alt="Proxy: An Avalon Novella (HarperTeen Impulse)" /></a>
</div>

<p>サイトへのアクセスが特定のネットワーク内だけに限られていたり、
また、ローカルのマシンの設定などを見たいためにプライベートIPに
接続して見たりしたいときに
そのネットワーク内の端末を踏み台にしてウェブページを見る方法のまとめ。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#ポートフォワード" id="markdown-toc-ポートフォワード">ポートフォワード</a>    <ul>
      <li><a href="#ターミナルから行う" id="markdown-toc-ターミナルから行う">ターミナルから行う</a></li>
      <li><a href="#putty" id="markdown-toc-putty">PuTTY</a></li>
    </ul>
  </li>
  <li><a href="#プロキシ設定" id="markdown-toc-プロキシ設定">プロキシ設定</a>    <ul>
      <li><a href="#mac全体での設定" id="markdown-toc-mac全体での設定">Mac全体での設定</a></li>
      <li><a href="#windows全体での設定" id="markdown-toc-windows全体での設定">Windows全体での設定</a></li>
      <li><a href="#google-chromeやiesafariその他メールソフトなどでの設定" id="markdown-toc-google-chromeやiesafariその他メールソフトなどでの設定">Google ChromeやIE,Safariその他メールソフトなどでの設定</a></li>
      <li><a href="#firefoxでの設定" id="markdown-toc-firefoxでの設定">Firefoxでの設定</a></li>
    </ul>
  </li>
  <li><a href="#自動プロキシ構成スクリプトを使って自動でプロキシを変更する" id="markdown-toc-自動プロキシ構成スクリプトを使って自動でプロキシを変更する">自動プロキシ構成スクリプトを使って自動でプロキシを変更する</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="ポートフォワード">ポートフォワード</h2>

<p>特定のネットワーク内からしか見れないウェブページを見るためには、
そのネットワーク内にある端末のポートを使って
プロキシサーバーに使ってアクセスします。</p>

<p>そのためにまずはダイナミックポートフォワードを行う必要があります。</p>

<h3 id="ターミナルから行う">ターミナルから行う</h3>

<pre><code>$ ssh -N -f -D 10080 user@example.com
</code></pre>

<ul>
  <li>-N: リモートでコマンドを実行しない。</li>
  <li>-f: コマンド実行前にバックグラウンドへ移行。</li>
  <li>-D <code>[&lt;bind_address:&gt;]&lt;port&gt;</code>: ダイナミックポートフォワード。
<code>&lt;bind_address:&gt;</code>を指定しない場合はlocalhostの<code>&lt;port&gt;</code>番号がSOCKSプロキシになります。</li>
</ul>

<p>ダイナミックポートフォワードの設定は<strong>~/.ssh/config</strong>に書いておくことも出来て、</p>

<figure class="code"><figcaption><span>~/.ssh/config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Host tunnel
</span><span class="line">  HostName example.com
</span><span class="line">  User user
</span><span class="line">  DynamicForward 10080</span></code></pre></td></tr></table></div></figure>

<p>と書いておいて、</p>

<pre><code>$ ssh -N -f tunnel
</code></pre>

<p>とすれば上のコマンドと同じ結果になります。</p>

<p>他に<code>example.com</code>を普通にsshで使う様な場合には</p>

<figure class="code"><figcaption><span>~/.ssh/config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Host example tunnel
</span><span class="line">  HostName example.com
</span><span class="line">  User user
</span><span class="line">Host tunnel
</span><span class="line">  DynamicForward 10080</span></code></pre></td></tr></table></div></figure>

<p>のように、接続設定は通常の接続(<code>example</code>)と同時に行って、
<code>tunnel</code>部分だけDynamicForwardを足す、ということも出来ます。
(最初の方に<code>Identifyfile</code>等の設定を加えても勿論OK。)</p>

<p><code>-f</code>や<code>-N</code>は<code>config</code>では設定できない様なので、
面倒だったら</p>

<pre><code>alias tunnel="ssh -f -N tunnel"
</code></pre>

<p>の様な物を<strong>.bashrc</strong>に書いておいて<code>tunnel</code>コマンドで出来るようにするとか。</p>

<p>この方法だとバックグラウンドで実行されるので、
後々消すには<code>ps -A|grep ssh|grep tunnel</code>
などとしてPIDを調べて<code>kill &lt;pid&gt;</code>したりしないといけません。
(<a href="https://github.com/rcmdnk/kk">kk</a>コマンドを使うと簡単に絞り込めて消せるので便利。)</p>

<p>もし、それ程長く使用しないできちんと消したい場合には
<code>-f</code>を外して</p>

<pre><code>$ ssh -N -D tunnel
</code></pre>

<p>としておけばターミナル上では実行されたまま<strong>待</strong>の状態になるので、
<i class="key">Ctrl</i>-<i class="key">c</i>を押すと停止することが出来ます。</p>

<p>Cygwinなんかだとターミナルを落とせば全てのプロセスが落ちるので
自動的に切れますが。</p>

<p>これらの設定は直接アクセスできないような端末を多段sshを使って踏み台にすることも出来ます。</p>

<figure class="code"><figcaption><span>~/.ssh/config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Host server
</span><span class="line">  HostName server.example.com
</span><span class="line">  user_at_server
</span><span class="line">Host example tunnel
</span><span class="line">  HostName example.com
</span><span class="line">  User user
</span><span class="line">  ProxyCommand ssh server -W %h:%p
</span><span class="line">Host tunnel
</span><span class="line">  DynamicForward 10080</span></code></pre></td></tr></table></div></figure>

<p>みたいなのを書いておけば<code>ssh example</code>とすると<code>server</code>を踏み台にして
<code>example.com</code>に通常ssh接続出来るようになり、
<code>ssh -N -f tunnel</code>とすれば<code>server</code>を踏み台にして<code>exaple</code>に接続し
SOCKSプロキシを作ることが出来ます。</p>

<blockquote>
  <p><a href="https://rcmdnk.com/blog/2014/06/08/comptuer-linux-windows-putty/">多段ssh設定のまとめ</a></p>
</blockquote>

<blockquote>
  <p><a href="https://rcmdnk.com/blog/2014/07/11/computer-linux-mac/">ルータ越しでポート指定なども出来ない場合にもSSHで接続出来るようにする</a></p>
</blockquote>

<h3 id="putty">PuTTY</h3>

<p>新しいセッションを
踏み台にしたいHost NameとPort 22で作り、
<strong>Connection</strong><i class="fa fa-arrow-right"></i><strong>Data</strong>
<i class="fa fa-arrow-right"></i><strong>Auto-login username</strong>
にユーザー名を入力します。</p>

<p>ポートフォワードの設定は
<strong>Connection</strong><i class="fa fa-arrow-right"></i><strong>SSH</strong>
<i class="fa fa-arrow-right"></i><strong>Tunnels</strong>
を開いて、</p>

<ul>
  <li><strong>Source port</strong>: <code>10080</code></li>
  <li><strong>Destination</strong>: 空白のママ</li>
  <li><strong>Dynamic</strong>をチェック</li>
  <li><strong>Auto</strong>をチェックしたまま</li>
</ul>

<p>の状態にして<strong>Add</strong>ボタンを押します。</p>

<p><img src="https://rcmdnk.com/images/post/20140904_putty.jpg" alt="putty" class="pic" /></p>

<p>これで接続すれば</p>

<pre><code>$ ssh -D 10080 user@example.com
</code></pre>

<p>したのと同じ状態になります。
ターミナルを消せば接続が終わります。</p>

<h2 id="プロキシ設定">プロキシ設定</h2>

<h3 id="mac全体での設定">Mac全体での設定</h3>

<p><strong>システム環境設定</strong>から<strong>ネットワーク</strong>
を選ぶか、メニューバーのリンゴマークから
<strong>ネットワーク環境</strong><i class="fa fa-arrow-right"></i><strong>ネットワーク環境設定</strong>
を選んでネットワークの設定を表示させます。</p>

<p>出てきた画面で使用しているネットワークを選択した上で
右下の<strong>詳細</strong>をクリック。</p>

<p>出てきた画面で
<strong>プロキシ</strong>タブを選んで、
<strong>構成するプロトコルを選択</strong>の一覧から
<strong>SOCKSプロキシ</strong>を選択してチェックを入れ、
右上に出てくる<strong>SOCKSプロキシサーバー</strong>に
<code>localhost</code>:<code>10080</code>となるように入力します。</p>

<p><img src="https://rcmdnk.com/images/post/20140904_macsetting.jpg" alt="macsetting" class="pic" /></p>

<h3 id="windows全体での設定">Windows全体での設定</h3>

<p>コントロールパネルから
<strong>ネットワークとインターネット</strong>
<i class="fa fa-arrow-right"></i>
<strong>インターネットオプション</strong>
で<strong>インターネットのプロパティ</strong>
が開かれるので、そこで
<strong>接続</strong>タブへ行き、下にある<strong>LANの設定</strong>を開きます。</p>

<p><img src="https://rcmdnk.com/images/post/20140904_winsetting0.jpg" alt="winsetting0" class="pic" /></p>

<p>出てきた画面で<strong>LANにプロキシサーバーを使用する</strong>
にチェックを入れ、
<strong>詳細設定</strong>を開きます。</p>

<p>この画面でMac同様<strong>Socks</strong>のアドレスの欄に<code>localhost</code>、
その右の<strong>ポート</strong>の欄に<code>10080</code>を入力して<strong>OK</strong>して閉じます。</p>

<p><img src="https://rcmdnk.com/images/post/20140904_winsetting1.jpg" alt="winsetting1" class="pic" /></p>

<h3 id="google-chromeやiesafariその他メールソフトなどでの設定">Google ChromeやIE,Safariその他メールソフトなどでの設定</h3>

<p>Google Chromeの設定画面でネットワークの<strong>プロキシ設定の変更</strong>を選んでもこれらのOSの
設定画面が出てきます。</p>

<p>IEやSafariの設定もOSの設定のものになります。</p>

<p>またメールソフトなどの設定も基本的に全てOSの全体の設定に従います。</p>

<p>なので、設定後にポートフォワードをやめてしまうと
基本的にブラウザやメールソフトなど全て使えなくなってしまうので、
きちんと戻しておかないといけません。</p>

<p>特にChromeとかだとChromeの中から設定を開くので
Chromeだけの設定っぽく見えてしまうこともありますが、
OS全体の設定なので注意です。
(Chromeではプロキシを使って、Safariでは使わず、みたいなことは出来ません。
一方、下に書くようにFirefoxは独自の設定を行うのでFirefoxだけ違う設定を使うことは出来ます。)</p>

<h3 id="firefoxでの設定">Firefoxでの設定</h3>

<p>FirefoxではFirefoxだけの設定も行えます。</p>

<ul>
  <li>Mac: <strong>ファイル</strong><i class="fa fa-arrow-right"></i><strong>環境設定</strong></li>
  <li>Windows: <strong>ツール</strong><i class="fa fa-arrow-right"></i><strong>オプション</strong></li>
</ul>

<p>で設定画面を開いて<strong>詳細</strong>へ行き、<strong>ネットワーク</strong>タブを開きます。</p>

<p>さらに<strong>接続設定</strong>を開きます。</p>

<p><img src="https://rcmdnk.com/images/post/20140904_firefoxsetting0.jpg" alt="firefoxsetting0" class="pic" /></p>

<p>出てきた接続設定(プロキシの設定)画面で、
<strong>手動でプロキシを設定する</strong>を選択し、
<strong>SOCKSホスト</strong>の欄に<code>localhost</code>、
右の<strong>ポート</strong>に上で設定した<code>10080</code>を入力します。</p>

<p><img src="https://rcmdnk.com/images/post/20140904_firefoxsetting1.jpg" alt="firefoxsetting0" class="pic" /></p>

<p>で、OK。</p>

<p>上の接続設定の画面で、
<strong>システムのプロキシ設定を使用する</strong>
にチェックしておくと上で行ったMacやWindows全体の設定と同じものを
使うようになります。</p>

<h2 id="自動プロキシ構成スクリプトを使って自動でプロキシを変更する">自動プロキシ構成スクリプトを使って自動でプロキシを変更する</h2>

<p>プロキシの設定をいちいち変更するのは面倒ですが、
決まったURLに対してだけプロキシを使うように設定しておくことも出来ます。</p>

<p>上のMac/Windows/Firefoxそれぞれの場合で
プロキシを設定する画面で
<strong>自動プロキシ構成</strong>/
<strong>自動構成スクリプトを使用する</strong>/
<strong>自動プロキシ設定スクリプトURL</strong>
を選択すると自動スクリプトのURLを記入出来る様になります。</p>

<p>ここで、この様なPACファイルを作っておいて
その場所を指定してあげます。</p>

<figure class="code"><figcaption><span>~/.proxy.pac</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">FindProxyForURL</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">host</span><span class="p">){</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">dnsDomainIs</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="s2">&quot;remote.example.com&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="o">||</span> <span class="nx">shExpMatch</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="s2">&quot;192.168.001.*&quot;</span><span class="p">)){</span>
</span><span class="line">    <span class="k">return</span> <span class="s2">&quot;SOCKS5 localhost:10080; DIRECT&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="s2">&quot;DIRECT&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>このファイルでやってることは
開いたページのドメインが”remote.example.com”であるか
もしくは”192.168.001.”で始まる場合に
は<code>localhost:10080</code>を使い、
もしこれが使用できない場合は通常の直接接続を行います。
それ以外のURLの場合には通常の直接接続を最初から行います。</p>

<p>もっと簡潔に</p>

<figure class="code"><figcaption><span>~/.proxy.pac</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">FindProxyForURL</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">host</span><span class="p">){</span>
</span><span class="line">  <span class="k">return</span> <span class="s2">&quot;SOCKS5 localhost:10080; DIRECT&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>とすれば全てのページについて
<code>localhost:10080</code>が使える場合にはそれを使って
使えない場合には直接接続を行う様にも出来ます。
(速度的な問題がなさそうなので今はこちらを使用中)</p>

<p>この辺のチェックの仕方については下記のページや
<a href="https://www.google.co.jp/search?q=FindProxyForUrl&amp;btnG=%E6%A4%9C%E7%B4%A2&amp;oe=utf-8&amp;rls=org.mozilla%3Aja-JP-mac%3Aofficial&amp;hl=ja&amp;client=firefox-a">FindProxyForUrl</a>
で検索すると色々出てきます。</p>

<blockquote>
  <p><a href="http://technet.microsoft.com/ja-jp/library/cc985335.aspx">付録 B : 自動プロキシ構成スクリプトの例</a></p>
</blockquote>

<blockquote>
  <p><a href="http://www.yokochin.com/manual/java/proxyaut.html">Netscape Proxy Autoconfig</a></p>
</blockquote>

<p>このファイルを自動プロキシ設定スクリプトのURLの指定の所に書いてあげればOK。</p>

<p>ローカルにあるファイルであれば</p>

<pre><code>file:///Users/user/proxy.pac
</code></pre>

<p>みたいに最初に<strong>file://</strong>をPATH付けて書けばOK。</p>

<p>Windowsの場合には</p>

<pre><code>file:///C:/Users/user/proxy.pac
</code></pre>

<p>の様に最初に<strong>C:</strong>も加えて、
WindowsですがPATHの区切りは<code>/</code>になります。</p>

<p>勿論通常のhttpでアクセス出来るものでも良くて</p>

<p><a href="https://raw.githubusercontent.com/rcmdnk/dotfiles/master/.proxy.pac">https://raw.githubusercontent.com/rcmdnk/dotfiles/master/.proxy.pac</a></p>

<p>こんな感じでGitHubに置いておいて、これをそのままURLとして書き込めば
ネットに置いてあるものを使うことも出来ます。</p>

<div class="postscript">
  <p><strong>追記: 2014/10/06</strong></p>

  <p>Sophosの様なウィルス対策ソフトを入れると
プロキシの設定があると
はじいてページを表示できなくなることがあるので
ウィルス対策ソフト側で設定を行う必要があることがあります。</p>

  <blockquote>
    <p><a href="https://rcmdnk.com/blog/2014/10/06/computer-mac/">Macでウィルス対策ソフトSophosを入れてみた, Proxyを使ったりする際の注意点</a></p>
  </blockquote>

  <p><strong>追記ここまで</strong></p>
</div>

]]></content>
  </entry>
  
</feed>
