<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tmux | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/tmux/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-10T19:28:04+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[po: Parallel Operations, tmuxを使った複数サーバーの同時操作]]></title>
    <link href="https://rcmdnk.com/blog/2018/06/07/compouter-tmux/"/>
    <updated>2018-06-07T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2018/06/07/compouter-tmux</id>
    <content type="html"><![CDATA[<p>複数のサーバーに同じ設定をするために色々な方法があると思いますが、
直接操作したい時に同じコマンドを送れたら便利です。</p>

<p>その様な方法もいくつかありますが、tmuxを使うと実際のターミナル操作を
全てのサーバーに同時に送ることが出来ます。</p>

<p>その様な状態を簡単に作るための<strong>po</strong>(Parallel Operations)というスクリプトを作ってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#parallel-operation" id="markdown-toc-parallel-operation">Parallel Operation</a></li>
  <li><a href="#インストール" id="markdown-toc-インストール">インストール</a></li>
  <li><a href="#使い方" id="markdown-toc-使い方">使い方</a></li>
  <li><a href="#例" id="markdown-toc-例">例</a></li>
  <li><a href="#謝辞" id="markdown-toc-謝辞">謝辞</a></li>
  <li><a href="#その他のツール" id="markdown-toc-その他のツール">その他のツール</a>    <ul>
      <li><a href="#parallel-ssh" id="markdown-toc-parallel-ssh">Parallel-ssh</a></li>
    </ul>
  </li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="parallel-operation">Parallel Operation</h2>

<div class="github-widget" data-repo="rcmdnk/ParallelOperation"></div>

<p>Tmuxの<code>synchronize-panes</code>という機能を使って
複数のサーバーを同時に操作するためのスクリプトです。</p>

<h2 id="インストール">インストール</h2>

<p>MacでHomebrewなら</p>

<pre><code>$ brew install rcmdnk/rcmdnkpac/po
</code></pre>

<p>それ以外の場合は</p>

<pre><code>$ curl -fsSL https://raw.github.com/rcmdnk/ParallelOperation/install/install.sh|  prefix=~/usr/ sh
</code></pre>

<p>でインストールできます(これだと<strong>~/usr/bin/po</strong>に、。<code>prefix</code>なしなら<strong>/usr/local/bin/po</strong>に。)</p>

<p>もしくは<strong>bin/po</strong>をパスの通ったディレクトリに入れてください。</p>

<p>ただのシェルスクリプトなのでほとんどの環境で動くはずです。</p>

<p>必要なものはこのスクリプト以外にはTmuxが必要です。</p>

<p>tmux 1.6と2.7でテストしてあります。</p>

<h2 id="使い方">使い方</h2>

<pre><code>$ po &lt;host1&gt; &lt;host2&gt; ...
</code></pre>

<p>と繋げたいホストを羅列するだけです。</p>

<p>もし、ユーザー名や鍵を指定したい場合には</p>

<pre><code>$ po -- user1@example1.com "-i ~/.ssh/my_key example2.com"
</code></pre>

<p>といった感じにそれぞれのまとまりで通常のsshオプションを付けることが可能です。
ホスト指定のかたまりをクォートするのとホストの指定前に<code>--</code>を入れるのを忘れずに。
(これがないと後ろの<code>-i</code>とかをシェルスクリプトが解釈しようとしてしまうので。)</p>

<p>また、</p>

<pre><code>$ po -l user1 -i ~/.ssh/my_rsa-- example1.com example2.com
</code></pre>

<p>と、<code>-l</code>、<code>-i</code>オプションを直接<code>po</code>に渡すことも出来、
この場合は全てのホストにこれらのオプションが加えられます。</p>

<p>名前が数字の順になってるものなら</p>

<pre><code>$ po example{1..4}.com
</code></pre>

<p>の様にすると簡単に複数に繋げられます。。</p>

<h2 id="例">例</h2>

<p><img src="https://rcmdnk.com/images/post/20180607_po.gif" alt="po" class="pic" /></p>

<p>こんな感じで同じコマンドを複数のサーバーに同時に送れます。</p>

<h2 id="謝辞">謝辞</h2>

<p>このスクリプトですが、
以下のブログポストを参考にしています。</p>

<blockquote>
  <p><a href="https://tech.naviplus.co.jp/2014/01/09/tmux%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E5%90%8C%E6%99%82%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/">tmuxで複数サーバの同時オペレーション – NaviPlus Engineers’ Blog</a></p>
</blockquote>

<p>参考、というよりほぼそのままでちょっと使いやすいようにオプション加えただけですが。</p>

<p>tmuxって便利ですね。</p>

<h2 id="その他のツール">その他のツール</h2>

<h3 id="parallel-ssh">Parallel-ssh</h3>

<p>tmux以外にはParallel-sshというコマンドがあります。</p>

<blockquote>
  <p><a href="https://code.google.com/archive/p/parallel-ssh/">Google Code Archive - Long-term storage for Google Code Project Hosting.</a></p>
</blockquote>

<p>こちらは<code>pssh</code>というコマンドを使って一斉に各サーバーにコマンドを送ってその返信を見る、といいった感じのコマンドです。</p>

<p>各サーバーにコマンドを送り、コマンドが終了したらその出力が表示されます。
この際、終わった順に順次表示されていきます。</p>

<p>複数のコマンドを送りたい場合にはその都度<code>pssh</code>を行うことになります。</p>

<p>かなり古いツールで2012年が最後のリリースで、Google CodeからGitHubへの移行も行われないままになっていますが
今でも十分に使えます。</p>

<p>決まったコマンドをちょっと送りたいだけなら便利です。</p>

<pre><code>$ brew install pssh
$ yum install pssh
$ apt-get install pssh
</code></pre>

<p>などでインストールできます。</p>

<p>使い方は</p>

<pre><code>$ pssh -H example1.com -H example2.com -H example3.com -i "hostname -i"
[1] 11:15:01 [SUCCESS] example1.com
192.168.1.2
[2] 11:15:03 [SUCCESS] example3.com
192.168.1.4
[2] 11:15:04 [SUCCESS] example2.com
192.168.1.3
</code></pre>

<p>といった感じ。
<code>-H</code>でホスト名を指定します。2つ目以降にも<code>-H</code>を付けて指定していきます。</p>

<p>もしくは</p>

<pre><code>esample1.com
esample2.com
esample3.com
</code></pre>

<p>といったホストを羅列したファイル(hosts.txtとする)を用意して
<code>-h hosts.txt</code>と指定すると上と同じことが出来ます。</p>

<p><code>-h</code>と<code>-H</code>の併用も可能です。</p>

<p><code>-i</code>を与えないとコマンドだけ実行して出力は表示しない様になります。</p>

<p>他のオプションとしては<code>-l</code>で共通のユーザー指定、
<code>-A</code>で共通のパスワード入力をすることが出来たりします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux 1.Xから2.Xへtmux.confをアップデート]]></title>
    <link href="https://rcmdnk.com/blog/2018/06/06/computer-tmux/"/>
    <updated>2018-06-06T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2018/06/06/computer-tmux</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/1680502212?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=1680502212&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/413SRHn9MyL._SS200_.jpg" alt="Tmux 2: Productive Mouse-free Development" /></a>
</div>

<p>久しぶりにtmuxを立ち上げたら設定ファイルのエラーが色々出ていて
どうやら1.Xの時に使っていたものがそのまま残っていたようなの
必要な部分をアップデートしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#最後に使ったのは" id="markdown-toc-最後に使ったのは">最後に使ったのは</a></li>
  <li><a href="#bind-keyのオプション" id="markdown-toc-bind-keyのオプション">bind-keyのオプション</a></li>
  <li><a href="#utf8" id="markdown-toc-utf8">utf8</a></li>
  <li><a href="#1x-2x用の共有" id="markdown-toc-1x-2x用の共有">1.X, 2.X用の共有</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
  <li><a href="#おまけ-lost-server" id="markdown-toc-おまけ-lost-server">おまけ: lost server</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="最後に使ったのは">最後に使ったのは</h2>

<p>普段はGNU screenを使っているのでtmuxはたまにいじる程度ですが、
ブログを見る限りでは2015年の頭の頃に使って以来まともに使ってないみたいです。</p>

<p><a href="https://rcmdnk.com/blog/tags/tmux/">/blog/tags/tmux/</a></p>

<p>tmuxの<a href="https://github.com/tmux/tmux/releases">Relaseses</a>
を見ると2015年の6月に2.0がリリースされているので
完全に1.Xを使っていたんだと思います。</p>

<p>まあ、今更ですが。</p>

<p>以下<strong>.tmux.conf</strong>の変更点など。</p>

<h2 id="bind-keyのオプション">bind-keyのオプション</h2>

<pre><code>.tmux.conf:82: usage: bind-key [-cnr] [-T key-table] key command [arguments]
</code></pre>

<p>こんなエラーが出ました。</p>

<p>設定は</p>

<pre><code>ind-key -t vi-copy C-h cursor-left
</code></pre>

<p>こんな感じのものです。コピーモードでViモードを使うとき、<i class="key">Ctrl</i>-<i class="key">H</i>で左に動く、という設定。</p>

<p>まず、<code>-t</code>というオプションが<code>-T</code>に変わりました。なぜかは知りませんが、オプションとしては同じものです。
なので単に<code>-T</code>に書き換えてやれば良いだけです。</p>

<p>すると今度は</p>

<pre><code> .tmux.conf:81: unknown command: cursor-left
</code></pre>

<p>と出ましたが、これは最後のコマンドの設定の所で2.Xでは<code>send-keys</code>を使う様になったためで</p>

<pre><code>bind-key -T vi-copy C-h send-keys -X cursor-left
</code></pre>

<p>と書いてあげる必要があります。
これでエラーは出なくなりますが意図した通りキーバインドが効いてません。
これはモードの名前が<code>vi-copy</code>から<code>copy-mode-vi</code>と変わったためです。</p>

<p>で、最終的に</p>

<pre><code>bind-key -T copy-mode-vi C-h send-keys -X cursor-left
</code></pre>

<p>と書けば意図したとおりに動きます。</p>

<p>Ref: <a href="https://github.com/tmux/tmux/issues/754">invalid or unknown command: <code>bind-key -t vi-copy ....</code> · Issue #754 · tmux/tmux</a></p>

<h2 id="utf8">utf8</h2>

<pre><code>.tmux.conf:106: invalid option: status-utf8
.tmux.conf:107: invalid option: utf8
</code></pre>

<p>といった感じのutf8関連の設定のエラーが出ました。</p>

<pre><code># UTF8
set-option -g status-utf8 on
set-window-option -g utf8 on
</code></pre>

<p>こんな感じで設定しているものです。</p>

<p>これに関しては現在はその辺うまいこと自動でやってくれてるようで必要ない、ということなので
単に削除すればOK。</p>

<p>Ref: <a href="https://github.com/tmux/tmux/issues/230">tmux reports “unknown option: status-utf8” on startup · Issue #230 · tmux/tmux</a></p>

<h2 id="1x-2x用の共有">1.X, 2.X用の共有</h2>

<p>tmux.confでは(知る限り)条件分岐とか出来ないので
あまり上手いこと出来ませんが、
メインの<strong>.tmux.conf</strong>の最後に</p>

<pre><code>source-file ~/.tmux.local.conf
</code></pre>

<p>とか書いて1.Xがインストールされてる環境では</p>

<pre><code># bind-keys
bind-key -t vi-copy C-h cursor-left
...

# UTF8
set-option -g status-utf8 on
set-window-option -g utf8 on
</code></pre>

<p>の様な内容、2.Xがインストールされてる環境では</p>

<pre><code># bind-keys
bind-key -T copy-mode-vi C-h send-keys -X cursor-left
</code></pre>

<p>の様な内容で<strong>.tmux.local.conf</strong>を置いておく、とか。</p>

<p><code>source-file</code>でファイルが無いとエラーが出るので、
必要なくても<code>touch .tmux.local.conf</code>しとく必要があります。</p>

<p>まだ結構初期状態だと1.6とかが入ってるサーバーも多くて真面目にtmuxを使おうと思うと結構面倒そう。</p>

<h2 id="まとめ">まとめ</h2>

<p>多分これ以外にも変更が数多くあると思いますが
とりあえず手元のtmux.confはこれだけで大丈夫でした。</p>

<p>変更後のものは以下のdotfilesにあります。</p>

<p><a href="https://github.com/rcmdnk/dotfiles">rcmdnk/dotfiles: setting files for bash</a></p>

<p>設定の変更以外にもちょっと見てみただけでも色々と新機能が入っていて
やはりGNU screenよりも開発が盛んだな、という印象。</p>

<p>ただ、Window/Pane辺りの使い方というか概念がscreenの方が使いやすいので
まだscreenを使っていこうと思っています。
まあ、ほとんど慣れによるものですが。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00A4I3ZVY?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00A4I3ZVY&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41n-bcndjdL._SS90_CR0,0,120,90_.jpg" alt="tmux: Productive Mouse-Free Development" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/01/02/computer-tmux-screen/">tmuxに慣れてみる: tmuxとGNU screenの違いなど</a></div></li></ul>

<p>下に書いた優れてる点、とかも両方共色々とアップデートがあるので
そのうち気が向いたらまとめ直してみたいと思います。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/0415827809?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=0415827809&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41FFCSpQXWL._SS90_CR0,0,120,90_.jpg" alt="Pros and Cons: A Debaters Handbook" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/01/08/computer-screen-tmux/">tmuxとscreenのそれぞれの優れてる点</a></div></li></ul>

<h2 id="おまけ-lost-server">おまけ: lost server</h2>

<p>tmuxを入れ直したりして立ち上げようと思ったら</p>

<pre><code>$ tmux
lot server
$
</code></pre>

<p>となってどうやっても立ち上がらない状態になりました。</p>

<p>これは失敗したプロセスが残っている状態が原因である可能性があるので</p>

<pre><code>$ ps -U$USER|grep tmux
164237 ?        00:00:00 tmux
</code></pre>

<p>として残ってたら</p>

<pre><code>$ kill -kill 164237
</code></pre>

<p>とすればtmuxが立ち上がる様になります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmuxとscreenのそれぞれの優れてる点]]></title>
    <link href="https://rcmdnk.com/blog/2015/01/08/computer-screen-tmux/"/>
    <updated>2015-01-08T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/01/08/computer-screen-tmux</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/0415827809?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=0415827809&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41FFCSpQXWL._SS200_.jpg" alt="Pros and Cons: A Debaters Handbook" /></a>
</div>

<p><a href="https://rcmdnk.com/blog/2015/01/02/computer-tmux-screen/">tmuxに慣れてみる: tmuxとGNU screenの違いなど</a>
から始まってtmuxを暫く試していましたが、
その中で気づいた
一方で出来るけど出来ないこと、
一方の方が優れてる点になどについて。</p>

<p>で、結局どちらを使うか。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#screenの良い所" id="markdown-toc-screenの良い所">screenの良い所</a></li>
  <li><a href="#tmuxの良い所" id="markdown-toc-tmuxの良い所">tmuxの良い所</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="screenの良い所">screenの良い所</h2>

<ul>
  <li>ステータスラインで全<strong>Window</strong>表示が簡単に出来る<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>。(tmuxでは全<strong>Pane</strong>を表示しようとするとちょっと大変、な上、切り替わった直後にきちんと載せることが上手く出来ない。)</li>
  <li>各領域(<strong>Window</strong>)ごとにキャプションを付けられる。</li>
  <li>コマンドのヒストリーが残って再利用出来る。</li>
  <li>同時に二箇所に同じ<strong>Window</strong>を出せる(余り意味ない?)</li>
  <li>キーバインド時に<code>command class</code>が定義でき、複雑な連続キー入力によるコマンド実行が可能。</li>
  <li>コピーモード時に<i class="key">Y</i>だけで一行コピー可能<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>。(コピーモード時の自由度はscreenのが高い、と思う。)
    <ul>
      <li>コピーモード時に上下の移動がそのコラムで出来る。(何故かtmuxは毎回行末へ移動。これが上のコピーのショートカットキーがむしろtmuxに必要になるのに出来ない。)</li>
    </ul>
  </li>
  <li><a href="https://github.com/rcmdnk/multi_clipboard">multi_clipboard</a>でマルチクリップボードが出来る<sup id="fninref:3"><a href="#fnin:3" rel="footnote">3</a></sup>。</li>
</ul>

<h2 id="tmuxの良い所">tmuxの良い所</h2>

<ul>
  <li>設定がキーバインドもステータス設定も比較的楽。
    <ul>
      <li>ステータスラインは左右に一定時間毎に表示を変えらられる用領域と、<strong>Window</strong>情報が変わる毎にアップデートされる<strong>Window</strong>情報領域がある。</li>
    </ul>
  </li>
  <li><code>bind-key -r</code>で<i class="key">Prefix</i>無しの連続入力を可能にできる。(ただし、全てのキーバインドで一つだけなので余り色々してもよくわからなくなる)</li>
  <li>デフォルトでマルチクリップボードに対応。</li>
  <li>コピーモードにviモードとemacsモードがある。</li>
  <li>コピーモード時(vi-copy)の矩形選択がviっぽくて分かりやすい。</li>
  <li>スクロールバッファが実際に表示が始まったところが最初になる(<code>gg</code>で戻ってもscreenみたいに無駄に空白空間飛ばない)。</li>
  <li>コマンドラインから殆ど全てのコマンドを送れる。</li>
  <li><i class="key">Prefix</i>-<i class="key">z</i>などで一旦1つを全画面、戻す、のトグルが簡単に出来る。</li>
  <li>予め用意されたレイアウトがあり、<strong>Pane</strong>がいくつでも良しなに分割して表示してくれる。(screenでは自分で用意する必要があるのとどちらかと言うとtmuxの<strong>Window</strong>の概念も入った感じのもの<sup id="fninref:4"><a href="#fnin:4" rel="footnote">4</a></sup>。)</li>
  <li><code>synchronize-panes on</code>で複数<strong>Pane</strong>を同時に操作できる。</li>
  <li>多少軽い?(ただ最近の普通の端末ではどちらも全く問題にならない程度。)</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>数えるとtmuxの方が優れてる点が多い感じですが、</p>

<ul>
  <li>ステータスラインは<strong>Window</strong>等の今何が開いているか、の情報だけあれば良い。
    <ul>
      <li>分割して各箇所での切り替えもよくするので各領域のキャプションも欲しい。</li>
    </ul>
  </li>
  <li>使い方はscreen的な1つのViewのなかで色々立ち上げたプロセスを入れ替えたりしながら使う<sup id="fninref:5"><a href="#fnin:5" rel="footnote">5</a></sup>。</li>
</ul>

<p>と言う点が強いのでやはりscreenの方にしよう、という感じ。
キャプションについてはプロンプトの所に情報を入れる事も可能ですが、
<a href="https://rcmdnk.com/blog/2013/03/18/prompt-screen/">プロンプトの戯れ</a>
でやったプロンプトを気に入ってて変えられないので。。。
(そうでなくてもなるべくプロンプトは短くしたい。)</p>

<p>唯一<code>synchronize-panes on</code>の機能だけがscreenではどうしようも
無いものなのであれですが、
滅多に使うものでもないのでどうしても必要になったらその時だけ
tmuxを立ち上げれば良いかな、と。
(今回色々設定できたのでtmuxを立ち上げてもすぐ使える様になったのは良かった点。)</p>

<p>また、<code>synchronize-panes on</code>が必要な時は、
沢山のサーバーへ簡単なコマンドを一斉に送る、みたいな時だと思いますが、
頻繁に行う様な作業ならスクリプトで送る様にしておくとかも出来ることも。</p>

<p>それ以外にも</p>

<ul>
  <li><a href="https://code.google.com/p/pdsh/">Parallel Distributed Shell (pdsh)</a></li>
  <li><a href="http://www.theether.org/pssh/">Parallel ssh (pssh)</a></li>
  <li><a href="https://github.com/duncs/clusterssh/wiki">Cluster SSH (cssh)</a></li>
</ul>

<p>とかを使えば複数サーバーに同時にコマンド送ることも出来たりしますし、
色々な処理を考えるとこれらのが良いのかも。</p>

<p>といったところで、取り敢えずtmuxもひと通り使える様になったな、
という感じになったところで
screenに戻ろうかな、と。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmuxで1行ラインコピーを簡単にする]]></title>
    <link href="https://rcmdnk.com/blog/2015/01/07/computer-tmux/"/>
    <updated>2015-01-07T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/01/07/computer-tmux</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00BB0R2DQ?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00BB0R2DQ&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41Gpr3RtmfL._SS200_.jpg" alt="一行恐怖" /></a>
</div>

<p>GNU screenではコピーモード時に<i class="key">Y</i>を押すと一行だけコピーして
コピーモードを終了してくれるのですが、
tmuxではそのようなコマンドが無いの出来るだけ簡単にコピーできる様に
キーバインドを設定してみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#コピーモード時のキーバインドの制限" id="markdown-toc-コピーモード時のキーバインドの制限">コピーモード時のキーバインドの制限</a></li>
  <li><a href="#設定" id="markdown-toc-設定">設定</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="コピーモード時のキーバインドの制限">コピーモード時のキーバインドの制限</h2>

<p>tmuxでのコピーモード時のキーバインドは、<code>bind-key</code>設定で
<code>-t vi-copy</code>(emacsモードを使ってるなら<code>-t emacs-copy</code>)を渡した上で設定を行います
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>。</p>

<p>これが通常のキーバインドと同じような使い方ですが、
通常の<code>-t</code>無しの場合と違い、複数のコマンドを<code>\;</code>で繋げる事は出来ません。</p>

<blockquote>
  <p><a href="http://superuser.com/questions/502745/tmux-combine-multiple-commands-to-one-vi-copy-command-or-tmux-command-to-yank-a">linux - tmux combine multiple commands to one vi-copy command or tmux command to yank a line - Super User</a></p>
</blockquote>

<p>複数コマンドが使えればワンキーで簡単に出来る事が増えるので、
tmuxに是非改善して欲しい点。</p>

<h2 id="設定">設定</h2>

<p>tmuxのコピーモードには</p>

<ul>
  <li><i class="key">0</i>(start-of-line:行頭へジャンプ)</li>
  <li><i class="key">D</i>(copy-end-of-line:現在のカーソル位置から行末までをコピーして終了)</li>
</ul>

<p>と言うショートカット(コマンド)があります。</p>

<p>なので<i class="key">0</i> <i class="key">D</i>と打てば一行コピーできるのですが、
これだと結構面倒なので</p>

<pre><code>bind-key -t vi-copy a start-of-line
bind-key -t vi-copy s copy-end-of-line
</code></pre>

<p>としておいて<i class="key">a</i> <i class="key">s</i>でラインコピー出来る様にしました。
(これらのキーはデフォルトではコピーモード時には割り当てがありません。)</p>

<p>これらのキーバインドは<code>man tmux</code>で見ると直接コマンド名が載ってませんが、
<strong>WINDOWS AND PANES</strong>の項目にある<strong>Function</strong>名を全て小文字にした上での
チェインケース(<code>-</code>(ハイフン)で繋げる)になってる様です。</p>

<p>1つ注意が必要なのは、GNU screenの場合はラインコピーすると
最後に改行が入りませんが、
tmuxの場合だと最後に改行が入ってしまうみたいです。</p>

<p>なので、適当なコマンド行を取ってきて、取り敢えずペーストしてから
編集、みたいなことをしようとするとコピーした瞬間に実行されてしまいます。</p>

<p>コレを回避するためには更に行末まで行った後に一文字左に戻って。。。
みたいなことをしないと行けませんが、
上に書いたとおり各コマンドに対して1つのキーが必要なので現実的ではありません。</p>

<p>コピーはtmux/screenを使う上での重要な要素で、
その中でも一行だけコピーするような事は結構あると思うのですが、
ちょっと使いづらい。。。</p>

<p>tmuxの問題点としてコピーモード時に何故か上下移動すると必ず
行末へ移動してしまう、と言う点があります。
これが無ければ、移動するときに左の方へ寄っていて、
たどり着いたら<i class="key">D</i>だけでコピー、とか出来るのですが、
必ず末尾に居るのでそこが面倒なポイントでもあります。</p>

<div class="postscript">
  <p><strong>追記: 2015/01/08</strong></p>

  <p>@syui__さんに教えてもらいましたが、tmuxのコマンドで<code>send-keys</code>というコマンドがあって、
これは任意のキー入力をtmux側に送ることが出来るコマンドです。</p>

  <p>コピーモード時にも通常の<i class="key">Prefix</i>-のキー入力が使えるので
(そう言えばscreenでもコピーモード中でも<strong>Window</strong>の切替とか出来ますね)、
これを使って</p>

  <pre><code>bind-key Y run "tmux send-keys V Left Enter"
</code></pre>

  <p>と設定してあげると、コピーモード中に<i class="key">Prefix</i>-<i class="key">Y</i>
で現在居る行を最後の改行無しでコピーできる様になります。</p>

  <p><code>send-keys</code>は<code>key-bind</code>等と同様キー入力に直接係るコマンドなので、
直接<code>bind-key Y send-keys..</code>とか書いても上手く動いてくれないので
<code>run-shell</code>コマンドを使ってtmuxを呼ぶ必要があります。</p>

  <p><strong>追記ここまで</strong></p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux/GNU ScreenでC-hにキーバインドする]]></title>
    <link href="https://rcmdnk.com/blog/2015/01/06/computer-tmux/"/>
    <updated>2015-01-06T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/01/06/computer-tmux</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00B40AK96?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00B40AK96&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41M0PQmQ8yL._SS200_.jpg" alt="Backspace (English Edition)" /></a>
</div>

<p>tmuxを使ってて少し違和感あるな、と思ったら
<i class="key">Prefix</i> <i class="key">Ctrl</i>-<i class="key">h</i>で左の<strong>Pane</strong>へ移る、
という操作設定がきちんと把握されてなかったのでその辺について。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#c-h" id="markdown-toc-c-h">C-h</a></li>
  <li><a href="#tmuxの場合" id="markdown-toc-tmuxの場合">tmuxの場合</a></li>
  <li><a href="#gnu-screenの場合" id="markdown-toc-gnu-screenの場合">GNU screenの場合。</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="c-h">C-h</h2>

<p><i class="key">Ctrl</i>-<i class="key">h</i>はターミナル上では基本的に<i class="key">Backspace</i>
と同じ信号を送ります。</p>

<p>これはターミナルの種類や設定、またはシェル側の設定でも変更できたりします
ので環境ごとにチェックが必要ですが基本的には<i class="key">Backspace</i>=<i class="key">Ctrl</i>-<i class="key">h</i>です。</p>

<p>最終的にtmuxなどソフトにどう認識されるか、が重要ですが、
手元のWindows + PuTTY/Cygwinでは<i class="key">Ctrl</i>-<i class="key">h</i>は
完全に<i class="key">Backspace</i>として見られ、
一方、Macのターミナルでは<i class="key">Ctrl</i>-<i class="key">h</i>はそのまま認識されてる様に
なっています。</p>

<p>ここで、問題になってくるのがキーバインドする時にどうするか、で、
もともとMacで</p>

<pre><code>bind-key -r C-h select-pane -L
bind-key -r C-j select-pane -D
bind-key -r C-k select-pane -U
bind-key -r C-l select-pane -R
</code></pre>

<p>みたいな感じでVimライクに<strong>Pane</strong>の移動をするようにしていましたが、
これだとWindowsで左へ移る、ができません。</p>

<h2 id="tmuxの場合">tmuxの場合</h2>

<p>これを有効にするためには、<i class="key">Ctrl</i>-<i class="key">h</i>の代わりに<i class="key">Backspace</i>をバインドしてあげる必要があり、</p>

<pre><code>bind-key -r C-h select-pane -L
bind-key -r BSpace select-pane -L # Backspace
</code></pre>

<p>と、tmuxでは<code>BSpace</code>と表します。</p>

<p>コレ意外にも、通常のキー以外では<code>Up</code>や<code>Left</code>などのカーソルキー等。
<i class="key">Delete</i>は<code>Delete</code>でも<code>DC</code>と短縮形でもOK。</p>

<p>また、<code>Enter</code>、<code>Escape</code>、<code>Space</code>、<code>Tab</code>などはそのまま、
<code>F1</code>などもそのまま書けます。</p>

<p><i class="key">BackSpace</i>だけがちょっと特殊で<code>BSpace</code>と<code>B</code>側を短縮しないといけません。</p>

<p>それから<i class="key">”</i>/<i class="key">’</i>などはクォートして<code>'"'</code>/<code>"'"</code>として使う必要が有ります。</p>

<p>取り敢えず環境によって<i class="key">Ctrol</i>-<i class="key">h</i>がどう捉えられるかわからないのと、
<i class="key">Backspace</i>は取り敢えず別途バインドする必要はないので、
上の様に両方書いておくのが吉です。</p>

<h2 id="gnu-screenの場合">GNU screenの場合。</h2>

<p>GNU screenの場合にも同じような問題はあって、
screenの場合に<i class="key">Backspace</i>をバインドしたい場合には、
<code>-k</code>という<code>termcap keyboard capability name</code>
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
で指定できるオプションを使って</p>

<pre><code>bind ^h eval    'focus left'
bind -k kb eval 'focus left' #Backspace
</code></pre>

<p>とします。(<code>kb</code>が<i class="key">Backspace</i>の名前。)</p>

]]></content>
  </entry>
  
</feed>
