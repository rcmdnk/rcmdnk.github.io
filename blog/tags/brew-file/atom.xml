<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Brew-file | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/brew-file/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2022-03-07T00:51:01+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Homebrew-fileへのmainコマンドの追加]]></title>
    <link href="https://rcmdnk.com/blog/2021/09/13/comptuer-homebrew-brew-file-mac-windows/"/>
    <updated>2021-09-13T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/09/13/comptuer-homebrew-brew-file-mac-windows</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07H3JTZJY?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07H3JTZJY&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61zbjv7k9uL._SS200_.jpg" alt="味の加久の屋 brew プレミアムおつまみ ウニ入りホタテマヨ 70g" /></a>
</div>

<p>Homebrewのパッケージリストを管理するツールのHomebrew-file
でパッケージを管理する際に、<code>main</code>というコマンドを使えるようにしました。</p>

<p>これによってより柔軟に複数の環境でのBrewfileの共有が出来るようになりました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#homebrew-file" id="markdown-toc-homebrew-file">Homebrew-file</a></li>
  <li><a href="#brewfile" id="markdown-toc-brewfile">Brewfile</a></li>
  <li><a href="#file機能" id="markdown-toc-file機能">file機能</a></li>
  <li><a href="#ファイル指定で使える変数" id="markdown-toc-ファイル指定で使える変数">ファイル指定で使える変数</a></li>
  <li><a href="#mainコマンドの追加" id="markdown-toc-mainコマンドの追加">mainコマンドの追加</a></li>
  <li><a href="#チーム共有brewfileの運用" id="markdown-toc-チーム共有brewfileの運用">チーム共有Brewfileの運用</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="homebrew-file">Homebrew-file</h2>

<p>HomebrewのパッケージリストをBrewfileを使って管理するツール。</p>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>Homebrew自体にも公式にbundleというBrewfileファイルに書き出す機能がありますが、
Homebrew-fileにはGitHubとかと連携してBrewfileの履歴を管理したり他の環境と共有しやすくするための
機能だったり、Brewfileを自動的にアップデートする機能があったりします。</p>

<h2 id="brewfile">Brewfile</h2>

<p>Homebrew-fileにおけるBrewfileは基本的には以下の様な感じになります。</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">brew node
</span><span class="line">brew python@3.9
</span><span class="line">
</span><span class="line">tap rcmdnk/file
</span><span class="line">brew brew-file
</span><span class="line">
</span><span class="line">tap rcmdnk/file
</span><span class="line">brew brew-file
</span><span class="line">
</span><span class="line">tap homebrew/cask
</span><span class="line">cask bettertouchtool
</span><span class="line">cask google-japanese-ime
</span><span class="line">cask hyperswitch
</span><span class="line">cask iterm2
</span><span class="line">cask karabiner-elements
</span><span class="line">
</span><span class="line">appstore <span class="m">408981434</span>   iMovie        <span class="o">(</span><span class="m">10</span>.2.5<span class="o">)</span>
</span><span class="line">appstore <span class="m">409183694</span>   Keynote       <span class="o">(</span><span class="m">11</span>.1<span class="o">)</span>
</span><span class="line">appstore <span class="m">409203825</span>   Numbers       <span class="o">(</span><span class="m">11</span>.1<span class="o">)</span>
</span><span class="line">appstore <span class="m">409201541</span>   Pages         <span class="o">(</span><span class="m">11</span>.1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Ref: <a href="https://homebrew-file.readthedocs.io/en/latest/usage.html#brewfile">Usage — Homebrew-file documentation</a></p>

<p>Brewfileの中でコマンドとして使えるものとしては上の様に主に</p>

<ul>
  <li><code>tap</code>: Tapするレポジトリ</li>
  <li><code>brew</code>: インストールするFormulaパッケージ</li>
  <li><code>cask</code>: インストールするCaskパッケージ</li>
  <li><code>appstore</code>: AppStoreからインストールするApp (<code>mas</code>を利用。)</li>
</ul>

<p>があります。</p>

<p><code>cask</code>に関してはHomebrew 3.0.0から<code>brew cask</code>というコマンドはなくなり、<code>brew install ...</code>
で同じようにインストールできるようになりましたが、
<code>brew list --cask ...</code>の様に区別して見ることも出来る状態で
<code>brew file init</code>とかでBrewfileに書き出す場合には区別して書き出しています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2021/02/06/computer-mac-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20210206_homebrew300_120_90.jpg" width="120" height="90" alt="20210206_homebrew300_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2021/02/06/computer-mac-homebrew/">Homebrew 3.0.0リリース</a></div></li></ul>

<p>Brewfileに手動で<code>brew iterm2</code>みたいにCaskなものを書いておいても<code>brew file install</code>でインストールすることは出来ます。</p>

<h2 id="file機能">file機能</h2>

<p>上記の4つ以外にもいくつか使えるコマンドがありますが、
そのうちの一つに<code>file</code>というコマンドがあります。</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">file ./Brewfile.ext
</span></code></pre></td></tr></table></div></figure>

<p>の様に書くと、<code>brew file install</code>をするとき、<strong>Brewfile.ext</strong>に書いてある
パッケージも読み込んでインストールします。</p>

<p><code>brew file init</code>すると、<strong>Brewfile.ext</strong>に元からあったパッケージはそちらに、
新たに加わったパッケージは親の<strong>Brewfile</strong>に追加される様になっています。</p>

<p>ファイルの指定方法として、上のように相対パスの様に書くと、親の<strong>Brewfile</strong>のある
ディレクトリからの相対パスになります。
なので、上の場合は<strong>Brewfile</strong>と同じディレクトリにある<strong>Brewfile.ext</strong>を見に行きます。</p>

<p><strong>/home/user/Brewfile.ext</strong>の様に<code>/</code>から開始すると絶対パスとして見に行きます。</p>

<p>もしファイルがない場合にはエラーにならずに無視されます。</p>

<p>したがって、特定のマシンにだけ入れたいパッケージ、というものがある場合、</p>

<p>file $HOME/Brewfile.ext</p>

<p>としておいて、必要な環境にだけ<strong>$HOME/Brewfile.ext</strong>を置いておくと、
その環境にだけ<code>brew file install</code>で<strong>Brewfile.ext</strong>の中身をインストールしてくれます。</p>

<p>もし<strong>Brewfile</strong>と<strong>Brewfile.ext</strong>に同じパッケージが書かれているかつ
そのパッケージが既にインストールされている状態で<code>brew file init</code>すると
<strong>Brewfile.ext</strong>の方に優先して残すようになっています。</p>

<h2 id="ファイル指定で使える変数">ファイル指定で使える変数</h2>

<p><code>file</code>などで指定できるファイルに使える変数として、
<code>~</code>でホームディレクトリを指定したり、<code>$HOME</code>などの環境変数を使うことが出来ます。</p>

<p>加えて、
<code>$HOSTNAME</code>、<code>$HOSTTYPE</code>、<code>$OSTYPE</code>、<code>$PLATFORM</code>の4つの変数も使えます。</p>

<p>それぞれ</p>

<ul>
  <li><code>HOSTNAME</code>: <code>os.uname().nodename</code></li>
  <li><code>HOSTTYPE</code>: <code>os.uname().machine</code></li>
  <li><code>OSTYPE</code>: Bashのシェル変数(<code>subprocess</code>で取得)</li>
  <li><code>PLATFORM</code>: <code>sys.platform</code></li>
</ul>

<p>です。<code>HOSTNAME</code>、<code>HOSTTYPE</code>はシェル変数の同名のものと同じです。</p>

<ul>
  <li><code>HOSTNAME</code>: マシン名(ドメインなし)</li>
  <li><code>HOSTTYPE</code>: <code>x86_64</code>, <code>arm64</code>など</li>
  <li><code>OSTYPE</code>: <code>linux-gnu</code>、<code>darwin20.3.0</code>など</li>
  <li><code>PLATFORM</code>: <code>linux</code>、<code>darwin</code>など</li>
</ul>

<p>これを使うと、例えば特定のマシンにだけ入れたいパッケージがある場合、
親の<strong>Brewfile</strong>を</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">file ./Brewfile.<span class="nv">$HOSTNAME</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>Brewfile.machine1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>brew python@3.8
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>Brewfile.machine2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>brew python@3.9
</span></code></pre></td></tr></table></div></figure>

<p>というファイルを用意しておくと、machine1では<code>python@3.8</code>をインストールして
machine2では<code>python@3.9</code>をインストールし、
その他の環境ではこれらをインストールしません。</p>

<p>OSなど環境毎に変えたい場合には</p>

<p>file ./Brewfile.$PLATFORM.$HOSTTYPE</p>

<p>が便利です。</p>

<p><code>OSTYPE</code>にはバージョン情報が入ってしまうため、
そこまで管理したい場合には便利ですが、大概の場合はそのバージョンは無視して良いことが多く
<code>PLATFORM</code>を使ったほうが便利です。</p>

<p>あとはアーキテクチャの違いを<code>$HOSTTYPE</code>で追加しておきます。</p>

<p>これは、特に最近でたM1 Macで使う際に便利です。</p>

<p>M1のarm64の環境だと使えないCUIツールはまだ結構あって、
Rosettaを使ったIntel環境も作っている人は多いかと思いますが、
両方で同じ<strong>Brewfile</strong>を使おうと思うとIntel用に入れたものがarm64側でインストールに失敗してしまいます。</p>

<p>そこで、上の様な<code>file</code>設定をしておいて、</p>

<p><strong>Brewfile.darwin.x86_64</strong>というファイルにIntel側にだけ入れるものを書いておけば
他のものは<strong>Brewfile</strong>で共有して使うことが出来ます。</p>

<h2 id="mainコマンドの追加">mainコマンドの追加</h2>

<p>上の<code>file</code>の場合、<code>brew init</code>や、
<a href="https://homebrew-file.readthedocs.io/en/latest/brew-wrap.html">brew-wrap</a>
を使った<code>brew install</code>時に追加されるパッケージは親の<strong>Brewfile</strong>側になります。</p>

<p>したがって、その環境特有のものをインストールした場合には手動で
<strong>Brewfile</strong>から
<strong>Brewfile.machine1</strong>とかに移して、他の環境では使わないようにする必要があります。</p>

<p>これはほとんどが共通で、ほんの一部だけが特別なパッケージの場合には便利です。</p>

<p>一方で、例えば仕事のチームで最低限必要なパッケージ群をまとめる<strong>Brewfile</strong>を作り、
他を個別に管理したい、という場合、自動で<strong>Brewfile</strong>を管理するのが難しくなります。</p>

<p><code>main</code>コマンドはこういった場合に使えるようにv8.5.0で追加しました。
通常、<strong>メイン</strong>のファイルは最初に指定されている<strong>Brewfile</strong>本体になりますが、
<code>main</code>コマンドで指定されたファイルがあるとそれに移ります。</p>

<p><strong>メイン</strong>のファイルは、新たなパッケージが加わったときなどに、
<code>brew file init</code>や
brew-wrapを使った<code>brew install</code>でパッケージが加えられるファイルになります。</p>

<p><code>main</code>の使い方は<code>file</code>と同じ様にファイルへのパスを書く形で、</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$HOSTNAME</span>
</span></code></pre></td></tr></table></div></figure>

<p>と言った感じ。</p>

<p>この場合、新たなパッケージが加えられた場合、
<code>brew file init</code>や
brew-wrapを使った<code>brew install</code>では<strong>./Brewfile.$HOSTNAME</strong>
に追加されます。</p>

<p>もしファイルがない場合には自動的に作られます。</p>

<p>これを使うと、<strong>Brewfile</strong>の自動アップデートを使っても共有ファイルの管理が簡単になります。</p>

<p>例えば、MacとLinuxで共有しようと思うと、</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$PLATFORM</span>
</span></code></pre></td></tr></table></div></figure>

<p>としておけば、それぞれの環境でインストールしたものはそれぞれ、<strong>Brewfile.darwin</strong>、<strong>Brewfile.linux</strong>に追加されます。</p>

<p>また、M1 Macでは</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$HOSTTYPE</span>
</span></code></pre></td></tr></table></div></figure>

<p>としておけば、
そのままのM1 (arm64)環境なら<strong>Brewfile.arm64</strong>、Rosetta使ったx86_64環境なら
<strong>Brewfile.x86_64</strong>に追加されます。</p>

<p>たまに整理してあげて、共通しているものを<strong>Brewfile</strong>に移す作業をしてあげれば良いかと。
(この辺をうまくやる機能もそのうち実装したい。。。)</p>

<p><strong>Brewfile</strong>と<code>main</code>で指定されてた<strong>Brewfile.$PLATFORM</strong>
などの両方に同じパッケージが書かれていた場合、
<code>brew file init</code>すると<code>main</code>の場合は<code>file</code>と違い
親の<strong>Brewfile</strong>の方に優先して残すようになっています。</p>

<p>ちなみに<code>main</code>や<code>file</code>は入れ子が可能で、</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$PLATFORM</span>
</span></code></pre></td></tr></table></div></figure>

<p>として、</p>

<figure class="code"><figcaption><span>Brewfile.darwin </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$HOSTNAME</span>
</span></code></pre></td></tr></table></div></figure>

<p>として、<strong>Brewfile.linux</strong>の方では<code>main</code>を追加しないままにしておくと、</p>

<ul>
  <li>Linux環境: HOSTによらず<strong>Brewfile.linux</strong>がメイン。</li>
  <li>Mac環境: HOST毎に別のものがメインに。</li>
  <li><strong>Brewfile</strong>にあるパッケージは全環境共通。</li>
  <li><strong>Brewfile.darwin</strong>にあるパッケージはMac環境だけで共通。</li>
</ul>

<p>とすることが出来ます。</p>

<h2 id="チーム共有brewfileの運用">チーム共有Brewfileの運用</h2>

<p>そこで、例えばチーム共有<strong>Brewfile</strong>みたいのを考えることが出来ます。</p>

<ul>
  <li>まず、共有する<strong>Brewfile</strong>を作り、適当なGitHubのレポジトリで共有。
    <ul>
      <li><strong>Brewfile</strong>に<code>main ~/.Brewfile</code>という一行を加えておく。</li>
      <li>このレポジトリは管理者だけが書き込めるものでも構いません。</li>
    </ul>
  </li>
  <li>各個人で<strong>~/.Brewfile</strong>を用意。
    <ul>
      <li>最初の時点でとくに必要なものがなければ自分で用意しなくても良くて勝手に作ってくれる。</li>
    </ul>
  </li>
  <li><code>brew file set_repo</code>で共有レポジトリを指定してセットする。</li>
  <li><code>brew install</code>したり色々して<strong>~/.Brewfile</strong>をアップデート。
    <ul>
      <li><a href="https://github.com/rcmdnk/dotfiles/">dotfiles</a>などで<strong>~/.Brewfile</strong>も管理すると良いかと。</li>
    </ul>
  </li>
  <li>管理者が共有の<strong>Brewfile</strong>をアップデートしてパッケージを追加したりする。
    <ul>
      <li>管理者以外でも便利で皆が使うべきものだと思えばPull Request出したり。</li>
    </ul>
  </li>
  <li><code>brew file update</code>によって共有<strong>Brewfile</strong>をアップデート。
    <ul>
      <li>個人ごとの利用ではこのファイルを変更することは無いので、レポジトリ側のアップデートのみを撮ってくる形になる。</li>
      <li>自分でインストールしたパッケージも共有<strong>Brewfile</strong>に追加されると<strong>~/.Brewfile</strong>からは消える。</li>
    </ul>
  </li>
</ul>

<p>と言った感じの運用が出ます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew-fileのUbuntuなどDebian系Linuxへの対応]]></title>
    <link href="https://rcmdnk.com/blog/2020/02/06/computer-linux-homebrew-brew-file/"/>
    <updated>2020-02-06T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/02/06/computer-linux-homebrew-brew-file</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4798109088?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4798109088&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51S3TB2CW8L._SS200_.jpg" alt="Debian 辞典 (Desktop reference)" /></a>
</div>

<p>brew-fileをLinuxにも対応させた、と書いてましたが、
Ubuntu等では動かない状態だったので対応しました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#brew-file" id="markdown-toc-brew-file">brew-file</a></li>
  <li><a href="#linuxへの対応" id="markdown-toc-linuxへの対応">Linuxへの対応</a></li>
  <li><a href="#debian系への対応" id="markdown-toc-debian系への対応">Debian系への対応</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="brew-file">brew-file</h2>

<p>Homebrewのパッケージリストを管理するツール。</p>

<p>Homebrew-fileと書いたりbrew-fileと書いたりこのブログの中でも統一されて無くて良くないですが、
管理してるレポジトリ名が<code>homebrew-file</code>で
コマンド名は<code>brew-file</code>、<code>brew</code>のサブコマンドとして<code>brew file</code>で呼び出される様なものです。
なのでその時々の気分で変わってしまってすいません。(多分、brew-fileとしておくのが良いのかな、と最近は。)</p>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>Homebrew自体にも現在はbundleというBrewfileファイルに書き出す機能がありますが、
brew-fileではBrewfile自体をGitHubのレポジトリで管理したり、
また、<code>brew install</code>時などに自動でBrewfileをアップデートしたり、
普段<code>brew-file</code>というコマンドを意識せずに自動で管理できる様なものを目指しています。</p>

<p>ほんとはbundleの機能に追加できれば良いんですが、あちらRubyでこちらPythonで
統一するのも面倒だし、その先新しいこと加えるときにRubyよりPythonのが(個人的に)やりやすいので
別途の形に。</p>

<p>ちなみに、以前、そこそこ使われてきたのでbrew-fileのformulaを
公式のレポジトリに入れてもらおうかと思ったこともあったんですが、
上記の様にbundleという似た(今はもう)公式のツールがあるので微妙かな、ということで
入れないことにしました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B011WTXSJ2?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B011WTXSJ2&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51RErbdy69L._SS90_CR0,0,120,90_.jpg" alt="The Persistence Formula: Follow Through, Stop Quitting, Stay Focused, Avoid Distraction, Achieve Your Goals, Control Your Habits, Maximize Productivity, ... Enjoy The Entire Journey (English Edition)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/07/20/computer-homebrew-brew-file-mac/">HomebrewにFormulaを公式に入れてもらうためにチェックする事</a></div></li></ul>

<p>まあ、Formulaの更新も自由に出来るので管理上は公式に入ってない方が楽なのでそれはそれで良いかな、と。</p>

<h2 id="linuxへの対応">Linuxへの対応</h2>

<p>今年はじめLinuxbrewがHomebrewに統一されたのでそれを機に
Linuxでも本格的にHomebrewを使うためbrew-fileもLinux対応させました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/02/27/computer-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/02/27/computer-linux-homebrew/">LinuxでHomebrewを使う: Homebrew-fileも対応させた</a></div></li></ul>

<p>ただ、自分で使っていたのがRedHat系で、
最近WindowsでWindows Subsystem for Linux(WSL)なUbuntuの所でエラーが出て使えなかったので
それに対応させました。</p>

<h2 id="debian系への対応">Debian系への対応</h2>

<p>ここで問題になったRedHat系とDebian系の違いは、<code>/bin/sh</code>の違いです。
RedHat系はBash、Debian系はDash。</p>

<p>brew-fileの中で、外部コマンドを<code>subprocess.Popen</code>で呼び出している部分がありますが、
<code>brew</code>コマンドを呼ぶ際、brew-fileの設定で<code>brew-file</code>へのラッパー関数に設定している場合があるので、
その場合のループを防ぐために<code>command brew</code>の様な呼び方をしていました。</p>

<p>これでMacでもRedHat系でも問題なかったのですが、Ubuntuでやってみると</p>

<pre><code>[ERROR]: Failed at command: command brew --prefix
</code></pre>

<p>というエラー。実際にはPopenが</p>

<pre><code>command brew --prefix: [Errno 2] No such file or directory
</code></pre>

<p>みたいなエラーを出しています。</p>

<p>簡単なスクリプト例としては</p>

<figure class="code"><figcaption><span>title lang: </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/usr/bin/env python3
</span><span class="line">import subprocess
</span><span class="line">subprocess.call(["command", "echo", "foo"])</span></code></pre></td></tr></table></div></figure>

<p>とか。Ubuntuとかで実行すると</p>

<pre><code>FileNotFoundError: [Errno 2] layouto such file or directory: 'command': 'command'
</code></pre>

<p>とか出ると思います。</p>

<p>これがDashでは<code>command</code>というものがないのだ、と思ってたんですが、
普通に</p>

<pre><code>$ /bin/sh # Dash起動
$ command echo foo
foo
</code></pre>

<p>とかは出来ます。
ちょっとこの辺調べようとしたんですがよくわからないままなのでまたそのうち。。。</p>

<p>とりあえず<code>command brew...</code>というのがうまく行かないので、
Bashで直接やれば、ということで</p>

<pre><code>["bash", "-i", "-c", "brew ls"]
</code></pre>

<p>みたいなものを渡してみたんですが、これがRedHat系で</p>

<pre><code>Package bash-completion was not found in the pkg-config search path.
Perhaps you should add the directory containing `bash-completion.pc'
to the PKG_CONFIG_PATH environment variable
No package 'bash-completion' found
bash: /yum: No such file or directory
</code></pre>

<p>というエラーを出しました。
どうやらbrewコマンドの中での何かしら環境変数の設定とかがうまくいってない模様。
<code>Popen</code>呼ぶときには現在の環境変数全てを渡す様なことはしているので、ちょっとよくわからない。</p>

<p>PKG_CONFIG_PATH云々はわかりますが、そもそもなんでこういう事が出てくるか、
というのがbrewの中身を見たりしないとちょっと理解できなくて、
面倒なので見てません。</p>

<p>ただ、そもそも<code>-i</code>を付けてインタラクティブモードで<code>bash</code>を呼ぶ必要があるのか、というところで、
<code>-i</code>ナシにしてみるとうまくいきました。</p>

<pre><code>["bash", "-c", "brew ls"]
</code></pre>

<p>みたいな感じ。</p>

<p>ただ、これも最後の実際のコマンドの部分がまとめた状態になるので余り良くない。</p>

<p>ということで、関数、aliasを無視するにどうするか、と思ったところ、
単に<code>brew</code>へのフルパスを取ってやるのが一番楽だし正確かな、ということでそうしました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/01/30/computer-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180130_aliasfunc_120_90.jpg" width="120" height="90" alt="20180130_aliasfunc_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/01/30/computer-bash-zsh/">Bash/Zshで関数やaliasを無視してオリジナルのコマンドを使う方法</a></div></li></ul>

<p>ちょっと/bin/shに関する部分やsubprocessで呼ぶ際の環境、さらには
subprocess.Popenでのshellやexecutable引数の意味、など
もう一度ちゃんと理解しようと調べ始めて面倒になって中途半端な認識になってるので、
またそのうちまとめられれば、とは思ってます。</p>

<p>Ref:</p>

<blockquote>
  <p><a href="https://github.com/Linuxbrew/legacy-linuxbrew/issues/46">Linuxbrew: “Package bash-completion was not found…” at command prompt. · Issue #46 · Linuxbrew/legacy-linuxbrew</a></p>
</blockquote>

<blockquote>
  <p><a href="https://astropengu.in/blog/12/">ADC/MDAS への tmux のインストール</a></p>
</blockquote>

<blockquote>
  <p><a href="https://www.saltycrane.com/blog/2011/04/how-use-bash-shell-python-subprocess-instead-binsh/">How to use the bash shell with Python’s subprocess module instead of /bin/sh - SaltyCrane Blog</a></p>
</blockquote>

<blockquote>
  <p><a href="https://qiita.com/yoichi22/items/5afa8b3b39c723acb359">subprocess で shell=True でリストを与えたときの挙動 - Qiita</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旧Homebrew-Caskのホームページは違うアプリのものになってるので注意]]></title>
    <link href="https://rcmdnk.com/blog/2019/09/22/computer-brew-file/"/>
    <updated>2019-09-22T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/09/22/computer-brew-file</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/0008190526?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=0008190526&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/5167VR8nPmL._SS200_.jpg" alt="The Cask (Detective Club Crime Classics)" /></a>
</div>

<p>このブログはGitHub Pagesを通して公開していますが、
そのレポジトリにHomebrewのメンテナーの人から
<code>caskroom.io</code>というドメインはHomebrew Caskとは無関係なものになってしまっているから
リンクは変更してね、というIssueをもらったので直しました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#cask" id="markdown-toc-cask">Cask</a></li>
  <li><a href="#caskroomio" id="markdown-toc-caskroomio">caskroom.io</a></li>
  <li><a href="#メンテナからの報告" id="markdown-toc-メンテナからの報告">メンテナからの報告</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="cask">Cask</h2>

<p>Homebrewではコマンドラインツールに加え、Macのアプリも管理できる
<code>cask</code>コマンドがあります。</p>

<p>以前はHomebrewの外部プラグイン的なものでしたが、今は
Homebrewの一部として動作し、
別途Tapしたりする必要なく使えます。
(実際にはHomebrewの初期インストールでは<code>brew cask</code>コマンドはインストールされてませんが、
このサブコマンドが呼ばれると自動で必要なレポジトリがTapされます。)</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/06/08/computer-homebrwe/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180608_cask_120_90.jpg" width="120" height="90" alt="20180608_cask_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/06/08/computer-homebrwe/">HomebrewのCaskのレポジトリがcaskroomからhomebrewへ移動</a></div></li></ul>

<h2 id="caskroomio">caskroom.io</h2>

<p>もともと別のプロジェクトだったので別のHPも持っていました。</p>

<p>それが<code>caskroom.io</code>というドメイン上にあるHP。</p>

<p>ただ、Homebrewに吸収され、レポジトリも<a href="https://github.com/caskroom">caskroom</a>というアカウント下から<a href="https://github.com/homebrew">Homebrew</a>アカウントの元に吸収され、
ドキュメントなども統一されていく中で
HPも必要なくなっていった感じです。
(元々簡単なインストール方法が書いてある程度でもあったので。)</p>

<p>そんな中、単にドメインの維持料を払い忘れたのか、
意図的に放棄したのかはわかりませんが、
<code>caskroom.io</code>がCaskroom BotというInstagramの
Auto follower bot?とかいう怪しげなソフトウェアのページにリダイレクトされる様になっています。</p>

<h2 id="メンテナからの報告">メンテナからの報告</h2>

<p>これに気づいて注意喚起をしているのか、これに関して
ブログにこのリンクがあるから変えてください、というIssueが来ていました。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/rcmdnk.github.io/issues/3">Update Homebrew Cask URL · Issue #3 · rcmdnk/rcmdnk.github.io</a></p>
</blockquote>

<p>実際該当箇所が数箇所あったので
<code>https://formulae.brew.sh/cask/</code>に変更しておきました。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew-fileのGitHubのPrivateに対応]]></title>
    <link href="https://rcmdnk.com/blog/2019/03/07/computer-mac-github-brew-file/"/>
    <updated>2019-03-07T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/03/07/computer-mac-github-brew-file</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07D2JK7B1?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07D2JK7B1&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/71t8MElgPaL._SS200_.jpg" alt="プライベート・ライアン (4K ULTRA HD + Blu-rayセット) [4K ULTRA HD + Blu-ray]" /></a>
</div>

<p>Brew-fileのファイル管理様のレポジトリにGitHubのPrivateレポジトリを
指定しようとするとチェック時にレポジトリが無いと言って作成しようとして
失敗しセットできない状態でした。</p>

<p>これをPrivateレポジトリでもそのままセットできる様にしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#githubのプライベートレポジトリ" id="markdown-toc-githubのプライベートレポジトリ">GitHubのプライベートレポジトリ</a></li>
  <li><a href="#brew-fileでgithubプライベートレポジトリを使う" id="markdown-toc-brew-fileでgithubプライベートレポジトリを使う">Brew-fileでGitHubプライベートレポジトリを使う</a></li>
  <li><a href="#その他細かいアップデート" id="markdown-toc-その他細かいアップデート">その他細かいアップデート</a>    <ul>
      <li><a href="#gitgithubユーザー名の自動取得" id="markdown-toc-gitgithubユーザー名の自動取得">Git(GitHub)ユーザー名の自動取得</a></li>
      <li><a href="#ローカルレポジトリの使用" id="markdown-toc-ローカルレポジトリの使用">ローカルレポジトリの使用</a></li>
    </ul>
  </li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="githubのプライベートレポジトリ">GitHubのプライベートレポジトリ</h2>

<p>最近までGitHubのプライベートレポジトリは有料で
Gitのプライベートレポジトリを無料で使いたい場合には
Bitbucketなどを使う必要がありました。</p>

<p>しかし今年の1月からGitHubでも無料でプライベートレポジトリが作れる様になりました。</p>

<blockquote>
  <p><a href="https://github.blog/changelog/2019-01-07-pricing-changes/">Unlimited free private repositories with GitHub Free and a unified business offering with GitHub Enterprise - The GitHub Blog</a></p>
</blockquote>

<p>このプライベートレポジトリですが、見る権限の無いユーザーがブラウザから開こうとすると
<code>403 Forbidden</code>とかではなく、単に<code>404 Not found</code>のエラーが返る様になっています。</p>

<blockquote>
  <p><a href="https://developer.github.com/v3/troubleshooting/">Troubleshooting  GitHub Developer Guide</a></p>
</blockquote>

<h2 id="brew-fileでgithubプライベートレポジトリを使う">Brew-fileでGitHubプライベートレポジトリを使う</h2>

<p>Brew-fileの中でBrewfile管理用のGitHubのレポジトリをチェックする際に
該当のURLを開いてみて存在するかどうか、というチェックを行っていました。</p>

<p>単にHTTPErrorを見てチェックしていただけだったので、
Error内容を細かく見ればプライベートレポジトリを区分けられるかな、と思ったのですが
上に書いたように権限がないと単に<code>404 Not found</code>になるので上手くいきません。</p>

<p>なので単にCloneを試して失敗したら作成する、というような変更を行いました。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/homebrew-file/issues/84">Support private repositories in brew set_repo · Issue #84 · rcmdnk/homebrew-file</a></p>
</blockquote>

<p>Pull Requestが来たので。</p>

<p>以前は自分でPrivateレポジトリを持てなかったのでそもそも気にしてませんでしたが、
プライベートレポジトリが無料になった今、Brewfileを公開せずにGitHubで管理したい、
というケースも多いと思うので早速。</p>

<h2 id="その他細かいアップデート">その他細かいアップデート</h2>

<h3 id="gitgithubユーザー名の自動取得">Git(GitHub)ユーザー名の自動取得</h3>

<p>これまでレポジトリの指定にはGitHubの場合で<code>&lt;user&gt;/&lt;repository&gt;</code>
の様に指定する必要がありましたが、
今後は<strong>.gitconfig</strong>に<code>github.user</code>かまたは<code>user.name</code>が設定されていれば<code>&lt;repository&gt;</code>だけでも
レポジトリを指定できるようにしました。</p>

<h3 id="ローカルレポジトリの使用">ローカルレポジトリの使用</h3>

<p>これまでも一応対応しているつもりでしたが、
うまくいかない場合があったり、レポジトリがない場合は終了するような状態になってました。</p>

<pre><code>$ brew file set_repo --repo /tmp/Brewfile
</code></pre>

<p>とかやると、(なければ)<strong>/tmp/Brewfile</strong>にディレクトリを作ってそこで<code>git init --bare</code>して
そのレポジトリをクローンするような事をします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxでHomebrewを使う: Homebrew-fileも対応させた]]></title>
    <link href="https://rcmdnk.com/blog/2019/02/27/computer-linux-homebrew/"/>
    <updated>2019-02-27T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/02/27/computer-linux-homebrew</id>
    <content type="html"><![CDATA[<p>Homebrew 2.0.0がリリースされこれまで別途開発が進められていたLinux用のLinuxbrewが
Homebrew本体に統合されました。</p>

<p>そこでこれまでLinux環境でローカルに自分でインストールしていたものを
Homebrewで入れる様にしてみました。</p>

<p>また、パッケージ管理用のHomebrew-fileについてもLinuxに対応させました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#これまでのlinuxローカルパッケージ" id="markdown-toc-これまでのlinuxローカルパッケージ">これまでのLinuxローカルパッケージ</a></li>
  <li><a href="#linuxbrew-to-homebrew" id="markdown-toc-linuxbrew-to-homebrew">Linuxbrew to Homebrew</a></li>
  <li><a href="#インストール領域" id="markdown-toc-インストール領域">インストール領域</a></li>
  <li><a href="#homebrewlinuxのインストール" id="markdown-toc-homebrewlinuxのインストール">Homebrew@Linuxのインストール</a></li>
  <li><a href="#formulaについて" id="markdown-toc-formulaについて">Formulaについて</a></li>
  <li><a href="#linuxでhomebrew-file" id="markdown-toc-linuxでhomebrew-file">LinuxでHomebrew-file</a></li>
  <li><a href="#現状起こっている問題" id="markdown-toc-現状起こっている問題">現状起こっている問題</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="これまでのlinuxローカルパッケージ">これまでのLinuxローカルパッケージ</h2>

<p>共用マシンなどで自由にシステムにパッケージが入れられない環境で
自分のHOMEディレクトリに必要なパッケージをインストールして使うことがよくあります。</p>

<p>その際、それぞれ自分で毎回手動でコンパイルしてインストールするのは結構大変で
また管理も面倒です。</p>

<p>そういったユーザー用の管理ツールはいくつかあってこれまで試してきました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/8484640825?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=8484640825&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61moyMmCoxL._SS90_CR0,0,120,90_.jpg" alt="Paco (スペイン語) ハードカバー" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/08/04/computer-linux-mac/">pacoでmake installしたパッケージを管理</a></div></li></ul>

<p>pacoはインストール自体は自分で行いますが、パッケージ管理がちょっと出来る様になるツール。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B01LYG6IA6?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B01LYG6IA6&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51JsgVDiDsL._SS90_CR0,0,120,90_.png" alt="stow bottles" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/05/11/computer-linux-bash/">stow-get: Stowを使ったパッケージマネージャー</a></div></li></ul>

<p>Stowもpco同様パッケージ管理ツールですがよりシンプルなものになっています。
これを使って<code>stow-get</code>というツールを作って、所謂Homebrew的に
各パッケージのconfiguration fileをあらかじめ用意してそれに従って
パッケージをインストール出来る様にしていました。</p>

<div class="github-widget" data-repo="rcmdnk/stow-get"></div>

<p>これはそれなりにきちんと動いていて、各パッケージの最新パッケージも自動で確認出来る様になっているので
結構便利だと思います。</p>

<p>ただ、余り広められなかったのでパッケージファイルは自分で必要なものしかないし、
そうであるので逆に他の人には使いづらいものになっていたかもしれません。</p>

<p>そんな中、HomebrewのLinux版、Linuxbrewの開発が進んでいて、
Linuxbrew自体は大分前からあるものですが、
以前一度Linuxbrewを使おうとしてエラーが出たところで使うのをやめていました。</p>

<p>が、今回Homebrewに統一されたということでもう一度試してみようということで色々見てみました。</p>

<h2 id="linuxbrew-to-homebrew">Linuxbrew to Homebrew</h2>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/02/08/computer-mac-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/02/08/computer-mac-linux-homebrew/">Homebrew 2.0.0リリース: Linuxbrewの統合</a></div></li></ul>

<p>Homebrew 2.0.0が今月リリースされこれまで別途開発が進められていたLinux版Homebrew、LinuxbrewがHomebrew本体に統一されました。</p>

<div class="github-widget" data-repo="Linuxbrew/brew"></div>

<p><a href="http://linuxbrew.sh/">Linuxbrew  The Homebrew package manager for Linux</a></p>

<p>Linuxbrewはシステム領域の<strong>/usr/bin</strong>などではなく、ユーザー権限でインストール出来る領域に
ソフトウェアをインストールするツールです。</p>

<h2 id="インストール領域">インストール領域</h2>

<p>Macでは<strong>/usr/local/</strong>がデフォルト領域ですが、Linuxbrewでは<strong>/home/linuxbrew/.linuxbrew</strong>が
デフォルト領域になります。
この領域は通常ユーザーでは作れないので<code>sudo</code>で作れる権限を持っているかあらかじめ
Homebrewを使うユーザー様にディレクトリを作って権限を変更したりする必要がありますが、
そうでない場合はユーザーのHome、<strong>$HOME/.linuxbrew</strong>にインストールすることになります。</p>

<p>ユーザーが自分のためだけに入れるのだから最初から<strong>$HOME/.linuxbrew</strong>の方が
良い様な気もしますが、
bottleを通して入れる際に<strong>$HOME/.linuxbrew</strong>だと問題が起こる場合があります。</p>

<p>というのもbottleはあらかじめコンパイルされているためすばやくインストールすることが可能ですが、
コンパイル環境は<strong>/home/linuxbrew/.linuxbrew</strong>を使っています。
パッケージによってはパスをハードコードして埋め込んでしまうものがあり、
その様なものは<strong>$HOME/.linuxbrew</strong>に入れると上手く動かないことがあるからです。</p>

<blockquote>
  <p><a href="https://github.com/Linuxbrew/brew/wiki/FAQ">FAQ · Linuxbrew/brew Wiki</a></p>
</blockquote>

<p>そのためそういったパッケージに関しては<strong>$HOME/.linuxbrew</strong>の場合には
ソースからコンパイルするオプション(<code>-s</code>/<code>--build-from-source</code>)が自動で
有効にされる様になっています。</p>

<p>それでも対応が出来てないパッケージなどもある可能性があるので
できれば<strong>/home/linuxbrew</strong>を使ったほうが安全ですしbottleを常に使える分インストールが速いです。</p>

<p>ただ、Linuxbrewを使いたいのは<code>yum</code>/<code>apt-get</code>などで<strong>/usr/bin</strong>に
インストールすることが出来ない権限のユーザーが自分用にパッケージを入れたい、
という場合が多いと思います。
その場合は<strong>/home/linuxbrew</strong>を作れないことがほとんどだと思うので
<strong>$HOME/.linuxbrew</strong>にインストールすることになります。</p>

<p>Macの場合と違い、LinuxではOSからして色々あり
環境によっては上手く動かない場合もまだあるみたいですが、
この辺りもHomebrewに統合されてユーザーが増えればどんどん改善されていくと思います。</p>

<h2 id="homebrewlinuxのインストール">Homebrew@Linuxのインストール</h2>

<p>準備として最低限<code>curl</code>が入っていることが必要です。</p>

<p>また、<strong>/home/linuxbrew</strong>を作れず<strong>$HOME/.linuxbrew</strong>にインストールする場合には
<code>gcc</code>もあらかじめインストールされている必要があります。</p>

<p><a href="http://linuxbrew.sh/">公式ページには</a></p>

<p>Debian or Ubuntu:</p>

<pre><code>$ sudo apt-get install build-essential curl file git
</code></pre>

<p>Fedora, CentOS, or Red Hat</p>

<pre><code>$ sudo yum groupinstall 'Development Tools' &amp;&amp; sudo yum install curl file git
</code></pre>

<p>の各インストールが要請されていますが、
<code>git</code>などはインストール過程でHomebrew版がインストールされます。
(Homebrewのインストール過程で<strong>/usr/bin/which: no git in…</strong>みたいなwarningが出て
通常最初にインストールされるものがインストールされなかったりしますが取り敢えずそのまま続けて大丈夫です。)</p>

<p><code>gcc</code>も<strong>/home/linuxbrew</strong>にインストールする場合はbottleからインストールされるので
別途必要ありません。</p>

<p>HOMEにインストールする場合、Homebrewのインストール自体は出来ますが、
その後なにかインストールしようとすると</p>

<pre><code>$ brew install go
Error: The following formula
  curl
cannot be installed as binary package and must be built from source.
Install Clang or brew install gcc
Error: The following formula
  git
cannot be installed as binary package and must be built from source.
Install Clang or brew install gcc
Error: Git must be installed and in your PATH!
Error: The following formula
  go
cannot be installed as binary package and must be built from source.
Install Clang or brew install gcc
</code></pre>

<p>みたいなエラーが出ます。<code>curl</code>はシステムにあってもHomebrewのものを別途インストールしようとするのですが、
その際、HOMEに入れる場合はbottleからでなくコンパイルが必要なので<code>gcc</code>が必要になりエラーが出ます。</p>

<p>とりあえず<code>curl</code>や<code>gcc</code>などはなんとかシステムレベルでインストールするか
なんとかする必要があります。</p>

<p>準備が出来たら
Linuxでは以下のコマンドでHomebrewをインストールします。</p>

<pre><code>$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
</code></pre>

<p>インストールスクリプトに関してはMac版のForkですがちょっと手を加えてあり
まだ統合されておらず別のものになっています。</p>

<p><a href="https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh">https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh</a>
は<a href="https://raw.githubusercontent.com/Linuxbrew/install/master/install">https://raw.githubusercontent.com/Linuxbrew/install/master/install</a>
のラッパースクリプトになっていて、この<strong>install</strong>の方は
Mac版(<a href="https://raw.githubusercontent.com/Homebrew/install/master/install">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)のForkです。</p>

<p><strong>install.sh</strong>の中ではRubyが入ってない場合に別途インストールするスクリプトが最初に走る様になっています。</p>

<p><strong>install</strong>スクリプトの中では<strong>/home/linuxbrew</strong>を作ったり書き込みができればそこへ、
そうでない場合には<strong>$HOME</strong>にインストールするようなチェックが入っています。</p>

<p>この際、ちょっと特殊な場合で、<code>sudo</code>がNOPASSWDで許可された上で許可されたコマンドがない、
という設定になっている場合<strong>/home/linuxbrew</strong>を使おうとしてしまい結果使えずにエラー終了します。</p>

<p>これに関してはPull Requestを出しています。</p>

<blockquote>
  <p><a href="https://github.com/Linuxbrew/install/pull/47">fixed sudo checks by rcmdnk · Pull Request #47 · Linuxbrew/install</a></p>
</blockquote>

<p>ちょっとごちゃごちゃしてしまいましたが一応レビューは終わった状態ですが、
そのタイミングで止まってしまっています。が、多分そのうちMergeされると思います。</p>

<div class="postscript">
  <p><strong>追記: 2019/03/07 </strong></p>

  <p>Mergeされたので本家のほうを使ってインストールできます。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<p>もしこの問題に当たってる人がいたら、</p>

<ul>
  <li><a href="https://github.com/rcmdnk/install/blob/master/install-ruby">rcmdnk/install/install-ruby</a> (Rubyのインストールが必要な場合)</li>
  <li><a href="https://github.com/rcmdnk/install/blob/master/install">rcmdnk/install/install</a></li>
</ul>

<p>を取ってきて直接走らせればインストール出来るかと思います。</p>

<p>インストール時に起こった他の問題として、
上に書いたstow-getで自分の環境下に別途OpenSSLをインストールしていたところ、</p>

<pre><code>==&gt; Installing curl dependency: openssl
...
Warning: The post-install step did not complete successfully
You can try again using `brew postinstall openssl`
==&gt; Caveats
A CA file has been bootstrapped using certificates from the SystemRoots
keychain. To add additional certificates (e.g. the certificates added in
the System keychain), place .pem files in
  /home/user/.linuxbrew/etc/openssl/certs

and run
  /home/user/.linuxbrew/opt/openssl/bin/c_rehash
==&gt; Summary
...
==&gt; Installing git dependency: patchelf
...
curl: (77) error setting certificate verify locations:
  CAfile: /home/user/.linuxbrew/etc/openssl/cert.pem
  CApath: /home/user/.linuxbrew/etc/openssl/certs
Error: Failed to download resource "patchelf"
</code></pre>

<p>と言ったエラーが出てしまいました。
これに関することは</p>

<blockquote>
  <p><a href="https://github.com/Linuxbrew/brew/wiki/FAQ">FAQ · Linuxbrew/brew Wiki</a></p>
</blockquote>

<p>にもありますが、ちょっと状況が違うようで、
どうもローカルにインストールしてあった<code>curl</code>および<code>openssl</code>が変に作用して途中で
きちんとしたインストールが出来てないようでした。</p>

<p>一旦<code>brew</code>がインストールされてしまえば、無理やりなんとかできそうですが、
最初の時点でコケるので面倒。</p>

<p>今回は環境の作り直しということで、一旦stow-getでインストールしたものは退避させた状態で
Homebrewをインストールしたところ上手く行きました。</p>

<h2 id="formulaについて">Formulaについて</h2>

<p>Formulaは基本Macと同じものです。</p>

<ul>
  <li><a href="https://github.com/Homebrew/linuxbrew-core">Homebrew/linuxbrew-core</a></li>
</ul>

<p>いくつかのLinux Specificなものは別途用意されていてこのレポジトリもあらかじめタップしてあるので
中にあるFormulaは最初から使えます。</p>

<ul>
  <li><a href="https://github.com/Linuxbrew/homebrew-extra">Linuxbrew/homebrew-extra</a></li>
</ul>

<p>Formulaが基本的に同じなので自作のFormulaとかもそのまま使えます。
次に出てくるHomebrew-fileなんかも同じ様に入れられます。</p>

<h2 id="linuxでhomebrew-file">LinuxでHomebrew-file</h2>

<p>HomebrewではHomebrew-fileを使ってパッケージリストの管理を行っています。</p>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>Homebrew自体にもbundleというBrewfileへのdump、及びファイルを読み込みリストにあるものをインストール
する機能はありますが、
Homebrew-fileではBrewfileをパッケージをインストールするごとに更新したり
GitHubのレポジトリを用いてBrewfileをバージョン管理したりする機能もあります。</p>

<p>これをそのままLinuxで使おうとしたところ、<code>cask</code>や<code>mas</code>などMacでしか使わないものの関連で
おかしくなってしまう部分があったのでちょっと手を加えました。</p>

<pre><code>$ brew install rcmdnk/file/brew-file
</code></pre>

<p>でインストールでき、<code>brew file</code>コマンドが使える様になります。</p>

<p>MacとLinuxではアプリのインストールの部分でどうしても違いが出てしまうので
現状ではそれぞれ別のレポジトリやファイルを使った管理をするべきです。</p>

<p>今はMac用とLinux様に分けて管理しています。</p>

<ul>
  <li><a href="https://github.com/rcmdnk/Brewfile">rcmdnk/Brewfile</a> (Mac用)</li>
  <li><a href="https://github.com/rcmdnk/Brewfile.linux">rcmdnk/Brewfile.linux</a> (Linux用)</li>
</ul>

<p>Linuxに関しては環境ごとに色々必要なものが変わってくることもあるので
あまりに差が出るようならLinuxの中でも分けたほうが良いかもしれません。
(Macでも色々用途が違うものを複数使ってるならあれですが。。。)</p>

<p>とりあえず今の所特に問題なくLinuxでも動いていることを確認していますが、
もし使ってみて問題があればIssuesとかに出してもらえるとありがたいです。</p>

<h2 id="現状起こっている問題">現状起こっている問題</h2>

<p>完全に環境依存で、他の環境で試したら問題なかったりするものなのですが、1つは
<code>LD_LIBRARY_PATH</code>に<strong>$HOME/.linuxbrew/lib</strong>を加えると</p>

<pre><code>$ ls
ls: 0s": ELF: x: Error 1325453653
$ ls
ls: a: ELF: x: Error 18446744072590418261
</code></pre>

<p>の様にいくつかの基本的なコマンドがバグる状態。
真面目にライブラリの依存性を考えればよいのでしょうが、まだ何が悪いかまではわかってないです。</p>

<p>もう1つは関連してgoをインストールしたところ、</p>

<pre><code>$ go
go: relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, version GLIBC_PRIVATE not defined in file ld-linux-x86-64.so.2 with link time reference
</code></pre>

<p>というエラーが出て使えない状態です。
この必要なlibcは<strong>$HOME/.linuxbrew/lib/libc.so.6</strong>にもインストールされていて、これを使えば問題なく動きます。</p>

<p>ただ、これを使うために</p>

<pre><code>$ export LD_LIBRARY_PATH=$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH
</code></pre>

<p>をすると上のエラーが置きてしまうわけです。</p>

<p>この問題は他のパッケージでも起こることなのでやはりLD_LIBRARY_PATHの問題は解決しないといけないのですが、
差し当たりどうしても必要な<code>vim</code>、<code>screen</code>、<code>python</code>、<code>python@2</code>などは問題なく入れられたので
また時間を見てちゃんとみたいと思っています。。。</p>

<div class="postscript">
  <p><strong>追記: 2019/05/08 </strong></p>

  <p>とりあえず現状の解決法。</p>

  <ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/">Linuxbrew改めHomebrew@Linuxでrelocation errorに対する対処法</a></div></li></ul>

  <p><strong>追記ここまで</strong></p>
</div>

]]></content>
  </entry>
  
</feed>
