<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2018-08-23T00:51:36+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.4.2でgemがエラーを出して使えない時の対処法]]></title>
    <link href="https://rcmdnk.com/blog/2017/09/21/computer-mac-ruby-homebrew/"/>
    <updated>2017-09-21T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/09/21/computer-mac-ruby-homebrew</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/1465453563?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=1465453563&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41nCuGq1y%2BL._SS200_.jpg" alt="Gem: The Definitive Visual Guide" /></a>
</div>

<p>Macで<code>gem</code>コマンドを使おうとしたらエラーが出て使えず、
問題のありそうなgemもそもそも<code>gem</code>が使えないのでアンインストールも出来ない様な状態になってたので
それに対処した話し。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#gemを使おうとするとエラーが出る" id="markdown-toc-gemを使おうとするとエラーが出る">gemを使おうとするとエラーが出る</a></li>
  <li><a href="#解決方法" id="markdown-toc-解決方法">解決方法</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="gemを使おうとするとエラーが出る">gemを使おうとするとエラーが出る</h2>

<p>環境はHomebrewでrubyをインストールして
バージョンは2.4.2な状態です。</p>

<pre><code>$ which ruby
/usr/local/bin/ruby
$ ruby --version
ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16]
$ which gem
/usr/local/bin/gem
</code></pre>

<p>これでおもむろに<code>gem</code>を使おうとすると</p>

<pre><code>$ gem
/usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/yaml.rb:5:in `&lt;top (required)&gt;':
It seems your ruby installation is missing psych (for YAML output).
To eliminate this warning, please install libyaml and reinstall your ruby.
/usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require': dlopen(/usr/local/gems/gems/psych-2.2.4/lib/psych.bundle, 9): Library not loaded: /usr/local/opt/ruby/lib/libruby.2.4.1.dylib (LoadError)
  Referenced from: /usr/local/gems/gems/psych-2.2.4/lib/psych.bundle
  Reason: image not found - /usr/local/gems/gems/psych-2.2.4/lib/psych.bundle
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
        from /usr/local/gems/gems/psych-2.2.4/lib/psych.rb:8:in `&lt;top (required)&gt;'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/yaml.rb:6:in `&lt;top (required)&gt;'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems.rb:701:in `load_yaml'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/config_file.rb:340:in `load_file'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/config_file.rb:202:in `initialize'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/gem_runner.rb:75:in `new'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/gem_runner.rb:75:in `do_configuration'
        from /usr/local/Cellar/ruby/2.4.2/lib/ruby/2.4.0/rubygems/gem_runner.rb:40:in `run'
        from /usr/local/bin/gem:21:in `&lt;main&gt;'
</code></pre>

<p>こんな感じのエラーが出ます。
最初に<code>libyaml</code>に関するwarningが出てますが、
これはHomebrewでインストール済みです。</p>

<p>とりあえず<code>libyaml</code>を<code>reinstall</code>してさらに<code>ruby</code>も<code>reinstall</code>してみましたがこの辺は変わらず。</p>

<p>実際の問題はその下にある<code>psych</code>に関する部分です。
YAMLを扱うgemなので<code>libyaml</code>を使うのですが、
そもそもこのgemから<code>libyaml</code>を呼ぶ際におかしなことになっている様です。</p>

<p><strong>/usr/local/opt/ruby/lib/libruby.2.4.1.dylib</strong>
を呼ぼうとしていますがこんなファイルはありません。(2.4.2がインストールされてるので。)</p>

<p>このgemに問題がありそうなので<code>gem uninstall psych</code>したいのですが、
そもそも<code>gem</code>コマンドを使おうとすると有無を言わさず上のエラーが出ます。</p>

<p>最近のアップデートで入ったのかやはり問題に会ってる人は居るようで
HomebrewのIssueにこの問題の解決策がありました。</p>

<blockquote>
  <p><a href="https://github.com/Homebrew/homebrew-core/issues/18123">Run into error in latest Ruby 2.4.2 · Issue #18123 · Homebrew/homebrew-core</a></p>
</blockquote>

<p>ここにもありますが問題はHomebrewではなくてこのgem(というよりrubygems)なので
Homebrewを使って無くても同様の問題が起こる可能性があります。
もしくはMac以外でも?</p>

<h2 id="解決方法">解決方法</h2>

<p>ともかくこのエラーをなんとかして<code>gem</code>を使える様にする必要があるので、
以下の2つのファイルを削除します。</p>

<pre><code>$ rm /usr/local/lib/ruby/gems/2.4.0/gems/psych-2.2.4/lib/psych.bundle
$ rm /usr/local/lib/ruby/gems/2.4.0/gems/extensions/x86_64-darwin-16/2.4.0/psych-2.2.4/psych.bundle
</code></pre>

<p>もしくは<code>GEM_HOME</code>とかを<code>/usr/local/gems</code>とかに設定していれば</p>

<pre><code>$ rm $GEM_HOME/gems/psych-2.2.4/lib/psych.bundle
$ rm $GEM_HOME/gems/extensions/x86_64-darwin-16/2.4.0/psych-2.2.4/psych.bundle
</code></pre>

<p>いずれにしろこれらのファイルを消せば上のエラーが出なくなって<code>gem</code>コマンドが使える様になるはずです。</p>

<p>そうしたら</p>

<pre><code>$ gem uninstall psych
</code></pre>

<p>として問題のパッケージを削除。</p>

<p>この後</p>

<pre><code>$ gem install psych
</code></pre>

<p>として再インストールすると問題は起きなくなっています。</p>

<h2 id="まとめ">まとめ</h2>

<p>上のIssueにもありますが問題はこのgem自体というよりも
rubygemsのスクリプトの問題の様です。</p>

<p>Ruby 2.4.2は9月14日にリリースされたものなので
そこからこの問題が起こっていますが、
<code>rubygems.rb</code>自体のアップデートは無く、
元々<code>psych</code>に関しての動作設定がおかしく、
Rubyのバージョンが2.4.1から2.4.2になった所で問題が起きた、ということみたいです。</p>

<p>それに関するIssuesみたいのはrubygemsには見当たりませんが、
結構多くの人に影響するかつ必ず起こりうる問題なので
すぐに対処されるのでは、と思います。</p>

<blockquote>
  <p><a href="https://github.com/rubygems/rubygems/issues?utf8=%E2%9C%93&amp;q=is%3Aissue%20is%3Aopen%20%20psych">Issues · rubygems/rubygems</a></p>
</blockquote>

<p>ちょっと良く理解できてないので(そもそもrubygemsが悪いのかどうかも)
Issueを作れませんが、
分かる人が居れば適宜適当な対処をしてもらえればと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[colorls: lsの結果にアイコンマークを着ける]]></title>
    <link href="https://rcmdnk.com/blog/2017/07/24/computer-ruby/"/>
    <updated>2017-07-24T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/07/24/computer-ruby</id>
    <content type="html"><![CDATA[<p>コマンドラインで頻繁に使うコマンドの1つ<code>ls</code>ですが、
<code>colorls</code>というコマンドを使うと
<code>ls</code>の結果にファイルの種類に応じてアイコンマークを着ける事が出来ます。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#colorlsをインストール" id="markdown-toc-colorlsをインストール">colorlsをインストール</a></li>
  <li><a href="#実際の表示" id="markdown-toc-実際の表示">実際の表示</a></li>
  <li><a href="#設定ファイル" id="markdown-toc-設定ファイル">設定ファイル</a></li>
  <li><a href="#エイリアスについて" id="markdown-toc-エイリアスについて">エイリアスについて</a></li>
  <li><a href="#load_from_yaml-undefined-method-safe_load-for-psychmodule-nomethoderror" id="markdown-toc-load_from_yaml-undefined-method-safe_load-for-psychmodule-nomethoderror"><code>load_from_yaml': undefined method </code>safe_load’ for Psych:Module (NoMethodError)</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="colorlsをインストール">colorlsをインストール</h2>

<div class="github-widget" data-repo="athityakumar/colorls"></div>

<p><code>colorls</code>はRuby製のコマンドラインツールで<code>gem</code>を使って</p>

<pre><code>$ gem install colorls
</code></pre>

<p>とする事でインストールできます。
<code>gem</code>のディレクトリに正しくPATHが通っていればこれで<code>colorls</code>コマンドが使える様になります。</p>

<p>加えて表示するアイコンをインストールする必要があります。</p>

<div class="github-widget" data-repo="ryanoasis/nerd-fonts"></div>

<p>今回はnerd-fontsを入れました。</p>

<p>Mac+Homebrewなら</p>

<pre><code>$ brew cask install caskroom/fonts/font-hack-nerd-font
</code></pre>

<p>で入ります。
LinuxやMacでも直接入れる場合はインストールスクリプトを使ってインストールする事も出来ます。
<code>curl</code>を使って直接持ってくる事もできて</p>

<p>Linux:</p>

<pre><code>$ mkdir -p ~/.local/share/fonts
$ cd ~/.local/share/fonts
$ curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20for%20Powerline%20Nerd%20Font%20Complete.otf
</code></pre>

<p>Mac:</p>

<pre><code>$ cd ~/Library/Fonts
$ curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20for%20Powerline%20Nerd%20Font%20Complete.otf
</code></pre>

<p>な感じでインストールします。</p>

<p>後はこのフォントを使える様にターミナルの設定が必要な場合があります。</p>

<p>MacでiTerm2を使っている場合、
<strong>Preferences</strong><i class="fa fa-arrow-right"></i>
<strong>Profiles</strong><i class="fa fa-arrow-right"></i>
で使っているプロファイルを選び<strong>Text</strong>のタブに行くと一番下に<strong>Use a different font for non-ASCII text</strong>という項目があると思います。</p>

<p>これにチェックを入れると<strong>Non-ASCII Font</strong>というASCII以外の文字に関するフォントを選ぶ項目が現れるので
ここで先ほどインストールした<strong>Knack Nerd Font</strong>を選択します。</p>

<p><img src="https://rcmdnk.com/images/post/20170724_iterm2.jpg" alt="iterm2 preferences" class="pic" /></p>

<p>ターミナル.appだと全体のフォントだけが選べるのでそこで<strong>Knack Nerd Fonts</strong>を選ぶ事も出来ますが
iTerm2だときちんと分けて選択出来るので通常のフォントをきちんと選びたい時にはやはりiTerm2が便利。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00KEJOGVQ?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00KEJOGVQ&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41ik0BIdJ2L._SS90_CR0,0,120,90_.jpg" alt="フォント Font 数字 字体 アルファベット1-9 デカール水転写式 「並行輸入品」" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/07/15/computer-windows-mac/">フォントを変更してみる(M+とかMiguとか)</a></div></li></ul>

<h2 id="実際の表示">実際の表示</h2>

<p>実際に表示してみた結果はこんな感じ。</p>

<p><img src="https://rcmdnk.com/images/post/20170724_colorls0.jpg" alt="colorls" class="pic" /></p>

<p><code>ls</code>と同様に<code>-a</code>で<code>.</code>から始まるファイルも表示されます。</p>

<p><code>-r</code>を付けるとフォルダの数などのちょっとしたレポートが追記されます。</p>

<p><img src="https://rcmdnk.com/images/post/20170724_colorls1.jpg" alt="colorls -r" class="pic" /></p>

<p>また、<code>-l</code>オプションを付けると<code>ls</code>の様にパーミッションや所有者の情報等
を表示する事が出来ます。</p>

<p><img src="https://rcmdnk.com/images/post/20170724_colorls2.jpg" alt="colorls -l" class="pic" /></p>

<p>初期設定だと暗いバックグラウンドな環境では</p>

<ul>
  <li>アイコンのあるファイル: 緑</li>
  <li>アイコンのないファイル: 黄色</li>
  <li>ディレクトリ(アイコン有無関係なく): 青</li>
</ul>

<p>と言った表示色になっています。</p>

<h2 id="設定ファイル">設定ファイル</h2>

<p>アイコンはファイルの拡張子、またはディレクトリの場合はディレクトリの名前自体を見て
付けている様ですが、
この関連付けは<code>$(dirname $(gem which colorls))/yaml</code>にあるYAMLファイルで定義されています。</p>

<blockquote>
  <p><a href="https://github.com/athityakumar/colorls/tree/master/lib/yaml">colorls/lib/yaml at master · athityakumar/colorls</a></p>
</blockquote>

<p><strong>files.yaml</strong>に</p>

<pre><code>...
py:           "\ue606"
r:            "\uf25d"
rb:           "\ue21e"
...
</code></pre>

<p>というのがあって左が拡張子で右がフォントの文字コード。
<strong>file_aliases.yaml</strong>には</p>

<pre><code>...
gemfile:          rb
gemspec:          rb
guardfile:        rb
...
</code></pre>

<p>と言った羅列があって左が拡張子、右が<strong>files.yaml</strong>で定義されている拡張子で
その設定を同じく使う様にエイリアス定義を行っています。</p>

<p><strong>folders.yaml</strong>にはディレクトリ名と文字コード、
<strong>folder_aliases.yaml</strong>にはディレクトリのエイリアスが定義されています。</p>

<p>これらのファイルに拡張子や文字コードの設定を加えれば
新たなファイルタイプにしたり表示アイコンを変更したりも出来ます。</p>

<p>デフォルトだと<code>.cpp</code>はアイコンがあてられてますが
<code>.cxx</code>とか<code>.h</code>とかは割当がないので<code>.cpp</code>のエイリアスにしたり。</p>

<p>残りの<strong>dark_colors.yaml</strong>と<strong>light_colors.yaml</strong>は表示の色を定義するファイルです。</p>

<p><strong>dark_colors.yaml</strong>では</p>

<pre><code># Main Colors
unrecognized_file: yellow
recognized_file:   green
dir:               blue
</code></pre>

<p>こんな設定になってますが、</p>

<pre><code># Main Colors
unrecognized_file: white
recognized_file:   white
dir:               yellow
</code></pre>

<p>みたいな設定が良いかな、と個人的には。</p>

<p><img src="https://rcmdnk.com/images/post/20170724_colorls3.jpg" alt="colorls config" class="pic" /></p>

<p>アイコンの有無で色を変えるのはあまり意味が無いので適当な色に統一。
青は黒バックグラウンドだとちょっと見えにくいので黄色とか他の色にした方が見やすいです。</p>

<p>現在の所、<code>ls</code>の様にシンボリックリンクや実行可能ファイル、と言った定義で
色を変更することは出来ない様です。</p>

<p>シンボリックリンクに関しては<code>-l</code>を使えば上にある様に
リンクの有無も確認してくれてDead Linkの表記もしてくれます。</p>

<p>ただしこの場合元ファイルの表記がないのがちょっとわかりにくい所。</p>

<h2 id="エイリアスについて">エイリアスについて</h2>

<p>ちなみに<code>colorls</code>のREADMEには</p>

<pre><code>$ alias lc=`colorls -l`
</code></pre>

<p>というエイリアス設定が載ってますが、
手元のMacだと
<a href="http://www.mono-project.com/">Mono</a>という.NET frameworkの
中のコマンドが既にありました。</p>

<pre><code>$ type lc
lc is hashed (/Library/Frameworks/Mono.framework/Versions/Current/Commands/lc)
</code></pre>

<p>Caskで<code>mono-mdk</code>というパッケージをインストールしたっぽいんですが
なんで入れたのか忘れました。</p>

<p>多分問題ないと思いますが何かしら影響があるかもしれないので<code>lc</code>をエイリアスする時にはちょっと注意。</p>

<h2 id="load_from_yaml-undefined-method-safe_load-for-psychmodule-nomethoderror"><code>load_from_yaml': undefined method </code>safe_load’ for Psych:Module (NoMethodError)</h2>

<p>Homebrewにはgemパッケージも管理できる<code>brew-gem</code>という拡張機能があります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B005EPNE0O?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B005EPNE0O&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61PrsiuodsL._SS90_CR0,0,120,90_.jpg" alt="Gem Art ( ジェムアート ) ステンレススチール キュービックジルコニア 6mm クラウン （王冠 ) デザイン シングル ピアス クリア" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/01/07/computer-homebrew-brew-file-mac/">Brew-fileにbrew-gemのサポートを追加</a></div></li></ul>

<p>最初、<code>colorls</code>をこの<code>brew-gem</code>を使ってインストールしてみた所
以下の様なエラーが出ました。</p>

<pre><code>/usr/local/Cellar/gem-colorls/0.1.7/gems/colorls-0.1.7/lib/colorls/load_from_yaml.rb:4:in `load_from_yaml': undefined method `safe_load' for Psych:Module (NoMethodError)
        from /usr/local/Cellar/gem-colorls/0.1.7/gems/colorls-0.1.7/lib/colorls/flags.rb:52:in `set_color_opts'
        from /usr/local/Cellar/gem-colorls/0.1.7/gems/colorls-0.1.7/lib/colorls/flags.rb:5:in `initialize'
        from /usr/local/Cellar/gem-colorls/0.1.7/gems/colorls-0.1.7/exe/colorls:4:in `new'
        from /usr/local/Cellar/gem-colorls/0.1.7/gems/colorls-0.1.7/exe/colorls:4:in `&lt;top (required)&gt;'
        from /usr/local/bin/colorls:5:in `load'
        from /usr/local/bin/colorls:5:in `&lt;main&gt;'
</code></pre>

<p><code>colorls</code>のIssueに</p>

<blockquote>
  <p><a href="https://github.com/athityakumar/colorls/issues/85"><code>load_from_yaml': undefined method </code>safe_load’ for Psych:Module · Issue #85 · athityakumar/colorls</a></p>
</blockquote>

<p>と丁度同じエラーのものがありましたが、これに従って<code>gem update</code>を行ってみても上手く行きません。</p>

<p>試しに直接<code>gem install colorls</code>をしてみた所上手く行きました。</p>

<p><code>brew-gem</code>でインストールすると、通常の<code>gem</code>コマンドのときと別の所にインストールされるのですが、
この際にパッケージの依存関係とかは無視してそれだけを入れる様な状態になるみたいです。
なので<code>brew-gem</code>は依存関係が無いようなよほど孤立したものか
もしくは自分で全部確実に依存関係すべてを書ける様な場合にしか使えないです。</p>

<p>上記のIssueでは<strong>/Library/Ruby/Gems…</strong>というディレクトリなので<code>brew-gem</code>でインストールしたものではないと思いますが、
恐らく複数のgemの管理環境があったりしてパッケージの依存関係がおかしくなってしまっている様な状態だと思います。</p>

<h2 id="まとめ">まとめ</h2>

<p><code>ls</code>コマンドは頻繁に使うコマンドなので
それを飾り付け出来るのはなかなか楽しい所だと思います。</p>

<p>ただし、<code>ls</code>の拡張と言うよりは
アイコンを付けて表示するための別コマンド、という感じがあるので
実用的には<code>ls</code>を置き換えるというにはまだ難しい感じです。</p>

<p>まあ上に上げた様なことは現在出来ることを見ると
簡単に実装できそうなきもするので
そのうち置き換える様に出来るかもしれません。</p>

<p>後は今のところgemの中にある設定ファイルを直接いじる様になってますが
HOMEディレクトリとかの個人ファイルを読み込める様にならないとなかなか使い勝手が良くないです。</p>

<p>ただ見た目は結構面白いので人にちょっと見せつけてみるとか。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubのGistの古いraw urlが無効になっていたので対応してみた]]></title>
    <link href="https://rcmdnk.com/blog/2016/04/22/blog-octopress-github-ruby/"/>
    <updated>2016-04-22T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2016/04/22/blog-octopress-github-ruby</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/1491949740?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=1491949740&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51dMCKOGf3L._SS200_.jpg" alt="Introducing GitHub: A Non-Technical Guide" /></a>
</div>

<p>GistはGitHubのメモみたいなサービスですが、
ちょっとしたコードやパッチを公開するのに便利で
色々な物がGistで公開されています。</p>

<p>使う時にはrawな状態が欲しいのでraw用のURLを使うわけですが、
これに対するURLが今までも色々変わってきていて、
数日前に古いURLの方法が使えなくなってしまった様です。</p>

<p>OctopressでGistを取ってきたりもしてるので、その辺の対応についてなど。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#gistのraw-url" id="markdown-toc-gistのraw-url">Gistのraw url</a></li>
  <li><a href="#rawなurlをgist_idだけから取得する" id="markdown-toc-rawなurlをgist_idだけから取得する">rawなurlをGIST_IDだけから取得する</a></li>
  <li><a href="#octopressのgist_tagrb" id="markdown-toc-octopressのgist_tagrb">Octopressのgist_tag.rb</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="gistのraw-url">Gistのraw url</h2>

<div><script src="https://gist.github.com/4ba41bda1d0cc94f8af33b0f35e008b3.js"></script>
<noscript><pre><code>mygist</code></pre></noscript></div>

<p>上のGistに関して、Gistの通常のURLは</p>

<ul>
  <li><a href="https://gist.github.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3">https://gist.github.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3</a></li>
</ul>

<p>となっていて、</p>

<pre><code>https://gist.github.com(/USER)/GIST_ID
</code></pre>

<p>みたいな形になっています。
これに関して<code>USER</code>を除いてもアクセスできます(上のURLにリダイレクトします)。</p>

<ul>
  <li><a href="https://gist.github.com/4ba41bda1d0cc94f8af33b0f35e008b3">https://gist.github.com/4ba41bda1d0cc94f8af33b0f35e008b3</a></li>
</ul>

<p>このrawなファイルのURLは</p>

<ul>
  <li><a href="https://gist.githubusercontent.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/511ea8a3a209ac3b316cc39b77dba20bdbf1d53a/mygist.txt">https://gist.githubusercontent.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/511ea8a3a209ac3b316cc39b77dba20bdbf1d53a/mygist.txt</a></li>
</ul>

<p>となっています。</p>

<pre><code>https://gist.github.com/USER/GIST_ID/raw(/HASH)(/FILE_NAME)
</code></pre>

<p>な感じ。</p>

<p>また、URLから<code>FILE_NAME</code>と<code>HASH</code>を除いてもアクセス出来ます。<code>USER</code>は除けません。</p>

<p>ただし、複数のファイルを持つGistの場合、<code>FILE_NAME</code>を除くと
アルファベット順で最初のもの(Gist通常ページで一番上にあるもの)の
rawなページにアクセスします。</p>

<p><code>HASH</code>に関してはGistをアップデートすると変わるので
古いGistもURLが分かればアクセス出来る様になっています。</p>

<ul>
  <li><a href="https://gist.githubusercontent.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/170edc0ee70b8945b50675291d408c32485f84bd/mygist.txt">https://gist.githubusercontent.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/170edc0ee70b8945b50675291d408c32485f84bd/mygist.txt</a></li>
</ul>

<p>これは上のGistの古い物。
<code>HASH</code>なしだと最新のものが表示されます。</p>

<p>これが現状。</p>

<p>rawなURLに関しては前にも変更があって、</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2013/10/04/blog-octopress/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20131004_mygist_120_90.jpg" width="120" height="90" alt="20131004_mygist_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/10/04/blog-octopress/">GistのURLが変わった</a></div></li></ul>

<p>に書いたように2013年ころに一回大きく変わっています。</p>

<p>最初は</p>

<pre><code> https://raw.github.com/gist/GIST_ID(/FILE_NAME)
</code></pre>

<p>と言った形だったのが</p>

<pre><code> https://gist.github.com(/USER)/GIST_ID/raw(/HASH)(/FILE_NAME)
</code></pre>

<p>と言った形になっていました。</p>

<p>ドメインが<code>gist.github.com</code>になっていますが、
上の現在のものでも</p>

<ul>
  <li><a href="https://gist.github.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/511ea8a3a209ac3b316cc39b77dba20bdbf1d53a/mygist.txt">https://gist.github.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/511ea8a3a209ac3b316cc39b77dba20bdbf1d53a/mygist.txt</a></li>
</ul>

<p>と、<code>gist.github.com</code>を使ってアクセス出来ますが
<code>gist.githubusercontent.com</code>にリダイレクトされます。</p>

<p>この変更自体は2014年に行われています。</p>

<blockquote>
  <p><a href="https://developer.github.com/changes/2014-02-21-gist-raw-file-url-change/">Gist raw file URI change  GitHub Developer Guide</a></p>
</blockquote>

<p>で、つい先日まで<code>USER</code>無しのURLでアクセス出来てたと思いますが、
今は<code>USER</code>なしだとアクセス出来ない様になっています。</p>

<p>これまで<code>GIST_ID</code>さえわかっていれば最新のGistにはアクセス出来たわけですが、
今は<code>USER</code>も必要になります。</p>

<p>なのでこれまで<code>GIST_ID</code>だけを使って管理してたりするとちょっと面倒な自体になります。</p>

<h2 id="rawなurlをgist_idだけから取得する">rawなurlをGIST_IDだけから取得する</h2>

<p>ということで<code>USER</code>というかrawのURLをなんとかGIST_IDだけから取りたいと思うわけですが、
GistにはAPIが用意されているのでそれを叩いて取得してみます。</p>

<ul>
  <li><a href="https://api.github.com/gists/4ba41bda1d0cc94f8af33b0f35e008b3">https://api.github.com/gists/4ba41bda1d0cc94f8af33b0f35e008b3</a></li>
</ul>

<p>と、<code>https://api.github.com/gists/GIST_ID</code>にアクセスすると、</p>

<pre><code>{
  "url": "https://api.github.com/gists/4ba41bda1d0cc94f8af33b0f35e008b3",
  ...
  "files": {
    "mygist.txt": {
      "filename": "mygist.txt",
      "type": "text/plain",
      "language": "Text",
      "raw_url": "https://gist.githubusercontent.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3/raw/6590bc0a36246d60c9574fed05a68337b71c934c/mygist.txt",
      "size": 6,
      "truncated": false,
      "content": "mygist"
    }
  },
  "public": true,
  ...
}
</code></pre>

<p>みたいなJSONが取れます。
この中に<code>raw_url</code>という値があるので、
後はこれを好きな方法で取ってきて使ってあげればOKな訳です。</p>

<h2 id="octopressのgist_tagrb">Octopressのgist_tag.rb</h2>

<p>Gistのページに行くと、<strong>Embed</strong>という表示が右上にあるので
ここにあるコードを見ると、</p>

<pre><code>&lt;script src="https://gist.github.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3.js"&gt;&lt;/script&gt;
</code></pre>

<p>と行った感じのJavaScriptが載っていて、
これをブログなりナンなりに貼り付けるとその場に</p>

<script src="https://gist.github.com/rcmdnk/4ba41bda1d0cc94f8af33b0f35e008b3.js"></script>

<p>こんな感じの表示が出来ます。</p>

<p>このJavaScriptのURLは</p>

<pre><code>https://gist.github.com(/USER)/GIST_ID.js
</code></pre>

<p>となっていて、<code>USER</code>部分は省略することが出来ます。</p>

<p>一方、Octopressには<a href="https://github.com/imathis/octopress/blob/master/plugins/gist_tag.rb">gist_tag.rb</a>
という、<code>GIST_ID</code>からGistの表示を作ってくれるプラグインがあります。</p>

<p>この中でやっていることは上のJavaScriptのコードを作る事と、
JavaScriptが無効な場合にrawなファイルを取ってきてそれを直接
表示させる様にすることです。</p>

<p>このrawを取ってくる所で、</p>

<figure class="code"><figcaption><span>gist_tag.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="k">def</span> <span class="nf">get_gist_url_for</span><span class="p">(</span><span class="n">gist</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class="line">  <span class="s2">&quot;https://gist.githubusercontent.com/raw/</span><span class="si">#{</span><span class="n">gist</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>と言った感じのURLを作って居て、これが今は<code>USER</code>が入ってないのでエラーを出してしまいます。</p>

<p>のでちょっと変更を加えてみます。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span></span><span class="gu">@@ -9,6 +9,7 @@</span>
</span><span class="line"> require &#39;digest/md5&#39;
</span><span class="line"> require &#39;net/https&#39;
</span><span class="line"> require &#39;uri&#39;
</span><span class="line"><span class="gi">+require &quot;json&quot;</span>
</span><span class="line">
</span><span class="line"> module Jekyll
</span><span class="line">   class GistTag &lt; Liquid::Tag
</span><span class="line"><span class="gu">@@ -50,7 +51,11 @@</span>
</span><span class="line">     end
</span><span class="line">
</span><span class="line">     def get_gist_url_for(gist, file)
</span><span class="line"><span class="gd">-      &quot;https://gist.githubusercontent.com/raw/#{gist}/#{file}&quot;</span>
</span><span class="line"><span class="gi">+      data = JSON.parse(get_web_content(&quot;https://api.github.com/gists/#{gist}&quot;).body)</span>
</span><span class="line"><span class="gi">+      if file == &quot;&quot;</span>
</span><span class="line"><span class="gi">+        file = data[&quot;files&quot;].keys[0]</span>
</span><span class="line"><span class="gi">+      end</span>
</span><span class="line"><span class="gi">+      data[&quot;files&quot;][file][&quot;raw_url&quot;]</span>
</span><span class="line">     end
</span><span class="line">
</span><span class="line">     def cache(gist, file, data)
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じ。<strong>gist_tag.rb</strong>には以下の様な
<code>get_web_content</code>という関数が用意されているのでそれを使って
データを取得し、JSONをパースして<code>["files"][file]["raw_url"]</code>を取得しています。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;net/https&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_web_content</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">  <span class="n">raw_uri</span>           <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span> <span class="n">url</span>
</span><span class="line">  <span class="n">proxy</span>             <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;http_proxy&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="k">if</span> <span class="n">proxy</span>
</span><span class="line">    <span class="n">proxy_uri</span>       <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">proxy</span><span class="p">)</span>
</span><span class="line">    <span class="n">https</span>           <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Proxy</span><span class="p">(</span><span class="n">proxy_uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">proxy_uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span><span class="o">.</span><span class="n">new</span> <span class="n">raw_uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">raw_uri</span><span class="o">.</span><span class="n">port</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">https</span>           <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span> <span class="n">raw_uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">raw_uri</span><span class="o">.</span><span class="n">port</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">https</span><span class="o">.</span><span class="n">use_ssl</span>     <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">https</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span>
</span><span class="line">  <span class="n">request</span>           <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Get</span><span class="o">.</span><span class="n">new</span> <span class="n">raw_uri</span><span class="o">.</span><span class="n">request_uri</span>
</span><span class="line">  <span class="n">data</span>              <span class="o">=</span> <span class="n">https</span><span class="o">.</span><span class="n">request</span> <span class="n">request</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>gist_tag.rb</strong>ではファイル名を与える事も出来、
ファイル名がある場合はそのファイルを、
そうでない時は一番最初にあるファイル名を使う様にしています。</p>

<p>これを使うと以下の様な出力が得られます。</p>

<pre><code>&lt;div&gt;&lt;script src="https://gist.github.com/4ba41bda1d0cc94f8af33b0f35e008b3.js"&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;mygist&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
</code></pre>

<p>下の<code>&lt;noscript&gt;</code>の中に取ってきた<code>raw</code>のコンテンツが入るようになっています。</p>

<p>注意として、
複数ファイルの場合、JavaScriptバージョンだとファイルを指定しないでも
全てのファイルを表示しますが、<code>raw</code>を使った<code>noscript</code>だと一つしか表示しません。</p>

<p>これに関しては、<code>noscript</code>の方だとファイル名とかも表示してなかったり
色々改善の余地がありますが、取り敢えず以前からこうだったので
以前と同じ様な事は出来る様になっています。</p>

<p>この辺octopress本体にPull Requestを送っても良いんですが、
Octopress(2.x)も、さらにはその将来系のOctopress 3.xの方も
最後の編集が数カ月前で
特にOctopress(2.x)の方はPull Requestが100近く溜まってる状態です。</p>

<div class="github-widget" data-repo="imathis/octopress"></div>

<div class="github-widget" data-repo="octopress/octopress"></div>

<p>作者の人はちょっと休んでるんだよ、ということですが<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
Octopressは今後どうなっていくのかな、と。
(まあ、取り敢えず今あるものでも暫くは動くので他に移ることは余り考えてませんが。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[werckerでのbundle-installにおけるトラブルシューティング]]></title>
    <link href="https://rcmdnk.com/blog/2016/01/15/blog-octopress-ruby-wercker/"/>
    <updated>2016-01-15T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2016/01/15/blog-octopress-ruby-wercker</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B01AIK7LH6?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B01AIK7LH6&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51zoHSOUK5L._SS200_.jpg" alt="A Bundle Of Letters: (Annotated) (English Edition)" /></a>
</div>

<p>このブログはBitbucketにソースがあって、
そこにpushすると
<a href="https://rcmdnk.com/blog/2015/02/25/blog-octopress/">werckerに送られて自動でビルドされ、GitHubへ送られる</a>
様になっているのですが、
ちょっと動かなくなっていたのを直したのでそれについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#octopressブログのwerckerでのビルド" id="markdown-toc-octopressブログのwerckerでのビルド">Octopressブログのwerckerでのビルド</a></li>
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
  <li><a href="#対処法" id="markdown-toc-対処法">対処法</a></li>
  <li><a href="#bundle-installの問題" id="markdown-toc-bundle-installの問題">bundle-installの問題</a></li>
  <li><a href="#pathの指定とgem_home" id="markdown-toc-pathの指定とgem_home">–pathの指定とGEM_HOME</a></li>
  <li><a href="#インストールされたgemの実行ファイル" id="markdown-toc-インストールされたgemの実行ファイル">インストールされたgemの実行ファイル</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="octopressブログのwerckerでのビルド">Octopressブログのwerckerでのビルド</h2>

<p><a href="https://rcmdnk.com/blog/tags/wercker/">wercker</a>は<a href="https://rcmdnk.com/blog/tags/travisci/">Travis CI</a>
と同じような
CI(継続的インテグレーション)サービスですが、
Bitbucketに対応していることと、
無料でGitHub/Bitbucketのプライベートレポジトリに対応しています。</p>

<p>Bitbucketでは無料でプライベートレポジトリが持てるので、
Bitbucket+werckerを使うと無料でプライベートなCI環境を作ることが出来ます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/02/25/blog-octopress/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20150225_werckerapp_120_90.jpg" width="120" height="90" alt="20150225_werckerapp_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/02/25/blog-octopress/">werckerを使ってBitbucketのプライベートレポジトリからOctopressを自動デプロイする</a></div></li></ul>

<h2 id="起こった問題">起こった問題</h2>

<p><code>rake</code>コマンドを使おうとした際、</p>

<pre><code>$ rake generate
rake aborted!
Gem::LoadError: You have already activated rake 10.4.2, but your Gemfile requires rake 10.5.0. Prepending `bundle exec` to your command may solve this.
/home/ubuntu/.rvm/gems/ruby-2.3.0@global/gems/bundler-1.9.10/lib/bundler/runtime.rb:34:in `block in setup'
/home/ubuntu/.rvm/gems/ruby-2.3.0@global/gems/bundler-1.9.10/lib/bundler/runtime.rb:19:in `setup'
/home/ubuntu/.rvm/gems/ruby-2.3.0@global/gems/bundler-1.9.10/lib/bundler.rb:122:in `setup'
/home/ubuntu/.rvm/gems/ruby-2.3.0@global/gems/bundler-1.9.10/lib/bundler/setup.rb:8:in `&lt;top (required)&gt;'
/pipeline/build/Rakefile:2:in `&lt;top (required)&gt;'
LoadError: cannot load such file -- bundler/setup
/pipeline/build/Rakefile:2:in `&lt;top (required)&gt;'
(See full trace by running task with --trace)
</code></pre>

<p>みたいなエラーが出ていました。</p>

<p>rakeの10.5.0が先日リリースされて
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
それが影響している様です。</p>

<p>まず、<strong>wercker.yml</strong>ではboxを</p>

<pre><code>box: wercker/rvm
</code></pre>

<p>で指定しています。</p>

<p>この状態だと、<code>rake</code>がデフォルトで</p>

<pre><code>/home/ubuntu/.rvm/rubies/ruby-2.3.0/bin/rake
</code></pre>

<p>に既にインストールされている状態でした。</p>

<p>また、環境変数としては</p>

<pre><code>PATH=/home/ubuntu/.rvm/gems/ruby-2.3.0/bin:/home/ubuntu/.rvm/gems/ruby-2.3.0@global/bin:/home/ubuntu/.rvm/rubies/ruby-2.3.0/bin:/home/ubuntu/phantomjs/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/ubuntu/.rvm/bin
GEM_PATH=/home/ubuntu/.rvm/gems/ruby-2.3.0:/home/ubuntu/.rvm/gems/ruby-2.3.0@global
GEM_HOME=/home/ubuntu/.rvm/rubies/ruby-2.3.0
</code></pre>

<p>みたいな感じになっています。</p>

<p>Octopressの中で、Gemfileで</p>

<pre><code>gem 'rake', '~&gt; 10.0'
</code></pre>

<p>と<code>rake</code>を指定していて、ビルドなどを行う前に<code>bundle install</code>するようにしています。</p>

<p>この<code>bundle install</code>ですが、werckerでは既にステップが用意されているので
それを使っています。</p>

<blockquote>
  <p><a href="https://github.com/wercker/step-bundle-install">bundle-install</a></p>
</blockquote>

<p>実はこれが問題で、単に</p>

<pre><code>- bundle-install
</code></pre>

<p>と呼ぶと、</p>

<pre><code>bundle install --path $WERCKER_CACHE_DIR/bundle-install/
</code></pre>

<p>が走ります。つまり、<strong>$GEM_HOME</strong>とは別の所にインストールされます。</p>

<p>なので、このまま<code>rake</code>を使おうとすると<strong>$WERCKER_CACHE_DIR/bundle-install/</strong>(<strong>WERCKER_CACHE_DIR</strong>は<strong>/cache</strong>という値が入っています。)
の方は無視して古い10.4.2を呼び出し、
ディレクトリにあるGemfile.lockと比較してオカシイ、と言う事になっています。</p>

<h2 id="対処法">対処法</h2>

<p>いくつか方法がありますが、一つは<strong>GEM_PATH</strong>にキャッシュディレクトリを
加えてあげる方法。</p>

<p><code>rake</code>を使う前に</p>

<pre><code>export GEM_PATH=$(cat .bundle/config|grep BUNDLE_PATH|cut -d'"' -f2)/ruby/$(ruby -v|cut -d" " -f2|cut -d"p" -f1)/:$GEM_PATH
</code></pre>

<p>みたいな行を加えておけば行ける様になります。
(キャッシュ位置が変わっても良いように<code>bundle install</code>時に記憶される<strong>.bundle/config</strong>内の値を使って。)</p>

<p>もし、新たな実行コマンドもインストールされる場合、
PATHも</p>

<pre><code>export PATH=$(cat .bundle/config|grep BUNDLE_PATH|cut -d'"' -f2)/ruby/$(ruby -v|cut -d" " -f2|cut -d"p" -f1)/bin:$PATH
</code></pre>

<p>と変更する必要があります。</p>

<p>ただし、例えばRakefileの中で<code>jekyll</code>等を使う場合、
<code>jekyll</code>がcacheの方にだけインストールされていても、
Rakefile内で呼ぶ限りはPATHの設定が無くても呼ぶことが出来ます。</p>

<p>または、キャッシュを使わず<strong>GEM_HOME</strong>にそのままインストールするように、<strong>bundle-install</strong>を使わず、</p>

<pre><code>- script:
    name: bundle install
    code: bundle install
</code></pre>

<p>と、普通に<code>--path</code>オプション無しの<code>bundle install</code>を自分で呼んであげれば
PATH等も気にせずに使えて楽です。</p>

<p>代わりにキャッシュを使えなくなるので、毎回全部インストールすることになりますが、
それ程多くのgemをインストールしないのであればこちらの方で良いかと。</p>

<p>取り敢えず今はこの後者の方法でやっています。</p>

<h2 id="bundle-installの問題">bundle-installの問題</h2>

<p>ちょっと<a href="https://github.com/wercker/step-bundle-install/blob/master/run.sh">bundle-installのスクリプト</a>
を見ていたらバグが有って、
PATHを指定すると
<strong>$WERCKER_CACHE_DIR/bundle-install/</strong>以外にもインストールできる様になってるはずなんですが、
これが</p>

<figure class="code"><figcaption><span>run.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;</span><span class="nv">$WERCKER_BUNDLE_INSTALL_PATH</span><span class="s2">&quot;</span> <span class="o">]</span> <span class="p">;</span> <span class="c1"># Check $WERCKER_BUNDLE_INSTALL exists</span>
</span><span class="line"><span class="k">then</span>
</span><span class="line">    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;</span><span class="nv">$WERCKER_BUNDLE_INSTALL_PATH</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="c1"># Check $WERCKER_BUNDLE_INSTALL exists and is not empty</span>
</span><span class="line">    <span class="k">then</span>
</span><span class="line">        <span class="nv">bundle_command</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$bundle_command</span><span class="s2"> --path </span><span class="nv">$WERCKER_BUNDLE_INSTALL_PATH</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="nv">bundle_command</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$bundle_command</span><span class="s2"> --path </span><span class="nv">$WERCKER_CACHE_DIR</span><span class="s2">/bundle-install/&quot;</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいな事をしています。</p>

<p>werckerでは、</p>

<pre><code>- bundle-install:
    path: verndor/bundle
</code></pre>

<p>の様に、ステップに対して変数を与える事が出来て、この場合、
<strong>WERCKER</strong> + <strong>ステップ名</strong> + <strong>変数名</strong>みたいな環境変数としてスクリプト内で使われます。</p>

<p>従って、ここでは<strong>WERCKER_BUNDLE_INSTALL_PATH</strong>を指定しているわけですが、
スクリプトの中で、最初<code>-z</code>でチェックして、その後<code>-n</code>でチェックしています。</p>

<p>単なるシェルスクリプトですが、<code>-z</code>は指定文字列が0文字であればTrue、
<code>-n</code>は指定文字列が1文字以上ならばTrueになります。</p>

<p>従って、ここでは、<strong>path</strong>に適当な空白以外の文字列を与えれば
この部分全て飛ばされ、
何も与えないか空白を与え場合は最後のキャッシュをパスに指定する部分にたどり着きます。</p>

<p>コード中のコメントは嘘ですし、そもそもその通りのことをしても何も意味が無い。。。。</p>

<p>コメント通りの事をしたいなら、</p>

<pre><code>if [ -z "${WERCKER_BUNDLE_INSTALL_PATH+x}" ] ; # Check $WERCKER_BUNDLE_INSTALL exists
</code></pre>

<p>とすれば出来ます<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>
。ので、どこかから変数チェックの方法をコピペしてきて間違えたのかな、、、と。</p>

<p>なので、上では、</p>

<pre><code>- bundle-install:
    path: verndor/bundle
</code></pre>

<p>と書きましたが、これはpathを指定せずに、デフォルトのGEM_HOMEにインストールすることになります。</p>

<p>なので、上の解決方の後者を使いたい時に、
適当に</p>

<pre><code>- bundle-install:
    path: nocache
</code></pre>

<p>とかpathに値を入れておけば単に<code>bundle install</code>をパス指定無しで走らせて
同じことが出来ます。</p>

<p>が、bundle-installステップがこの辺対処してしまうと困るので、
直接自分で書いています。</p>

<p>bundle-installを使うメリットとしては、短い記述で済むのと、
<code>rbenv</code>等を自動で呼んだりしてくれるところですが、
今は使ってないので特に必要ないので。</p>

<h2 id="pathの指定とgem_home">–pathの指定とGEM_HOME</h2>

<p>bundlerの仕様でちょっとつまずいた所として、
<code>--path</code>で指定する場所と<strong>GEM_HOME</strong>の値とが同じようなものではない、と言う点。</p>

<p>どういうことかというと、
<code>--path</code>で<strong>vendor/bundle</strong>の様に指定すると、
現在使ってるrubyのバージョンを含めた
<strong>vendor/bundle/ruby/2.3.0</strong>と言ったディレクトリにインストールされます。</p>

<p>一方、<strong>GEM_HOME</strong>はこの
<strong>vendor/bundle/ruby/2.3.0</strong>と言った実際にインストールされるディレクトリを指しています。</p>

<p>従って、</p>

<pre><code>bundle install --path $GEM_HOME
</code></pre>

<p>みたいにしてしまうと、
インストールされるのは<strong>$GEM_HOME/ruby/2.3.0</strong>になるので、
<strong>vendor/bundle/ruby/2.3.0/ruby/2.3.0</strong>
みたいになってしまいます。</p>

<p>この辺、ちょっと勘違いがあるかもしれませんが、
bundle-installのpathへ値を渡そうと色々やってる時にちょっと戸惑ったのでメモ。</p>

<h2 id="インストールされたgemの実行ファイル">インストールされたgemの実行ファイル</h2>

<p><strong>/home/ubuntu/.rvm/rubies/ruby-2.3.0/bin/rake</strong>
等の実行ファイルですが、この中身は</p>

<figure class="code"><figcaption><span>rake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="ch">#!/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># This file was generated by RubyGems.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># The application &#39;rake&#39; is installed as part of a gem, and</span>
</span><span class="line"><span class="c1"># this file is here to facilitate running it.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">version</span> <span class="o">=</span> <span class="s2">&quot;&gt;= 0&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">  <span class="n">str</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">  <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;BINARY&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">str</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:force_encoding</span>
</span><span class="line">  <span class="k">if</span> <span class="n">str</span> <span class="o">=~</span> <span class="sr">/\A_(.*)_\z/</span> <span class="ow">and</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="o">.</span><span class="n">correct?</span><span class="p">(</span><span class="vg">$1</span><span class="p">)</span> <span class="k">then</span>
</span><span class="line">    <span class="n">version</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class="line">    <span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="n">version</span>
</span><span class="line"><span class="nb">load</span> <span class="no">Gem</span><span class="o">.</span><span class="n">bin_path</span><span class="p">(</span><span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>と言った感じの簡単なRubyのスクリプトになっています。
実際のrakeの機能はここから<strong>GEM_PATH</strong>にあるrakeの本体を辿って実行されます。</p>

<p>ここで一つつまずいたのが、最初、</p>

<pre><code>export PATH=$(cat .bundle/config|grep BUNDLE_PATH|cut -d'"' -f2)/ruby/$(ruby -v|cut -d" " -f2|cut -d"p" -f1)/bin:$PATH
</code></pre>

<p>と、<strong>PATH</strong>の方だけ指定して、<code>rake</code>も新しい方を使ってるだろう、と思ってたんですが、
これをしても、さらに
<strong>/cache/bundle-install/ruby/2.3.0/bin/rake</strong>と直接
新しい<code>rake</code>を指定しても10.4.2の古いバージョンが呼ばれて困りました。</p>

<p>実際には、新たにインストールした<strong>rake</strong>実行ファイルも
元から入ってる実行ファイルと全く一緒なのでPATHだけ変更しても意味が無く、</p>

<pre><code>export GEM_PATH=$(cat .bundle/config|grep BUNDLE_PATH|cut -d'"' -f2)/ruby/$(ruby -v|cut -d" " -f2|cut -d"p" -f1)/:$GEM_PATH
</code></pre>

<p>とGEM_PATHの方も加えてあげないと意味がありません。</p>

<p>逆に、GEM_PATHに新たなgemのパスを加えると、
古い
<strong>/home/ubuntu/.rvm/rubies/ruby-2.3.0/bin/rake</strong>
の方を使っても新しい10.5.0のrakeが呼ばれる事になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのruby-profを使ってOctopressのgenerateでどれ位時間がかかってるか測ってみる]]></title>
    <link href="https://rcmdnk.com/blog/2015/02/24/computer-ruby-octopress/"/>
    <updated>2015-02-24T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/02/24/computer-ruby-octopress</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4535560404?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4535560404&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51WSSKMAYAL._SS200_.jpg" alt="プロファイリング―犯罪心理分析入門" /></a>
</div>

<p>前回<a href="https://rcmdnk.com/blog/2015/02/19/computer-ruby-octopress/">RubyのBenchmarkを使ってOctopressのgenerateでどれ位時間がかかってるか測ってみる</a>
とBenchmarkと言うモジュールを使って計測してみましたが、
これだと個々の箇所で一つ一つ計測を行う必要があって
実際中身を細かく知りたい場合にはちょっと面倒です。</p>

<p><a href="https://github.com/ruby-prof/ruby-prof">ruby-prof</a>
というモジュールを使うと簡単に色々と中身をプロファイル出来そうだったので
ruby-profでOctopressの中身を測ってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#ruby-prof" id="markdown-toc-ruby-prof">ruby-prof</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>Sponsored Links</div>
  <div>
  <ins class="adsbygoogle google-img-rect" style="display:inline-block" data-ad-client="ca-pub-3802317723662375" data-ad-slot="7116417646"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="ruby-prof">ruby-prof</h2>

<p><a href="https://github.com/ruby-prof/ruby-prof">ruby-prof</a>
はRubyのコードプロファイラーです。</p>

<p>Rubyには標準で
<a href="http://docs.ruby-lang.org/ja/2.2.0/library/profile.html">profile</a>
というライブラリが入っていますが
これはかなり遅いので
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>、
それに変わってruby-profが好まれて使われている様。</p>

<p>また、色々なタイプのアウトプットが指定できるので好きな様に解析しやすいというのも
あるかと思います。</p>

<p>取り敢えずインストールは</p>

<pre><code>$ gem install ruby-prof
</code></pre>

<p>等で。</p>

<p>使い方はruby-profのREADMEを読むとわかると思いますが、
<a href="https://rcmdnk.com/blog/2015/02/19/computer-ruby-octopress/">前回</a>
でやったのと同じ様にはかってみるためには
こんな感じの<strong>plugins/jekyll_patch.rb</strong>を用意してあげます。</p>

<figure class="code"><figcaption><span>jekyll_patch.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;ruby-prof&#39;</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Site</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">process</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># Profile the code</span>
</span><span class="line">      <span class="n">result</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="o">.</span><span class="n">profile</span> <span class="k">do</span>
</span><span class="line">        <span class="n">reset</span>
</span><span class="line">        <span class="n">read</span>
</span><span class="line">        <span class="n">generate</span>
</span><span class="line">        <span class="n">render</span>
</span><span class="line">        <span class="n">cleanup</span>
</span><span class="line">        <span class="n">write</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># Print profile to text</span>
</span><span class="line">      <span class="n">out</span><span class="o">=</span><span class="s1">&#39;./rubyprof.out&#39;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Print rubyprof flat to </span><span class="si">#{</span><span class="n">out</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">        <span class="no">RubyProf</span><span class="o">::</span><span class="no">FlatPrinter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>基本は<code>RubyProf.profile</code>の文で囲って(もしくは<code>RubyProf.start</code>/<code>RubyProf.stop</code>を使って)、
その結果をプリンターで出力する、と言う形。</p>

<p>これで</p>

<pre><code>Measure Mode: wall_time
Thread ID: 70192336331880
Fiber ID: 70192341148120
Total: 34.417862
Sort by: self_time

 %self      total      self      wait     child     calls  name
 58.60     20.169    20.169     0.000     0.000     4992   File#initialize 
 10.98      3.777     3.777     0.000     0.000       23   &lt;Class::IO&gt;#select 
  5.66      1.948     1.948     0.000     0.000     1668   IO#read 
  3.09      1.062     1.062     0.000     0.000        7   TCPSocket#initialize 
  1.07      0.368     0.368     0.000     0.000     1652   &lt;Class::IO&gt;#copy_stream 
  1.00      0.623     0.344     0.000     0.279     5008   RubyPants#educate_quotes 
  0.99      0.341     0.340     0.000     0.001    91677   String#gsub 
  0.87      0.299     0.298     0.000     0.001    72635   String#gsub! 
  0.66      0.227     0.227     0.000     0.000    21337   String#sub! 
</code></pre>

<p>こんな感じのアウトプットが得られます。
(上の例では<strong>./rubyprof.out</strong>というファイルへ出力。)</p>

<p>プリンターには</p>

<blockquote><p>* RubyProf::FlatPrinter - Creates a flat report in text format<br />* RubyProf::FlatPrinterWithLineNumbers - same as above but more verbose<br />* RubyProf::GraphPrinter - Creates a call graph report in text format<br />* RubyProf::GraphHtmlPrinter - Creates a call graph report in HTML (separate files per thread)<br />* RubyProf::DotPrinter - Creates a call graph report in GraphViz's DOT format which can be converted to an image<br />* RubyProf::CallTreePrinter - Creates a call tree report compatible with KCachegrind.<br />* RubyProf::CallStackPrinter - Creates a HTML visualization of the Ruby stack<br />* RubyProf::MultiPrinter - Uses the other printers to create several reports in one profiling run<br />* More!</p><footer><strong>ruby-prof/ruby-prof</strong> <cite><a href="https://github.com/ruby-prof/ruby-prof">github.com/ruby-prof/ruby-prof/&hellip;</a></cite></footer></blockquote>

<p>の様な種類があり、上で使ってるFlatPrinterは一番シンプルなものです。</p>

<p>GraphHtmlPrinterとか使うとHTMLで見れますが、HTMLでソートとかが出来るわけではないので
ちょっと見づらかったです。</p>

<p>CallTreePrinterを使って結果を
<a href="http://kcachegrind.sourceforge.net/html/Home.html">KCachegrind</a>
というツールを使って表示するとGUIで色々詳しく調べられそう<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>
ですが、
出力を作るのに大量に情報がありすぎるとうまく居ないのか、
このプリンターを使うとフリーズしてしまいました。
本気で色々見ようと思った時には上手く使えば面白そうではあります。</p>

<p>ということで色々測ってみましたが、
やはりどれが問題というわけではなくて全体的に時間がかかるなーというのが印象。</p>

<p>Octopress(というかJekyll)を使う以上は仕方ない状態なのかな、と。
この遅さに嫌気が差して他に移ってる人が結構発生してるみたいですが、
ちょっと他を見てみたいのもありつつ移行するのも面倒だな、というのもありつつ、な感じ。</p>

]]></content>
  </entry>
  
</feed>
