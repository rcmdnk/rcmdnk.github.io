<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Windows | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/windows/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-16T21:05:32+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cygwin+screenで256 colorを有効にする]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/05/computer-cygwin-putty-vim/"/>
    <updated>2013-09-05T19:26:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/05/computer-cygwin-putty-vim</id>
    <content type="html"><![CDATA[<p>最近、vimのステータス表示で
<a href="https://github.com/bling/vim-airline">vim-airline</a>がリリースされたり
それに追随して<a href="https://github.com/itchyny/lightline.vim">lightline</a>
がリリースされたり<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、
気になっていたのでインストールしました。
これまであまりターミナルの表示色を気にしてませんでしたが、
これらを導入した際にちゃんと表示されてない部分があったので
それらの設定と、後、導入したステータスラインの設定等。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Cygwin+++GNU+Screen">Cygwin + GNU Screen</h1>

<p>CygwinではMac同様、GNU Screenはソースからコンパイルして
インストールしていますが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、
この際、<code>configure</code>で<code>--enable-colors256</code>として256色表示を有効にしてるんですが、
実際にはそれ程色を気にするわけでもないのでCygwin上ではきちんと試してませんでした。</p>

<p>で、今回vimのステータスラインを入れてみて他の端末ではこんな感じで綺麗に見れてたのが</p>

<p><img src="/images/post/20130905_vimstatusok.png" "" ""></p>

<p>Cygwinだと</p>

<p><img src="/images/post/20130905_vimstatusno.png" "" ""></p>

<p>こんな感じで状態がとても見辛く(ともに<code>lightline</code>の<code>jellybeans</code>テーマ)。</p>

<p>色々試していると、GNU screenを起動した時だけがおかしくなるので、
screenインストール時にcolors256オプション付け忘れかと思って再インストールしてみるも駄目。
<code>.screenrc</code>に</p>

<pre><code>term xterm-256color
</code></pre>

<p>とtermを指定したりしても関係なし(そもそも他の端末ではなくてもOK。)</p>

<p>問題はMinttyのターミナルオプションが<code>xterm</code>になっていて、これを
<code>xterm-256color</code>に指定する必要があったみたいです。
(つまりはずっと256色表示でなかった。。。)</p>

<p>ターミナルにメニューバーが無いので、タイトルバーを右クリックから<code>Options...</code>
を選び下の様にTerminalのTypeを<code>xterm-256color</code>に。</p>

<p><img src="/images/post/20130905_cygwin.png" "" ""></p>

<p>これでちゃんと表示出来る様になりました。</p>

<p>テストとして<code>bash</code>でこんなスクリプトを使って表示。
<div><script src='https://gist.github.com/6457780.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><img src="/images/post/20130905_256colOK.png" "" ""></p>

<p>こんな感じに見れます。もし256色表示が有効でないと、</p>

<p><img src="/images/post/20130905_256colNO.png" "" ""></p>

<p>こんな感じで、同じ色を表示する所が出てきます。</p>

<h1 id="Putty">Putty</h1>

<p>一応同じWindowsとしてPuttyについても。</p>

<p>Puttyは各Sessionの<code>Connection</code>の<code>Data</code>の所に<code>Terminal-type string</code>
という項目があるので、ここに<code>xterm-256color</code>を記入します。
こちらは昔設定したみたいでこうなっていて、外に繋げたりcoLinuxでは
きちんと256色表示されていたみたいです。</p>

<p><img src="/images/post/20130905_putty.png" "" ""></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://d.hatena.ne.jp/itchyny/20130824/1377351527">lightline.vim作りました - プラグインの直交性について</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="/2013/03/22/screen-install/">Macでの文字化け対策用のGNU screenのインストール</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windowsでのショートカットの起動オプション for MagicFormation]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/30/computer-windows/"/>
    <updated>2013-08-30T00:02:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/30/computer-windows</id>
    <content type="html"><![CDATA[<p><a href="/2013/07/20/computer-windows/">MagicFormation: Windowsで使っているランチャー</a>
でMagicFormationを紹介しましたが、
ソフトを登録する際に注意する点等。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="起動オプション">起動オプション</h1>

<p>Windowsのスタートメニューに登録されてるソフトの中には、
ショートカットで起動オプション付きで登録されているものがあります<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>設定で<code>ショートカットはリンク元の実ファイルを登録</code>(その他の設定内)を選んでると
これらをMagicFormationにドロップして登録しようとする時、
<code>起動パス</code>にソフト実体がが登録されて、オプションは省かれてしまいます<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p>この場合は必要に応じて、アイコンの設定から<code>起動引数</code>の欄があるので、
ここにオプションを記入します。</p>

<p>以下、起動引数付きで登録してあるソフトです。</p>

<ul>
<li>XWin Server

<ul>
<li>起動パス: <code>C:\cygwin\bin\run.exe</code></li>
<li>起動引数: <code>/usr/bin/bash.exe -l -c</code></li>
<li>アイコン: <code>C:\cygwin\bin\XWin.exe</code></li>
</ul>
</li>
<li>Cygwin-Terminal

<ul>
<li>起動パス: <code>C:\cygwin\bin\mintty.exe</code></li>
<li>起動引数: <code>-i /Cygwin-Terminal.ico -</code></li>
<li>アイコン: <code>C:\cygwin\Cygwin-Terminal.ico</code></li>
</ul>
</li>
<li>Putty: セッション毎に作成、coLinuxの例

<ul>
<li>表示名: coLinux</li>
<li>起動パス: <code>C:\Program Files\PuTTY\putty.exe</code></li>
<li>起動引数: <code>-load coLinux -l user -pw password</code></li>
<li>アイコン: <code>C:\Program Files\coLinux\colinux-daemon.exe</code></li>
</ul>
</li>
</ul>


<p>アイコンは<code>ico</code>ファイルでも<code>exe</code>でも画像ファイルでもOKです。
Puttyの場合、<code>-load</code>でセッション名、<code>-l</code>でユーザー名、
<code>-pw</code>でパスワードが指定出来ます。
パスワードは直ぐ見れる状態になるので、
自分専用のPCでも取られても余り問題ない
(上のようにcoLinuxで外からはssh出来ないような)
様な場合に限った方が良いです。</p>

<h1 id="直接登録出来ないフォルダ等の登録方法">直接登録出来ないフォルダ等の登録方法</h1>

<p><code>コンピューター</code>や<code>ゴミ箱</code>等、デスクトップにある
アイコンを直接登録しようとすると弾かれて登録出来ません。</p>

<p>これらを登録するには、一度自分のDocumentsディレクトリ等にショートカットを作り、そのショートカットを登録します。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>右クリックからプロパティで<code>リンク先</code>を確認。
  ソフト名の後にオプションがある場合があります。
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p>このオプションが選ばれて無いときはショートカット自体(<code>.lnk</code>)が登録され、
  従って起動オプション毎登録されます。
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Group Policy Clientサービスに接続できませんでした。]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/27/computer-windows/"/>
    <updated>2013-08-27T21:55:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/27/computer-windows</id>
    <content type="html"><![CDATA[<p>Windows Update後、題名の様なエラーがでてログイン出来ず。</p>

<!-- more -->


<p>Windows7でWindows Updateした後、再起動した時、
ログイン画面までは普通に行ったのに、
ログインしようとしたら</p>

<pre><code>Group Policy Clientサービスに接続できませんでした。
システム管理者に連絡してください。
</code></pre>

<p>と出て、強制ログアウトする状態に。
この際ログインしようとしたのは、管理者権限が無いユーザーでした。</p>

<p>試しにセーフモードで立ち上げてみたら</p>

<pre><code>The user name or password is incorrect.
</code></pre>

<p>というエラーが途中で出ましたが、その後ログイン画面に行き、
普通のログインの様な画面に移行後ログインするような状態に。</p>

<p>取り敢えず一旦再起動しなおして、管理者アカウントでログインすると、
ログインは出来たのですが、</p>

<pre><code>Windowsサービスに接続できませんでした。
Group Policy Clientサービスに接続できませんでした。
このため、標準ユーザーはこのシステムにログオンできません。
管理者ユーザーは、システムイベントログを参照して、このサービスが応答しなかった原因を確認できます。
</code></pre>

<p>というエラーメッセージが。
Windows全般的にそうですが、(知識がないので。。。)エラーログを見ても余りよく分からないので、適当にググってみると</p>

<blockquote><p><a href="http://bit.ly/16ODJZ6">レジストリの修正する</a></p></blockquote>

<p>とか</p>

<blockquote><p><a href="http://bit.ly/1fhbhRb">ユーザープロファイルを削除してみるとか</a></p></blockquote>

<p>とかありましたが、ちょっと大変そうなので、取り敢えず
システムの復元を試すことに。</p>

<p>で、結果的にはUpdate前の復元ポイントまで戻したら問題なく治りました。
その後Updateを適用しても大丈夫そうです。</p>

<p>何が問題だったんだろうか。。。？</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 7.4をCygwinへインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim/"/>
    <updated>2013-08-17T00:44:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim</id>
    <content type="html"><![CDATA[<p>Vim 7.4の正式版がリリースされたので、
Cygwinへもインストールしました。
現在のCygwinで配布されてるバイナリは7.3+patch 1-1110, 1112-1152
なので、ソースからビルドしてインストールです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Mercurielをインストール">Mercurielをインストール</h1>

<p>Mercurielをまだインストールしてなかったので
<a href="/blog/2013/08/08/computer-windows-cygwin/">apt-cyg</a>で</p>

<pre><code>apt-cyg -u install mercurial
</code></pre>

<p>最初大文字で<code>Mercurial</code>やコマンドの<code>hg</code>で探しても見つからなかったので
ソースからインストールしなきゃいけないのかと思いましたが、
普通に<code>mercurial</code>でありました。。。</p>

<h1 id="Vimをインストール">Vimをインストール</h1>

<p><a href="/blog/2013/08/11/computer-linux-windows-cygwin/">Stow</a>を使って管理するようにします。
オプションはマルチバイト対応とLuaやPythonなどいくつかのインタプリタを有効に。以前までの色々のオプションはざっくり落としてみました。(要らないものをdisableしてもあまり意味が無い感じがしてきたので。)</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src/
$ ./configure  --prefix=$HOME/usr/local/stow/vim-7.4  --enable-multibyte  --enable-luainterp=yes  --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ stow vim-7.4
</code></pre>

<p>こんな感じで<code>~/usr/local/</code>へ。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>MacではHomebrew版のHEADが7.4になってますのでHomebrewで入れればOK。
  (<a href="/blog/2013/08/07/computer-vim">Lua対応Vimをインストール</a>)
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stowでmake installしたパッケージを管理]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin/"/>
    <updated>2013-08-11T03:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003KOAR0G/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41PYjDYaZvL._SL160_.jpg" border="0"></a></p>

<p><a href="/blog/2013/08/04/computer-linux-mac/">pacoでmake installしたパッケージを管理</a>
で書いた様に、Linux(WindowsのcoLinuxも含む)で
make installしたパッケージも管理出来る様にしましたが、
Cygwinにもpacoを入れようとした所コンパイル出来なかったので
代わりにstowと言うインストーラーを入れました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Cygwinではpacoをコンパイル出来ない">Cygwinではpacoをコンパイル出来ない</h1>

<p>pacoのパッケージを取ってきてCygwinでコンパイルしようとすると</p>

<pre><code>log.c:67:20: error: ‘RTLD_NEXT’ undeclared (first use in this function)
</code></pre>

<p>と言った様なエラーが出てコンパイル出来ないのですが、これはglibcが入ってないからですが、
Cygwinではglibcは入れられない様です<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>いくつかそれっぽいものはありましたが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、素直に入れることは
出来なそうなのでpacoは辞めておくことに。</p>

<h1 id="stow">stow</h1>

<p><a href="http://www.gnu.org/software/stow/">stow</a>はpacoと同じ様な<code>make install</code>などで
<code>apt-get</code>などを通さず直接インストールするパッケージを管理する
インストーラーです。</p>

<h2 id="paco+v.s.+stow">paco v.s. stow</h2>

<p>pacoとstowの違いは</p>

<ul>
<li>paco: <code>/usr/local/var/log/paco</code>等のディレクトリ以下にパッケージ名情報ファイルを作り、
その情報を元にインストールされたファイルを管理する。</li>
<li>stow: <code>/usr/local/stow/</code>等のディレクトリ以下にパッケージ名ディレクトリを作り、
その中にパッケージをインストールする。
そこから<code>/usr/local/</code>などへリンクを張る。</li>
</ul>


<p>pacoでインストールした場合は、パッケージ自体は通常通りインストールされるので、<code>/usr/local/var/log/paco</code>自体を削除しても問題有りません。</p>

<p>stowの場合は<code>/usr/local/</code>へはリンクが貼られるだけなので
通常インストールとは形が変わります。
一方、stowは<code>/usr/local/stow/</code>からのリンクを管理するので、
例えば1つのパッケージでバージョンの違う物を両方インストールしておいて、
一時的に切り替える事が簡単に出来ます。
新しいバージョンを入れて取り敢えず試してみる、と言うことができるので、
その点でstowが結構便利かもしれません。</p>

<h2 id="stowインストール">stowインストール</h2>

<ul>
<li>Cygwin</li>
</ul>


<p><a href="/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>で</p>

<pre><code>$ apt-cyg install stow
</code></pre>

<ul>
<li>Mac</li>
</ul>


<p><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>で</p>

<pre><code>$ brew install stow
</code></pre>

<ul>
<li>Linux</li>
</ul>


<p>apt-getなど。root権限がないところでローカルに入れる場合は自分もstowで管理。</p>

<pre><code>$ cd ~/tmp/
$ wget http://ftp.gnu.org/gnu/stow/stow-2.2.0.tar.gz
$ tar xzf stow-2.2.0.tar.gz
$ cd stow-2.2.0
$ ./configure --prefix=$HOME/usr/local/stow/stow-2.2.0
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ ./stow-2.2.0/bin/stow stow-2.2.0
</code></pre>

<h2 id="stowの使い方">stowの使い方</h2>

<p>まず、stowで管理するパッケージをインストールするディレクトリを決めておきます。
通常は最終的にインストールするディレクトリ下にstowというディレクトリを作ります。
(上の場合は<code>$HOME/usr/local/</code>に<code>bin/stow</code>などをインストールするので
<code>$HOME/usr/local/stow</code>ディレクトリを作って入れています。)</p>

<p>パッケージをインストールする際は、prefix等でインストール先を
<code>$HOME/usr/local/stow</code>+<code>パッケージ名</code>に指定して後は通常通りインストールします。</p>

<p>インストール後、stowディレクトリへ行き、</p>

<pre><code>$ stow package
</code></pre>

<p>とすることで、package内から<code>../</code>の<code>/bin/</code>等へリンクが張られます。</p>

<p>アンインストールは</p>

<pre><code>$ stow -D package
</code></pre>

<p>とするとリンクが削除されます。パッケージがその後必要なければ
stowディレクトリから実体も削除すればOK。</p>

<p>バージョンの違う同じパッケージをインストールしてる場合は</p>

<pre><code>$ stow -D package-1.0
$ stow package-2.0
</code></pre>

<p>の様にすれば1.0から2.0へ切り替える事が出来、
実体は残ったままなので、同じ様に1.0に戻る事もすぐ出来ます。</p>

<pre><code>$ stow -n package-2.0
</code></pre>

<p>とすると、ドライランすることが出来ます。</p>

<p>通常は、カレントディレクトリがstowディレクトリ、親ディレクトリが
リンクを作るインストール先ですが、これを変えたい場合は</p>

<ul>
<li><code>-d stow_dir</code>、<code>--dir=stow_dir</code>でstowディレクトリを指定。</li>
<li><code>-t target_dir</code>、<code>--target=target_dir</code>でインストール先ディレクトリを指定。</li>
</ul>


<p>します。ただ、pacoの場合と違い、これらの情報は残らないので、
特別指定した場合はアンインストールする場合も指定する必要があるので、
管理上、最終的なインストール先の下にstowディレクトリを作るのが良いかと思います。</p>

<h2 id="すでにインストールしてあるパッケージに対してstowで再インストールする場合">すでにインストールしてあるパッケージに対してstowで再インストールする場合</h2>

<p>すでにパッケージがインストールしてあると、
リンクでなく実体が存在するのでstowでリンクを作ろうとすると
エラーが出ます。
(<code>-D</code>で削除しようとするとリンクじゃない、と言って削除してくれない。)
一旦それらのファイルを削除しないとstowで管理しようがないみたいで、
結構面倒です。</p>

<p>そこで<a href="https://github.com/rcmdnk/scripts/blob/master/stowReset.sh">stowReset.sh</a>
と言うスクリプトを作りました。</p>

<p>使い方は、まず、インストールしたいパッケージをstowディレクトリに
インストールした後、
stowディレクトリに行き、</p>

<pre><code>$ stowReset.sh package
</code></pre>

<p>とすると、packageに関連するファイルが親ディレクトリから削除されます。
stow同様に<code>-d</code>、<code>-t</code>、<code>-n</code>のオプションが使えます(<code>--dir</code>等2重ハイフンオプションは未対応)。</p>

<p>その後、通常通り、</p>

<pre><code>$ stow package
</code></pre>

<p>とすればリンクを作れる様になります。</p>

<h1 id="まとめ">まとめ</h1>

<p>pacoに比べて、新しいバージョンのテスト等にも便利に使えそうなので、
MacやLinuxでもpacoからstowへ移行しようと思います。</p>

<p>pacoだとconfigureの引数等の情報がそのまま残るのでちょっと便利ですが、
その点はちゃんとメモするようにしておけばOKかな、と。</p>

<hr />

<p>追記 2013/08/28</p>

<p><strike>暫く使ってみて問題発見。stowだと、<code>~/usr/local/stow</code>の下にパッケージディレクトリを置いて、
そこから<code>~/usr/local/</code>へリンクを張るわけですが、その際、例えば
<code>~/usr/local/bin</code>がある場合はその下からリンクを作り始め、一方<code>bin</code>ディレクトリが
ない場合は<code>bin</code>自体がリンクになってしまうみたいです。</p>

<p>つまり、最初に何も<code>~/usr/local/</code>にない状態で<code>vim</code>などをインストールすると、
<code>~/usr/local/bin</code>が<code>~/usr/local/stow/vim/bin</code>などへのシンボリックリンクになってしまいます。
こうなると、次に別のソフトをインストールするときに実質的に<code>~/usr/local/stow/vim/bin</code>内に
シンボリックリンクを置くことになってしまうので<code>~/usr/local/stow/vim/</code>を削除してしまうと
<code>~/usr/local/bin</code>自体がリンク切れになってしまいますし、vimをアップデートすると他のソフトのインストールが消えます。</p>

<p>stowのインストールでディレクトリはリンクでなく必ず掘る様にして、
また、アンインストール時はディレクトリ内に何も無いときに限り消す、みたいなラッパーを作れば良いのだと思うのですが。。。
(sourceコード直接いじった方が楽かな。。。？)そのうちなんとかしたい所。
できればpacoみたいにconfigureオプションを保存出来る様になればなおもよしですが。。。
</strike></p>

<hr />

<hr />

<p>さらに追記 2013/08/29</p>

<p>stowは意外と賢かったです。マニュアルを見たらこの辺をきちんと処理する様になってることが
分かりました。</p>

<p>最初にインストールする時は最も上位のディレクトリだけのリンクを作ろうとして
これを<code>folding</code>と呼んでいます。</p>

<p>で、<code>~/usr/local/bin</code>等が<code>~/usr/local/stow/vim/bin</code>などへのシンボリックリンクの
状態で、次にgit等をインストールすると、<code>bin</code>がシンボリックだと言う事を理解して、
まず、vimへのリンクを消し、新たにディレクトリを作り、
その中にvimとgitの<code>bin</code>内のコンテンツへのリンクを作りなおしてくれます。</p>

<p>逆に、<code>stow -D</code>で削除していく時も、中身が1つのパッケージだけになったディレクトリは
まとめてシンボリックリンクに変えられます。</p>

<p>自分でディレクトリを作ってしまったりするとこのアンインストール時に
無駄にディレクトリを残してしまうことが有ります。
(2つ以上のパッケージが同じディレクトリを使っていると、アンインストールしていって
最後の1つになった時にそのディレクトリをシンボリックリンクにしてくれますが、
最初から1つしか無いとそのディレクトリはパッケージをアンインストールしても残ってしまいます。)</p>

<p>なので、基本的に<code>bin</code>等を自分で作るべきではないです。</p>

<p>これに関連するオプションで<code>--no-folding</code>というオプションが有ります(<code>stow -h</code>では記述を忘れてるのか出て来ない)。
このオプションをインストール時につけると、所謂上で間違って指摘していたような、
各ディレクトリをシンボリックリンクでなく全て掘り下げる様に作ってくれます。
ただ、これをしてしまうとアンインストール時にからディレクトリのゴミが残ります。</p>

<p>また、<code>--no-folding</code>をアンインストール時に使うと、仮にそのディレクトリ内が
1つのパッケージだけになるような場合でもシンボリックリンクに変えたりしないで
そのまま残します。
この場合も後々アンインストールするときにゴミが残るような状態になります。</p>

<p>ので、特別理由がない限りあまり使うことはなさそうです。</p>

<p>他に、<code>--adopt</code>というオプションもあり、ちょっと特殊な動きをします。
通常、stowでインストールするとき、上に書いたように、先にシンボリックリンクでない
普通のファイルがインストールされていると上書きできずにエラーとなります。
しかし、このオプションを使うと、もし、通常ファイルがある場合、
<code>そのファイルをstowディレクトリにあるパッケージにコピーした上でシンボリックリンクを作る</code>、という動きをします。</p>

<p>ここで注意しなければいけないのは、もともとパッケージに入っているファイルが上書きされることです。
つまり、古いファイルが残っていて、それを上書きできる様なオプションではありません。</p>

<p>このオプションの使い道としては、上で作っった<code>stowReset.sh</code>を使わなくてはいけない様な状況で、
パッケージをstowディレクトリにインストール後、一度そのコピーを作り、
そのコピーパッケージでadoptし、その後、オリジナルのパッケージをrestowする、とかでしょうか？</p>

<pre><code>$ pwd
~/usr/local/stow
$ ls
vim
$ cp -r vim vim.tmp
$ stow --adopt vim.tmp &amp;&amp; stow -D vim.tmp &amp;&amp; rm -rf stow.tmp
$ stow vim
</code></pre>

<p>これで、<code>stowReset.sh</code>でやってることとだいたい同じことが出来ます。</p>

<p>ただし、パッケージ内にシンボリックリンクが元々入ってる場合があり
(ライブラリーや実行ファイルの別名など)それらは<code>--adopt</code>しようとすると
他のパッケージに管理されてるとみなされて無視されます。
従ってそのまま残り新しくインストール出来ません。その場合には<code>stowRest.sh</code>を
使ってみてください。
(数ファイルだけだと思うので、その際には手作業でもいいかもしれませんが。)</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://cygwin.com/faq.html#faq.programming.glibc">Where is glibc?</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.gurucoding.com/en/pc_cross_compiler/building_glibc_cygwin_vm.php">Building GLibc in the Cygwin VM</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://artfiles.org/cygwin.org/pub/glibc/releases/">Index of /cygwin.org/pub/glibc/releases</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
