<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: AutoHotkey | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/autohotkey/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-16T01:31:56+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vimを使う上でのIME(日本語入力)の取り扱い with AutoHotKey]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/04/computer-windows-autohotkey/"/>
    <updated>2013-08-04T08:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/04/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>以前書いた
<a href="/blog/2013/06/20/computer-mac-keyremap4macbook-vim/">Vimを使う上でのIME(日本語入力)の取り扱い</a>
への付け加えで、AutoHotkeyを使って行う方法について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<p><div><script src='https://gist.github.com/6147672.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>こんなかんじで。
<a href="http://www6.atwiki.jp/eamat/pages/17.htmla">eamat @Cabinet</a>さんのところで公開されている
IME.ahkが別途必要です。
(同じディレクトリに入れて起動するか必要な関数をコピペして入れておけばOK。)</p>

<p>初期設定ではPutty、Mintty (Cygwinで使ってる場合も)及びVim上で有効になります。</p>

<p>AutoHotkeyをインストールしてなくても使える様にexeファイルも作っておきました:
<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim_ime.exe?raw=true">vim_ime.exe</a>。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim以外でVimする: Windows+AutoHotkey編]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/03/computer-windows-autohotkey/"/>
    <updated>2013-08-03T17:47:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/03/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>前に<a href="/blog/2013/03/17/vim/">Vim以外でVimする: Windows編</a>
でWindowsで<a href="/blog/tags/yamy/">yamy</a>を使って
Vimっぽい動きを再現する物を作ってみましたが、
<a href="/blog/tags/autohotkey/">AutoHotkey</a>
に移行することにしたので、
AutoHotkeyでも同様の物をつくってみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="vim_ahk">vim_ahk</h1>

<h2 id="インストール方法">インストール方法</h2>

<p>AutoHotkey用vim設定ファイルはGithubの<a href="https://github.com/rcmdnk/vim_ahk">vim_ahk</a>レポジトリに置きました。</p>

<p>ここにある<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim.ahk">vim.ahk</a>
をAutoHotkeyを使って開くか、
もし、すでにAutoHotkeyを使っている場合、
このファイルを使っている設定ファイルのディレクトリに置いて、
設定ファイルの<a href="http://www.autohotkey.com/docs/Scripts.htm#auto">Auto-execute section</a>
(ReturnやHotkeyの設定などが始まる前)に</p>

<pre><code>#Include  %A_ScriptDir%\vim.ahk
</code></pre>

<p>を書いてファイルをインクルードします。(内容をコピペしても良いですが、最初のAuto-execute sectionの部分は分けてファイルの先頭に書いてください。)</p>

<p>また、AutoHotkeyは実行ファイル化の機能があって、AutoHotkey本体をインストールしなくても動かせます。
もし、AutoHotkeyをインストールしないまま試してみたい場合は、
上のレポジトリにある<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim_ahk.exe?raw=true">vim_ahk.exe</a>
をダウンロードして実行してみてください。
これだとAutoHotkeyをインストールしてなくても単独で使えます。</p>

<h2 id="設定">設定</h2>

<p>初期設定では以下のソフト上で有効になっています。</p>

<ul>
<li>Notepad (メモ帳)</li>
<li>Wordpad</li>
<li>TeraPad</li>
<li>Exploler</li>
<li>Thunderbird (only sending window)</li>
<li>Power Point</li>
<li>Word</li>
<li>Evernote</li>
</ul>


<p>vim.ahkの先頭にこれらの設定(<code>GroupAdd</code>)が書いてあります。
Thuderbirdに関しては、class名にするとFirefoxと被ってしまうので、
Windowのタイトルを取って送信Windowのみで有効に成るようになっています。
他のソフトでWindowタイトルが<code>作成:</code>等となるものがあると、そのソフトでも
有効になります。</p>

<p>Windowの調べ方や設定方法は<a href="http://rcmdnk.github.io/blog/2013/07/29/computer-windows-autohotkey/#Windowごとの設定">こちら</a>を参考にしてみてください。</p>

<p>もう一つ<code>vim_verbose</code>の値が初期では2になっていますが、
これはモードが変わったりした時に表示される情報の詳細さを指定して</p>

<ul>
<li>0: 何も表示しない</li>
<li>1: モード名のみ(<code>Vim_Normal</code>, <code>Vim_Visual</code>など)をTask Tray Tipsとして表示</li>
<li>2: リピート回数等の情報もTask Tray Tipsとして表示</li>
<li>3: メッセージボックスも表示</li>
</ul>


<p>注意として、各動き(<code>j</code>で下に下る)などすべてのNormal Modeでの動きの後に
設定の変更があるので、殆の場合にメッセージが表示されます。
従って3は完全デバッグ用です。
Tipsが邪魔な場合は0にして下さい。</p>

<h2 id="使い方">使い方</h2>

<p>Vimの基本的な動きを再現してあります。
基本的に<a href="/blog/2013/03/17/vim/">yamyでやった事</a>と
同じ事が出来ます。</p>

<p>詳細はレポジトリのREADME(<a href="https://github.com/rcmdnk/vim_ahk">vim_ahk</a>)
を参照してください。</p>

<p>AutoHotkeyの方が優れている点としては、リピート回数(38jで38行下がるなど)とかが変数で
定義できるので、yamyの場合は100回が限度にしていましたが、、
今回の場合は上限はありません。(100回以上のリピートは滅多に必要とされないと思いますが...)</p>

<p>気になる点としては、たまにホットキー先で<i class='key'>Ctrl</i>などを使う場合、
そのキーを押し続けてキーリピートを実行させようとすると
たまに<i class='key'>Ctrl</i>+<i class='key'>押したキー</i>の様な信号が送られてしまう点。</p>

<p>例えばNormal Modeで<i class='key'>p</i>は貼り付けですが、貼り付けるために<i class='key'>Ctrl</i>-<i class='key'>v</i>にマップしてあります。
複数貼り付けたい時、<i class='key'>p</i>を押し続けると途中でプリンタが呼び出される(<i class='key'>Ctrl</i>-<i class='key'>p</i>)事がありました。
これを回避するために、この貼り付けについてはリピートが効かないように
なっています。(<i class='key'>p</i>を押し続けても1回しか貼り付けられない。)</p>

<p>他の動きのキーはキーリピートを制限してませんが、おかしな動きをした場合は教えていただけるとありがたいです。</p>

<h2 id="カーソルやマウス、Windowなどを複数修飾キーと共にhjklなどで操作する">カーソルやマウス、Windowなどを複数修飾キーと共にhjklなどで操作する</h2>

<p><a href="/blog/2013/03/17/vim/">yamy</a>や<a href="/blog/2013/06/10/computer-mac-keyremap4macbook-vim/">MacでKeyRemap4macBook</a>
でやった様にカーソルやマウス、Windowsなどをvimっぽい操作で動かす
設定は現在使っている
<a href="https://github.com/rcmdnk/windows/blob/master/AutoHotkey.ahk">Mainファイル</a>
の中に書いてあります。
この中の<code>Cursor, Mouse, Window move/size</code>の項目をコピペするなり参照するなり
してください。</p>

<h2 id="今後の改善点">今後の改善点</h2>

<p>上のキーリピートの問題は1つなんとかしたいところです。
キーを離すのを待つ関数などがあるのですが、色々試しても今のところ上手く出来てません。
このvim設定の場合はそれ程問題が無いのですが、
<i class='key'>Ctrl</i>+<i class='key'>Alt</i>-<i class='key'>j</i>などで直接上下左右に移動するとき、
その時にたまに<code>j</code>などが記入されてしまって困ってるので、
なんとかしたいところです。</p>

<p>もう一つはMacの方でKeyRemap4MacBook+MadRubyで
<a href="/blog/2013/07/08/computer-mac-keyremap4macbook-vim/">マクロっぽい動きを再現</a>
してみましたが、これと同じことをしたいと思ってます。
Windowsにも似たようなソフトはいくつかあるのでそういうのも使っても良いのですが、
AutoHotkey自体が変数を使えたりするので、
なんとか単独出来ないかな、とおもってます。</p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoHotkeyの使い方2]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/29/computer-windows-autohotkey/"/>
    <updated>2013-07-29T20:57:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/29/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>AutoHotkeyの基本的な使い方についてと、
自分が詰まったところについてのメモ。</p>

<p>変数、関数、ウィンドウ毎の設定などについて。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="変数">変数</h1>

<p><a href="/blog/tags/yamy/">yamy</a>やMacの<a href="/blog/tags/keyremap4macbook/">KeyRemap4MacBook</a>
等と大きく違うのが変数を使えることだと思います。
変数に文字列を収納することで、1つの変数で複数の<code>モード</code>を
作れるので管理が簡単になります。</p>

<hr />

<p><i class="icon-warning-sign "></i>
この変数の初期設定について少し注意が必要で、
<code>Auto-execute section</code>と呼ばれる領域でしか
初期値設定できません。
この領域は設定ファイルの先頭から始まり、
<code>Return</code>やキー設定などが出るまでの領域になります<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<hr />

<p>変数には型はなく、数式などでは数値である場合はその時に
数値として解釈されます。
<a href="http://rcmdnk.github.io/blog/2013/07/28/computer-windows-autohotkey/#大文字小文字の区別"> 前回</a>書いたように、
変数でも、変数自体の大文字小文字は区別されません。
(<code>a</code>という変数を作った場合に<code>A</code>でも参照できます。)</p>

<p>値の代入は<code>:=</code>か<code>=</code>で行い、<code>:=</code>の場合には右辺が評価されてから
代入が行われます。</p>

<p>文字列を入れる時は</p>

<pre><code>a := "abc" ;1
a := abc   ;2
a = "abc"  ;3
a = abc    ;4
</code></pre>

<p>とするとそれぞれ</p>

<ol>
<li><code>abc</code></li>
<li>変数abcに入っていた値</li>
<li><code>"abc"</code> (<code>"</code>も含む)</li>
<li><code>abc</code></li>
</ol>


<p>がそれぞれ代入されることになるので1と4が同じ結果になります。</p>

<p>数値の場合は</p>

<pre><code>a := 123
a = 123
</code></pre>

<p>の両方共一緒です。<code>=</code>を使って変数の値を渡すには</p>

<pre><code>a= %abc%
</code></pre>

<p>の様に、変数を<code>%</code>で囲みます。
これは他でも同様で、変数の中身を参照するには(<code>MsgBox</code>で表示させたりするには)
<code>%</code>で囲みます。</p>

<h1 id="関数">関数</h1>

<pre><code>MyFuncion(a="abc",b) {
  Send,a
  MsgBox,b
  Return
}
</code></pre>

<p>関数はこの様な形で書きます。
引数にはデフォルト値を与える事もできます。
この関数を呼ぶには</p>

<pre><code>a::MyFuncion("def","ghi")
</code></pre>

<p>の様な感じで。</p>

<hr />

<p><i class="icon-warning-sign "></i>
関数内で変数を使いたい場合、関数外の値を参照したり
変更を関数外にも反映したい場合は</p>

<pre><code>global a = "abc"
</code></pre>

<p>と各項目でglobalを付けて取り扱うか関数の最初に</p>

<pre><code>c="def"
MyFuncion(a="abc",b) {
  global
  c:=a
  ...
</code></pre>

<p>の様に<code>global</code>を書いておく必要があります。</p>

<hr />

<p>この他に<code>Goto</code>、<code>Gosub</code>と言うコマンドが有ります。</p>

<ul>
<li><code>Goto</code>は、指定したラベルの位置に飛んで処理を続ける</li>
<li><code>Gosub</code>は、指定したラベルの位置に飛んで処理を続け、<code>Return</code>が出たところで元の位置に戻ってくる</li>
</ul>


<p>という処理を行います。</p>

<pre><code>a::
  Goto,label1
  MsgBox,a
  Return
b::
  Gosub,label1
  MsgBox,b
  Return
label1:
  MsgBox,label1
  Return
</code></pre>

<p>とすると、<i class='key'>a</i>を押したときは<code>label1</code>のメッセージボックスが出るだけで、
<i class='key'>b</i>を押すと<code>label1</code>と表示された後、<code>b</code>も表示されます。</p>

<p>従って、<code>Gosub</code>の方は、引数なし関数的な使い方も出来ます。</p>

<h1 id="Windowごとの設定">Windowごとの設定</h1>

<p>Window毎にキー設定を変えるには</p>

<pre><code>#IfWInActive ahk_class Notepad
...
</code></pre>

<p>の様な形で<code>WinActive</code>を使います。
これは</p>

<pre><code>#If WInActive("ahk_class Notepad")
...
</code></pre>

<p>と書くことも出来ます。</p>

<p><code>#If</code>を使うことでそれ以降、その条件下でのみ設定を有効にでき、
<code>WinActive</code>はその後に続くWindowが最前面の時、となります。</p>

<p>指定を解除するには</p>

<pre><code>#IfWInActive
</code></pre>

<p>の様に引数なしで指定するとそれ以降条件無し、に戻ります。</p>

<p>指定出来るのはタイトルか上にあるようなクラス名でこれらは
AutoHotkeyのタスクトレイアイコンを右クリックした際に選べる
<code>Window spy</code>を使って調べます。</p>

<p><img src="/images/post/20130729_WindowSpy.jpg" "" ""></p>

<p>一番上の<code>Window Title &amp; Class</code>に</p>

<ul>
<li>Title: 無題 - メモ帳</li>
<li>Class: ahk_class Notepad</li>
</ul>


<p>が得られます。</p>

<p>複数のWindowを指定したい場合は<code>Group</code>を作る事が出来、</p>

<pre><code>GroupAdd Note, ahk_class Notepad
GroupAdd Note, ahk_class WordPadClass
</code></pre>

<p>の様に<code>GroupAdd</code>を使い<code>Note</code>と言う名前のGroupを作り、</p>

<pre><code>#IfWInActive ahk_group Note
...
</code></pre>

<p>と<code>ahk_group</code>で名前を指定します。</p>

<hr />

<p><i class="icon-warning-sign "></i>
FirefoxとThunderbirdのClassが同じ
<code>ahk_class MozillaWindowClass</code>です。</p>

<p>Firefoxでは<a href="/blog/tags/vimperator/">Vimperator</a>でVimっぽくしていて、
Thunderbirdではメールを書く時にAutoHotkeyでVimっぽくしたいので
割と都合が悪いです。</p>

<p>そこで、タイトルの方を使います。
Thunderbirdのメール作成Windowは</p>

<pre><code>作成:(件名なし)
</code></pre>

<p>の様なタイトル名です。もちろん、<code>件名なし</code>は件名を書いてない状態で、
件名を書き込むと変わります。</p>

<p>ただ、AutoHotkeyでは、一部が一致すれば解釈する様なので、</p>

<pre><code>#IfWinactive 作成:
</code></pre>

<p>の様な形で書いておけばThunderbirdの作成Windowで有効にする設定が出来ます。
おそらく他にも<code>作成:</code>と言ったタイトル名を持つ物はあるので注意が必要です。
(今のところ他に見つけてませんが。)</p>

<hr />

<p>Window以外にも、変数を使った条件なども使え</p>

<pre><code>#If WInActive("ahk_group Notepad") and (a="enable")
</code></pre>

<p>の様にすれば、メモ帳上で、かつ、<code>a</code>の変数に<code>enable</code>が入ってる場合に
有効になります<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<h1 id="分岐">分岐</h1>

<p>各キー設定や関数の中でも<code>if</code>が使えます。</p>

<pre><code>a::
  if WInActive("ahk_group Notepad") {
    Send,b
  }else if (a="enable")
    Send,c
  }else{
    Send,d
  }
  Return
</code></pre>

<p>と言うように<code>else if</code>等も使えます。
(この場合には<code>IfWinactive</code>)</p>

<hr />

<p><i class="icon-warning-sign "></i>
この場合にも<code>IfWinactive</code>が使えますが、
その場合は、<code>{</code>が必ず次の行にくる必要があります<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。</p>

<pre><code>a::
  IfWInActive ahk_group Notepad
  {
     ...
</code></pre>

<p><code>If WInActive("...</code>の場合は同じ行でも次でもOK。</p>

<hr />

<h1 id="Loop">Loop</h1>

<p>繰り返しは</p>

<pre><code>Loop 10 {
  MsgBox,  %A_Index%
  If (A_Index=5){
    break
  }
  Sleep 1000
}
</code></pre>

<p>という様に<code>Loop</code>コマンドではじめ、引数として回数を指定します。</p>

<p>Loopを抜けるためには<code>break</code>、途中でループ処理を中断して戻ってLoopを再開するには<code>continue</code>を使います。</p>

<p>数字が省略された場合は、<code>break</code>で止めるか<code>return</code>などで
その設定/関数自体を終わらせるまで永遠とLoopします。</p>

<p>上の例で使われている<code>A_Index</code>はLoopの回数で
1から増えていきます。</p>

<p>上の例では、1から5までのメッセージを表示します。
最後にある<code>Sleep</code>は引数がミリ秒で、この場合ここで1秒待つことになります。</p>

<h1 id="長押しで違うキー設定に">長押しで違うキー設定に</h1>

<p><code>KeyWait</code>コマンドを使うことで長押しした時に違う命令を送ることが出来ます。</p>

<pre><code>a::
  KeyWait, a, T0.5
  if (ErrorLevel){
    Send,b
    Return
  }
  Send,c
  Return
</code></pre>

<p><code>KeyWait</code>に続き、押されているキー、待つ時間(<code>T</code>に続き<code>秒</code>単位で)を書き、
結果が<code>ErrorLevel</code>に収納されます。
指定時間内に</p>

<p>上の例では<i class='key'>a</i>を押して直ぐに話せば<code>c</code>を、
0.5秒以上押していれば<code>b</code>を送ります<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。</p>

<h1 id="他のファイルの">他のファイルの</h1>

<p>設定ファイルの中で他のファイルを読み込みたい時は<code>include</code>を使い</p>

<pre><code>#Include  %A_ScriptDir%\other.ahk
</code></pre>

<p>とします。
<code>%A_ScriptDir%</code>は、読み込もうとしているファイルの位置です。</p>

<hr />

<p><i class="icon-warning-sign "></i>
この位置に展開される形になるので、
<code>Auto-execute section</code>
について注意して設定する必要があります。</p>

<hr />

<h1 id="Happy+Hacking+Keyboard用設定">Happy Hacking Keyboard用設定</h1>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXZ0VC/rcmdnk0c-22/ref=nosim/">Happy Happy Keyboard</a>
にあるダイヤモンドキー(スペース両隣のキー)の設定:</p>

<pre><code>; For HHK
vkFFsc079::RAlt
vkFFsc07b::LAlt
</code></pre>

<p>など。上の設定では</p>

<ul>
<li>左<i class='key'>&#x25c7;</i><i class="icon-arrow-right"></i>左<i class='key'>Alt</i></li>
<li>右<i class='key'>&#x25c7;</i><i class="icon-arrow-right"></i>右<i class='key'>Alt</i></li>
</ul>


<h1 id="その他参考ページなど">その他参考ページなど</h1>

<ul>
<li><a href="http://www.autohotkey.com/">本家Document</a></li>
<li><a href="http://ahkwiki.net/Top">AutoHotkey Wiki</a></li>
<li><a href="http://ahk.xrea.jp/">AutoHotkeyを流行らせるページ</a></li>
<li><a href="http://www.crystal-creation.com/software/tool/system/auto-hot-key/">AutoHotKeyの使用方法</a></li>
<li><a href="http://www6.atwiki.jp/eamat/pages/17.html">IME制御用 関数群 (IME.ahk)</a></li>
<li><a href="http://d.hatena.ne.jp/Cherenkov/20110222/p1">はてブ拡張のタグ付けを補助するAutoHotkeyスクリプト</a></li>
<li><a href="http://nanabit.net/blog/2008/03/21/putty-clipboard/">PuTTYで複数行ペースト前に警告するAHKスクリプト</a></li>
</ul>


<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://www.autohotkey.com/docs/Scripts.htm#auto">The Top of the Script (the Auto-execute Section)</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="https://sites.google.com/site/agkh6mze/translation/autohotkey_l/if">#If</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://ahk.xrea.jp/commands/__Block.html">{...} (block)</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://ahkwiki.net/SampleCodes#1.E3.81.A4.E3.81.AE.E3.82.AD.E3.83.BC.E3.81.AB3.E7.A8.AE.E9.A1.9E.E4.BB.A5.E4.B8.8A.E3.81.AE.E5.8B.95.E4.BD.9C.E5.89.B2.E3.82.8A.E5.BD.93.E3.81.A6">サンプルコード集:1つのキーに3種類以上の動作割り当て</a>
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoHotkeyの使い方1]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/28/computer-windows-autohotkey/"/>
    <updated>2013-07-28T22:01:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/28/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>AutoHotkeyの基本的な使い方についてと、
自分が詰まったところについてのメモ。</p>

<p>取り敢えず、基本的なキー設定方法等。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="設定ファイル">設定ファイル</h1>

<p>起動するとタスクバーにアイコンが出るので、右クリックから<code>Edit This Script</code>
を選ぶと設定ファイルをメモ帳などで開いて編集できます。
設定ファイルはホームディレクトリ以下の<code>Documents\AutoHotkey.ahk</code>
等になります。</p>

<p>または、別途設定ファイルを作り、AutoHotkeyで開けばそのファイルの設定を
使ってAutoHotkeyを起動します。</p>

<h1 id="キー設定の基本">キー設定の基本</h1>

<p>キーバインドは<code>::</code>を挟んで先に入力キー、右にアウトプットを書きます。
単独のキーバインドの場合は</p>

<pre><code>a::b
</code></pre>

<p>この様に書けば<i class='key'>a</i>を押した時、<i class='key'>b</i>が出力されるようになります。
また、<code>Send</code>コマンドを使って</p>

<pre><code>a::Send,b
</code></pre>

<p>としても同じです。</p>

<hr />

<p><i class="icon-warning-sign "></i>
厳密には<code>Send</code>を使う場合とは一部違うところがあって、
<code>a::b</code>の様な単純な単項キー割り当ては<code>Remap</code><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、
<code>Send</code>や関数などを使ってコマンドを送る場合は<code>Hotkey</code><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>
と呼びます<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。</p>

<p>複数キーを出力したい場合は<code>Send</code>が必要です。</p>

<p>また、</p>

<pre><code>a::b
</code></pre>

<p>と書いた場合、修飾キーがそのまま<code>b</code>に渡される(下にあるワイルドカード状態？)
様になっている様です。</p>

<p>従って、<i class='key'>Shift</i>-<i class='key'>a</i>を押すと大文字の<code>B</code>が出ます。</p>

<p>一方、</p>

<pre><code>a::Send,b
</code></pre>

<p>の場合、<i class='key'>Shift</i>-<i class='key'>a</i>は大文字の<code>A</code>を出力します。</p>

<p>特に意図しない限り、<code>Send</code>で指定しておいた方が安全です。</p>

<p>また、下に書くように、大文字小文字でのケースで動きが違います。</p>

<hr />

<p>コマンドに関しては</p>

<pre><code>a::Send,  b
a::Send b
</code></pre>

<p>の様に<code>,</code>を省略してスペースを入れても、またスペースを余分に入れても
同じです。</p>

<p>複数のキーをアウトプットとして使いたい場合は、
続けて書きます。</p>

<pre><code>a::Send,Hello
</code></pre>

<p>とすれば、<i class='key'>a</i>を押した時<code>Hello</code>と出ます。
<code>Send</code>コマンドは複数に分けて、</p>

<pre><code>a::
  Send,He
  Send,llo
  Return
</code></pre>

<p>と分けても可。</p>

<hr />

<p><i class="icon-warning-sign "></i>
但し、この様に複数行に渡る場合、最後に<code>Return</code>
が必要です。
<code>Return</code>を付けておかないと、次のキー設定も含んでしまいます。
つまり</p>

<pre><code>a::
  Send,b
  Send,c
b::
  Send,d
  Return
</code></pre>

<p>とすると、<i class='key'>b</i>を押せば<code>d</code>が出るだけですが、<i class='key'>a</i>を押すと
<code>bcd</code>が出力されます。</p>

<hr />

<p><i class='key'>Space</i>等は<code>Space</code>、上下左右矢印などは<code>Up</code>/<code>Down</code>/<code>Left</code>/<code>Right</code>などで<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。
これらのキーは<code>Send</code>コマンドで送るときは<code>{Space}</code>
など<code>{}</code>で囲う必要があります。</p>

<h1 id="フック">フック</h1>

<pre><code>a::Send,a
</code></pre>

<p>の様な設定をしてしまうと、出力の<code>a</code>をさらに解釈しようとして、無限ループに陥ってしまうことがあります。
これを避けるためには<code>$</code>を付けて</p>

<pre><code>$a::Send,a
</code></pre>

<p>とすると、<code>a</code>をそのまま<code>a</code>と解釈して<code>a</code>を出力します。また、</p>

<pre><code># UseHook
</code></pre>

<p>を宣言することで、それ以降全て<code>$</code>をつけているのと同じ状態になります<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup><sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>。
敢えて外す必要が無い限り、取り敢えずファイルの先頭で宣言しておくと良いです。</p>

<h1 id="修飾キー、ワイルドカード、パススルー">修飾キー、ワイルドカード、パススルー</h1>

<p>修飾キー(モディファイヤー)の使い方がちょっと特殊で、以下の記号が
割り当てられていて、それらの記号との組み合わせで表現します<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup>。</p>

<ul>
<li>&#35;: win</li>
<li>!: alt</li>
<li>^: ctrl</li>
<li><p>+: shift</p>

<p>  ^a::!b
ならば、<i class='key'>Ctrl</i>-<i class='key'>a</i>を押したら<i class='key'>Alt</i>-<i class='key'>b</i>
を出力します。
これらの記号は複数同時に付ける事が出来ます。</p></li>
<li><p>*: ワイルドカード</p></li>
</ul>


<p>また、特殊な記号として<code>*</code>をキーの前につけると修飾キーの
有り無しに関わらずキーが送られ、</p>

<pre><code>*a::Send,b
</code></pre>

<p>の場合、<i class='key'>Shift</i>や<i class='key'>Ctrl</i>を押している、押していないに関わらず
<code>b</code>が送られます。</p>

<ul>
<li>~: パススルー</li>
</ul>


<p><code>~</code>を使うとそのキー自体はそのまま送られます。</p>

<pre><code>~a::b
</code></pre>

<p>だと、<code>ab</code>と出力されます。</p>

<h1 id="複数キー同時押しに割り当て">複数キー同時押しに割り当て</h1>

<p>上にある修飾キー以外にも、<code>&amp;</code>を使うことで2つのキーを同時に押した時の
動作を設定できます。</p>

<hr />

<p><i class="icon-warning-sign "></i>
<code>&amp;</code>の両側にはスペースが必要です。</p>

<p>また、<code>&amp;</code>を使うときは単純な</p>

<pre><code>a &amp; b::c
</code></pre>

<p>と言った設定は出来ず、</p>

<pre><code>a &amp; b::Send,c
</code></pre>

<p>とする必要があります。</p>

<p>さらに、<code>&amp;</code>を使うときは修飾キーを使えません。</p>

<p><i class='key'>Ctrl</i>-<i class='key'>Shift</i>-<i class='key'>a</i>を設定したいとき、</p>

<pre><code>^+a::... OK
Ctrl &amp; Shift &amp; a::... No
Ctrl &amp; +a::... No
</code></pre>

<hr />

<hr />

<p><i class="icon-warning-sign "></i>
<i class='key'>Tab</i>がちょっと思った通りに働かず、
修飾キーを2つ付けられません。</p>

<pre><code>!+Tab::a
</code></pre>

<p>とした場合は<i class='key'>Alt</i>-<i class='key'>Shift</i>-<i class='key'>Tab</i>では何も送信されません。</p>

<pre><code>Alt &amp; Tab::
  If GetKeyState("Shift", "P"){
    Send,a
  }else
    Send,b
  }
  Return
</code></pre>

<p>とした場合は、<i class='key'>Alt</i>-<i class='key'>Tab</i>で<code>b</code>が送られますが、
<i class='key'>Alt</i>-<i class='key'>Shift</i>-<i class='key'>Tab</i>では何も送られません。</p>

<hr />

<p>3つの同時押しは<code>&amp;</code>では出来ませんが、<code>GetKeyState</code>を使うことで設定出来ます。
<code>GetKeyState</code>は</p>

<pre><code>if GetKeyState("b","P")
  ...
</code></pre>

<p>等とすると<code>b</code>を押してある時、になるので他のキーとの同時押しの様に使えます。</p>

<p>ただし、以下のキー設定は全て違う部分があります。</p>

<pre><code>;1,
a &amp; b::...
;2,
b &amp; a::...
;3,
a::
  if GetKeyState("b", "P"){
    ...
;4,
b::
  if GetKeyState("a", "P"){
    ...
</code></pre>

<p>それぞれ、実際には<code>同時押し</code>ではなく、それぞれ、</p>

<ol>
<li>a</li>
<li>b</li>
<li>b</li>
<li>a</li>
</ol>


<p>が先に押されている必要があります。
1の場合は<i class='key'>b</i>が押された状態で<i class='key'>a</i>が押されると<code>b</code>そのものが出ます。
3の場合には<i class='key'>a</i>自体にキー設定をしているので、<i class='key'>b</i>が押されて居ない
場合を設定する必要が有ります。</p>

<pre><code>a::
  if GetKeyState("b","P"){
    Send,c
  }else{
    Send,a
  }
  Return
</code></pre>

<p>この様にして、<i class='key'>b</i>が押されていれば<code>c</code>、そうでなければ<code>a</code>そのものを返す、
等。</p>

<p><code>GetKeyState</code>を使うことで、キーボードとOSがサポートする範囲で同時押しを
いくつでも設定出来ます。</p>

<h1 id="設定重複">設定重複</h1>

<p>AutoHotkeyでは、同じ条件下で同じキー設定があると<code>Duplication hotkey</code>エラーが出ます。
修飾キーが違ってたり同時押し設定などであればOK。</p>

<p>従って、</p>

<pre><code>a::c
a &amp; b::d
</code></pre>

<p>このような設定は可能ですが、この場合、
<i class='key'>a</i>だけを押すと、<code>ac</code>が出ます。
設定順序が逆でも同じ。</p>

<p>また、ウィンドウ等、条件によって設定を使い分けることが出来ますが、</p>

<pre><code>#If ; Without any condition
a::b
#If A
a::c
</code></pre>

<p>の様な設定があった場合、<code>A</code>の条件下では<code>c</code>、その他では<code>b</code>が出ます。
これは順序を変更しても同じ。</p>

<p>この様に、片方が条件無し、だと<code>A</code>の条件下かどうかで順序に関係なく設定されます。</p>

<p>それ以外の場合で2つの条件が両方共とりうる場合、先に設定された方が優先されます。</p>

<pre><code>#If A
a::b
#If A and B
a::d
#If B
a::c
</code></pre>

<p>この場合、<code>A</code>の条件下では<code>b</code>、<code>B</code>単独、もしくは<code>A</code>と<code>B</code>両方が有効な場合
<code>d</code>が出て、
最後の<code>B</code>単独の条件は無視されます。
これは、<code>GetKeyState</code>を使った同時押しなどの場合も同じで<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup>、
基本的に先に設定されたものが優先されます。</p>

<h1 id="コメント">コメント</h1>

<p>コメントは各行で、<code>;</code>以降がコメントになります。
<code>;</code>を使いたいときは
<code>`</code>
がエスケープ文字なので、
これを付けて、</p>

<pre><code>`;::a
</code></pre>

<p>等とエスケープする必要があります。</p>

<h1 id="大文字小文字の区別">大文字小文字の区別</h1>

<p>設定項目で、基本的に大文字、小文字は区別されないようです。</p>

<p><code>Send</code>等も<code>send</code>でOK。
また、<i class='key'>Alt</i>を使いたい時も<code>Alt</code>でも<code>alt</code>でも、さらに<code>alT</code>などでも問題無いです。</p>

<p>また、変数や関数名も基本的にはどちらでも良いようです。</p>

<p>キー設定で</p>

<pre><code>A::c
B::Send,d
</code></pre>

<p>とすると<i class='key'>Shift</i>-<i class='key'>a</i>を押した時大文字で<code>c</code>が出ます。
また、この設定だけすると、<i class='key'>a</i>単独で押した場合が無効になります。</p>

<p>一方、<i class='key'>b</i>を押した場合、<code>d</code>が出力され、
<i class='key'>Shift</i>-<i class='key'>b</i>の場合には大文字の<code>B</code>が出力されます。
つまり、小文字の<code>b</code>で指定した場合と同じ働きになります。</p>

<pre><code>a::b
A::c
</code></pre>

<p>のようにすると、小文字指定だけが有効化され、
<i class='key'>a</i>で<code>b</code>、<i class='key'>Shift</i>-<i class='key'>a</i>で大文字<code>B</code>が出力されます。</p>

<p>一方、</p>

<pre><code>a::Send,b
A::Send,c
</code></pre>

<p>と言った指定は、<code>Duplication hotkey</code>エラーが出ます</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://ahk.xrea.jp/remap.html">Remap</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://ahk.xrea.jp/Hotkeys.html">Hotkey</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="https://sites.google.com/site/agkh6mze/howto/key_config">キー定義に関する件</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://ahk.xrea.jp/KeyList.html">キー/マウスボタン名一覧</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="http://autohotkey.blog.fc2.com/blog-entry-60.html">｢hotkeys have been received in the last ms.｣の原因と解決法</a>
  <a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p><a href="http://ahk.xrea.jp/commands/_UseHook.html">#UseHook</a>
  <a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p><a href="http://ahk.xrea.jp/Hotkeys.html">Hotkeys</a>
  <a href='#fnref:7' rev='footnote'>↩</a></p>
</li><li id='fn:8'><p><a href="http://did2.blog64.fc2.com/blog-entry-371.html">AutoHotkeyにおけるラベルの優先度と3キー同時押しの定義</a>
<a href='#fnref:8' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoHotkeyのインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/24/computer-windows-autohotkey/"/>
    <updated>2013-07-24T22:01:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/24/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>ちょっと前に<a href="/blog/2013/06/14/computer-windows-mac-bash/">Alt(Cmd)とControlの交換</a>をしてみましたが、
Windowsでは<a href="/blog/tags/yamy/">yamy</a>での変更が少し思い通りに
行かない所があって、他を検討していました。</p>

<p>結局、おそらく一番使われてるであろうAutoHotkeyに落ち着いて、
ちょっと使ってみたらかなり色々な事ができて予想以上でした。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="AutoHotkeyとAutoHotkey_L">AutoHotkeyとAutoHotkey_L</h1>

<p>現在、<a href="http://www.autohotkey.com/">AutoHotkey</a>のページの
<code>Download</code>からダウンロード出来るものは<code>AutoHotkey_L</code>となってます。
<code>AutoHotkey_L</code>は<code>AutoHotkey</code>の派生版みたいなものらしく、
マルチバイト文字に対応していたりするようです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p>さらに、<code>AutoHotkey_L</code>をインストールする時に、<code>ANSI</code>版か<code>Unicode</code>版かを
聞かれますが、<code>ANSI</code>版の方が以前の<code>AutoHotkey</code>との互換性が高い一方、
日本語の取り扱いはUnicodeの方が便利そう。</p>

<p>自分的には以前のAutoHotkeyも使っていないし
現状日本語使っていないのでどちらでも良いのですが、
取り敢えずUnicode版を入れてあります<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。</p>

<h1 id="CapsLockの扱い">CapsLockの扱い</h1>

<p>CpasLockについては色々上手くいかない部分があるらしく、
特に日本語OSの場合に問題が起こる様です<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。
英語キーボードならOK、と言う記述も有りましたが、使っている
英語キーボードでも駄目でした。</p>

<pre><code>CapsLock::Ctrl
</code></pre>

<p>等とすると例えば</p>

<pre><code>^h::BS
</code></pre>

<p>などとして<i class='key'>Ctrl</i>-<i class='key'>h</i>で一文字削除をどこでも出来る様にすると、
1回押す分にはちゃんと働いている様に見えますが、押し続けて
キーリピート状態になると<code>h</code>が打たれてしまいます。</p>

<p>さらに、暫く使っていると<i class='key'>Ctrl</i>が押しっぱなしになっている様な状態に
なることがありました。</p>

<p>そこで、CpsLockも含め修飾キー関連は<a href="http://www.asahi-net.or.jp/~ee7k-nsd/">KeySwap</a>
を使いました。
このソフトはレジストリーを書き換えてキー入力を変更します(設定の反映に再起動が必要)。</p>

<p>yamyだと、これより上流で変更を行っているらしく、KeySwapで変更したものは
yamy起動後には反映されません。</p>

<p>これがAutoHotKeyだとyamyより下流で変更を行っているらしく
KeySwap(レジストリー変更)の設定が反映された上でキー設定が出来ます。</p>

<p>yamyとAutoHotKeyは大体同じレベルでの変更を行っているみたいですが<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>微妙に違うみたいです。</p>

<p>ということで、KeySwapで</p>

<ul>
<li><i class='key'>CapsLock</i><i class="icon-arrow-right"></i>左<i class='key'>Alt</i></li>
<li>左<i class='key'>Alt</i><i class="icon-arrow-right"></i>左<i class='key'>Ctrl</i></li>
<li>右<i class='key'>Alt</i><i class="icon-arrow-right"></i>右<i class='key'>Ctrl</i></li>
<li>右<i class='key'>Ctrl</i><i class="icon-arrow-right"></i>右<i class='key'>Alt</i></li>
</ul>


<p>の変更をした上でAutoHotkeyで色々することにしました。</p>

<h1 id="yamyの時に起こっていた問題点">yamyの時に起こっていた問題点</h1>

<p>以前書いた
<a href="http://rcmdnk.github.io/blog/2013/06/14/computer-windows-mac-bash/#問題点">問題点</a>
の様に、<i class='key'>Control</i>-<i class='key'>[</i>や<i class='key'>Control</i>-<i class='key'>h</i>
での問題はKeySwap+AutoHotkeyでは起こっていません。
<i class='key'>Alt</i>を<i class='key'>Ctrl</i>としてきちんと使えています。
(レジストリーの変更をしてるのである意味当たり前ですが。)</p>

<h1 id="yamyとAutoHotkeyの比較">yamyとAutoHotkeyの比較</h1>

<p>基本的にyamyで行う設定は上記のCapsLockや修飾キー以外は
すべて移行出来ました。</p>

<p>AutoHotkeyの方が
変数や関数を使うことが出来、
よりプログラムチックに書くことが出来ます。
yamyの場合だと、vimモード的な物を
<code>On</code>/<code>Off</code>の変更が出来る<code>ロックキー</code>と呼ばれる9つのキー(L0-L9)で
再現してましたが、
AutoHotkeyだと例えば<code>VimMode</code>的な変数1つを用意しておけば
この値に<code>Normal</code>などと与えることで複数の状態を簡単に
作る事が出来ます。</p>

<p>また、Windows機能へのアクセスもより自由にできるので、
ディスプレイのサイズやマウスの位置なども取得出来るし、さらにタスクトレイへのポップアップ表示等も出来ます。</p>

<p>後は何と言ってもまだ開発が行われている(？)ソフトで、
日本限定ソフトで無いので圧倒的に利用者が多く
webで拾える情報も非常に多いです。</p>

<h1 id="他のソフト">他のソフト</h1>

<p>他にもPythonベースな
<a href="https://sites.google.com/site/craftware/keyhac">keyhac</a>
と言うものも試しましたが、
キー設定の方法はPython記法なのでなかなかおもしろいのですが、
モード的な状態設定の方法が分からず、断念しました。</p>

<h1 id="まとめ">まとめ</h1>

<p>しばらくはKeySwap+AutoHotkeyで行こうと思います。
いくつかハマった点とかもあるので、
後日別にまとめておきたいと思います。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://qiita.com/rohinomiya/items/b80707de5e8e0d0f840c">AutoHotKey(Basic)とAutoHotKey_Lの違い</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="https://sites.google.com/site/autohotkeyjp/reference/AutoHotkey_L">AutoHotkeyJp:  AutoHotkey_L</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="https://sites.google.com/site/autohotkeyjp/reference/AutoHotkey_L/Intro">AutoHotkeyJp:  AutoHotkey_L: イントロダクション</a>
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://d.hatena.ne.jp/LM-7/20090614/1244980470">AutoHotkeyJp:  既知の不具合</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="http://d.hatena.ne.jp/LM-7/20090614/1244980470"> Vista/Windows 7におけるキーボードカスタマイズ問題</a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
