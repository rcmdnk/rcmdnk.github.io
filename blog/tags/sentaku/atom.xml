<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: sentaku | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/sentaku/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-14T00:23:49+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub Actionsを使ってsentakuのシェルスクリプトに対するテストの実装]]></title>
    <link href="https://rcmdnk.com/blog/2019/10/15/computer-github-bash-zsh-sentaku/"/>
    <updated>2019-10-15T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/10/15/computer-github-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<p>GitHub Actionsを使っていきたいのでまだテストをきちんと作っていない
<a href="https://github.com/rcmdnk/sentaku">sentaku</a>のテストを追加しました。</p>

<p>まだ取り敢えず、の状態ですがGitHub Actionsを使っていくスタートとして。</p>

<p>シェルスクリプトなのでbatsを使っています。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#sentaku" id="markdown-toc-sentaku">sentaku</a></li>
  <li><a href="#bats" id="markdown-toc-bats">bats</a></li>
  <li><a href="#github-actions" id="markdown-toc-github-actions">GitHub Actions</a></li>
  <li><a href="#設定" id="markdown-toc-設定">設定</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="sentaku">sentaku</h2>

<p>対話的に入力項目の中から選択が出来るシェルスクリプト製のツール。</p>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2014/01/24/computer-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/20140124_sentaku.gif" width="120" height="90" alt="20140124_sentaku" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/01/24/computer-bash-zsh/">シェルスクリプトで対話的な選択を出来るようにするスクリプトを作った:sentaku</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/20190930_sentakucontentview.gif" width="120" height="90" alt="20190930_sentakucontentview" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku/">sentakuでファイルの中身を選択中に表示する</a></div></li></ul>

<h2 id="bats">bats</h2>

<p>シェルスクリプトのテストツールとして恐らく一番有名なツール。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B0002J57FM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B0002J57FM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51XWTT0N0XL._SS90_CR0,0,120,90_.jpg" alt="BATS~蝙蝠地獄~ コレクターズ・エディション [DVD]" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/10/11/computer-github-bash/">Batsを使ったシェルスクリプトのテスト</a></div></li></ul>

<h2 id="github-actions">GitHub Actions</h2>

<p>まだベータ版ですが申し込むと順次使える様になります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190819_githubactions1_120_90.jpg" width="120" height="90" alt="20190819_githubactions1_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/08/19/computer-git-github/">GitHubで新しいActionsが使えるようになっていたのでCI/CDをやってみた</a></div></li></ul>

<p>新しくなってYAML形式のファイルをレポジトリの<strong>.github/workflows/</strong>の中に入れておくと
条件に応じてActionsが実行されます。</p>

<p>今のところまだベータ版ということもありますが非常にさくさく動いてくれます。</p>

<p>GitHub純正の連携なので、push後の動作はTravis CIなどに比べても早いということのがあると思います。</p>

<h2 id="設定">設定</h2>

<p>レポジトリに<strong>.github/workflows/</strong>というディレクトリを作りそこにActionを定義したYAMLファイルを置くと
それに応じてGitHub側でActionを起こしてくれます。</p>

<p>今回は以下の様なファイルを用意:</p>

<figure class="code"><figcaption><span>sentaku/.github/workflows/test.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">CI</span>
</span><span class="line">
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">on</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">push</span><span class="p p-Indicator">]</span>
</span><span class="line">
</span><span class="line"><span class="l l-Scalar l-Scalar-Plain">jobs</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="l l-Scalar l-Scalar-Plain">function_test</span><span class="p p-Indicator">:</span>
</span><span class="line">
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">runs-on</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">ubuntu-latest</span>
</span><span class="line">
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">steps</span><span class="p p-Indicator">:</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">uses</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">actions/checkout@v1</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">sudo apt install bats</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">cd tests &amp;&amp; ./get_bats_libs.sh</span>
</span><span class="line">    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">run</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">|</span>
</span><span class="line">        <span class="no">export PATH=$PWD/bin:$PATH</span>
</span><span class="line">        <span class="no">export TERM=dumb</span>
</span><span class="line">        <span class="no">./tests/function_check.bats</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>push</code>されたときにUbuntuの環境を用意して、レポジトリを取ってきて<code>bats</code>をインストール、
必要なライブラリ(bats-assert, bats-support)も取ってきて(<a href="https://github.com/rcmdnk/sentaku/blob/6378b384769320f7b645173530ce82fba82459ce/tests/get_bats_libs.sh">get_bats_libs.sh</a>)
テストスクリプト
(<a href="https://github.com/rcmdnk/sentaku/blob/6378b384769320f7b645173530ce82fba82459ce/tests/function_check.bats">function_check.bats</a>)
を実行、といった感じです。</p>

<p>各部分の説明については
<a href="https://rcmdnk.com/blog/2019/10/11/computer-github-bash/">前回のポストを</a>参照。</p>

<p>テストスクリプトは取り敢えず全部関数を並べて簡単に出来るものだけテストを入れただけです。</p>

<p>インタラクティブツールなのでちょっとどこまでテストできるかと言うのが難しい。</p>

<p>あと、ちょっと面倒だったのがsentakuの中では<code>tput</code>とかを利用してターミナルの幅(<code>tput cols</code>)の情報を得たり
カーソルを移動させたりしているわけですが、
こういったテストではターミナルが定義されてないのでそこで</p>

<pre><code>tput: No value for $TERM and no -T specified
</code></pre>

<p>といったエラーが出ます。</p>

<p>とりあえずこれを抑えるためには適当な定義として</p>

<pre><code>export TERM=dumb
</code></pre>

<p>と、ダミーの端末
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
を与えことで<code>tput cols</code>とかに関してはエラーを回避できます。</p>

<p>ただ、これでも完全には回避できなくて、</p>

<pre><code>tput cnorm &gt;/dev/tty 2&gt;/dev/null || tput vs &gt;/dev/tty 2&gt;/dev/null
</code></pre>

<p>という一度隠したカーソルをもう一度表示するコマンドのところで</p>

<pre><code> sentaku: line 285: /dev/tty: No such device or address
</code></pre>

<p>というエラーが出てしまいます。</p>

<p>ちょっとこの辺は面倒なのでとりあえずテストを飛ばしています。</p>

<p>pushするとこんな感じで結果が見れます:</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/sentaku/commit/fbb6c432d2f3d0dc85ef66dc3b71045896282b93/checks?check_suite_id=264975133">Merge branch ‘bats’ · rcmdnk/sentaku@fbb6c43</a></p>
</blockquote>

<h2 id="まとめ">まとめ</h2>

<p>GitHub Actionsを使ったテストを作ってみました。</p>

<p>他のレポジトリでも今後はGitHub Actions中心で良いかな、という感じがします。</p>

<p>sentakuのテスト自身に関しては細かい部分のテストはまだしも、
インタラクテ思った以上に難しそう。。。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentakuでファイルの中身を選択中に表示する]]></title>
    <link href="https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku/"/>
    <updated>2019-09-30T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/09/30/computer-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rcmdnk/sentaku/">sentaku</a>
で<code>ls</code>などでファイル一覧を渡して選ぶ時に
現在カーソルがある行のファイルの中身を見れるようにしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#sentaku" id="markdown-toc-sentaku">sentaku</a></li>
  <li><a href="#ファイルの中身を常に表示する" id="markdown-toc-ファイルの中身を常に表示する">ファイルの中身を常に表示する</a></li>
  <li><a href="#sによる内容表示" id="markdown-toc-sによる内容表示"><code>s</code>による内容表示</a></li>
  <li><a href="#表示内容を変更する" id="markdown-toc-表示内容を変更する">表示内容を変更する</a></li>
  <li><a href="#他のツールでの状況" id="markdown-toc-他のツールでの状況">他のツールでの状況</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="sentaku">sentaku</h2>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<p>シェルスクリプトで作った対話的な選択ができるツールです。</p>

<p>pecoだとかfzfと言ったツールと似たような事が出来ます。</p>

<div class="github-widget" data-repo="peco/peco"></div>

<div class="github-widget" data-repo="junegunn/fzf"></div>

<p>sentakuのデフォルトは一覧を表示してVimっぽく<code>j</code>や<code>k</code>などで上下選択する様になっています。</p>

<p>pecoやfzfっぽくしたい場合は<code>sentaku -E</code>としてemacsモードで立ち上げると
<code>C-n</code>/<code>C-p</code>で上下選択すると同時に、適当なキーを打てばそれで絞り込み検索が出来るので
pecoやfzfっぽくなります。</p>

<p>シェルスクリプトなのでちょっともっさり感は出てしまいますが、
中にある関数を直接流用して対話的な選択ができるツールの拡張が
簡単に?できる様にしてある点が特徴です。
その辺はほとんど使われてないとは思いますが。。。</p>

<h2 id="ファイルの中身を常に表示する">ファイルの中身を常に表示する</h2>

<p>今回新たに以下の様なオプションを加えました。</p>

<pre><code>-C         Show the file content at the list view
-R         Show the file content in the right (default: right)
-U         Show the file content under the list (default: right)
-L         Number of lines to show the file content under the list (default: 10)
-S         Show the file content of the colleslponding line at s
           instead of full line of the selected one
</code></pre>

<p><code>-U</code>は以前は選択行をハイライトする代わりにアンダーラインを引く、
というためのオプションでしたが上みたいに揃えるために<code>-U</code>は上で使って
元々あったアンダーライン用オプションは<code>-u</code>にしました。
(なぜ元々大文字を使っていたのか思い出せない。。。)</p>

<pre><code>-u         Use underline to show selected line, instead of highlighting.
</code></pre>

<p>このうち<code>-C</code>/<code>-R</code>/<code>-U</code>を使うとファイルを選択項目としてリストしている時
選択行がファイルの場合に右側や下側にその内容を表示できる様になります。</p>

<p><img src="https://rcmdnk.com/images/post/20190930_sentakucontentview.gif" alt="20190930_sentakucontentview.gif" class="pic" /></p>

<p>こんな感じ。</p>

<p>デフォルトが右側表示なので何も設定してなければ<code>-C</code>と<code>-R</code>は同じです。</p>

<pre><code>export SENTAKU_CONTENT_SHOW_UNDER=1
</code></pre>

<p>の様に環境変数を設定しておくとデフォルト表示が下側表示でになって<code>-C</code>と<code>-U</code>が同じ動作になります。</p>

<p><code>-L</code>は下側に表示する時に内容表示に使う行数です。
デフォルトは10で<code>-L</code>で変更できる他、</p>

<pre><code>export SENTAKU_CONTENT_LINES=20
</code></pre>

<p>という環境変数の設定でも変更可能です。</p>

<p>下側表示の場合には十分なスペースが確保出来ない場合には表示されません。
なのであまり<code>-L</code>や<code>SENTAKU_CONTENT_LINES</code>で大きな数字を指定してしまうと
表示されない様になってしまうので気をつけてください。</p>

<p>ちなみに中身を表示できるものはテキストファイルのみです。</p>

<p>チェックは<code>file &lt;file&gt;|grep -q text</code>で行っています。</p>

<h2 id="sによる内容表示"><code>s</code>による内容表示</h2>

<p>もともと選択画面で<code>s</code>を押すとその行の文字列を表示する、という機能がありました。</p>

<p>これは長いファイル名だったり文章を選択する際に
画面に収まる様に切って表示しているので、そういったものの全部を確認するための機能です。</p>

<p>この<code>s</code>を押した際に、文字列を表示する代わりにテキストファイル出あった場合には
中身を<code>${VISUAL:-less}</code>で開いて確認できるようになります。</p>

<p>上のgifではVISUALがvimに設定されてるのでvimで開いています。
閉じれば元の選択画面に戻ります。</p>

<h2 id="表示内容を変更する">表示内容を変更する</h2>

<p>選択中に表示するものも<code>s</code>で表示するものも<code>_sf_get_content</code>という関数で取得しています。</p>

<figure class="code"><figcaption><span>sentaku </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>_sf_get_content <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="k">if</span> ! file <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">|</span>grep -q text<span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;Not a text file&quot;</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    cat <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じ。</p>

<p>なのでこれを変更してやると該当する行のものに対する好きな情報を表示させることも出来ます。</p>

<p>例えば、<code>ls -l</code>の内容を表示させたいのであれば</p>

<figure class="code"><figcaption><span>file_detail </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span><span class="ch">#!/usr/bin/env bash</span>
</span><span class="line">
</span><span class="line">. sentaku -n
</span><span class="line">
</span><span class="line">_sf_get_content <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  ls -l <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">ls <span class="p">|</span> _sf_main -U -L <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいなスクリプトを作って</p>

<pre><code>$ ./file_detail
</code></pre>

<p>と実行すれば現在いるディレクトリのファイル一覧を表示して、
カーソル下のファイルの<code>ls -l</code>の結果を一番下に表示するようなツールが作れます。</p>

<p>もしくは<strong>.bashrc</strong>などで</p>

<figure class="code"><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>file_detail <span class="o">()</span> <span class="o">{</span>
</span><span class="line">  <span class="o">(</span>
</span><span class="line">    . sentaku -n
</span><span class="line">
</span><span class="line">    _sf_get_content <span class="o">()</span> <span class="o">{</span>
</span><span class="line">        ls -l <span class="s2">&quot;</span><span class="si">${</span><span class="nv">_s_inputs</span><span class="p">[</span><span class="nv">$_s_current_n</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">
</span><span class="line">    ls <span class="p">|</span> _sf_main -U -L <span class="m">1</span>
</span><span class="line">  <span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>の様に関数として定義したほうが便利かもしれません。</p>

<p><code>. sentaku -n</code>で関数を読み込んでロードするので、
現環境を汚さないために<code>()</code>で囲ってサブシェルの中で実行する様にしています。</p>

<h2 id="他のツールでの状況">他のツールでの状況</h2>

<p>元々これをちゃんとsentakuに入れようと思ったのは以下のエントリーを見てから。</p>

<blockquote>
  <p><a href="https://petitviolet.hatenablog.com/entry/20190708/1562544000">fzfで快適なターミナルライフ - petitviolet_blog</a></p>
</blockquote>

<p>fzfだと<code>--preview</code>というオプションにコマンドを指定すると
そのコマンドを選択中の行に対して適用して結果を表示する、というもの。</p>

<p>実はこの様な機能はsentaku自身には入ってませんでしたが、
拡張例として<code>file_selector</code>というスクリプトで似たようなことができる様にしていました。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/sentaku/blob/master/bin/file_selector">sentaku/file_selector at master · rcmdnk/sentaku</a></p>
</blockquote>

<p>また、<code>s</code>による内容確認の変更は
ゴミ箱ツールのtrashの中でも行っていて、
これだとファイルの中身や削除した日、元々の場所、現在の実体の位置、
などが表示される様になっています。</p>

<div class="github-widget" data-repo="rcmdnk/trash"></div>

<p>このゴミ箱ツールもシェルスクリプトで、LinuxでもMacでもどこでも動くので便利です(宣伝)。</p>

<p>というわけで、fzfにpreview機能があってpecoより便利だよ、という話があったので
sentakuもできるよ、ということにしたかったので本体の方に組み込んでみました。</p>

<p>fzfの<code>--preview</code>オプションの様に表示の内容を変更したい場合には
上の例の様にスクリプトや関数を作って使って貰えればsentakuでも同じ様な設定が出来ます。</p>

<h2 id="まとめ">まとめ</h2>

<p>sentakuでファイルの中身を確認しながら選択できる機能を追加しました。</p>

<p>関数などを作って確認する内容を自分で設定することも可能です。</p>

<p>sentakuに関してはシェルスクリプトで作る、ということにこだわってやっていくので、
もし何か別の面白そうな機能などがありましたら
<a href="https://github.com/rcmdnk/sentaku/issues">Issues</a>
とかで提案していただけたら嬉しいです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルスクリプトで文字列のハイライトをsedで削除する]]></title>
    <link href="https://rcmdnk.com/blog/2016/05/29/computer-bash-zsh-sentaku/"/>
    <updated>2016-05-29T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2016/05/29/computer-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4767814200?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4767814200&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/512NEeUQRdL._SS200_.jpg" alt="図解ですべてわかる 世界の装飾デザイン見本帳" /></a>
</div>

<p><a href="https://github.com/rcmdnk/sentaku">sentaku</a>
というシェルスクリプトのツールをアップデートしている時に、
文字列のハイライト部分を変換したいことがあったのでそのメモ。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#シェルスクリプトでの文字列の装飾" id="markdown-toc-シェルスクリプトでの文字列の装飾">シェルスクリプトでの文字列の装飾</a></li>
  <li><a href="#sedで削除する" id="markdown-toc-sedで削除する">sedで削除する</a></li>
  <li><a href="#sentaku" id="markdown-toc-sentaku">sentaku</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="シェルスクリプトでの文字列の装飾">シェルスクリプトでの文字列の装飾</h2>

<p><code>printf</code>のコマンドで文字列を出力する際、</p>

<pre><code>printf "\e[7maaa\e[m"
</code></pre>

<p>とすると、<code>aaa</code>をバックグランドと文字色を反転させて表示させる事が出来ます。
(文字列はクォートで囲う必要あり。)</p>

<p>ここで最初の<code>\e</code>はエスケープで<code>[</code>と<code>m</code>で挟まれた<code>7</code>の数字がこの反転を指定しています。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">N</th>
      <th style="text-align: left">表示</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">0</td>
      <td style="text-align: left">デフォルト</td>
    </tr>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: left">太字(Bold)、または強調表示</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: left">薄く表示、もしくはsecond colorの指定があればそれ</td>
    </tr>
    <tr>
      <td style="text-align: right">3</td>
      <td style="text-align: left">イタリック</td>
    </tr>
    <tr>
      <td style="text-align: right">4</td>
      <td style="text-align: left">アンダーライン</td>
    </tr>
    <tr>
      <td style="text-align: right">5</td>
      <td style="text-align: left">ゆっくり点滅 (&lt;150/分)</td>
    </tr>
    <tr>
      <td style="text-align: right">6</td>
      <td style="text-align: left">素早く点滅 (%gt;150/分)</td>
    </tr>
    <tr>
      <td style="text-align: right">7</td>
      <td style="text-align: left">反転表示(negative image)</td>
    </tr>
    <tr>
      <td style="text-align: right">8</td>
      <td style="text-align: left">非表示(パスワードなどを隠すのに使える)</td>
    </tr>
    <tr>
      <td style="text-align: right">9</td>
      <td style="text-align: left">取り消し線</td>
    </tr>
  </tbody>
</table>

<p>などがあります。また、
30-37を使うとそれぞれ、黒、赤、緑、黄色、青、赤紫、青緑、白の文字色にでき、
40-47を使うと背景色をそれらの色に出来ます。</p>

<p>複数使うときは<code>;</code>でつなげて</p>

<pre><code>printf "\e[1;31;42maaa\e[m"
</code></pre>

<p>とすれば太字で、背景緑、文字色赤に出来ます。</p>

<p>また、</p>

<pre><code>printf "\e[38;05;121maaa\e[m"
</code></pre>

<p>の様に、<code>38;05;</code>を指定すると、その後に256色に割り当てられた番号を指定できます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2013/09/05/computer-cygwin-putty-vim/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20130905_cygwin_120_90.png" width="120" height="90" alt="20130905_cygwin_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/09/05/computer-cygwin-putty-vim/">Cygwin+screenで256 colorを有効にする</a></div></li></ul>

<div class="github-widget" data-repo="rcmdnk/escape_sequence"></div>

<p>最後にリセットするために<code>\e[m</code>(番号指定なし)を入れてあります。</p>

<p>また、<code>\e</code>の部分はエスケープを表していますが、これは
<code>\033</code>(8進法)または<code>\x1B</code>(16進法)でもOK。</p>

<p>また<i class="key">Ctrl</i>-<i class="key">V</i> <i class="key">Esc</i>を押すことでエスケープキーを挿入して
代わりに使うことも出来ます。(表示上は<code>^[</code>となります。これを直接打ってもダメ。)</p>

<h2 id="sedで削除する">sedで削除する</h2>

<p>削除するには以下の様な感じ:</p>

<pre><code>printf "\e[31maaa\e[m"|sed "s/^[\[[0-9;]*m//g"
</code></pre>

<p>後ろの<code>^[</code>で始まって<code>m</code>で終わる文字列で中に数字か<code>;</code>が入っている部分を削除しています。</p>

<p><i class="key">Ctrl</i>-<i class="key">V</i> <i class="key">Esc</i>で入力しています。
(上のを直接コピペしても上手くいきません。)</p>

<p>出力の際に<code>\e</code>とかでも<code>printf</code>で出力した時点でエスケープ文字となるので
エスケープ文字で直接。</p>

<p><code>[</code>は返還前の所ではエスケープする必要があります。</p>

<div class="postscript">
  <p><strong>追記: 2016/05/29 </strong></p>

  <p>通常、ハイライトを付けるときは、<code>\e[7m</code>みたいな最後が<code>m</code>で終わる形になっていますが、
<code>grep</code>で色を付けて</p>

  <pre><code>printf "a" | grep --color=always -i "a" &gt; log
</code></pre>

  <p>これで<code>log</code>のなかを見ると</p>

  <pre><code>^[[01;31m^[[Ka^[[m^[[K
</code></pre>

  <p>こんな感じで<code>\e[K</code>が各ハイライトの文字列に追加されて付いています。</p>

  <p>ちょっと調べてみてもパッとこの<code>K</code>のオプションが良くわからなかったのですが、
取り敢えずあってもなくてもちょっとやってみた感じでは同じでした。</p>

  <p>これがちょっと問題になるのが、</p>

  <pre><code>$ x=$(printf "a" | grep --color=always -i "a")
$ echo ${#x}
18
$ y=$(printf "$x"|sed "s/^[\[[0-9;]*m//g")
$ echo ${#y}
4
</code></pre>

  <p>みたいにしてハイライト部分を覗いた実際の文字列の数を数えたい時、
このままだと<code>K</code>の部分が邪魔して間違った答えが出ます。
(<code>a</code>だけなので1になってほしい。)</p>

  <p>なのでそれも除いて</p>

  <pre><code>$ z=$(printf "$x"|sed "s/^[\[[0-9;]*m//g"|sed "s/^[\[K//g")
$ echo ${#z}
1
</code></pre>

  <p>とすればOK。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<h2 id="sentaku">sentaku</h2>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<p>上の変換はsentakuの中で色付きの文字列を扱う時に必要になったものです。</p>

<p>sentakuは複数の文字列を入力に渡して、
対話的に選択して選択したものを出力させるものです。</p>

<p>所謂<a href="https://github.com/mooz/percol">percol</a>
や
<a href="https://github.com/peco/peco">peco</a>
と同じ様なものです。</p>

<p>シェルスクリプトでできているので大概のところで動くと思います。
(BashでもZshでも。)</p>

<p>もともと別のスクリプトを作っている時に
対話的に出力を選択したい時があってその時に作ったものを取り出したもので
関数などを使うことで拡張できる様にしてあります。</p>

<div class="github-widget" data-repo="rcmdnk/trash"></div>

<div class="github-widget" data-repo="rcmdnk/multi_clipboard"></div>

<div class="github-widget" data-repo="rcmdnk/sd_cl"></div>

<div class="github-widget" data-repo="rcmdnk/kk"></div>

<p>また、
<a href="https://github.com/rcmdnk/sentaku">sentaku</a>のレポジトリにある
<a href="https://github.com/rcmdnk/sentaku/blob/master/bin/ddv">ddv</a>
は2つのディレクトリのdiffをとって違いのあるファイルを一つ一つ<code>vim -d</code>していくスクリプトで
自分では結構使っています。</p>

<p><a href="https://rcmdnk.com/blog/tags/sentaku/">/blog/tags/sentaku/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentakuで選択項目数が多い時にページ表示の様に一気に表示変更する様にした]]></title>
    <link href="https://rcmdnk.com/blog/2015/03/16/computer-bash-zsh-sentaku/"/>
    <updated>2015-03-16T13:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/03/16/computer-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rcmdnk/sentaku">sentaku</a>の高速化のため
再表示を抑えるために数が多くて次を表示する際、
ページごとに切り替えられる様にしてみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#ページ表示" id="markdown-toc-ページ表示">ページ表示</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="ページ表示">ページ表示</h2>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<p>ちょっと言葉だと分かりづらいですが、
選択項目が多い時、全て表示できないので表示できない分は隠しておいて、
カーソルが下まで行ったら順次表示する、みたいなのが今までの表示方法でした。</p>

<p><img src="https://rcmdnk.com/images/post/20150316_nochangepage.gif" alt="nochangepage" class="pic" /></p>

<p>こんな感じ。
ただ、これだと、下へ下へ、や、上へ上へ、とする時、毎回全て再表示するので
結構遅くなります。</p>

<p>これを改善するために、一番下まで行って次へ行こうとするとき、
<strong>次のページ</strong>的な感覚で次の物を先頭にした新しい表示にするように
変更しました。</p>

<p><img src="https://rcmdnk.com/images/post/20150316_changepage.gif" alt="changepage" class="pic" /></p>

<p>こんな感じ。これだと全体表示は表示できる最大数毎になるので
かなり負担が減ります。</p>

<p>もし以前の表示が良ければ</p>

<pre><code>export _SENTAKU_PAGE_CHANGE=0
</code></pre>

<p>としておけば上の元の表示に戻ります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentakuで飛び飛びの複数選択を出来るようにした]]></title>
    <link href="https://rcmdnk.com/blog/2014/09/26/computer-bash-zsh-sentaku/"/>
    <updated>2014-09-26T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2014/09/26/computer-bash-zsh-sentaku</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00MELIJJM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00MELIJJM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41aZCPR9I7L._SS200_.jpg" alt="Sentaku Bun" /></a>
</div>

<p>この前<a href="https://github.com/rcmdnk/sentaku">sentaku</a>で
<a href="https://rcmdnk.com/blog/2014/08/05/computer-bash-zsh-sentaku/">複数の項目を選択出来る様</a>
にしましたが、
その時は繋がった一連の複数項目だけしか選択できなかったのを、
飛び飛びでも自由に選べる様に改良してみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#複数選択" id="markdown-toc-複数選択">複数選択</a></li>
  <li><a href="#環境変数の設定について" id="markdown-toc-環境変数の設定について">環境変数の設定について</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="複数選択">複数選択</h2>

<div class="github-widget" data-repo="rcmdnk/sentaku"></div>

<p>今回のアップデートでは</p>

<ul>
  <li><i class="key">ctrl</i>-<i class="key">s</i>, <i class="key">v</i>(vim mode時のみ): 複数選択(Visual Mode)開始/終了</li>
  <li><i class="key">Space</i>: カーソル下の行の選択のトグル</li>
</ul>

<p>を入れました。</p>

<p><img src="https://rcmdnk.com/images/post/20140926_sentaku_multi.gif" alt="sentaku_multi" class="pic" /></p>

<p>こんな感じで<i class="key">ctrl</i>-<i class="key">s</i>, <i class="key">v</i>で選択を開始すると
移動した分だけ青色に選択されます。</p>

<p>また、スペースを押すと、その下の項目を選択したり選択から外したりします。</p>

<p>1つでも青色の項目で選択されているものがある場合、カーソル行(白色反転)関係なしに
選択されたものだけを<code>execute</code>に渡します。
カーソル行も選択されているときは青色反転になるので、その場合にはそれも使われます。</p>

<p>1つも選択されたものがない場合には通常通り白色反転のカーソル行の物が使われます。</p>

<h2 id="環境変数の設定について">環境変数の設定について</h2>

<p>あと、地味に<code>_SENTAKU_NOHEADER</code>等の環境変数設定がきちんと反映されない
ところも直しました。</p>

]]></content>
  </entry>
  
</feed>
