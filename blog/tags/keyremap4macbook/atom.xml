<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: KeyRemap4MacBook | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/keyremap4macbook/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-29T13:44:30+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim_emu for KeyRemap4MacBookのアップデート]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/08/computer-mac-keyremap4macbook-vim/"/>
    <updated>2013-07-08T22:15:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/08/computer-mac-keyremap4macbook-vim</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/06/10/computer-mac-keyremap4macbook-vim/">Vim以外でVimする: Mac編</a>
で作った<a href="https://github.com/rcmdnk/vim_emu">vim_emu</a>をアップデートしました。</p>

<!-- more -->


<p>{%include after_excerpt.html%}</p>

<h1 id="Change+Mode+Keys">Change Mode Keys</h1>

<p>{%key symbol ESC%}/{%key symobl ctrl%}-{%key [ %}で
Normal Modeに入るキーマップに加え、
これらでNormal-Insert ModeをToggleするキー、
{%key j%}-{%key k%}の同時押しでToggleするキー等を追加しました。</p>

<p>{%key symbol ESC%}/{%key symobl ctrl%}-{%key [ %}については
長押しで{%key symobl ESC%}そのものを送る様にもしました。</p>

<table>
<thead>
<tr>
<th align="left">Key/Commands</th>
<th align="left">Function</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">ChangeKey1</td>
<td align="left"> Escape to enter Normal Mode, holding to emulate raw ESC.</td>
</tr>
<tr>
<td align="left">ChangeKey2</td>
<td align="left"> + Escape to back in Insert Mode</td>
</tr>
<tr>
<td align="left">ChangeKey3</td>
<td align="left"> Escape to back in Normal Mode in other than Inser Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey4</td>
<td align="left"> Ctrl-[ to enter Normal Mode, holding to emulate raw ESC.</td>
</tr>
<tr>
<td align="left">ChangeKey5</td>
<td align="left"> + Ctrl-[ to back in Insert Mode</td>
</tr>
<tr>
<td align="left">ChangeKey6</td>
<td align="left"> Ctrl-[ to back in Normal Mode in other than Inser Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey7</td>
<td align="left"> Simultaneous jk toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey8</td>
<td align="left"> Simultaneous qw toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey9</td>
<td align="left"> Simultaneous sd toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey10</td>
<td align="left"> Ctlr-l toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey11</td>
<td align="left"> Tap Left Cmd toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey12</td>
<td align="left"> Tap Right Cmd toggles Normal-Insert Mode.</td>
</tr>
</tbody>
</table>


<p>ChangeKey 1, 3 , 4, 6, 10-12についてはVisual Mode等の時にもNormal Modeへの
戻るキーとして使いますが7-9については同時押し操作の制限の関係で
Visual Mode等の時には効きません。</p>

<p>従って、他のキーと組み合わせが必要で、他の操作への影響を最低限にしたい場合は
3や6を使います。</p>

<h1 id="Enable+Recording+Macro">Enable Recording Macro</h1>

<p>Vim等の色々機能がついたエディターで無くてはならない機能の1つとして
キー操作をマクロとして保存して再び実行する、と言う機能があります。</p>

<p>KeyRemap4MacBook単体では再現するのが難しいのですが、
<a href="http://www.wingsforpigs.com/MadRuby/MadRuby.html">MadRuby</a>
という良さげなキー操作記憶再生アプリを見つけたので
これを使ってマクロ機能を実装してみました{%fn_ref 1%}。
フリーのアプリです。</p>

<p>このアプリは、ショートカットキーを使ってキー操作の記憶を開始して
再びショートカットキーで停止します。
実行もショートカットキーから。
さらに複数回の実行を指定することも出来ます。</p>

<p>アプリを導入したら、
これらのショートカットキーを以下の様に設定します。</p>

<table>
<thead>
<tr>
<th align="right">Function</th>
<th align="left">Shortcut</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right">Start Recording</td>
<td align="left"> {%key symbol ctrl%}-{%key symbol shift%}-{%key symbol cmd%}-{%key 6%}</td>
</tr>
<tr>
<td align="right">Stop Recording</td>
<td align="left"> {%key symbol ctrl%}-{%key symbol shift%}-{%key symbol cmd%}-{%key 7%}</td>
</tr>
<tr>
<td align="right">Play Macro</td>
<td align="left"> {%key symbol ctrl%}-{%key symbol shift%}-{%key symbol cmd%}-{%key 8%}</td>
</tr>
<tr>
<td align="right">Multiple Play Macro</td>
<td align="left"> {%key symbol ctrl%}-{%key symbol shift%}-{%key symbol cmd%}-{%key 9%}</td>
</tr>
</tbody>
</table>


<p><img src="{{site.imgpath}}post/20130708_madruby.jpg" "" ""></p>

<p>これらはvim_emuの中で参照して以下の様にキーが設定されています。
全てNormal Modeの時に有効です。</p>

<table>
<thead>
<tr>
<th align="center">Key/Commands</th>
<th align="left">Function</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">q</td>
<td align="left"> Start recording a macro.</td>
</tr>
<tr>
<td align="center">q(while recording macro)</td>
<td align="left"> Stop recording a macro.</td>
</tr>
<tr>
<td align="center">@</td>
<td align="left"> Execute the macro once.</td>
</tr>
<tr>
<td align="center">n@ (n=2-9)</td>
<td align="left">Execute macro n-times.</td>
</tr>
</tbody>
</table>


<p>Vimと違って{%key q%}{%key a%}の{%key a%}の様にマクロの収納先は指定しないで{%key q%}だけで記憶を開始します。
従って記憶できる操作は1つだけです{%fn_ref 2%}。
記憶中にNormal Modeに戻って{%key q%}で終了するわけですが、
この間に他のアプリに移ってしまっても、永遠とマクロを記憶し続けるので
気をつけて下さい{%fn_ref 3%}。</p>

<p>再生に関しても収納先の指定が無いので{%key @%}だけで再生します。
注意として、{%key @%}を繰り返して押す場合、{%key symbol shift%}も離して繰り返し
押さないと続けてマクロを上手く入力出来ません。</p>

<p>複数回実行したい場合は{%key 2%}~{%key 9%}までの数字を押した後に
{%key @%}を押せば数字分だけ実行します。</p>

<p>MadRubyのショートカットは他のショートカットに被らないような設定にしてありますが、
もし他のキー設定と被る場合や、普段もMadRubyを使いたくてもっと
簡単なキー設定にしたい場合は
<code>vim_emu/vim_emu_core.xml</code>の<code>Enable Recording Macro</code>
にあるキー設定も変更して下さい。</p>

<p>下のデモでは
<code>aaa</code>という文字列を検索して移動して<code>AAA</code>と置き換える作業を記憶して
繰り返し実行しています。</p>

<pre><code>&lt;ESC&gt;/aaa&lt;ESC&gt;hqni&lt;BS&gt;AAA&lt;ESC&gt;q@@@@@@@@@uuuuuuuuuuh5@
</code></pre>

<p>とキーボードからは入力しています。
検索時に単語が選択されるのを一旦解除するのに{%key h%}を使ったり、
が逆に検索後、{%key symbol bs %}で一気に消したりするところとかも
実際のVimと違いますが、
一応これくらいの変換の作業は繰り返し出来るようになります。
(流石にsed的な変換は無理なのでこの辺の作業はマクロで繰り返しで。)</p>

<p>MadRubyは、最初の{%key q%}をした所で現れ、</p>

<ul>
<li>{%key n%}<i class="icon-arrow-right"></i>{%key symbol cmd%}-{%key g%}</li>
<li>{%key i%}は記憶されず(右下のモード表示から<code>--VIM--</code>が消える)</li>
<li>{%key symbol bs%}</li>
<li>AAA</li>
<li>{%key symbol esc%}は記憶されず(右下のモード表示へ<code>--VIM--</code>が現れる)</li>
</ul>


<p>と記憶され{%key q%}で終了しています。</p>

<p>{% vimeo 69911373 %}</p>

<p>実用性はともかく、ちょっと、おぉっ、ってなります。</p>

<h1 id="その他の変更点">その他の変更点</h1>

<ul>
<li><code>d3w</code>など、<code>y</code>、<code>d</code>、<code>c</code>の時にも2-9で移動を数字分だけ出来る様に改善。</li>
<li>Visual Modeでライン選択の時、以前は最初に上に向かうとカレント行が除かれたが
最初に上に向かう時だけカレント行も選択する様に変更。</li>
<li>RturnはそのままRturnを返す様に変更。</li>
<li>H/Lについては意味ない動きしかできないので削除。(ubiquitous_vimを真似てみたものの
キーの無駄遣いにしかならないので...)</li>
<li>GitHubのレポジトリーバージョンをKeyRemap4MacBookの中に入っているものと
かち合わないように変更。</li>
<li>ドイツ語キーボードサポート。</li>
</ul>


<h1 id="インストール">インストール</h1>

<p>KeyRemap4MacBookが入った状態で<a href="https://github.com/rcmdnk/vim_emu">vim_emu</a>
をcloneしてきて中にある<code>install.sh</code>を実行すれば
自分設定のすぐ下にもう1つの<code>VIM Emulation</code>が現れます。</p>

<pre><code>$ git clone https://github.com/rcmdnk/vim_emu
$ cd vim_emu
$ ./install.sh
</code></pre>

<p>キーがバッティングするので元から入っている<code>VIM Emulation</code>項目はオフにして下さい。</p>

<p>アンインストールは<code>$HOME/Library/Application Support/KeyRemap4MacBook/</code>
から<code>vim_emu*</code>を消し、<code>private.xml</code>の下の方に追加された
<code>&lt;include path="vim_emu_test.xml"&gt;&lt;/include&gt;</code>を削除してください。</p>

<p>そのうちKeyRemap4MacBook本体の方にPull Requestしていつの間にか入れてもらおうと思ってます。</p>

<p>{%comment%}
<img src="{{site.imgpath}}post/xxx.jpg" "" "">
<i class="icon-arrow-right"></i>
{%fn_ref 1%}
{%endcomment%}</p>

<hr />

<p>{%footnotes%}
  {%fn%}2009年に開発が止まっている古いアプリですが、少なくともLionやMountain Lion
  で動くことは確認しました。
  他にも似たようなアプリがありましたが、有料だったり、ショートカットキーで
  記憶/再生出来なかったり、マウス操作も記憶してしまって逆に面倒だったり、
  で今のところこのアプリが一番良さげです。
  {%fn%}MadRuby自体には履歴機能あってメニューバーから過去の操作を再生することも出来ます。
  また、操作を保存したり、過去に保存した操作を読み込む事も可能です。
  {%fn%}MadRubyの表示が出続けるので忘れる事はないと思いますし、メニューバーからでも
  ストップすることは出来ます。
{%endfootnotes%}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使う上でのIME(日本語入力)の取り扱い]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/20/computer-mac-keyremap4macbook-vim/"/>
    <updated>2013-06-20T20:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/20/computer-mac-keyremap4macbook-vim</id>
    <content type="html"><![CDATA[<p>Vimで日本語入力をしているとノーマルモードに戻ったと時に
毎回IMEをoffにしてやらないとコマンドが打てません。
これはかなり面倒なのでノーマルモード移行時に
自動的にIMEがoffになるようにしたい所で、
その辺りのまとめというか、自分設定とついでに見つけた情報の寄せ集め。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="MacでKeyRemap4MacBookを使ってIMEをノーマルモードで必ずオフにする">MacでKeyRemap4MacBookを使ってIMEをノーマルモードで必ずオフにする</h1>

<p>Macでは<a href="http://rcmdnk.github.io/blog/tags/keyremap4macbook/">KeyRemap4MacBook</a>を使ったキーリマップで
ノーマルモードに戻るときに{%key ESC%}/{%key ctrl%}-{%key [%}を押した際
IMEをオフにするようにしています。</p>

<p>{%codeblock lang:xml%}
<item>
  <name>ESC to IME off (to English) + Esc + Esc</name>
  <appendix>Enable for all but HHK</appendix>
  <identifier>private.vim.ime_off_ESC</identifier>
  <only>TERMINAL, VI</only>
  <inputsource_only>JAPANESE</inputsource_only>
  <autogen></p>

<pre><code>__KeyToKey__ KeyCode::ESCAPE, ModifierFlag::NONE,
KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
KeyCode::VK_CHANGE_INPUTSOURCE_JAPANESE,
KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
KeyCode::ESCAPE, KeyCode::ESCAPE
</code></pre>

<p>  </autogen>
</item>
<item>
  <name>Control + BRACKET_LEFT to IME off (to English) + Esc + Esc</name>
  <identifier>private.vim.ime_new</identifier>
  <only>TERMINAL, VI</only>
  <inputsource_only>JAPANESE</inputsource_only>
  <autogen></p>

<pre><code>__KeyToKey__ KeyCode::BRACKET_LEFT,
MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL|ModifierFlag::NONE,
KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
KeyCode::VK_CHANGE_INPUTSOURCE_JAPANESE,
KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
KeyCode::ESCAPE, KeyCode::ESCAPE
</code></pre>

<p>  </autogen>
</item>
{%endcodeblock%}</p>

<p>ターミナル(含iTerm)及びVim(含MacVim)上で有効になります。</p>

<p>最後に{%key ESC%}を2回使っているのは文字を変換中の場合でも
一気に抜けるためです。
これだと本来のIME変換中の{%key ESC%}の機能(変換中の文字を消すだけ)
が失われますが、1回でも消してIMEをオフにする、状態になって
中途半端なので取り敢えず2回に。</p>

<p>KeyRemap4MacBookでは<code>変換中</code>の状態を取る要素が(調べた限り)無いので、
どちらか好みの設定にする、ということで。</p>

<p>また、こういった設定を書いてある所で余り見かけませんが、
{%codeblock%}
<inputsource_only>JAPANESE</inputsource_only>
{%endcodeblock%}
を使うとIMEがON(日本語入力)の時だけ有効になります。</p>

<p>これはGNU screenと併用している時に絶対必要で、
これを外してしまうとGNU screenでコピーモードに入ろうと
{%key ctrl%}-{%key [%}を押してもすぐ{%key ESC%}が押され終了することになり
コピーモードが使えなくなります。</p>

<p>{%key ESC%}1回設定なら特に問題が無いのですが、2回設定の場合は必須。</p>

<p>日本語に戻す際に
<code>英語</code><i class="icon-arrow-right"></i><code>日本語</code><i class="icon-arrow-right"></i><code>英語</code>
と言った周りくどいことをしてますが、
これはGoogle日本語入力等を使っていて、入力中に補完表示がある状態で
GNU screenのコピーモードに入ろうとプレフィクス+{%key ctrl%}-{%key [%}
を押してしまうと補完表示が残る様になってしまったのでその処置です。</p>

<p>IMEをオフにするには
<code>KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH</code>の代わりに
<code>KeyCode::JIS_EISUU</code>(USキーボード使用時にも使えます)でもOKです。
(VK_CHANGE_INPUTSOURCE_*と言うバーチャルキーを使ってみたかっただけ。)</p>

<h1 id="Windowsでyamyを使ってIMEをノーマルモードで必ずオフにする">Windowsでyamyを使ってIMEをノーマルモードで必ずオフにする</h1>

<p>Windowsでは<a href="http://rcmdnk.github.io/blog/tags/yamy/">yamy</a>
を使って同じ様な事をしています。</p>

<p>{%codeblock%}
{%raw%}</p>

<h1 id="For+Cygwin+{{{">For Cygwin {{{</h1>

<p>window Cygwin /cygwin/ : Global
  key A-v = RButton # Paste</p>

<p>  # IL: IME on
  # IC: IME inserting</p>

<p>  key IL-~IC-Esc = $ToggleIME Esc # Make IME off, Exit insert mode
  key IC-Esc = Esc # Stop inserting, Make IME off, Exit insert mode</p>

<p>  key IL-*IC-C-LeftSquareBracket = Esc $ToggleIME Esc # Stop inserting, Make IME off, Exit insert mode</p>

<h1 id="}}}">}}}</h1>

<p>window PuTTY /putty/ : Global
{%endraw%}
{%endcodeblock%}</p>

<p>cygwin上のみで有効になる様な設定です。
yamyではIMEが有効である(<code>IL</code>)の状態に加え、入力中(<code>IC</code>)と言う状態を使えるので、
上の設定では</p>

<ul>
<li>IMEオンの状態で文字を入力中に{%key ESC%}を押したら入力キャンセル(元々のESCの動き)</li>
<li>IMEオンの状態で文字を入力中でないときに{%key ESC%}を押したらIMEをオフにしてESC(ノーマルモードへ)</li>
<li>{%key ctrl%}-{%key [%}を押したら入力中でもどんな状態でも最初にESCで行動をキャンセルし、IMEをオフにしてESC(ノーマルモードへ)</li>
</ul>


<p>となっています。</p>

<p>ついでに最初の{%key Alt%}-{%key v%}の設定は、
このキーで右クリックをすることにより
<code>貼り付け</code>を出来る様にしてあります。
<code>cygwin</code>を<code>putty</code>に替えて、puttyの設定で右クリックが貼り付けになっていれば
puttyでも同じ事が出来ます。
(ただし、マウスカーソルはターミナル上に無いとカーソル下のウィンドウを選ぶ
だけなので注意。)</p>

<p>Macだと元々{%key Command%}-{%key v%}が貼り付けで{%key Control%}と区別されているので
ターミナルなどでも貼り付けが使えますが、Windowsだと貼り付けキーが
使えないのでこれで代用を。</p>

<hr />

<p><em>2013/06/28 追記</em></p>

<p>下記ではGvimやPuttyでも同じ様な設定を使うため、
<code>Terminal</code>という新しいグループを作って
<code>Cygwin</code>、<code>Gvim</code>、<code>Putty</code>上で有効にするようにしています。
CUIの<code>vim.exe</code>を直接呼び出したWindowは
<code>ConsoleWindowClass</code>と言うクラスだと言う事がyamyの調査から確認できるのですが
そもそもIMEの変換が良く分からない動きをしたりして、
イマイチちゃんと設定できなかったのでコメントアウトしてあります。
(わざわざCUI版Vimを直接呼び出す必要も無いと思いますし。)</p>

<p>後、上のコードコメントがちょっとおかしいのと
<code>$ToggleIME</code>の前<code>Esc</code>が要らない(<code>$ToggleIME</code>で入力を中断してIME Offの動きをするので)点も下では治してあります。</p>

<p>{%codeblock%}
{%raw%}</p>

<h1 id="Terminal/Vim+{{{">Terminal/Vim {{{</h1>

<p>keymap Terminal : Global
  key A-v = RButton # Paste
  # IL: IME on
  # IC: IME inserting
  key IL-~IC-Esc = $ToggleIME Esc # Make IME off, Exit insert mode
  key IC-Esc = Esc # Stop inserting
  key IL-*IC-C-LeftSquareBracket = $ToggleIME Esc # Stop inserting, Make IME off, Exit insert mode
keymap Global</p>

<h1 id="}}}">}}}</h1>

<h1 id="For+Cygwin+{{{">For Cygwin {{{</h1>

<p>window Cygwin /cygwin/ : Terminal</p>

<h1 id="}}}">}}}</h1>

<h1 id="For+Gvim+{{{">For Gvim {{{</h1>

<p>window GVim /Vim/ : Terminal</p>

<h1 id="window+CVim+/ConsoleWindowClass/+:+Terminal">window CVim /ConsoleWindowClass/ : Terminal</h1>

<h1 id="}}}">}}}</h1>

<h1 id="For+PuTTY+{{{">For PuTTY {{{</h1>

<p>window PuTTY /putty/ : Terminal</p>

<h1 id="}}}">}}}</h1>

<p>keymap Global
{%endraw%}
{%endcodeblock%}</p>

<p><em>追記終わり</em></p>

<hr />

<h1 id="GVimで出来る設定">GVimで出来る設定</h1>

<p>GVimではCUI版と違い、IMEを制御出来る部分があり、
Vim側だけで詳細に制御出来ます。</p>

<p>{%codeblock%}
" ime setting
if has('multi_byte_ime') || has('xim') || has('gui_macvim')
  " Insert mode: lmap off, IME ON
  set iminsert=2
  " Serch mode: lmap off, IME ON
  set imsearch=2
  " Normal mode: IME off
  inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
endif
{%endcodeblock%}</p>

<p>といった感じで<code>.vimrc</code>で設定すればインサートモードやサーチモードに入った時はIMEをONにして
ノーマルモードに戻るときにオフにします。</p>

<p>GVimの方は殆ど使わないので実際使ってみないと分からない事もあるんですが、
日本語関連のことだと普通のGVimやらMacVimだと上手く設定が効かなくて、
KaoriYa version (<a href="http://www.kaoriya.net/software/vim/">Windows</a>、
<a href="http://code.google.com/p/macvim-kaoriya/">Mac</a>)だと
効く、と言った話も見ました。</p>

<p>Ref:</p>

<blockquote><p><a href="http://vimwiki.net/?" title="iminsert">iminsert</a></p>

<p><a href="http://code.google.com/p/macvim-kaoriya/wiki/Readme#%e6%97%a5%e6%9c%ac%e8%aa%9e%e5%85%a5%e5%8a%9b(IM)%e8%87%aa%e5%8b%95%e3%82%aa%e3%83%b3/%e3%82%aa%e3%83%95">macvim-kaoriya:日本語入力(IM)自動オン/オフ</a></p></blockquote>

<h1 id="日本語固定モード">日本語固定モード</h1>

<p><a href="https://github.com/fuenor/im_control.vim">im_control.vim</a>
というプラグインを使ってIMEのオン/オフをより詳細に設定する方法が
<a href="https://sites.google.com/site/fudist/Home/vim-nihongo-ban">vim UTF-8 日本語版</a>
の中サイトの以下のページにに詳しくあります。基本的にはGVim専用。</p>

<blockquote><p><a href="https://sites.google.com/site/fudist/Home/vim-nihongo-ban/vim-japanese/ime-control">Vim/GVimで「日本語入力固定モード」を使用する</a></p></blockquote>

<p>Windows専用ですが、こんなプラグインも。</p>

<blockquote><p><a href="http://qiita.com/rbtnn/items/855a8dce0ff0a3ea26f2">Vimのノーマルモード中は自動的にIMEをOFFにする。（Windowsのみ）</a></p></blockquote>

<h1 id="Tera+Termでの制御シーケンスの使用">Tera Termでの制御シーケンスの使用</h1>

<p>普段Tera Termは使わないのですが
IMEの制御以外にもシーケンスを使った色々な設定が以下のサイトに詳しくあります。</p>

<blockquote><p><a href="http://ttssh2.sourceforge.jp/manual/ja/usage/tips/vim.html">vim からの制御シーケンスの使用例</a></p>

<p><a href="http://slashdot.jp/journal/522812/IME-%e5%88%b6%e5%be%a1">dodaの日記： IME 制御</a></p></blockquote>

<p>Tera Termを使ってない場合でもシーケンスを使った設定や使い方が参考になると思います。</p>

<h1 id="WindowsでAutoHotkeyを使う方法">WindowsでAutoHotkeyを使う方法</h1>

<p><a href="http://www.autohotkey.com/">Autohotkey</a>はちゃんと使ったことないですが
<a href="http://rcmdnk.github.io/blog/tags/yamy/">yamy</a>で
{%key Ctrl%}<i class="icon-arrow-exchange"></i>の交換でちょこちょこ不具合がるので
ちょっと他のリマップソフトも検討中のため、メモ。
下記のサイトには<code>imdisable</code>を
<code>挿入モード</code><i class="icon-arrow-exchange"></i><code>ノーマルモード</code>
変換の際に自動で変更する設定も載っています。</p>

<blockquote><p><a href="http://blog.blueblack.net/item_393">VimのノーマルモードでIMEを常時無効化する</a></p></blockquote>

<hr />

<p>2013/08/04 追記</p>

<p>AutoHotkeyを使い始めたので、AutoHotkeyでの方法を自分でも作ってみました:
<a href="/blog/2013/08/04/computer-windows-autohotkey/">Vimを使う上でのIME(日本語入力)の取り扱い with AutoHotKey</a></p>

<hr />

<h1 id="IMEの状態でカーソルの色を変更する">IMEの状態でカーソルの色を変更する</h1>

<p>GVim限定ですが、<code>CursorIM</code>というhightlighが定義されていて
通常の時の<code>CursorIM</code>と違う色を設定することでIMEの状態でカーソルの色を変えられます。</p>

<p>{%codeblock%}
if has('multi_byte_ime')
  highlight Cursor guifg=NONE guibg=Green</p>

<pre><code>highlight CursorIM guifg=NONE guibg=Purple
fi
{%endcodeblock%}
</code></pre>

<h1 id="IMEのON/OFFをsyntaxで制御する">IMEのON/OFFをsyntaxで制御する</h1>

<p>vim-jpにこんな話もありました。</p>

<blockquote><p><a href="https://github.com/vim-jp/issues/issues/13">IMEのON/OFFをsyntaxで制御する</a></p></blockquote>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim以外でVimする: Mac編]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/10/computer-mac-keyremap4macbook-vim/"/>
    <updated>2013-06-10T20:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/10/computer-mac-keyremap4macbook-vim</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/33746">Vim Advenvimt Calendar 2012</a> 192日目の記事です。
前回は@manga_osyoさんの<a href="http://d.hatena.ne.jp/osyo-manga/20130609/1370789385">textobj-context をつくったAdd Staraereal</a>でした。</p>

<p>このブログではVAC107日目に
<a href="/blog/2013/03/17/vim/">Vim以外でVimする: Windows編</a>という記事で
Windows上でVimエディタ以外の場所でVimっぽく操作することを
<a href="http://sourceforge.jp/projects/yamy/">yamy</a>という
キー設定変更ソフトで実現する方法を紹介しました。
(<a href="/blog/2013/08/03/computer-windows-autohotkey/">Vim以外でVimする: Windows+AutoHotkey編</a>でAutoHotkey (or Standalone)でする方法も追加。)</p>

<p>今回の記事はそのMac編です。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="KeyRemap4MacBook">KeyRemap4MacBook</h1>

<p><a href="http://pqrs.org/macosx/keyremap4macbook/index.html.ja"><p><img src="{{site.imgpath}}MacApp/KeyRemap4MacBook.png" width="100" height="100" alt="KeyRemap4MacBook"></p></a></p>

<p><a href="http://pqrs.org/macosx/keyremap4macbook/index.html.ja">KeyRemap4MacBook</a>
はMac用のキーバインド編集アプリです。
今回はこのアプリを使います。</p>

<p>このアプリについては上記公式ページにも詳しい解説がありますし、
このブログでもいくつか紹介記事を書いたので
良かったら見てみてください。</p>

<blockquote><p><a href="http://rcmdnk.github.io/blog/2013/06/05/computer-mac-keyremap4macbook/">Macでのキーバインド設定</a></p>

<p><a href="http://rcmdnk.github.io/blog/2013/06/06/computer-mac-keyremap4macbook-vim/">KeyRemap4MacBookで初期状態で設定出来るVim設定</a></p>

<p><a href="http://rcmdnk.github.io/blog/2013/06/06/computer-mac-keyremap4macbook-vim_2/">MacでVimっぽくカーソルやマウス、ウィンドウを動かす</a></p></blockquote>

<p>上のタイトルと各エントリの日付を見て貰えれば
分かる様に基本的に今回の内容の一部を
フライイングして書いたものです...
(<a href="/blog/2013/03/17/vim/">Vim以外でVimする: Windows編</a>の時と同様、まとめてみようと思ったら物凄く長くなりそうだったので分けました)</p>

<p>最初の2つはデフォルト機能や単なる使い方ですが、
3つ目は <a href="/blog/2013/03/17/vim/">Windows編</a>で紹介した
モード変更無しでモディファイヤーキーと同時押しで行うVimの動きで、
{%key symbol cmd %}-{%key symbol ctrl%}-{%key h%}/{%key j%}/{%key k%}/{%key l%}
でカーソルを上下左右にしたり、
他にもマウスポインタやウィンドウを動かす事を可能にする設定を
紹介しています。</p>

<h1 id="vim_emu:+Vim+emulation+with+KeyRemap4MacBook">vim_emu: Vim emulation with KeyRemap4MacBook</h1>

<p>ということで今回の本題です。
KeyRemap4MacBookには元々<code>Complete Vim</code>、<code>Ubiquitous Vim</code>と言うモードが入っていて、
これらを有効にするとノーマルモードの動きは大体再現出来ます。</p>

<p>ただ、ノーマルモードだけであればワザワザモード変化させなくても
上のモディファイヤーキーとの同時押し、で殆ど十分ですが
ビジュアルモードなど範囲選択も使いたいところです。</p>

<p>Windows同様、選択は{%key Shift%}を押しながら移動すれば
可能なんですが、そんなことはしれられないので
やはりVim以外でもVimっぽく選択コピペしたい、
ということを再現するのがデフォルト設定に加えて作ってみた理由の一つです。</p>

<p>Windowsに比べてMacの方でしか再現出来ない部分等もあったり、
これまで知らなかったショートカットキーとかも覚えたので
その辺も勉強になりました。</p>

<h2 id="設定ファイル+++インストール">設定ファイル &amp; インストール</h2>

<p>設定ファイルの最新版、及び詳しい仕様方法は
<a href="https://github.com/rcmdnk/vim_emu">GitHubのvim_emuレポジトリ</a>
を御覧ください。</p>

<p>上のREADMEにも書いてありますが、
KeyRemap4MacBookの作者の方に連絡してみたところ、
本体にも入れていただいたので、
もし、現在すでにKeyRemap4MacBookをインストール済の人であれば
現在のベータ版(現時点で8.3.7)にすれば
上のvim_emuの設定項目が追加されますので是非試してください{%fn_ref 1%}。</p>

<p>安定バージョンが現在8.3.5なので、問題なければ
安定バージョンにもそのうち追加されるかな、と。</p>

<p>vim_emuが入っているバージョンを導入すると
下の様に<code>VIM Emulation</code>の項目が追加されます。</p>

<p><img src="{{site.imgpath}}post/20130610_KeyRemap4MacBook_vim_emu.jpg" title="" alt=""></p>

<p>有効にするために、<code>Enable Vim Emulation</code>にチェックを入れ、
Normal Modeに入るためのキーとして
{%key ESC%}または{%key symbol ctrl%}-{%key [%}を選んでください。勿論両方選択も可能です。</p>

<p><code>Enable Visual Block Mode</code>については、下に書く様にこのモードが
ちょっと特殊なので別に有効化/無効化出来る様にしてあります。
(通常は無効の方が良いかと。)</p>

<h2 id="有効にするアプリの選択">有効にするアプリの選択</h2>

<p>KeyRemap4MacBookでは各設定をアプリ毎に有効にしたり無効にしたりできるのですが、
初期設定ではvim_emuはターミナル (iTerm)、Vim (MacVim)、Firefox、Emacs、
またパスワード入力のポップアップでは無効になるようになっています。</p>

<p>もし、この設定を変えたい場合は、ベータ版をインストールした場合は
<code>/Applications/KeyRemap4MacBook.app/Contents/Resources/appdef.xml</code>、
またvim_emuをGitHubから直接入れた場合は
<code>~/Library/Application Support/KeyRemap4MacBook/vim_emu.xml</code>
の中にある</p>

<p>{%raw%}</p>

<pre><code>&lt;replacementdef&gt;
  &lt;replacementname&gt;VIM_EMU_ONLY_APPS&lt;/replacementname&gt;
  &lt;replacementvalue&gt;&lt;/replacementvalue&gt;
&lt;/replacementdef&gt;
&lt;replacementdef&gt;
  &lt;replacementname&gt;VIM_EMU_IGNORE_APPS&lt;/replacementname&gt;
  &lt;replacementvalue&gt;TERMINAL, VI, PASSWORD, FIREFOX, EMACS&lt;/replacementvalue&gt;
&lt;/replacementdef&gt;
</code></pre>

<p>{%endraw%}</p>

<p>の部分を変更してください。</p>

<ul>
<li><code>VIM_EMU_ONLY_APPS</code>: 設定されたアプリ上でだけ有効になる。空欄の場合はすべてのアプリ。</li>
<li><code>VIM_EMU_IGNORE_APPS</code>: 設定されたアプリ上では無効にする。</li>
</ul>


<p>例えば、テキストエディット上でだけ有効にしたい場合は</p>

<p>{%raw%}</p>

<pre><code>&lt;replacementdef&gt;
  &lt;replacementname&gt;VIM_EMU_ONLY_APPS&lt;/replacementname&gt;
  &lt;replacementvalue&gt;EDITOR&lt;/replacementvalue&gt;
&lt;/replacementdef&gt;
</code></pre>

<p>{%endraw%}</p>

<p>としてください。</p>

<p>アプリの定義等に関しては
<a href="http://rcmdnk.github.io/blog/2013/06/05/computer-mac-keyremap4macbook/">Macでのキーバインド設定</a>
や公式ページを参照してください。</p>

<h2 id="主なモード">主なモード</h2>

<p>まず、vim_emuには以下の様な主なモードがあります。</p>

<table>
<thead>
<tr>
<th align="left">Mode</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Insert Mode</td>
<td align="left">Macの通常の状態。</td>
</tr>
<tr>
<td align="left">Normal Mode</td>
<td align="left">hjkl等のキーでの移動、ビジュアルモードに入ったりできる状態。</td>
</tr>
<tr>
<td align="left">Visual Mode</td>
<td align="left">Character-wise, Line-wise, Block-wiseのビジュアルモードがあります。ただし、Block-wiseはちょっと特殊。</td>
</tr>
<tr>
<td align="left">Command Mode</td>
<td align="left">主にファイルの保存、終了コマンドが使えます。</td>
</tr>
</tbody>
</table>


<p>各モードへの入り方はVim同様、</p>

<ul>
<li>{%key ESC%}または{%key symbol ctrl%}-{%key [%}でNormal Modeへ(どちらを使うか、は選択可能、勿論両方選択も可能。)。</li>
<li>Normal Modeから{%key i%}などでInsert Mode(通常Macの状態)へ。</li>
<li>Normal Modeから{%key v%}/{%key symbol shift%}-{%key v%}/{%key symbol ctrl%}-{%key v%}でCharacter-wise, Line-wise, Block-wise の各Visual Modeへ。</li>
<li>Normal Modeから{%key :%}でCommand Modeへ。</li>
</ul>


<p>:warning:
Block-Wise Visual Modeに関しては、カーソル移動では無く、
{%key symbol opt%}-{%key symbol cmd%}とマウスのドラック、
とう言う方法を取っています。
これはMacデフォルトの機能で、文字選択が出来るアプリであれば
大概これで矩形選択できます{%fn_ref 2%}。</p>

<p>ただ、その特性上、編集中のカーソルキー位置から、ではなく、
その時点でのマウスポインタの位置からの矩形選択スタート、になるので、
はっきり言って実用性無いですが、
矩形選択出来る事知らなかった人はためしてみると
ちょっと楽しいと思います(ショートカットキーとマウス直接でも良いですが)。
その様な機能なので、この機能は別にOn/Off出来る様になっています。</p>

<h2 id="Normal+Mode等が有効時の表示">Normal Mode等が有効時の表示</h2>

<p>Normal Mode等が有効になった場合、画面右下に下の様な表示が出ます。</p>

<p><img src="{{site.imgpath}}post/20130610_KeyRemap4MacBook_display.jpg" title="" alt=""></p>

<p>Visual Mode等の時はその表示が出るようにもなっています。</p>

<p>これらのMode変換は全てのアプリで共通で、さらに無効なアプリの上でも
表示は出続けます。
つまりテキストエディットでNormal Modeを有効にしたままターミナルに移ると
上の表示は出続けますが、この場合ターミナル上ではキーバインドは無効になっています。</p>

<p>もし、この表示が邪魔だ、という場合は</p>

<p><code>/Applications/KeyRemap4MacBook.app/Contents/Resources/include/checkbox/vim_emu/vim_emu_core_settings.xml</code>、
またvim_emuをGitHubから直接入れた場合は
<code>~/Library/Application Support/KeyRemap4MacBook/vim_emu/vim_emu_core_settings.xml</code>
の中にある</p>

<p>{%raw%}</p>

<pre><code>&lt;autogen&gt;__ShowStatusMessage__ -- VIM &lt;/autogen&gt;
</code></pre>

<p>{%endraw%}
となっている<code>__ShowStatusMessage__</code>を含む行を全て消すかコメントアウトして下さい。</p>

<h2 id="できること">できること</h2>

<p>詳しくは<a href="https://github.com/rcmdnk/vim_emu">README</a>
や付属のHELPを見て頂ければ分かると思いますし、
とりあえずVimなので適当に打って出来るか試して頂ければ、と
と思ったりしてますがざっっと紹介したいと思います。</p>

<h3 id="Insert+Mode">Insert Mode</h3>

<p>このモードが初期状態で、
殆どのキーは変更を行なっていませんが、
Normal Modeに入るためのキー({%key ESC%}、{%key symbol ctrl%}-{%key [%})
と、{%key symbol ctrl%}-{%key n%}、{%key symbol ctrl%}-{%key p%}
はリマップされています。</p>

<p>Macでは大概のアプリで入力中に{%key ESC%}を押すと補完が出来るので、
{%key symbol ctrl%}-{%key n%}、{%key symbol ctrl%}-{%key p%}では
この機能を使ってVimの様な補完のキーバインディングを再現しています。</p>

<h3 id="Normal+Mode:移動系">Normal Mode:移動系</h3>

<p>まず、勿論{%key h%}/{%key j%}/{%key k%}/{%key l%}の動きは再現しています。</p>

<p>Windowsの時と違い、単語移動において、単語末へ移動、が出来る様になっていますので、
{%key e%}等が{%key w%}と区別されます。({%key symbol shift%}-{%key w%}、{%key symbol shift%}-{%key e%}等各大文字に関しては小文字と全く同じ動き。)
単語末移動があるので{%key g%}{%key e%}についても追加してあります{%fn_ref 3%}。</p>

<p>移動系に関しては{%key 4%}{%key w%}などとすることにより
4単語進む、と言った、{%key 数字%} {%key コマンド%}で繰り返し、
ということも出来る様になっています。
ただし、数字は2-9だけです。
<a href="/blog/2013/03/17/vim/">Windows編</a>と違い、現状{%key y%}などとの連携は取れません。</p>

<h3 id="Normal+Mode:Yank/Cut/Change/Paste">Normal Mode:Yank/Cut/Change/Paste</h3>

<p>{%key y%} {%key y%}、{%key symbol shift%}-{%key d%}、{%key c%}{%key w%}等、
ひと通りのコピー/カット機能は使えます。</p>

<p>勿論貼り付けは{%key p%}でカーソルキーの次へ位置へ貼り付け(大文字ならその場へ貼り付け)。</p>

<h3 id="Normal+Mode:その他">Normal Mode:その他</h3>

<p>Undo({%key u%}、Redo({%key symbol ctrl%}-{%key r%})
や{%key /%}での検索、等。
{%key *%}でカーソル下の単語検索、も。</p>

<h3 id="Visual+Mode">Visual Mode</h3>

<p>基本的にNormal Modeで使える動きで範囲を変更出来る。
{%key y%}/{%key d%}などでコピー/カット。</p>

<h3 id="Command+Model">Command Model</h3>

<p>{%key w%}{%key symbol SPACE%}で名前をつけて保存、
{%key w%}{%key q%}で保存して終了、等。</p>

<h1 id="まとめ">まとめ</h1>

<p>以前の<a href="/blog/2013/03/17/vim/">Windows編</a>同様に
基本的にMacに元々あるキーボードショートカット{%fn_ref 4%}をVimmerとして
分かりやすい位置に持ってきた(まとめた)に過ぎません。</p>

<p>例えば行連結の{%key symbol shift%}-{%key j%}に関しては</p>

<ol>
<li>{%key symbol cmd%}-{%key symbol right%} (行末へ移動)</li>
<li>{%key Space %}</li>
<li>{%key Foward Delete%}</li>
<li>{%key symbol left%}</li>
</ol>


<p>という一連のキーを割り当てて居ます{%fn_ref 5%}。</p>

<p>思いつく限りキー設定を入れてみたつもりですが、
このキーの割り当てが無い、とか
このキーの動きがおかしい、とか
あればここでのコメントなりメールなり
なんなりで教えて貰えるとありがたいです。</p>

<p><a href="/blog/2013/03/17/vim/">Windows編</a>で作ったyamy
の設定についても、おかしな点やこれは出来るんじゃないか?
ていうのがあれば是非連絡ください。</p>

<hr />

<p>2013/07/08 アップデート: <a href="/blog/2013/07/08/computer-mac-keyremap4macbook-vim/">vim_emu for KeyRemap4MacBookのアップデート</a></p>

<hr />

<hr />

<p>{% footnotes %}
  {%fn%}ベータ版へのアップデート方法は
  <a href="https://github.com/tekezo/Files/blob/master/KeyRemap4MacBook/image/upgrade-to-the-latest-beta-version.png">こちら</a>を参考に。
  {%fn%}今回初めて知った機能の1つ。ただ普段使う機会が見いだせない上、
  マウスで矩形選択するのは結構扱いづらい。
  {%fn%}ただし、この機能は現在vim_emuのレポジトリだけで有効で
  KeyRemap4MacBookのベータ版にはまだ入っていません。
  {%fn%}<a href="http://support.apple.com/kb/HT1343">OS X keyboard shortcuts</a>
  {%fn%}書いてる途中で気づいて最後に1つ左に戻るを加えました。
  なのでKeyRemap4MacBookベータ版だと連結した後、後ろの行の先頭に
  カーソルが行く様に少し違った動きをします。
{% endfootnotes %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでVimっぽくカーソルやマウス、ウィンドウを動かす]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/06/computer-mac-keyremap4macbook-vim_2/"/>
    <updated>2013-06-06T20:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/06/computer-mac-keyremap4macbook-vim_2</id>
    <content type="html"><![CDATA[<p>以前、 <a href="/blog/2013/03/17/vim/">Windowsでyamyを使ってVimっぽい動きをVim以外で再現する</a>
方法を紹介しましたが、
今回はMacで、
{%key symbol cmd %}-{%key symbol ctrl%}などとの同時押しで
カーソルやマウスポインタ、さらにウィンドウを動かす方法についてです。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="カーソルキーを動かす">カーソルキーを動かす</h1>

<p><a href="/blog/2013/06/06/computer-mac-keyremap4macbook-vim">前回</a>
紹介した通り、KeyRemap4MacBookには最初からいくつか
Vimっぽい動きを再現する設定が入っていますが、
{%key symbol cmd %}-{%key symbol ctrl%}
という組み合わせを使いたいので、以下の設定を<code>private.xml</code>に加えています。</p>

<p>{% gist 5501302 %}</p>

<p>これで、</p>

<ul>
<li>どの場所でも{%key symbol cmd %}-{%key symbol ctrl%}-{%key h%}/{%key j%}/{%key k%}/{%key l%}によってカーソルを左下上右に動かせる</li>
</ul>


<p>となります。</p>

<h1 id="マウスカーソルを動かす">マウスカーソルを動かす</h1>

<p>KeyRemap4MacBookでは<code>VK_MOUSEKEY_LEFT</code>等といったキー設定でキーバインドにマウスカーソルの移動を当てられます。
他にも<code>PointingButton::RIGHT</code>で左クリック、<code>VK_MOUSEKEY_SCROLL_UP</code>で上スクロール、
を設定出来ます。</p>

<p>これらを入れた設定がこれ。</p>

<p>{% gist 5501291 %}</p>

<p>これで、</p>

<ul>
<li>マウスカーソルを{%key symbol cmd %}-{%key symbol ctrl%}-{%key y%}/{%key u%}/{%key i%}/{%key o%}({%key h%}/{%key j%}/{%key k%}/{%key l%}の上のキー達)によって左下上右に動かせる</li>
<li>ついでにクリックとかも出来る({%key symbol cmd %}-{%key symbol ctrl%}-{%key n%}/{%key p%}で左/右クリック)</li>
<li>ホイール操作も({%key symbol cmd %}-{%key symbol ctrl%}-{%key m%}/{%key ,%}で下/上ホイール)</li>
</ul>


<p>を出来る様になります。
これも初期設定ででも<code>Mouse Keys</code>という項目があり、
矢印でマウスを移動させたりするようになっていますが、
そこにある注意にあるように<code>General</code><i class="icon-arrow-right"></i><code>deon't remap any pointing devices</code>
にチェックを入れてしまうと機能しなくなるので注意してください。</p>

<h1 id="ウィンドウの移動">ウィンドウの移動</h1>

<p><a href="(/blog/2013/03/17/vim/">Windowsのyamy時</a>)と比べてKeyRemap4MacBookで出来なかった事は
ウィンドウの移動です。</p>

<p>これに関してはAppleScriptでウィンドウを動かすスクリプトを作って
それを<a href="http://blog.boastr.net/?page_id=1722">BetterTouchTool</a>
でショートカット起動することにより出来るようにしました。</p>

<h2 id="必要なAppleScriptの導入">必要なAppleScriptの導入</h2>

<ul>
<li><p><a href="https://github.com/rcmdnk/AppleScript">AppleScript</a>レポジトリにある
<code>windowMove*</code>という5つのスクリプトを取ってくる。
次の様にコンパイルして</p>

<pre><code>osacompile -o windowMove.scpt  windowMove.script
</code></pre>

<p>出来たファイル(<code>windowMove.scpt</code>など)を<code>~/Library/Scripts</code>等好きなところへ置いておく。</p></li>
<li><p>もしくは、上のAppleScriptレポジトリの物全部インストールするので良ければ、
READMEにあるようにレポジトリをcloneして<code>install.sh</code>を実行する。
(レポジトリにあるスクリプトを全部コンパイルして<code>~/Library/Scripts</code>へ入れます。)</p></li>
</ul>


<h2 id="BetterTouchToolでの設定">BetterTouchToolでの設定</h2>

<ul>
<li>BetterTouchToolの<code>Gestures</code><i class="icon-arrow-right"></i><code>Keyboard</code>で新しいショートカットを

<ul>
<li><code>Keyboard Shortcut</code>: {%key symbol cmd %}-{%key symbol shift%}-{%key y%}</li>
<li><code>Trigger Other Keyboard Shortcut</code>: 空白</li>
<li><code>Trigger Predefined Action</code>: <code>Open Application/File/Scripts</code><i class="icon-arrow-right"></i><code>~/Library/Scripts/windowMoveLeft.scpt</code>を選択</li>
</ul>


<p>の様に<code>y</code>,<code>u</code>,<code>i</code>,<code>o</code>に対して<code>Left</code>,<code>Down</code>,<code>Up</code>,<code>Right</code>を指定する。</p></li>
</ul>


<p>以上で</p>

<ul>
<li>ウィンドウを{%key symbol cmd %}-{%key symbol shift%}-{%key y%}/{%key u%}/{%key i%}/{%key o%})によって左下上右に動かせる</li>
</ul>


<p>が出来る様になります。
が、ここでちょっと困ったことに{%key symbol cmd %}-{%key symbol shift%}-{%key u%}
が<code>Mail.app</code>でメールの未読/既読の切り替えです。</p>

<p>このショートカットは使いたいのでKeyRemap4MacBookの方で他のキーに割り当てよう、
と思ったんですがBetterTouchToolで上書きしてしまうとそちらが優先されるので
{%key symbol cmd %}-{%key symbol shift%}-{%key u%}の指定はKeyRemap4MacBook
からはウィンドウを動かす、と解釈されてしまいます。</p>

<p>回避策としては</p>

<ul>
<li>環境設定から未読/既読のキーボードショートカットを変える</li>
<li>BetterTouchToolで違うキーにWindowMoveを割り当ててそれを使う</li>
<li>BetterTouchToolで違うキーにWindowMoveを割り当ててさらにKeyRemap4MacBook
で再度{%key symbol cmd %}-{%key symbol shift%}-{%key y%}等に割り当て直す</li>
</ul>


<p>などが考えられますが、キーボードショートカットの変更はやはり
KeyRemap4MacBookで閉じたいのと、Windowsで
{%key symbol cmd %}-{%key symbol shift%}-{%key y%}の設定にしていて慣れてしまっているので
一番回りくどい感じですが3番目の方法を取り次の様に設定しています。</p>

<ul>
<li>BetterTouchToolで{%key symbol option %}-{%key symbol shift%}-{%key y%}/{%key u%}/{%key i%}/{%key o%}にそれぞれwindowMoveLeft/Down/Up/Rightを指定。</li>
<li>KeyRemap4MacBookで{%key symbol cmd %}-{%key symbol shift%}-{%key y%}/{%key u%}/{%key i%}/{%key o%}にそれぞれ{%key symbol option %}-{%key symbol shift%}-{%key y%}/{%key u%}/{%key i%}/{%key o%}を指定</li>
</ul>


<p>従って現設定では<code>Cmd+Shift</code>+<code>y</code>でも<code>Option+Shift</code>+<code>y</code>でもウィンドウは
左に動きます。
KeyRemap4MacBookでの設定は<a href="https://gist.github.com/rcmdnk/5501590">こちらのGist</a>
にあります。</p>

<p>これでもいくつか潰してしまっているショートカット{%fn_ref 1%}{%fn_ref 2%}がありますが、
差し当たり使わないものなので良しとしておきます。</p>

<p>{% footnotes %}
  {%fn%}<a href="http://support.apple.com/kb/HT1343?viewlocale=ja_JP">OS X のキーボードショートカット</a>
  {%fn%}<a href="http://support.apple.com/kb/PH4775?viewlocale=ja_JP">Lion Mail: キーボードショートカット</a>
{% endfootnotes %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KeyRemap4MacBookで初期状態で設定出来るVim設定]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/06/computer-mac-keyremap4macbook-vim/"/>
    <updated>2013-06-06T04:11:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/06/computer-mac-keyremap4macbook-vim</id>
    <content type="html"><![CDATA[<p><a href="http://rcmdnk.github.io/blog/2013/06/05/computer-mac-keyremap4macbook/">前回</a>
に引き続きKeyRemap4MacBookについて、初期状態で簡単に導入できる
Vim設定について。
次回以降でこれ以外に自分で設定しているものなども紹介したいのですが、
差し当たりまず、KeyRemap4MacBookに最初から入っているVimライクな動きを
Vim以外で再現する設定についてまとめておきます。</p>

<!-- more -->


<p>{% include after_excerpt.html %}</p>

<h1 id="Vi+Mode/Complete+Vi+Mode/Simultaneous+Vi+Mode">Vi Mode/Complete Vi Mode/Simultaneous Vi Mode</h1>

<p>まずはこちらを御覧ください。</p>

<ul>
<li><a href="http://pqrs.org/macosx/doc/kr4mb-tips/07.html">カーソルキーを身近に!</a></li>
</ul>


<iframe src="http://www.slideshare.net/slideshow/embed_code/3947147" width="512" height="421" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/tekezo/keyremap4macbookvi-mode" title="Keyremap4macbook進化したvi mode" target="_blank">Keyremap4macbook進化したvi mode</a> </strong> from <strong><a href="http://www.slideshare.net/tekezo" target="_blank">tekezo</a></strong> </div></p>

<p>以上です...
だけでは寂しいのでもう少し。</p>

<h2 id="Vi+Mode">Vi Mode</h2>

<p><a href="/blog/2013/03/17/vim/">Vim以外でVimする: Windows編</a>という記事の最初の
方に書いた
指定のモディファイヤと<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>を押す事によってVim的な上下左右運動をする様な事が出来る設定です。</p>

<p>ただ、{% key symbol cmd %}-{%key symbol ctrl%}-でのキーバインドがなかったりするのでその辺りを自分で設定して使ってます。
(多分次回紹介)</p>

<h2 id="Simultaneous+Vi+Mode">Simultaneous Vi Mode</h2>

<p>これは上のVi Modeをモディファイヤの代わりに<code>s</code>と<code>d</code>キーを押している間
<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>移動を可能にするモードです。</p>

<p>特徴的な使い方もありますが基本的な使い方としてはVi Modeと一緒です。</p>

<h2 id="Complete+Vi+Mode">Complete Vi Mode</h2>

<p>この機能でノーマルモードに関する事は大体出来ます。
<code>Complete Vi Mode</code><i class="icon-arrow-right"></i><code>Excape to turn on Vi Mode</code>へチェックをすれば
Vim以外のアプリで<code>Esc</code>で<code>Vi Mode</code>へ入り<code>i</code>で通常モードに
変更するようになります。</p>

<p>このVi Mode時には</p>

<p><img src="{{site.imgpath}}post/20130610_KeyRemap4MacBook_vimode.jpg" title="" alt=""></p>

<p>という表示が出るので分かりやすいとのこと。</p>

<p>これで一通りの移動系(<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>,<code>Ctrl-f</code>,<code>Ctrl-b</code>,<code>b</code>,<code>e</code>,<code>w</code>,<code>0</code>,<code>$</code>)や
消去(<code>x</code>)、検索(<code>/</code>,<code>n</code>)等が出来るようになります。</p>

<p><code>Vi Mode</code>への入り方は両Cmd同時押し、等いくつか用意されています。</p>

<p>ただし、このモードではVim(MacVim)
以外全てのアプリ上で有効になるので、
ターミナルでの動きがおかしくなるのでもしそれでも使いたい場合は、
<code>/Applications/KeyRemap4MacBook.app/Contents/Resources/include/checkbox/complete_vi_mode.xml</code></p>

<p>の中身の<code>Escape to turn on Vi Mode</code>の</p>

<pre><code>&lt;not&gt;VI&lt;/not&gt;
</code></pre>

<p>となってる箇所を</p>

<pre><code>&lt;not&gt;VI,TERMINAL&lt;/not&gt;
</code></pre>

<p>の様に変更するとターミナルやiTerm2上でも無効になります。</p>

<h2 id="Ubiquitous+Vi+Mode">Ubiquitous Vi Mode</h2>

<p>上のスライドなどでは紹介されていませんが、
Ubiquitousはさらにノーマルモードが拡張された<code>Vi Mode</code>です。</p>

<p><code>Ubiquitous Vi Mode</code><i class="icon-arrow-right"></i><code>Recommended binding options to enter Normal Mode</code><i class="icon-arrow-right"></i><code>Esc toggles Normal Mode</code>と<code>Esc doesn not exit Normal Mode</code>
へチェックをすれば<code>Esc</code>でノーマルモードに入り移動系やらコピーカットペースト系
やら使う事が出来ます。</p>

<p>出来る事の一覧はKeyRemap4MacBookのUbiquitous Vi Modeの設定にある<code>Documentation</code>
か<a href="http://pqrs.org/macosx/keyremap4macbook/list.html.ja">あらかじめ用意されている設定項目一覧</a>から見てみて下さい。</p>

<p>こちらのモードは、ターミナル、iTerm2、Vim(MacVim)、Emacs、
Firefox、それからパスワード入力のポップアップ場面で無効になるようになっています。</p>
]]></content>
  </entry>
  
</feed>
