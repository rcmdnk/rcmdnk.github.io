<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: PowerShell | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/powershell/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-09T11:57:48+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Package Manager?]]></title>
    <link href="https://rcmdnk.com/blog/2020/05/23/computer-windows-chocolatey-packagemanagement-powershell/"/>
    <updated>2020-05-23T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/05/23/computer-windows-chocolatey-packagemanagement-powershell</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B013I9SWMC?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B013I9SWMC&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51m%2BteN-t7L._SS200_.jpg" alt="Microsoft Windows 10 Home April 2018 Update適用 32bit/64bit 日本語版【最新】|オンラインコード版" /></a>
</div>

<p>Windowsの新しいパッケージマネージャー、
<a href="https://devblogs.microsoft.com/commandline/windows-package-manager-preview/">Windows Package Manager</a>
というものが開発中でプレビュー版として配布されるようになったそうです。</p>

<p>以前PackageManagementというものがあったはずなんですが、どうなったのか。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#windows-package-manager" id="markdown-toc-windows-package-manager">Windows Package Manager</a></li>
  <li><a href="#packagemanagement" id="markdown-toc-packagemanagement">PackageManagement…?</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="windows-package-manager">Windows Package Manager</h2>

<p>Windows Package ManagerはOSSになっていてGitHubでソースも見ることが出来ます。</p>

<div class="github-widget" data-repo="microsoft/winget-cli"></div>
<div class="github-widget" data-repo="microsoft/winget-pkgs"></div>

<p><a href="https://docs.microsoft.com/ja-jp/windows/package-manager/">Windows パッケージ マネージャー</a></p>

<p><a href="https://www.reddit.com/r/sysadmin/comments/gmrwxi/windows_package_manager_wingetexe/">📢 Windows Package Manager  winget.exe : sysadmin</a></p>

<p>使いたい場合は
Windowsの<a href="https://insider.windows.com/ja-jp/">Insider</a>版を入れると
使える様になるとのことです。</p>

<p>PowerShellとかで</p>

<pre><code>PS &gt; winget instll firefox
</code></pre>

<p>とかでアプリやツールがインストールできる様になります。</p>

<p>Microsoft Storeに行くと<strong>アプリインストーラー</strong>というのがあって、これをインストールすると
使える様になるのですが、
このアプリ自体は以前から存在していて既にインストールされてるかもしれません。
以前のこれが入っていても<code>winget</code>は使えません。</p>

<p>Insiderを入れてるとプレビュー版の<strong>アプリインストーラー</strong>がインストール出来るようになるので、
Insiderにしてから再度<strong>アプリインストーラー</strong>を入れると<code>winget</code>が使える様になります。</p>

<p>これをインストールしてもInsider版にしておかないと使えるようにはならないみたいです。
(PowerShellで<code>winget</code>コマンドが使えない。)</p>

<p>直接
<a href="https://github.com/microsoft/winget-cli/releases">Releases</a>
から取れる、とも書いてあるんですが、今現在ここにある
<strong>http://microsoft.desktopappinstaller_8wekyb3d8bbwe.appxbundle/</strong>
がリンク切れになってます。</p>

<p>自分でビルドするのも準備が面倒なのでやってません。</p>

<p>Microsoftのネイティブなパッケージマネージャー、コマンドラインツール、
ということで期待されていて、
特にマルウェアなどの危険なパッケージを排除し、信頼性の高いものにしようとしているみたいです。</p>

<p>その辺りでサードパーティーなChocolateyなどとの違いを見せていこうとしているようです。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2014/07/30/computer-windows-chocolatey/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20131122_chocolatey_120_90.jpg" width="120" height="90" alt="20131122_chocolatey_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/07/30/computer-windows-chocolatey/">Chocolateyのアップデート</a></div></li></ul>

<p>まだ開発は途上段階、といった感じで
パッケージをアップデートする、などは出来なかったりするみたいです。</p>

<p><a href="https://github.com/microsoft/winget-cli/issues/120">–update · Issue #120 · microsoft/winget-cli</a></p>

<h2 id="packagemanagement">PackageManagement…?</h2>

<p>と、サードパーティー製のものは今もある、という話ですが、
実はネイティブなパッケージマネージャーも以前出しています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/1849756570?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=1849756570&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51ITdNrjmqL._SS90_CR0,0,120,90_.jpg" alt="Deliciously Chocolatey: 100 Cocoa-rich Recipes for Bakes, Cakes and Chocolate Treats" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/03/11/computer-windows-chocolatey-packagemanagement/">Windows 10でPackageManagement (OneGet) + Chocolateyでアプリ管理</a></div></li></ul>

<p>元々<a href="https://github.com/OneGet/oneget">OneGet</a>と言われていたものが
PackageManagementというプロジェクト?となりました。</p>

<p><a href="https://docs.microsoft.com/ja-jp/powershell/module/packagemanagement/?view=powershell-6">PackageManagement</a></p>

<p><a href="https://ja.wikipedia.org/wiki/PackageManagement">PackageManagement - Wikipedia</a></p>

<p>これを使って</p>

<pre><code>PS &gt; Install-Package Firefox
</code></pre>

<p>とかやるとインストールが出来るようになってました。
このコマンドは最初からインストールされています。</p>

<p>PackageManagementはCoholateyなどのレポジトリも使うことが出来、
それらサードパーティ製のレポジトリのラッパーツール的な使い方も出来ました。</p>

<p>なのでこれを使ってたんですが、いつのまにやらコマンドは使えるものの、</p>

<p>一方、Chocolateyの方は使えたのでそちらを使ってました。</p>

<p>で、今回こんな話が出てきたので、PackageManagementのアップデートか?
と思ったらどうやら全く別のものな模様。</p>

<p>最近のPackageManagementをちょっと探ってみると、どうやら一応使えてる人は使えてるみたい?
(でもやっぱり手元でやってみるとうまくいかない。。。)</p>

<p><a href="https://github.com/oneget/oneget">レポジトリ</a>
の方は1ヶ月位前にはアップデートがありますが、リリースは1年くらい前が最後。</p>

<p>なのでこちらは無くなる感じ?</p>

<p>あと、今回のWindows Package Managerの話が出てくる所で<code>OneGet</code>という単語は出てくるんですが、
<code>PackageManagement</code>という単語は見かけませんでした。</p>

<p>PackageManagementというものが認知度が低かったのか、ほぼなかったことにされそうな感じ?</p>

<p>PackageManagementがそもそもなんで<code>Management</code>という名前がツールとして微妙だな、と思ってましたが、
新しいのは<code>Manager</code>とそれっぽい感じ。
ただ、Widnows Package Managerとはまたそのままだな、と。</p>

<h2 id="まとめ">まとめ</h2>

<p>ということで、まだ実際に触ってないのですが、PackageManagementは?と思ったので書いておきました。</p>

<p>WSL2とかもあるので、Insider入れて色々と見てみても良いかな、と思い始めた今日このごろ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwin(Bash/Zsh)からPowerShellスクリプトを直接実行するbashrc/zshrc設定]]></title>
    <link href="https://rcmdnk.com/blog/2017/04/28/computer-windows-cygwin-powershell/"/>
    <updated>2017-04-28T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2017/04/28/computer-windows-cygwin-powershell</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873113822?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873113822&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51YZUMi%2BAsL._SS200_.jpg" alt="Windows PowerShellクックブック" /></a>
</div>

<p>Windows 10のCreators Updateから標準コマンドシェルがPowerShell
になりましたが、やはり主にWindowsでしか使わないPowerShellだと慣れてない人も多いはずです。</p>

<p>PowerShellスクリプトの編集などをCygwin等のBash環境などから行って
その中ですぐにスクリプトを実行できると割と便利です。</p>

<p>というわけで、CygwinのBashの中からPowerShellなスクリプトを指定した場合に
直接実行できる様にする設定について。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#bash-commad_not_found_handle" id="markdown-toc-bash-commad_not_found_handle">Bash: commad_not_found_handle</a></li>
  <li><a href="#シェルcygwinの特別仕様" id="markdown-toc-シェルcygwinの特別仕様">シェル@Cygwinの特別仕様?</a></li>
  <li><a href="#シェバンを設定して使う" id="markdown-toc-シェバンを設定して使う">シェバンを設定して使う</a></li>
  <li><a href="#zsh-alias--s-suffix-alias" id="markdown-toc-zsh-alias--s-suffix-alias">Zsh: alias -s (suffix alias)</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="bash-commad_not_found_handle">Bash: commad_not_found_handle</h2>

<p>Bash 4から<code>command_not_found_handle</code>という、
指定されたコマンドが無かった場合に実行される関数が実装されていています。</p>

<p>この中でコマンドとしてファイルなどを指定した際、その拡張子を見て
実際に実行するコマンドを指定したりすることが出来ます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/150050033X?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=150050033X&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51BLr1w7qoL._SS90_CR0,0,120,90_.jpg" alt="Dictionary of Prefixes and Suffixes: Useful English Affixes (English Word Power)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/05/26/computer-bash/">BashでZshのsuffix aliasやauto cdを実現する</a></div></li></ul>

<p>詳しくは上のポストにありますが、
上のポストでは<code>.md</code>や<code>.cc</code>など、通常のファイルを直接実行しようとすると
<code>vim</code>で開くように設定してあります。</p>

<p>これに手を加えてこんな感じにします。</p>

<figure class="code"><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">BASH_VERSINFO</span><span class="p">[0]</span><span class="si">}</span><span class="s2">&quot;</span> -ge <span class="m">4</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nv">_suffix_vim</span><span class="o">=(</span>md markdown txt text tex cc c C cxx h hh java py rb sh<span class="o">)</span>
</span><span class="line">  alias_function<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="nb">eval</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">() </span><span class="k">$(</span><span class="nb">declare</span> -f <span class="si">${</span><span class="nv">2</span><span class="si">}</span> <span class="p">|</span> sed 1d<span class="k">)</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">if</span> ! <span class="nb">type</span> -a orig_command_not_found_handle &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">type</span> -a command_not_found_handle &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">      alias_function orig_command_not_found_handle command_not_found_handle
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      orig_command_not_found_handle <span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;bash: </span><span class="nv">$1</span><span class="s2">: command not found&quot;</span>
</span><span class="line">        <span class="k">return</span> <span class="m">127</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line">  command_not_found_handle<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="nv">cmd</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nv">args</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;</span><span class="nv">$cmd</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">      <span class="k">if</span> <span class="nb">echo</span> <span class="s2">&quot; </span><span class="si">${</span><span class="nv">_suffix_vim</span><span class="p">[*]</span><span class="si">}</span><span class="s2"> &quot;</span><span class="p">|</span>grep -q <span class="s2">&quot;</span><span class="si">${</span><span class="nv">cmd</span><span class="p">##*.</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">type</span> -a vim &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">          vim <span class="s2">&quot;</span><span class="si">${</span><span class="nv">args</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">          <span class="k">return</span> <span class="nv">$?</span>
</span><span class="line">        <span class="k">fi</span>
</span><span class="line">      <span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">cmd</span><span class="p">##*.</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=</span> <span class="s2">&quot;ps1&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">type</span> -a powershell &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">          powershell -F <span class="s2">&quot;</span><span class="si">${</span><span class="nv">args</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">          <span class="k">return</span> <span class="nv">$?</span>
</span><span class="line">        <span class="k">fi</span>
</span><span class="line">      <span class="k">fi</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">    orig_command_not_found_handle <span class="s2">&quot;</span><span class="si">${</span><span class="nv">args</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="nb">shopt</span> -s autocd <span class="c1"># cd to the directory, if it is given as a command.</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>vim</code>の設定に加えて<code>ps1</code>という拡張子の場合に<code>powershell</code>コマンドへ突っ込む、というだけです。</p>

<p>これで、</p>

<figure class="code"><figcaption><span>example.ps1  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>Write-Output <span class="s2">&quot;PowerShell example!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>とかいうスクリプトを作ったとすると、
これがあるフォルダで</p>

<pre><code>$ example.ps1
PowereShell example!
</code></pre>

<p>と実行できます。実際には</p>

<pre><code>$ powershell -F example.ps1
</code></pre>

<p>が実行されてるわけです。</p>

<p>上の設定をしなければ</p>

<pre><code>-bash: example.ps1: command not found
</code></pre>

<p>的なコマンドが見つからないというエラー(エラーコード127)が出ます。</p>

<p>Cygwinではデフォルトで</p>

<pre><code>/cygdrive/c/WINDOWS/System32/WindowsPowerShell/v1.0
</code></pre>

<p>というフォルダ(もしくは現状のバージョン)へのPATHが通っていて
この中に<code>powershell</code>コマンドがあるので
デフォルトで使えるはずです。</p>

<p>一応コマンドのチェックは入れています。</p>

<p>現在ではWindows以外の環境でもPowerShellを使えるため
この設定をしておけばWindows以外でもBashから直接PowerShellなスクリプトを
呼ぶことが出来ます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873113822?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873113822&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51YZUMi%2BAsL._SS90_CR0,0,120,90_.jpg" alt="Windows PowerShellクックブック" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/08/19/computer-windows-mac-linux-powershell/">PowerShellがオープンソース化しMacやLinuxでも使える様になった</a></div></li></ul>

<p>ので、この設定をしておけば他の環境でも
もしPowerShellがインストールしてあれば使えます。</p>

<p>上に書いた<a href="https://rcmdnk.com/blog/2015/05/26/computer-bash/">BashでZshのsuffix aliasやauto cdを実現する</a>の
中で、最初Bash 3の場合についても書いてましたが、
ちょっと勘違いしていて最後に実行したコマンドを取ってくるのが簡単には出来ないので
Bash 4の場合だけにしてあります。</p>

<p>やろうと思えば<code>history</code>を使って取ってきたりすることは可能だとは思いますが。</p>

<p><code>powershell</code>に関してちょっと補足として、
<code>-F</code>を入れなくても</p>

<pre><code>$ powershell ./example.ps1
</code></pre>

<p>とすればスクリプトを実行できますが、</p>

<pre><code>$ powershell example.ps1
example.ps1 : The term 'example.ps1' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ example.ps1
+ ~~~~~
    + CategoryInfo          : ObjectNotFound: (example.ps1:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
</code></pre>

<p>の様にカレントディレクトリにあるファイルを<code>./</code>省略して書くと
ファイルではなくPowerShellの中のパス内にあるcmdlet等を探しに行って
無い、というエラーを吐いてきます。</p>

<p>ということでスクリプトを実行する時は基本的にはきちんと<code>-F</code>を使ってファイルを与えるべきです。</p>

<h2 id="シェルcygwinの特別仕様">シェル@Cygwinの特別仕様?</h2>

<p>ただし、ちょっと注意が必要なのはこの方法を設定してあっても</p>

<pre><code>$ ./example.ps1
./example.ps1: line 1: Write-Output: command not found
</code></pre>

<p>と、コマンド入力時に実行ファイルの様にしてしまうとこんな感じのエラーが出ます。</p>

<p>Cygwinの場合、何故かCygwin内での実行権限に関係なく
ファイルを指定するとその内容をシェルスクリプトとして実行してしまうようです。</p>

<p>試しにこんなことをやってみると</p>

<pre><code>$ echo 'echo $SHELL; echo $$' &gt; example.txt
$ chmod 644 example.txt
$ ./example.txt
/bin/bash
123456
$ echo $$
9876
</code></pre>

<p>の様に、サブシェルを立ち上げてその中でファイルの内容を実行するという
状態になっています。</p>

<p>このシェルは必ず<strong>/bin/bash</strong>になるらしく、
zshに切り替えた環境で同じことをやっても<strong>/bin/bash</strong>を使う様です。</p>

<p>通常、他のUnixだと実行権限が無ければ</p>

<pre><code>$ ./example.txt
bash: ./example.txt: Permission denied
$
</code></pre>

<p>みたいなエラーコード126のエラーで終わるはずです。</p>

<p>これがあるので、もしPowerShellが現在居るディレクトリとは別の場所にあると
上の方法ではどうしようもありません。
(どうしても<code>/</code>が入ってくると実行ファイルとして受け取られ<code>Permission denied</code>が出てしまいます。)</p>

<p>ちなみに、
MobaXtermでやってみても同じように実行権限が無くてもシェルスクリプトとして実行されました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/01/24/computer-windows-remote/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20150124_mobaxterm_120_90.jpg" width="120" height="90" alt="20150124_mobaxterm_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/01/24/computer-windows-remote/">MobaXterm: Windowsでのcygwinに代わるターミナル環境</a></div></li></ul>

<p>一方、<code>powereshell</code>へのパスは通っているのですが、実行しようとすると、</p>

<pre><code>$ example.ps1
. : File C:\Users\user\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1 cannot be loaded because running
scripts is disabled on this system. For more information, see about_Execution_Policies at http://go.microsoft.com/fwlin
k/?LinkID=135170.
At line:1 char:3
+ . 'C:\Users\user\Documents\WindowsPowerShell\Microsoft.PowerShell_p ...
+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess
./example.ps1 : File C:\cygwin64\home\user\example.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at http://go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ ./example.ps1
+ ~~~~~~~~~~~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess
$
</code></pre>

<p>みたいなエラーが出ました。
何やら使おうとしてるスクリプトがMobaXtermの環境だと使えないということらしいです。</p>

<h2 id="シェバンを設定して使う">シェバンを設定して使う</h2>

<p>これまでのファイルはShebangが書いてないものですが、
Shebangが書いてあると、</p>

<pre><code>$ echo '#!/usr/bin/env powershell'  &gt; example.txt
$ echo 'echo $SHELL; echo $$' &gt;&gt; example.txt
$ chmod 644 example.txt
$ ./example.txt
/bin/bash
12309
</code></pre>

<p>の様にShebangに従ってスクリプトを実行する様です。
(他のシステムではShebangがあろうとなかろうと実行権限が無ければエラーになります。)</p>

<p>なので、上の設定に加えて単にPowerShellのスクリプトの先頭に</p>

<pre><code>#!/usr/bin/env powershell
</code></pre>

<p>と書いておけば上の様に<code>/</code>が入ってもきちんとShebangに従って実行してくれるので
上手く行きます。
これなら他のディレクトリにあっても大丈夫です。</p>

<p>というよりも、そもそも彼園とディレクトリのファイルを
<code>./</code>無しで呼ぶ、というのも気持ち悪い話でなので
この方法の方が素直です。</p>

<p>ただし、Windows以外の環境だと、実行権限が付与されてないと実行されないので、
その場合は上の<code>command_not_found_handle</code>を使った方法が便利だったりします。</p>

<p>もしくはPowerShellのスクリプトも実行権限がついてないと実行しないようにしたい、
というのであれば逆にこの設定は邪魔になるのでやめた方が良いかも、という場合も。</p>

<h2 id="zsh-alias--s-suffix-alias">Zsh: alias -s (suffix alias)</h2>

<p>Zshの場合は簡単で</p>

<pre><code>alias -s ps1='powershell -F'
</code></pre>

<p>と設定しておくと</p>

<pre><code>$ example.ps1
</code></pre>

<p>で</p>

<pre><code>$ powershell -F example.ps1
</code></pre>

<p>を呼ぶことになります。</p>

<h2 id="まとめ">まとめ</h2>

<p>PowerShellスクリプトをCygwinの中とかから呼べたら便利なので
より簡単に呼べる様に考えてみましたが、
一番シンプルで分かりやすいのはスクリプトにShebang書いておくことかな、という感じがしました。</p>

<p>ShebangはPowerShellスクリプト自体には単なるコメントで何も意味をなさないので
特に弊害も無いので自分で書くPowerShellスクリプトにはShebangを書いておくかな、と。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell on Bash on Ubuntu on Windows]]></title>
    <link href="https://rcmdnk.com/blog/2016/08/20/computer-windows-bash-powershell/"/>
    <updated>2016-08-20T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2016/08/20/computer-windows-bash-powershell</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/1232026301?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=1232026301&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41TVHE7ZqkL._SS200_.jpg" alt="Linguaggi Di Scripting: TCL, JavaScript, Falcon, Linguaggio Di Scripting, Perl, Windows Powershell, Ruby, Scumm, Bash, Mirc Scripting, Hybris" /></a>
</div>

<p>先日PowerShellがオープンソース化しLinuxやOS Xでも使える様になりましたが、
それに先駆けWindows内でLinuxをSubsystemとして動かしBashを使う機能が
正式にWindows 10に導入されています。</p>

<p>そこで無駄にPowerShellをそのSubsystem内のBash上で動かすということをやってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#powershell-on-bash-on-ubuntu-on-windows" id="markdown-toc-powershell-on-bash-on-ubuntu-on-windows">PowerShell on Bash on Ubuntu on Windows</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="powershell-on-bash-on-ubuntu-on-windows">PowerShell on Bash on Ubuntu on Windows</h2>

<p>まず、Windows内でBashを使うBash on Ubuntu on Windowsについてはこちらから。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/06/05/computer-windows-ubuntu-bash/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160605_bashonubuntuonwindows_120_90.jpg" width="120" height="90" alt="20160605_bashonubuntuonwindows_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/06/05/computer-windows-ubuntu-bash/">Windowsに採用されたBash (Ubuntu)を試してみる</a></div></li></ul>

<p><strong>開発者モード</strong>にして<strong>Windowsの機能の有効化</strong>から
<strong>Windows Subsystem for Linux (Beta)</strong>を有効にするなど
少し使うまでに手順が必要です。</p>

<p>以前までは開発者、テスター向けのInsider Preview板ビルドにしか入ってませんでしたが、
先日のWindows 10 Anniversary Updateで通常の最新Windows 10の中にも
組み込まれる様になりました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/08/04/computer-windows-ubuntu-bash/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160804_windows10dark_120_90.jpg" width="120" height="90" alt="20160804_windows10dark_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/08/04/computer-windows-ubuntu-bash/">Windows 10でBash on Ubuntu on Windowsも含まれるAnniversary Updateの提供開始</a></div></li></ul>

<p>これでBashターミナルを立ち上げてLinuxのリリースなどを見て見ると、</p>

<pre><code>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.4 LTS
Release:        14.04
Codename:       trusty
</code></pre>

<p>と、Ubuntu 14.04が使われています。</p>

<p>ここにPowerShellを入れてみます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873113822?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873113822&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51YZUMi%2BAsL._SS90_CR0,0,120,90_.jpg" alt="Windows PowerShellクックブック" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/08/19/computer-windows-mac-linux-powershell/">PowerShellがオープンソース化しMacやLinuxでも使える様になった</a></div></li></ul>

<p>Ubuntu 14.04なので、</p>

<p>$ sudo dpkg -i powershell_6.0.0-alpha.9-1ubuntu1.14.04.1_amd64.deb
<a href="https://github.com/PowerShell/PowerShell/blob/master/docs/installation/linux.md">Package installation instructions</a>
に従って、</p>

<pre><code>$ sudo apt-get install libunwind8 libicu52
$ wget https://github.com/PowerShell/PowerShell/releases/download/v6.0.0-alpha.9/powershell_6.0.0-alpha.9-1ubuntu1.14.04.1_amd64.deb
$ sudo dpkg -i powershell_6.0.0-alpha.9-1ubuntu1.14.04.1_amd64.deb
</code></pre>

<p>でOK。</p>

<p>Linuxの場合は<strong>/opt/</strong>以下にインストールされるとなっていますが、
実際、<strong>/opt/microsoft/powershell/6.0.0-alpha.9/</strong>
というディレクトリが出来ています。
これがPowerShell内での<code>$PSHOME</code>になります。</p>

<p><code>powershell</code>コマンドは<strong>/usr/bin</strong>にシンボリックリンクとしてインストールされていて、</p>

<pre><code>$ ls -l /usr/bin/powershell
.... /usr/bin/powershll -&gt; /opt/microsoft/powershell/6.0.0-alpha.9/powershell
</code></pre>

<p>となっています。</p>

<p>OS Xでは<strong>/usr/local/bin</strong>にリンクが作られているのでちょっと注意。</p>

<p>取り敢えずインストールできたのでおもむろに立ち上げてみると、</p>

<p><img src="https://rcmdnk.com/images/post/20160820_powershellstart.jpg" alt="20160820_powershellstart.jpg" class="pic" /></p>

<p>こんな感じで上手く言ってる様に見えます。</p>

<p>が、何か出力を出すようなコマンドを打ってみると、</p>

<p><img src="https://rcmdnk.com/images/post/20160820_powershelloutput.jpg" alt="20160820_powershelloutput.jpg" class="pic" /></p>

<p>こんな感じでぐちゃぐちゃに。
ここでは</p>

<pre><code>PS /home/user &gt; Write-Host hoge
</code></pre>

<p>を二回行ってるだけです。</p>

<p>最初のコマンドもプロンプト部分が実行時に消されてコマンドが左詰めされていて、
さらに、2番目のコマンドは一番上の<code>Write-Host hoge</code>で、
何故かこの位置に表示され、以前の出力を上書きするような形になっています。</p>

<p>何の不具合かは分かりませんが、現状
<strong>PowerShell on Bash on Ubuntu on Windows</strong>
(Bash上で立ち上げてるだけでUbuntu上で動いてるので
<strong>PowerShell on Ubuntu on Windows</strong>のが正しいかもしれませんが)
は使えない、と言う状態みたいです。</p>

<p>まあ、まったくもって不毛な使い方なんでどうでもよいわけですが。</p>

<p>ただ、PowerShellのIssuesとかを見ていると特にtmuxやGNU screenでの
表示の乱れがあったりするみたいで、
その辺も全く無関係ではないのかもしれません。</p>

<blockquote>
  <p><a href="https://github.com/PowerShell/PowerShell/issues">Issues · PowerShell/PowerShell</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShellがオープンソース化しMacやLinuxでも使える様になった]]></title>
    <link href="https://rcmdnk.com/blog/2016/08/19/computer-windows-mac-linux-powershell/"/>
    <updated>2016-08-19T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2016/08/19/computer-windows-mac-linux-powershell</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873113822?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873113822&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51YZUMi%2BAsL._SS200_.jpg" alt="Windows PowerShellクックブック" /></a>
</div>

<p>Windowsで使われているシェルのPowerShellがオープンソース化し、
さらにMacやLinuxへもインストールして使える様になりました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#powershell-for-every-system" id="markdown-toc-powershell-for-every-system">PowerShell for every system!</a></li>
  <li><a href="#macで使ってみる" id="markdown-toc-macで使ってみる">Macで使ってみる</a></li>
  <li><a href="#アンインストール" id="markdown-toc-アンインストール">アンインストール</a></li>
  <li><a href="#macのデフォルトシェルにしてみる" id="markdown-toc-macのデフォルトシェルにしてみる">Macのデフォルトシェルにしてみる</a></li>
  <li><a href="#powershellスクリプトをbash等から使う" id="markdown-toc-powershellスクリプトをbash等から使う">PowerShellスクリプトをBash等から使う</a></li>
  <li><a href="#初期設定ファイル" id="markdown-toc-初期設定ファイル">初期設定ファイル</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="powershell-for-every-system">PowerShell for every system!</h2>

<div class="github-widget" data-repo="PowerShell/PowerShell"></div>

<p>GitHubでPowerShellのソースが公開されています。</p>

<blockquote>
  <p><a href="https://azure.microsoft.com/en-us/blog/powershell-is-open-sourced-and-is-available-on-linux/">PowerShell is open sourced and is available on Linux</a></p>
</blockquote>

<p>同時に、ここからMac用やLinux用のインストールイメージもダウンロードできるようになっています。</p>

<blockquote>
  <p><a href="https://github.com/PowerShell/PowerShell/blob/master/docs/installation/linux.md">Package installation instructions</a></p>
</blockquote>

<p>ここにあるとおり、Ubuntuなら、<code>apt-get</code>、CentOSなら<code>yum</code>で
必要パッケージを入れてからPowerShellのパッケージファイルを使ってインストール出来るようになっています。</p>

<p>Ubuntu 16.04なら</p>

<pre><code>$ sudo apt-get install libunwind8 libicu55
$ wget https://github.com/PowerShell/PowerShell/releases/download/v6.0.0-alpha.9/powershell_6.0.0-alpha.9-1ubuntu1.16.04.1_amd64.deb
$ sudo dpkg -i powershell_6.0.0-alpha.9-1ubuntu1.16.04.1_amd64.deb
</code></pre>

<p>Mac (OS X)では10.11用の<code>pkg</code>ファイルが用意されていて、
<a href="https://github.com/PowerShell/PowerShell/releases/tag/v6.0.0-alpha.9">Releaseページ</a>
から
<a href="https://github.com/PowerShell/PowerShell/releases/download/v6.0.0-alpha.9/powershell-6.0.0-alpha.9.pkg">powershell-6.0.0-alpha.9.pkg</a>
をダウンロードしてきてインストールを行います。</p>

<pre><code>$ wget https://github.com/PowerShell/PowerShell/releases/download/v6.0.0-alpha.9/powershell-6.0.0-alpha.9.pkg
$ sudo installer -pkg powershell-6.0.0-alpha.9.pkg -target /
</code></pre>

<p>でインストール完了です。</p>

<p>Linuxではインストール先は</p>

<pre><code>/opt/microsoft/powershell/6.0.0-alpha.9/
</code></pre>

<p>Macでは</p>

<pre><code>/usr/local/microsoft/powershell/6.0.0-alpha.9/
</code></pre>

<p>になっています。</p>

<p>これらのディレクトリはPowerShellを立ち上げると<code>$PSHOME</code>という値に設定されています。</p>

<pre><code>PS /usr/local&gt; Write-Host $PSHOME
/usr/local/microsoft/powershell/6.0.0-alpha.9
</code></pre>

<p>Macで<a href="https://rcmdnk.com/blog/tags/homebrew/">Homebrew</a>を使っていれば
<strong>/usr/local</strong>が既に存在していると思いますが、
もし存在していない場合、El Capitanから導入されたSIPによって
弾かれる可能性があるので
その場合は下に従って一度SIPを切って<strong>/usr/local</strong>ディレクトリを用意する必要があります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B016AZMAIS?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B016AZMAIS&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/510n9cnBIrL._SS90_CR0,0,120,90_.jpg" alt="The Complete Beginners Guide to Mac OS X El Capitan: (For MacBook, MacBook Air, MacBook Pro, iMac, Mac Pro, and Mac Mini) (English Edition)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/10/10/computer-mac/">OS X 10.11 El CapitanのSystem Integrity Protection(SIP) (rootless)についてちょっと詳しく</a></div></li></ul>

<p>ちなみに、Homebrewで探してみると</p>

<pre><code>$ brew search powershell
Caskroom/cask/powershell
</code></pre>

<p>と、Caskがありそうなんですが、caskで探すと、</p>

<pre><code>$ brew cask search powershell
No Cask found for "powershell".
</code></pre>

<p>無く、実際Caskファイルは探してもありません。</p>

<p>ちょっと謎ですが、多分PowerShellのインストール用CaskなりFormulaは
そのうち公式の中に出来ると思います。</p>

<h2 id="macで使ってみる">Macで使ってみる</h2>

<p>取り敢えずMacに入れてみましたが、
<strong>/usr/local/microsoft/powershell/6.0.0-alpha.9/</strong>に本体がインストールされると同時に、
<strong>/usr/local/bin/powershell</strong>に
<strong>/usr/local/microsoft/powershell/6.0.0-alpha.9/powershell</strong>へのリンクが貼られていました。</p>

<p>OS Xでは<strong>/usr/local/bin</strong>下にできますが、Linuxだと
<strong>/usr/bin/powershell</strong>と、<strong>/usr/bin/</strong>下にシンボリックリンクが出来ます。</p>

<p>また、<strong>$HOME/.config/PowerShell</strong>、<strong>$HOME/.local/share/powershell</strong>というディレクトリが出来ていました。</p>

<p>Homebrewを使っている場合には通常
<strong>/usr/local/bin/</strong>にPATHを通していると思うので、
インストール後、単にコマンドを実行すると</p>

<pre><code>$ powershell
PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.

PS /usr/local&gt;
</code></pre>

<p>の様にMacの中でPowerShellが立ち上がります!</p>

<p>まず、これを見ても分かる通り、パスの区切りがバックスラッシュ(<code>\</code>)ではなく
通常のスラッシュ(<code>/</code>)で表現されています。</p>

<p>WindowsのPowerShellでもパスの区切りは<code>\</code>、<code>/</code>のどちらでも
使えますが、表示する時は<code>\</code>です。</p>

<p>Macなどでも両方使えますが、表示する時はUnix標準の<code>/</code>で表される様です。</p>

<p>で、実際にPowerShellコマンドが使えます。</p>

<pre><code>PS /usr/local&gt; Get-ChildItem


    Directory: /usr/local


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----          X/XX/XX  XX:XX PM                bin
d-----          X/XX/XX  XX:XX PM                Caskroom
d-----          X/XX/XX  XX:XX PM                Cellar
d-----          X/XX/XX  XX:XX AM                djcelery
d-----          X/XX/XX  XX:XX PM                etc
d-----          X/XX/XX  XX:XX AM                Frameworks
d-----          X/XX/XX  XX:XX AM                gems
d-----          X/XX/XX  XX:XX AM                include
d-----          X/XX/XX  XX:XX AM                lib
d-----          X/XX/XX  XX:XX AM                Library
d-r---          X/XX/XX  XX:XX AM                microsoft
d-----          X/XX/XX  XX:XX PM                opt
d-----          X/XX/XX  XX:XX AM                share
d-----          X/XX/XX  XX:XX PM                texlive
d-----          X/XX/XX  XX:XX AM                var
------          X/XX/XX  XX:XX PM           3161 CODEOFCONDUCT.md
------          X/XX/XX  XX:XX AM           1241 LICENSE.txt
------          X/XX/XX  XX:XX AM           5451 README.md


PS /usr/local&gt;
</code></pre>

<p>PowerShell特有のパイプ機能(アウトプットをオブジェクトとして渡す機能)も使えます。</p>

<pre><code>PS /usr/local&gt; Get-ChildItem|Select-Object -property Length,Name -first 3

Length Name
------ ----
       bin
       Caskroom
       Cellar


PS /usr/local&gt;
</code></pre>

<blockquote>
  <p><a href="http://www.atmarkit.co.jp/ait/articles/1004/15/news106.html">PowerShell的システム管理入門：第2回　PowerShellの基礎 (1/3) - ＠IT</a></p>
</blockquote>

<blockquote>
  <p><a href="https://technet.microsoft.com/ja-jp/scriptcenter/powershell_owner04.aspx">Windows PowerShell でのパイプ処理とパイプライン</a></p>
</blockquote>

<p>PowerShellはコマンドプロンプトのコマンドと比べると大分
Bash等と同じ様なイメージで使えますが、
基本的なコマンド名が違うものになっています。</p>

<blockquote>
  <p><a href="https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell">Learning PowerShell</a></p>
</blockquote>

<p>ですが、WindowsのPowerShellの場合、例えば<code>ls</code>なんかは
PowerShellの<code>Get-ChildItem</code>というコマンドのエイリアスになっていて、
Bashのコマンド名は一通りPowerShellの似た機能のエイリアスになっています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4873113822?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4873113822&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51YZUMi%2BAsL._SS90_CR0,0,120,90_.jpg" alt="Windows PowerShellクックブック" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/03/15/computer-windows/">PowerShellをちょっと使ってみての感想</a></div></li></ul>

<p>一方、MacやLinuxにインストールされたPowerShellの中ではこの様なエイリアスは
作られてない状態で、<code>ls</code>等を使うと元々の<strong>/bin/ls</strong>にあるコマンドが呼ばれる様です。</p>

<pre><code>PS /usr/local&gt; ls
CODEOFCONDUCT.md  README.md   lib
Caskroom    bin     microsoft
Cellar      djcelery    opt
Frameworks    etc     share
LICENSE.txt   gems      texlive
Library     include     var
PS /usr/local&gt;
</code></pre>

<p>こんな感じでBashなどで使う<code>ls</code>と同じ出力になります。
引数も<code>ls -l</code>等、Bash等で使う<code>ls</code>のものが使え結果も
それに従って出ます。</p>

<blockquote>
  <p><a href="https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md">Known Issues for PowerShell on Linux</a></p>
</blockquote>

<p>他のコマンドやシェルスクリプトも普通に使えます。</p>

<p>ただ、GNU screen等を立ち上げて(PowerShellからでも起動は可能)、
その中のPowerShellでPowerShellのもので無いコマンド(<code>ls</code>なり自作スクリプトなり)を使うと
結果出力直後に固まります。</p>

<p>PowerShellでは出力を色々特殊な扱いしてる面もあるので
その辺GNU screenやtmuxと言った
ターミナルマルチプレクサとはちょっと相性が悪いのかもしれません。</p>

<h2 id="アンインストール">アンインストール</h2>

<p>アンインストールに関する記述が見つけられませんでしたが、
基本的には<strong>/opt/microsoft</strong>(Linux)または<strong>/usr/local/micfosoft</strong>を
削除して、<strong>/usr/bin/powershell</strong>、または<strong>/usr/local/bin/powershell</strong>の
シンボリックリンクを削除すれば良いだけだと思います。</p>

<p>設定ファイルも消したければ、
<strong>~/.config/PowerShell</strong>、<strong>~/.local/share/powershell</strong>も。</p>

<h2 id="macのデフォルトシェルにしてみる">Macのデフォルトシェルにしてみる</h2>

<p>PowerShellもBashやZsh同様シェルの一つなので当然デフォルトシェルに指定することも出来ます。</p>

<p>Macでデフォルトシェル(ログインシェル)を変更する方法については下を参考に。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/05/25/computer-mac-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20150525_details_120_90.jpg" width="120" height="90" alt="20150525_details_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/05/25/computer-mac-bash-zsh/">Macでログインシェルを確認/変更するいくつかの方法</a></div></li></ul>

<p>これで環境設定などから変更してあげて、<strong>ターミナル.app</strong>等を立ち上げると</p>

<pre><code>Last login: Fri Aug 19 XX:XX:XX on ttys015
PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.

PS /Users/user&gt;
</code></pre>

<p>みたいな感じでいきなりPowerShellが立ち上がります。</p>

<p>これで常にPowerShellで作業が出来ます!</p>

<h2 id="powershellスクリプトをbash等から使う">PowerShellスクリプトをBash等から使う</h2>

<p>PowerShellをインストールしたので当然PowerShellスクリプトも使えるわけですが、
通常、PowerShellの中では<strong>.ps1</strong>という拡張子が付いたファイルを
PowerShellスクリプトだと解釈して中身を実行します。</p>

<p>Bashなどでは拡張子は関係ないのでこのままだと使えません。
使うには他のシェルやコマンド同様、Shebangを書いてあげれば良いだけ。</p>

<figure class="code"><figcaption><span>test.ps1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ps1"><span class="line"><span></span><span class="c">#!/usr/bin/env powershell</span>
</span><span class="line">
</span><span class="line"><span class="nb">Write-Host</span> <span class="s2">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>これでBashからでも</p>

<pre><code>$ ./test.ps1
Hello world!
</code></pre>

<p>と実行できます。
このファイルはPowerShellからでももちろん実行できます。</p>

<p>PowerShellではファイルのパーミッションが関係ない
(実行ファイルなのか読み書き専用ファイルなのか)のですが、
Bashから実行する時には実行ファイルにするために</p>

<pre><code>$ chmod 755 ./test.ps1
</code></pre>

<p>等パーミッションを変更しておく必要があります。</p>

<p>また、シェルスクリプトは拡張子は<code>.sh</code>でなくても何であっても構わないわけですが、
PowerShellスクリプトは<code>.ps1</code>でないと
しばらくフリーズした後に、</p>

<pre><code>$ ./test.sh
Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Diagnostics.StackTrace, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. A device attached to the system is not functioning.
...
</code></pre>

<p>みたいなエラーが出ました。
<code>.ps1</code>という拡張子を使わないとダメなようです。</p>

<blockquote>
  <p><a href="https://github.com/PowerShell/PowerShell/blob/master/docs/KNOWNISSUES.md">Known Issues for PowerShell on Linux</a></p>
</blockquote>

<h2 id="初期設定ファイル">初期設定ファイル</h2>

<p>上で、インストール時に
<strong>$HOME/.config/PowerShell</strong>というディレクトリが出来ていたと書きましたが、
この中に<strong>profile.ps1</strong>というファイルを作ると
起動時に読み込んでくれます。</p>

<p>システム全体で設定を決めたい時は<strong>$PSHOME/profile.ps1</strong>というファイルを
作り設定を書き込めばOK。</p>

<p>差し当たり、PATHがデフォルトでは<strong>/usr/bin:/bin:/usr/sbin:/sbin</strong>という状態になってたので
これに付け足す設定を書きました。</p>

<p>PowerShellではPATHは<code>$ENV:PATH</code>で設定します。</p>

<figure class="code"><figcaption><span>/Users/user/.config/PowerShell/profile.ps1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ps1"><span class="line"><span></span><span class="nv">$ENV:PATH</span> <span class="p">=</span> <span class="s2">&quot;$HOME/usr/local/bin:$HOME/usr/bin:/usr/local/bin:$ENV:PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じ。</p>

<p>ここでちょっと注意が必要なのは、
WindowsのPowerShellでは各パスの区切るとしてセミコロン(<code>;</code>)を使いますが、
MacやLinuxではBash等と同様コロン(<code>:</code>)を使う様になっています。</p>

<p>Bashのコマンドラインから<code>powershell</code>を立ち上げると
Bashで設定していた<code>$PATH</code>がPowerShellの<code>$ENV:PATH</code>に設定されていました。</p>

<p>上に書いたディレクトリ間区切りの表現等も含めた共通化のため、
Windows板とMac/Linux板では微妙な違いもあるみたいです。</p>

<h2 id="まとめ">まとめ</h2>

<p>Windowsでのコマンドプロンプトはあまり使い勝手が良いとは言えないものでしたが、
PowerShellは使い勝手も良いし、
BashやZshに比べるとパイプでの出力が渡しがオブジェクト形式だったり
かなり高機能な面がありしたが
Windowsでしか使えない物なのであまり一般的には使われてなかった感があります。</p>

<p>ただ、今回MacやLinuxでも使えるようになったため、
<strong>シェル</strong>の一つの選択肢としてBashやZshと並んで選べる様になりました。(多分)</p>

<p>ソースもオープンソース化したことで、ユーザーフィードバックも
素早く取り込める様になるでしょうし、
新たなシェルの選択肢として普通にありだと思います。</p>

<p>今のところ上に書いたscreen内でのPowerShell以外のコマンドを打つとフリーズする、
というのが大きな問題で完全移行をすることはありませんが、
その辺も何か分かったらフィードバックしようと思います。
(もしくは単にIssue立てるか。多分誰かがすぐ出すと思いますが。)</p>

<p>直接これと関係ないかもしれませんがtmuxやscreen関係のIssueは既に結構あって、
以下の様なものもありました。</p>

<blockquote>
  <p><a href="https://github.com/PowerShell/PowerShell/issues/546">Fix console when TERM is not xterm · Issue #546 · PowerShell/PowerShell</a></p>
</blockquote>

<p>PowerShellのテストがMacでも簡単に出来る、と言うのは結構便利なので
それだけでも今回のリリースは嬉しい所です。</p>

<p>先日のWindows 10 Anniversary Updateで
Windows内で動くBashが正式に実装されましたが、
このBash自体はWindowsシステムの操作は出来ないので、
今回のPowerShellのオープンソース化及びMac/Linux用にも使える様になったこと
の方がよっぽど衝撃的だと思います。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2016/08/04/computer-windows-ubuntu-bash/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20160804_windows10dark_120_90.jpg" width="120" height="90" alt="20160804_windows10dark_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/08/04/computer-windows-ubuntu-bash/">Windows 10でBash on Ubuntu on Windowsも含まれるAnniversary Updateの提供開始</a></div></li></ul>

<p>いずれにしろ時代の流れなのか大分アグレッシブに攻めてる感があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WinPkgMgr: WndowsでBrew-fileの様なアプリマネージャーを作ってみた]]></title>
    <link href="https://rcmdnk.com/blog/2016/03/28/comptuer-windows-packagemanagement/"/>
    <updated>2016-03-28T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2016/03/28/comptuer-windows-packagemanagement</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B013I9SWMC?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B013I9SWMC&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41lAV432MLL._SS200_.jpg" alt="Microsoft Windows 10 Home (32bit/64bit 日本語版) [オンラインコード]【新価格版】" /></a>
</div>

<p>Windows 10ではPackageManagementというパッケージ管理機能が
付いています。</p>

<p>Macで言うHomebrew的な存在ですが、
これを有効活用するためにMacのHomebrew用に作った
Brew-file的な物をPackageManagement用にも作ってみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#winpkgmgr" id="markdown-toc-winpkgmgr">WinPkgMgr</a></li>
  <li><a href="#to-do" id="markdown-toc-to-do">To Do</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="winpkgmgr">WinPkgMgr</h2>

<div class="github-widget" data-repo="rcmdnk/WinPkgMgr"></div>

<p>PackageManagementで管理しているアプリを
ファイルに書きだして、そのファイルを使って一括インストールしたり出来る
PowerShellスクリプト、<code>PkgMgr.ps1</code>というスクリプトが入ってます。</p>

<p>基本的にやりたいことはMacでやってるBrew-fileと同じです。</p>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>パッケージをファイルに書き出して環境を管理します。
さらに、それをGitHubなりDropboxなり、もしくは直接コピーするなりして
他のマシンに移して同じ環境を簡単に作ったり
環境を同期したりします。</p>

<p>基本的な使い方はBrew-fileと同じような感じで出来る様になってます。</p>

<p>今使えるコマンドは以下のとおり。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Command</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">init</td>
      <td style="text-align: left">Initialize the package management file with installed packages.</td>
    </tr>
    <tr>
      <td style="text-align: left">install</td>
      <td style="text-align: left">Install all packages in the package management file.</td>
    </tr>
    <tr>
      <td style="text-align: left">show</td>
      <td style="text-align: left">Show the package management file place and packages in the file.</td>
    </tr>
    <tr>
      <td style="text-align: left">set_repo</td>
      <td style="text-align: left">Set GitHub repository for the package management file.</td>
    </tr>
    <tr>
      <td style="text-align: left">pull</td>
      <td style="text-align: left">Pull GitHub repository.</td>
    </tr>
    <tr>
      <td style="text-align: left">push</td>
      <td style="text-align: left">Push GitHub repository.</td>
    </tr>
    <tr>
      <td style="text-align: left">update</td>
      <td style="text-align: left">(pull +) install + init (+ push). <code>pull</code>, <code>push</code> only when GitHub repository is used.</td>
    </tr>
  </tbody>
</table>

<p><code>PkgMgr.ps1 init</code>でパッケージを書き出して、
<code>PkgMgr.ps1 install</code>でファイルにあるパッケージを一括インストールする、
という所が基本。</p>

<p>現在使ってるマシンで<code>PkgMgr.ps1 init</code>してファイルを作り、そのファイルを
新しいマシンにコピーして<code>PkgMgr.ps1 install</code>すると
新しいマシンで同じ環境を作れます。</p>

<p>また、ファイルをDropboxに置くようにしてマシン間で同期したり、
Brew-fileでやっているように<code>set_repo</code>することでGitHubのレポジトリを使うことも出来ます。</p>

<div class="github-widget" data-repo="rcmdnk/WinPkgMgrFile"></div>

<p>書きだしたファイルは以下の様な感じのパッケージ名+プロバイダー名なリストになります。</p>

<pre><code>adobereader                    chocolatey
autohotkey                     chocolatey
autohotkey.install             chocolatey
autohotkey.portable            chocolatey
Cygwin                         chocolatey
dropbox                        chocolatey
Evernote                       chocolatey
Firefox                        chocolatey
flashplayerplugin              chocolatey
git                            chocolatey
git.install                    chocolatey
GoogleChrome                   chocolatey
GoogleJapaneseInput            chocolatey
lhaplus                        chocolatey
MobaXTerm                      chocolatey
putty                          chocolatey
putty.portable                 chocolatey
skype                          chocolatey
teamviewer                     chocolatey
vim                            chocolatey
</code></pre>

<p>デフォルトではDocumentsフォルダの中に<strong>pkg.txt</strong>と言うファイルを作ります。</p>

<h2 id="to-do">To Do</h2>

<p>取り敢えず最低限の事は出来る様になりましたが、
Brew-fileにあるもので付け加えられそうなものとして</p>

<ul>
  <li>指定したGitHubのpkg.txt用レポジトリがない場合作れる様にする(Brew-fileでは出来る)。</li>
  <li>既にインストールされていてPackageManagementを通して無い物を見つけてPackageManagementで管理するようにする(Brew-fileのcasklist的な)。</li>
  <li><code>clean</code>コマンド(リストに無いものを削除)。</li>
  <li><code>edit</code>コマンド(ファイルを編集)。</li>
</ul>

<p>辺り。</p>

<p>READMEとして、タスクスケジューラーを使って定期的に<code>update</code>コマンドを
実行する様にするインストラクションとかを加える。</p>

<blockquote>
  <p><a href="https://blogs.technet.microsoft.com/heyscriptingguy/2012/08/11/weekend-scripter-use-the-windows-task-scheduler-to-run-a-windows-powershell-script/">Weekend Scripter: Use the Windows Task Scheduler to Run a Windows PowerShell Script  Hey, Scripting Guy! Blog</a></p>
</blockquote>

<p>これ見ておけば大体できるとは思いますが。</p>

<p>後はGitの設定とか。
自分ではCygwinでGitHubの鍵とかの設定をしていて、
それでPowerShellからも使える様になっています。
Cygwin様にWindowsの環境変数HOMEを設定すると、
PowerShellの<code>$Env:HOME</code>がその値になり、Cygwinの<code>~/.ssh</code>を見るようになって
そこにある鍵を使えます。</p>

<p><code>PkgMgr.ps1</code>の中では、WindowsにGitがインストールされていないと
PackageManagementを使ってGitを自動でインストールするようになってるので(このGitはCygwinのGitとは別)、
Cygwinで設定さえしてあれば<code>PkgMgr.ps1</code>でGitHubのレポジトリを使えます。</p>

<p>Cygwinを使ってない場合はGitHub for Windows等を使って設定しておけばいけると思います。</p>
]]></content>
  </entry>
  
</feed>
