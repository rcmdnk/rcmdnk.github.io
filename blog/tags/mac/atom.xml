<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Mac | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/mac/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-18T16:32:46+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[stowでmake installしたパッケージを管理]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin/"/>
    <updated>2013-08-11T03:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003KOAR0G/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41PYjDYaZvL._SL160_.jpg" border="0"></a></p>

<p><a href="/blog/2013/08/04/computer-linux-mac/">pacoでmake installしたパッケージを管理</a>
で書いた様に、Linux(WindowsのcoLinuxも含む)で
make installしたパッケージも管理出来る様にしましたが、
Cygwinにもpacoを入れようとした所コンパイル出来なかったので
代わりにstowと言うインストーラーを入れました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Cygwinではpacoをコンパイル出来ない">Cygwinではpacoをコンパイル出来ない</h1>

<p>pacoのパッケージを取ってきてCygwinでコンパイルしようとすると</p>

<pre><code>log.c:67:20: error: ‘RTLD_NEXT’ undeclared (first use in this function)
</code></pre>

<p>と言った様なエラーが出てコンパイル出来ないのですが、これはglibcが入ってないからですが、
Cygwinではglibcは入れられない様です<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>いくつかそれっぽいものはありましたが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、素直に入れることは
出来なそうなのでpacoは辞めておくことに。</p>

<h1 id="stow">stow</h1>

<p><a href="http://www.gnu.org/software/stow/">stow</a>はpacoと同じ様な<code>make install</code>などで
<code>apt-get</code>などを通さず直接インストールするパッケージを管理する
インストーラーです。</p>

<h2 id="paco+v.s.+stow">paco v.s. stow</h2>

<p>pacoとstowの違いは</p>

<ul>
<li>paco: <code>/usr/local/var/log/paco</code>等のディレクトリ以下にパッケージ名情報ファイルを作り、
その情報を元にインストールされたファイルを管理する。</li>
<li>stow: <code>/usr/local/stow/</code>等のディレクトリ以下にパッケージ名ディレクトリを作り、
その中にパッケージをインストールする。
そこから<code>/usr/local/</code>などへリンクを張る。</li>
</ul>


<p>pacoでインストールした場合は、パッケージ自体は通常通りインストールされるので、<code>/usr/local/var/log/paco</code>自体を削除しても問題有りません。</p>

<p>stowの場合は<code>/usr/local/</code>へはリンクが貼られるだけなので
通常インストールとは形が変わります。
一方、stowは<code>/usr/local/stow/</code>からのリンクを管理するので、
例えば1つのパッケージでバージョンの違う物を両方インストールしておいて、
一時的に切り替える事が簡単に出来ます。
新しいバージョンを入れて取り敢えず試してみる、と言うことができるので、
その点でstowが結構便利かもしれません。</p>

<h2 id="stowインストール">stowインストール</h2>

<ul>
<li>Cygwin</li>
</ul>


<p><a href="/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>で</p>

<pre><code>$ apt-cyg install stow
</code></pre>

<ul>
<li>Mac</li>
</ul>


<p><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>で</p>

<pre><code>$ brew install stow
</code></pre>

<ul>
<li>Linux</li>
</ul>


<p>apt-getなど。root権限がないところでローカルに入れる場合は自分もstowで管理。</p>

<pre><code>$ cd ~/tmp/
$ wget http://ftp.gnu.org/gnu/stow/stow-2.2.0.tar.gz
$ tar xzf stow-2.2.0.tar.gz
$ cd stow-2.2.0
$ ./configure --prefix=$HOME/usr/local/stow/stow-2.2.0
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ ./stow-2.2.0/bin/stow stow-2.2.0
</code></pre>

<h2 id="stowの使い方">stowの使い方</h2>

<p>まず、stowで管理するパッケージをインストールするディレクトリを決めておきます。
通常は最終的にインストールするディレクトリ下にstowというディレクトリを作ります。
(上の場合は<code>$HOME/usr/local/</code>に<code>bin/stow</code>などをインストールするので
<code>$HOME/usr/local/stow</code>ディレクトリを作って入れています。)</p>

<p>パッケージをインストールする際は、prefix等でインストール先を
<code>$HOME/usr/local/stow</code>+<code>パッケージ名</code>に指定して後は通常通りインストールします。</p>

<p>インストール後、stowディレクトリへ行き、</p>

<pre><code>$ stow package
</code></pre>

<p>とすることで、package内から<code>../</code>の<code>/bin/</code>等へリンクが張られます。</p>

<p>アンインストールは</p>

<pre><code>$ stow -D package
</code></pre>

<p>とするとリンクが削除されます。パッケージがその後必要なければ
stowディレクトリから実体も削除すればOK。</p>

<p>バージョンの違う同じパッケージをインストールしてる場合は</p>

<pre><code>$ stow -D package-1.0
$ stow package-2.0
</code></pre>

<p>の様にすれば1.0から2.0へ切り替える事が出来、
実体は残ったままなので、同じ様に1.0に戻る事もすぐ出来ます。</p>

<pre><code>$ stow -n package-2.0
</code></pre>

<p>とすると、ドライランすることが出来ます。</p>

<p>通常は、カレントディレクトリがstowディレクトリ、親ディレクトリが
リンクを作るインストール先ですが、これを変えたい場合は</p>

<ul>
<li><code>-d stow_dir</code>、<code>--dir=stow_dir</code>でstowディレクトリを指定。</li>
<li><code>-t target_dir</code>、<code>--target=target_dir</code>でインストール先ディレクトリを指定。</li>
</ul>


<p>します。ただ、pacoの場合と違い、これらの情報は残らないので、
特別指定した場合はアンインストールする場合も指定する必要があるので、
管理上、最終的なインストール先の下にstowディレクトリを作るのが良いかと思います。</p>

<h2 id="すでにインストールしてあるパッケージに対してstowで再インストールする場合">すでにインストールしてあるパッケージに対してstowで再インストールする場合</h2>

<p>すでにパッケージがインストールしてあると、
リンクでなく実体が存在するのでstowでリンクを作ろうとすると
エラーが出ます。
(<code>-D</code>で削除しようとするとリンクじゃない、と言って削除してくれない。)
一旦それらのファイルを削除しないとstowで管理しようがないみたいで、
結構面倒です。</p>

<p>そこで<a href="https://github.com/rcmdnk/scripts/blob/master/stowReset.sh">stowReset.sh</a>
と言うスクリプトを作りました。</p>

<p>使い方は、まず、インストールしたいパッケージをstowディレクトリに
インストールした後、
stowディレクトリに行き、</p>

<pre><code>$ stowReset.sh package
</code></pre>

<p>とすると、packageに関連するファイルが親ディレクトリから削除されます。
stow同様に<code>-d</code>、<code>-t</code>、<code>-n</code>のオプションが使えます(<code>--dir</code>等2重ハイフンオプションは未対応)。</p>

<p>その後、通常通り、</p>

<pre><code>$ stow package
</code></pre>

<p>とすればリンクを作れる様になります。</p>

<h1 id="まとめ">まとめ</h1>

<p>pacoに比べて、新しいバージョンのテスト等にも便利に使えそうなので、
MacやLinuxでもpacoからstowへ移行しようと思います。</p>

<p>pacoだとconfigureの引数等の情報がそのまま残るのでちょっと便利ですが、
その点はちゃんとメモするようにしておけばOKかな、と。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://cygwin.com/faq.html#faq.programming.glibc">Where is glibc?</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.gurucoding.com/en/pc_cross_compiler/building_glibc_cygwin_vm.php">Building GLibc in the Cygwin VM</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://artfiles.org/cygwin.org/pub/glibc/releases/">Index of /cygwin.org/pub/glibc/releases</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua対応Vimをインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/07/computer-vim/"/>
    <updated>2013-08-07T20:36:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/07/computer-vim</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048677977/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41otNZcUklL._SL160_.jpg" border="0"></a></p>

<p>Vimでの補完機能のプラグインである<a href="https://github.com/Shougo/neocomplcache.vim">neocompletecache</a>
の後継版<a href="https://github.com/Shougo/neocomplete.vim">neocomplete</a>
を使うためにVimを再インストールした際の手順。
<a href="http://www.lua.org/home.html">Lua</a>自体がない環境もあったので、
Luaのインストールからです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Linux">Linux</h1>

<ul>
<li>su権限持っていないのでローカルにluaをインストール:</li>
</ul>


<p><a href="http://www.lua.org/ftp/">luaのダウンロードページ</a>より最新のを取ってきてインストール。
取り敢えずmakeしてみるとエラーがでた。</p>

<pre><code>$ cd ~/tmp/
$ wget http://www.lua.org/ftp/lua-5.2.2.tar.gz
$ tar xzf lua-5.2.2.tar.gz
$ cd lua-5.2.2
$ make linux
...
make[1]: Entering directory `/home/user/tmp/lua-5.2.2/src'
make all SYSCFLAGS="-DLUA_USE_LINUX" SYSLIBS="-Wl,-E -ldl -lreadline"
make[2]: Entering directory `/home/user/tmp/lua-5.2.2/src'
gcc -o lua   lua.o liblua.a -lm -Wl,-E -ldl -lreadline-
/usr/lib/../lib64/libreadline.so: undefined reference to `PC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetflag'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetent'
/usr/lib/../lib64/libreadline.so: undefined reference to `UP'
/usr/lib/../lib64/libreadline.so: undefined reference to `tputs'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgoto'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetnum'
/usr/lib/../lib64/libreadline.so: undefined reference to `BC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetstr'
collect2: ld returned 1 exit status
make[2]: *** [lua] Error 1
make[2]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make[1]: *** [linux] Error 2
make[1]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make: *** [linux] Error 2
</code></pre>

<p>libreadlineを調べてみると</p>

<pre><code>$ ldd -r /usr/lib64/libreadline.so
        linux-vdso.so.1 =&gt;  (0x00007fffbe3aa000)
        /$LIB/snoopy.so =&gt; /lib64/snoopy.so (0x00002b2a6a387000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b2a6a5af000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b2a6a907000)
        /lib64/ld-linux-x86-64.so.2 (0x00002b2a69f29000)
undefined symbol: PC    (/usr/lib64/libreadline.so)
undefined symbol: UP    (/usr/lib64/libreadline.so)
undefined symbol: BC    (/usr/lib64/libreadline.so)
undefined symbol: tgetflag      (/usr/lib64/libreadline.so)
undefined symbol: tgetent       (/usr/lib64/libreadline.so)
undefined symbol: tputs (/usr/lib64/libreadline.so)
undefined symbol: tgoto (/usr/lib64/libreadline.so)
undefined symbol: tgetnum       (/usr/lib64/libreadline.so)
undefined symbol: tgetstr       (/usr/lib64/libreadline.so)
</code></pre>

<p>こんな感じ。
これに関することが
<a href="http://lua.2524044.n2.nabble.com/ANN-Lua-5-2-2-rc1-now-available-td7646399i20.html">このthread</a>
にあったので、個々にある通り<code>-ltermcap</code>を加えてみる。</p>

<pre><code>$ make linux MYLIBS=-ltermcap
</code></pre>

<p>OK。<code>$HOME/usr/local</code>に<a href="/blog/2013/08/04/computer-linux-mac/">paco</a>に登録しつつインストール。</p>

<pre><code>$ paco -D "make install INSTALL_TOP=$HOME/usr/local"
</code></pre>

<ul>
<li>Vimをインストール</li>
</ul>


<p>ソースからコンパイルしてインストール。</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src
$ LDFLAGS="-L$HOME/usr/local/lib/" ./configure --with-lua-prefix=$HOME/usr/local --prefix=$HOME/usr/local --with-local-dir=$HOME/usr/local --disable-selinux --disable-xim --disable-darwin --disable-xsmp --disable-xsmp-interact --enable-netbeans --enable-multibyte --enable-gui=no --enable-gtk2-check=no --enable-gnome-check=no --enable-motif-check=no --enable-athena-check=no --enable-nextaw-check=no --enable-carbon-check=no --disable-gtktest --disable-acl --disable-gpm --disable-sysmouse --enable-luainterp=yes --enable-mzschemeinterp=no --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes --enable-cscope --disable-workshop --disable-sniff --enable-hangulinput --enable-fontset --enable-largefile --enable-nls
</code></pre>

<p><code>--enable-luainterp=yes</code>でluaオプションを有効にします。
他は適宣自分に合わせて設定。</p>

<p><code>LDFLAGS</code>や<code>--with-local-dir</code>で<code>$HOME/usr/local</code>にあるライブラリー等を使う様に
指定してますが、lua用に
<code>--with-lua-prefix=$HOME/usr/local</code>が別途必要の様。</p>

<p>ちゃんとluaが見つかれば、<code>./configure</code>時に、</p>

<pre><code>...
checking if link with -L/home/user/usr/local/lib -llua is sane... yes
...
</code></pre>

<p>の様に見つかった、と言ってくれます。
<code>--with-lua-prefix</code>を指定しないと<code>/usr/</code>を見に行き、</p>

<pre><code>checking --with-lua-prefix argument... no
checking LUA_PREFIX environment var... not set, default to /usr
checking --with-luajit... no
checking for lua... (cached) /usr/bin/lua
checking Lua version... (cached) 5.1
checking if lua.h can be found in /usr/include... no
checking if lua.h can be found in /usr/include/lua5.1... no
</code></pre>

<p>な感じで失敗します。</p>

<p>configureが成功したら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<ul>
<li>PATHの設定</li>
</ul>


<p><code>$HOME/usr/local</code>にPATHが通ってない場合は以下の設定を<code>~/.bashrc</code>に加えておきます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/usr/local/bin:<span class="nv">$PATH</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1 id="Windows+(Cygwin)">Windows (Cygwin)</h1>

<ul>
<li>setup.exeを使うか<a href="http://rcmdnk.github.io/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
でluaをインストール:</li>
</ul>


<p>apt-cygで</p>

<pre><code>$ apt-cyg install lua
</code></pre>

<ul>
<li>Vimのインストール</li>
</ul>


<p>現状のCygwinで配布されてるバイナリが1-1110, 1112-1152のパッチが当たっていて、
さらにLua対応でビルドされてるので、
最近インストールしたなら対応しているはずです。</p>

<p>もし対応してなかったり古い場合は取り直し。</p>

<p>apt-cygには<code>update</code>と言ったコマンドが無いので、一度削除してから入れなおします。</p>

<pre><code>$ apt-cyg remove vim
</code></pre>

<p>そして新たにインストール:</p>

<pre><code>$ apt-cyg install vim
</code></pre>

<h1 id="Mac">Mac</h1>

<ul>
<li><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>を使ってLuaをインストール:</li>
</ul>


<p>Homebrewでluaを</p>

<pre><code>$ brew install lua
</code></pre>

<ul>
<li>HomebrewでMacVimのHEADバージョンをインストール<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</li>
</ul>


<p>さらにvimも</p>

<pre><code>$ brew install macvim --with-cscope --with-lua --HEAD
$ sudo ln -s /usr/local/Cellar/macvim/HEAD/MacVim.app /Applications/
</code></pre>

<ul>
<li>ターミナル等から使うため<code>~/.bashrc</code>に次を追加:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;For+MacVim&quot;</span>&gt;For MacVim&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$OSTYPE&quot;</span> <span class="o">=</span>~ <span class="s2">&quot;darwin&quot;</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="o">[</span> -d /Applications/MacVim.app/Contents/MacOS <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Applications/MacVim.app/Contents/MacOS:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>ソースから直接コンパイルしてインストール</li>
</ul>


<p>Homebrew版でも現状7.4b版がHEADで使えて、さらに<code>--with-lua</code>オプションで
luaを有効に出来るので充分ですが、もしソースから直接コンパイルして
インストールしたい場合は</p>

<pre><code>$ brew install mercurial
</code></pre>

<p>でMercurial(hg)をインストールしてから上のLinuxとかの様に<code>hg</code>でソースを取ってきて
インストール。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/07/03/macvim-with-lua-features/">最新パッチ＆if_luaなMacVimで高速検索＆補完！</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pacoでmake installしたパッケージを管理]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/04/computer-linux-mac/"/>
    <updated>2013-08-04T09:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/04/computer-linux-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/8484640825/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/61moyMmCoxL._SL160_.jpg" border="0"></a></p>

<p>Linuxでapt-get、Macで<a href="/blog/2013/06/21/computer-mac/">Homebrew</a>、
Cygwinで<a href="/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
などでパッケージ管理出来ますが、
ソースからコンパイルして入れる場合やroot権限を持ってない環境で
<code>make install</code>して入れているパッケージが結構あります。</p>

<p>これら、適当なログはのこしてありますが、実際どのファイルが
どのパッケージに対応しているのかまでは分からなかったりします。</p>

<p>そんな中で<code>make install</code>で入れるパッケージを管理するための
<a href="http://paco.sourceforge.net/">paco</a>と言うソフトを見つけたで入れてみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="pacoのインストール">pacoのインストール</h1>

<p>pacoの<a href="http://paco.sourceforge.net/downloads.html">Downloads</a>
ページから最新版のバージョンを確認してダウンロードしてインストールします。</p>

<pre><code>$ wget -O paco-2.0.9.tar.gz http://sourceforge.net/projects/paco/files/paco/2.0.9/paco-2.0.9.tar.gz/download
$ tar xzf paco-2.0.9.tar.gz
$ cd paco-2.0.9
$ ./configure --prefix=$HOME/usr/local --disable-gpaco --with-paco-logdir=$HOME/usr/local/var/log/paco
</code></pre>

<p>ここで、<code>--disable-gpaco</code>はGUI版のpacoを無効にしています。
GUI版をインストールするためには
gtkmmが必要で、インストールされてない状態で<code>--disbale-gpaco</code>オプションを
入れないと</p>

<pre><code>...
No package 'gtkmm-2.4' found 
...
</code></pre>

<p>等と怒られます。<code>gtkmm</code>を入れても良いのですが、
GUI版を使う予定がないのでオプションで外しておきます。</p>

<p><code>--with-paco-logdir</code>はpacoでインストールされたパッケージ情報を管理するファイルの場所で、
初期値が<code>/var/log/paco</code>になっていて、root権限が無いと書き込めないので、
変更しておきます。</p>

<p>この変更をしておかないと、root権限以外で<code>make install</code>した時に</p>

<pre><code>mkdir: /var/log/paco: Permission denied
</code></pre>

<p>と怒られます。</p>

<p>configureできたら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<p>でインストール完了。</p>

<p>Macで使えない、と言った話もいくつか見かけましたが、Macでも問題なく使えます。</p>

<p>pacoのページを見ると</p>

<pre><code>Note:
Paco does not work on systems in which the executables involved in the installation of the packages (mv, cp, install...) are statically linked against libc, like FreeBSD and OpenBSD.
</code></pre>

<p>とありますが、その上の表で<code>NetBSD</code>では使える様になっています。</p>

<p>OS Xのベースの<a href="http://ja.wikipedia.org/wiki/Darwin_(%e3%82%aa%e3%83%9a%e3%83%ac%e3%83%bc%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0)">Darwin</a>はFreeBSDベース、となってますが、
NetBSDからも受け継いでる部分はあり<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、
そもそもシステムとして別物の様な物みたいですが
取り敢えず手元のLionでは問題なく動いてます。</p>

<p>Macでmvを調べてみると</p>

<pre><code>$ otool -L /bin/mv
/bin/mv:
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 159.1.0)
</code></pre>

<p>と言った感じでlibSystemという名の共有ライブラリ<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>だけにリンクしています。
(ので、上の注意にあるFreeBSDの様な状況には当たらない。)</p>

<p>Linuxだと(Debianなど)、</p>

<pre><code>$ ldd /bin/mv
...
libc.so.6 =&gt; /lib/libc.so.6 (0xb7746000)
...
</code></pre>

<p>と言った感じでlibcの共有ライブラリにリンクしていて、
Cygwinなんかはまた別ですが、libcの静的ライブラリにはリンクしてません。</p>

<p>FreeBSDが手元にないのでわかりませんがMacとはmvの状況が少し違うみたいです。</p>

<h2 id="pacoの使い方">pacoの使い方</h2>

<p>ここで、まず自分自身をパッケージコントロールするため、
pacoのインストール用パッケージディレクトリ(makeした場所)で</p>

<pre><code>$ make logme
</code></pre>

<p>を実行します。これでpaco自身が登録されます。</p>

<p>他のパッケージを登録するには<code>make install</code>する代わりに</p>

<pre><code>$ paco -lp vim-7.4b "make install"
</code></pre>

<p>など。
もし、Makefileがあるディレクトリがpacoの様にパッケージ名だったりする場合、</p>

<pre><code>$ paco -lD "make install"
</code></pre>

<p>の様に<code>D</code>オプションを使うと、ディレクトリ名がパッケージ名として登録されます。
version情報もここでの<code>-</code>以降になるので、
ディレクトリにバージョン情報がない場合でバージョンを把握してる場合は
<code>p</code>オプションで正しく指定して置いた方が良いかもしれません。</p>

<p>Vimなどは<code>src</code>以下にMakefileがあるので<code>D</code>オプションでやってしまうと
<code>src</code>と言うなのパッケージで登録されてしまうので注意です。
もし、間違って登録したら、
<code>$HOME/usr/local/var/log/paco/src</code>と言うファイルが出来て居るはずなので、
このファイルを<code>vim-7.4b</code>に名前を変えて、
中身の<code>Name</code>と<code>Version</code>項目を</p>

<pre><code>#:Name:     vim
#:Version:  7.4b
</code></pre>

<p>と変更しておきます。</p>

<p>登録されたパッケージ一覧を表示するには</p>

<pre><code>$ paco -a
paco-2.0.9 vim-7.4b
</code></pre>

<p>各パッケージの情報を見るには
<code>paco -i &lt;package&gt;</code>:</p>

<pre><code>$ paco -i paco
------------
paco-2.0.9
------------

Name:     paco
Version:  2.0.9
Summary:  Source code package organizer
</code></pre>

<p><code>&lt;package&gt;</code>に関してはversion入(<code>paco-2.0.9</code>)でもversion無し(<code>paco</code>)でもOK。
ここで出てくる情報の</p>

<p>インストール時に使ったconfigureのオプションを表示するには
<code>paco -o &lt;package&gt;</code>:</p>

<pre><code>$ paco -o paco
--prefix=/home/user/usr/local --disable-gpaco --with-paco-logdir=/home/user/usr/local/var/log/paco
</code></pre>

<p>インストールされたファイル一覧とファイルサイズ等を見るには</p>

<pre><code>$ paco -fst paco
paco-2.0.9:
  8k  /home/user/usr/local/share/paco/README
 40k  /home/user/usr/local/lib/libpaco-log.a
  4k  /home/user/usr/local/lib/libpaco-log.la
...
1.3M  Total
</code></pre>

<p>とします。</p>

<pre><code>$ paco -r paco
</code></pre>

<p>とすれば、上で表示されたファイル全部を消去するパッケージのアンインストールを行います。
(多分これが一番嬉しい機能。)</p>

<p>その他詳しくは<a href="http://paco.sourceforge.net/doc/paco.8.txt">pacoのmanページ</a>で。</p>

<h2 id="すでにインストールされたパッケージについて">すでにインストールされたパッケージについて</h2>

<p>pacoは<code>make install</code>時の情報を元に管理情報を作成するので、
すでにインストールされているパッケージについては情報を作る簡単な
方法はありません。</p>

<p>ソースが残っていれば再度<code>paco -lp &lt;package&gt; "make install"</code>
するのが一番簡単です。</p>

<p>無理矢理情報を追加しようと思えば、
<code>$HOME/usr/local/var/log/paco</code>にある他のパッケージのファイルを参考に、
各パッケージのファイルを作ってあげれば良いと思うのですが
すでに複数パッケージを同じディレクトリ下にインストールしてある場合は
結構面倒です。</p>

<p>各パッケージ情報のファイルの中身はconfigure情報などの後に、
ファイル一覧が</p>

<pre><code>ファイル名|サイズ|-2|-2
</code></pre>

<p>の様になっていて、サイズは適当でも良いのでファイル名だけすべて
入れておけばアンインストールは簡単に出来ます。
もしあるディレクトリ下に1つのパッケージしかインストールされてない状態なら、
ファイル一覧が簡単に作れるので、サイズは適当でもいいから
登録しておくだけでもよいかもしれませんが、
すでに複数ある場合は名前だけから判断するのも難しいファイルもあるので、
次にインストールし直すときに登録しなおすか
同じものでも<code>make install</code>し直す方が結果的には楽で正しく出来るかな、と。</p>

<hr />

<p>追記 2013/08/11</p>

<p><a href="/blog/2013/08/11/computer-linux-windows-cygwin/">stowでmake installしたパッケージを管理</a>でstowを導入してみましたが、
新しいバージョンなどをテストしたりするのにstowだと簡単に元に戻したりできるので、
stowのが便利かな、と思いstowに全面的に移行。</p>

<p>追記終わり</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://www.netbsd.org/gallery/products.html#darwin">Products based on NetBSD</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://en.wikipedia.org/wiki/Comparison_of_BSD_operating_systems">Comparison of BSD operating systems</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://d.hatena.ne.jp/kanonji/20121018/1350538932">.soや.dylibや.aファイル、共有ライブラリなどについて調べてみた</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Language ChooserでMail.app等特定のアプリだけ英語設定にする]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/15/computer-mac-english/"/>
    <updated>2013-07-15T21:47:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/15/computer-mac-english</id>
    <content type="html"><![CDATA[<p>メールを返信しようとする時、
Macで環境設定で日本語環境にしているとMail.appなどで
転送する際、
元メールのヘッダー情報に<code>差出人</code>等と必ず日本語が
含まれてしまいます。
英語でメールをやりとりしていても入ってしまうので
日本語フォントを使ってない相手側には化けて見えてしまうので
その対処法について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Macの言語環境">Macの言語環境</h1>

<p>MacにはWindowsとかと違い<code>日本語版</code>と言う概念が無く、
最初から全ての言語環境が入っています。
従って、自分の好きな言語にして始められるので、
上の問題を解決する一番簡単な方法はシステム環境設定で
<code>言語とテキスト</code><i class="icon-arrow-right"></i><code>言語</code>タブで、
優先言語の最上位を<code>English</code>にしてしまうことです。</p>

<p>これで<code>Mail.app</code>の返信時のヘッダーも、その他表示も全てひっくるめて英語になります。</p>

<hr />

<p>余談ですが、<a href="http://monolingual.sourceforge.net/">monolingual</a>
と言うソフトを使うと要らない言語ファイルを削除出来るようです。
上にも書いたように全て(?)の必要な言語が入っているため、
最低限日本語や英語などを残すだけだと1GB程ディスクを節約することが出来るみたいです。
自分自身はどんなマイナー言語もいつか使うかもな、と言う貧乏根性から全て残してありますが...</p>

<hr />

<p>ただ、最初はそうして英語環境で使っていたのですが、日本語環境でないと文字化けする
アプリがいくつかあったので、必要なものだけを英語設定にする必要がありました。
(逆に英語環境で特定のアプリだけ日本語設定にしても良いのですが、
今のところ問題になるのが英語側は<code>Mail.app</code>だけだったため。)</p>

<h1 id="App+Language+Chooser">App Language Chooser</h1>

<p><a href="http://click.linksynergy.com/fs-bin/stat?id=iYVkHjWpfxk&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=https%253A%252F%252Fitunes.apple.com%252Fjp%252Fapp%252Fapp-language-chooser%252Fid451732904%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30" target="_blank" rel="nofollow"><img width="75" class="alignleft" align="left" src="http://a1.mzstatic.com/us/r1000/064/Purple/59/10/53/mzi.iwnexdzn.75x75-65.png" style="border-radius: 11px 11px 11px 11px;-moz-border-radius: 11px 11px 11px 11px;-webkit-border-radius: 11px 11px 11px 11px;box-shadow: 1px 4px 6px 1px #999999;-moz-box-shadow: 1px 4px 6px 1px #999999;-webkit-box-shadow: 1px 4px 6px 1px #999999;margin: -5px 15px 1px 5px;"></a><div style="font-size:small;line-height:1.2;"><a href="http://click.linksynergy.com/fs-bin/stat?id=iYVkHjWpfxk&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=https%253A%252F%252Fitunes.apple.com%252Fjp%252Fapp%252Fapp-language-chooser%252Fid451732904%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30" target="_blank" rel="nofollow"<strong> App Language Chooser 1.0（無料）</strong></a><br> カテゴリ: 開発ツール, ユーティリティ<br> 販売元: <a href="http://click.linksynergy.com/fs-bin/stat?id=iYVkHjWpfxk&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=https%253A%252F%252Fitunes.apple.com%252Fjp%252Fartist%252Fctm-development%252Fid451732907%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30" target="_blank" rel="nofollow">CTM Development - CTM Development SA</a>（サイズ: 0.1 MB）</div><br class="clearBoth"></p>

<p>という訳で<a href="http://click.linksynergy.com/fs-bin/stat?id=iYVkHjWpfxk&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=https%253A%252F%252Fitunes.apple.com%252Fjp%252Fapp%252Fapp-language-chooser%252Fid451732904%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30" target="_blank" rel="nofollow">App Language Chooser</a>
と言うアプリを使ってMail.appだけ英語化しました。</p>

<p>使い方は簡単で、アプリを立ち上げると下の様なApp Language Choooserの窓が出るので、
そこへ言語を変更したいアプリをDropするだけです。</p>

<p>すると、下の絵の上がわにある様な言語を選ぶダイアログが出てくるので、
<code>English</code>を選び、<code>Set as drafult language for this app</code>にチェックを入れ
<code>OK</code>を押すと選んだ言語で立ち上がる様になります。</p>

<p><code>Set as drafult language for this app</code>にチェックを入れれば永続的に、
チェックを入れなければその時だけ特定の言語で立ち上げる事も出来るので、
ちょっとここのアプリの英語表示がどうなってるか知りたい、
と言った様なこともMac自体を再起動させずに簡単に出来ます。</p>

<p>もし起動中にApp Language ChooserにDropした場合はアプリを再起動後に反映されます。
一時的な変更で起動をしたい場合は一度アプリを閉じておく必要があります。</p>

<p><img src="/images/post/20130715_applanguagecleaner.jpg" "" ""></p>

<p>これで、転送するときに<code>差出人</code>の代わりに<code>From</code>が使われる様になり
英語環境だけの人でも文字化けせずに読めるようになります。</p>

<h1 id="defaultsコマンドで直接書き換える方法">defaultsコマンドで直接書き換える方法</h1>

<p>上のアプリを入れなくても<code>defaults</code>コマンドで変更することも出来ます。</p>

<pre><code>$ defaults write com.apple.mail AppleLanguages "(English)"
</code></pre>

<p>Mail.appの<code>AppleLanguages</code>と言う値を<code>English</code>に指定しています。
ここでは環境設定の言語設定の様に<code>"(English Japanese)"</code>の様に
優先順位を決めて複数を指定することも出来るようです。
(あまりその恩恵を受けられるアプリは思いつきませんが。)</p>

<p><code>defaults find</code>コマンドでこれまでに指定した<code>AppleLanguages</code>を見ることが出来ます。
App Language Chooserも恐らくこの値を変えてるだけらしく、同じく
このコマンドで変更を見ることが出来ます。</p>

<pre><code>$ defaults find AppleLanguages
Found 1 keys in domain 'org.gimp.gimp': {
    AppleLanguages =     (
        English
    );
}
Found 1 keys in domain 'com.apple.mail': {
    AppleLanguages =     (
        English
    );
}
</code></pre>

<p>すっかり忘れてましたが、以前、Gimpを更新した際、ビルドされたものが
日本語環境だと落ちるバグ？があったのでGimpも英語にしてありました。
(多分もう大丈夫なんだと思いますが。)</p>

<p>逆に、英語環境下において日本語にしたい場合は</p>

<pre><code>$ defaults write com.apple.mail AppleLanguages "(Japanese)"
</code></pre>

<p>の様にします。この<code>Japanese</code>や<code>English</code>について、
どの値を取れるのがいまいち理解してませんが、
<code>Japanese</code>は<code>ja</code>でもOKです。</p>

<p>色々な所に<code>jp</code>とも書いてありますが、手元のLionでは<code>jp</code>だと上手く反映されませんでした。
さらに<code>Ja</code>や<code>japanese</code>も駄目で、大文字小文字を区別した上で
<code>Japanese</code>と<code>ja</code>だけが試した限りでは有効でした。</p>

<p>英語の方は<code>en</code>でもOKで、さらに<code>En</code>や<code>english</code>もOK。
さらに<code>en_US</code>と書いてある所もありますがこれでもOKです。
英語の方は最初の<code>en</code>だけで判定しているのか
<code>enaaa</code>の様なあり得ない言語指定でも英語に切り替わりました。
(<code>defaults find</code>コマンドでは<code>enaaa</code>を示しています。)</p>

<p>一方で日本語は<code>jaaaa</code>の様な変更は、<code>defaults find</code>では反映されて見えますが、
実際の言語はその直前に設定した言語設定のままになっていました。
(<code>ja</code>で始まる言語が他にあるからでしょうか？
ただ、<code>Japasesea</code>の様な余計な語尾を足したのも駄目なので、単に先頭の方から
見て判断してるだけでも無いみたいです...)</p>

<p>さらに言語設定の項目にある表示の様に、<code>'日本語'</code>の様な入力も試しましたが、これも駄目でした。</p>

<p>ちょっと横にそれましたが、最後に、これらの設定を消して、システムのデフォルトに合わせるには</p>

<pre><code>$ defaults delete com.apple.mail AppleLanguages
</code></pre>

<p>とします。</p>

<p>上に書いたようにApp Language ChooserもAppleLanguagesの設定変更を行っている
だけの様なので、そのアプリで変更した物もこのコマンドでリセット出来ます。</p>

<h1 id="まとめ">まとめ</h1>

<p>昔のMacではアプリの<code>情報を見る</code>から言語を変更することが出来たみたいですが<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、
最近のMac(少なくともLion)では出来ません。</p>

<p>なので、App Language Chooserを使うかdefultsコマンドを使う事になります。</p>

<p>また、そもそもこれらに使われる内容を変更してしまえばよい、
という話もあるみたいです<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>が、
上の方法に比べると、安全に簡単に出来る方法とは言えない感じですね。
(簡単な方法やアプリがあるかもしれませんし、あったらより便利なんですが。)</p>

<p>今も中国人等からメールで同様にヘッダ部分がや日付表示などが
文字化けしててなんだかな、と思う時がありますが、
そういうメールを見るたび、
以前は自分でも文字化けメールを送信してたんだな、と思う今日このごろ。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://okwave.jp/qa/q4447873.html">OKWave: 英語メールの転送のヘッダに日本語が使われてしまうので困ります</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="https://discussionsjapan.apple.com/message/100320489#100320489">Apple サポートコミュニティ: 返信時の引用のヘッダ文の編集</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim_emu for KeyRemap4MacBookのアップデート]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/08/computer-mac-keyremap4macbook-vim/"/>
    <updated>2013-07-08T22:15:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/08/computer-mac-keyremap4macbook-vim</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/06/10/computer-mac-keyremap4macbook-vim/">Vim以外でVimする: Mac編</a>
で作った<a href="https://github.com/rcmdnk/vim_emu">vim_emu</a>をアップデートしました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Change+Mode+Keys">Change Mode Keys</h1>

<p><i class='key'>&#x238b;</i>/<i class='key ctrl'>symobl</i>-<i class='key'>[</i>で
Normal Modeに入るキーマップに加え、
これらでNormal-Insert ModeをToggleするキー、
<i class='key'>j</i>-<i class='key'>k</i>の同時押しでToggleするキー等を追加しました。</p>

<p><i class='key'>&#x238b;</i>/<i class='key ctrl'>symobl</i>-<i class='key'>[</i>については
長押しで<i class='key ESC'>symobl</i>そのものを送る様にもしました。</p>

<table>
<thead>
<tr>
<th align="left">Key/Commands</th>
<th align="left">Function</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">ChangeKey1</td>
<td align="left"> Escape to enter Normal Mode, holding to emulate raw ESC.</td>
</tr>
<tr>
<td align="left">ChangeKey2</td>
<td align="left"> + Escape to back in Insert Mode</td>
</tr>
<tr>
<td align="left">ChangeKey3</td>
<td align="left"> Escape to back in Normal Mode in other than Inser Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey4</td>
<td align="left"> Ctrl-[ to enter Normal Mode, holding to emulate raw ESC.</td>
</tr>
<tr>
<td align="left">ChangeKey5</td>
<td align="left"> + Ctrl-[ to back in Insert Mode</td>
</tr>
<tr>
<td align="left">ChangeKey6</td>
<td align="left"> Ctrl-[ to back in Normal Mode in other than Inser Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey7</td>
<td align="left"> Simultaneous jk toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey8</td>
<td align="left"> Simultaneous qw toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey9</td>
<td align="left"> Simultaneous sd toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey10</td>
<td align="left"> Ctlr-l toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey11</td>
<td align="left"> Tap Left Cmd toggles Normal-Insert Mode.</td>
</tr>
<tr>
<td align="left">ChangeKey12</td>
<td align="left"> Tap Right Cmd toggles Normal-Insert Mode.</td>
</tr>
</tbody>
</table>


<p>ChangeKey 1, 3 , 4, 6, 10-12についてはVisual Mode等の時にもNormal Modeへの
戻るキーとして使いますが7-9については同時押し操作の制限の関係で
Visual Mode等の時には効きません。</p>

<p>従って、他のキーと組み合わせが必要で、他の操作への影響を最低限にしたい場合は
3や6を使います。</p>

<h1 id="Enable+Recording+Macro">Enable Recording Macro</h1>

<p>Vim等の色々機能がついたエディターで無くてはならない機能の1つとして
キー操作をマクロとして保存して再び実行する、と言う機能があります。</p>

<p>KeyRemap4MacBook単体では再現するのが難しいのですが、
<a href="http://www.wingsforpigs.com/MadRuby/MadRuby.html">MadRuby</a>
という良さげなキー操作記憶再生アプリを見つけたので
これを使ってマクロ機能を実装してみました<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。
フリーのアプリです。</p>

<p>このアプリは、ショートカットキーを使ってキー操作の記憶を開始して
再びショートカットキーで停止します。
実行もショートカットキーから。
さらに複数回の実行を指定することも出来ます。</p>

<p>アプリを導入したら、
これらのショートカットキーを以下の様に設定します。</p>

<table>
<thead>
<tr>
<th align="right">Function</th>
<th align="left">Shortcut</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right">Start Recording</td>
<td align="left"> <i class='key'>&#x2303;</i>-<i class='key'>&#x21e7;</i>-<i class='key'>&#x2318;</i>-<i class='key'>6</i></td>
</tr>
<tr>
<td align="right">Stop Recording</td>
<td align="left"> <i class='key'>&#x2303;</i>-<i class='key'>&#x21e7;</i>-<i class='key'>&#x2318;</i>-<i class='key'>7</i></td>
</tr>
<tr>
<td align="right">Play Macro</td>
<td align="left"> <i class='key'>&#x2303;</i>-<i class='key'>&#x21e7;</i>-<i class='key'>&#x2318;</i>-<i class='key'>8</i></td>
</tr>
<tr>
<td align="right">Multiple Play Macro</td>
<td align="left"> <i class='key'>&#x2303;</i>-<i class='key'>&#x21e7;</i>-<i class='key'>&#x2318;</i>-<i class='key'>9</i></td>
</tr>
</tbody>
</table>


<p><img src="/images/post/20130708_madruby.jpg" "" ""></p>

<p>これらはvim_emuの中で参照して以下の様にキーが設定されています。
全てNormal Modeの時に有効です。</p>

<table>
<thead>
<tr>
<th align="center">Key/Commands</th>
<th align="left">Function</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">q</td>
<td align="left"> Start recording a macro.</td>
</tr>
<tr>
<td align="center">q(while recording macro)</td>
<td align="left"> Stop recording a macro.</td>
</tr>
<tr>
<td align="center">@</td>
<td align="left"> Execute the macro once.</td>
</tr>
<tr>
<td align="center">n@ (n=2-9)</td>
<td align="left">Execute macro n-times.</td>
</tr>
</tbody>
</table>


<p>Vimと違って<i class='key'>q</i><i class='key'>a</i>の<i class='key'>a</i>の様にマクロの収納先は指定しないで<i class='key'>q</i>だけで記憶を開始します。
従って記憶できる操作は1つだけです<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。
記憶中にNormal Modeに戻って<i class='key'>q</i>で終了するわけですが、
この間に他のアプリに移ってしまっても、永遠とマクロを記憶し続けるので
気をつけて下さい<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。</p>

<p>再生に関しても収納先の指定が無いので<i class='key'>@</i>だけで再生します。
注意として、<i class='key'>@</i>を繰り返して押す場合、<i class='key'>&#x21e7;</i>も離して繰り返し
押さないと続けてマクロを上手く入力出来ません。</p>

<p>複数回実行したい場合は<i class='key'>2</i>~<i class='key'>9</i>までの数字を押した後に
<i class='key'>@</i>を押せば数字分だけ実行します。</p>

<p>MadRubyのショートカットは他のショートカットに被らないような設定にしてありますが、
もし他のキー設定と被る場合や、普段もMadRubyを使いたくてもっと
簡単なキー設定にしたい場合は
<code>vim_emu/vim_emu_core.xml</code>の<code>Enable Recording Macro</code>
にあるキー設定も変更して下さい。</p>

<p>下のデモでは
<code>aaa</code>という文字列を検索して移動して<code>AAA</code>と置き換える作業を記憶して
繰り返し実行しています。</p>

<pre><code>&lt;ESC&gt;/aaa&lt;ESC&gt;hqni&lt;BS&gt;AAA&lt;ESC&gt;q@@@@@@@@@uuuuuuuuuuh5@
</code></pre>

<p>とキーボードからは入力しています。
検索時に単語が選択されるのを一旦解除するのに<i class='key'>h</i>を使ったり、
が逆に検索後、<i class='key'>&#x232b;</i>で一気に消したりするところとかも
実際のVimと違いますが、
一応これくらいの変換の作業は繰り返し出来るようになります。
(流石にsed的な変換は無理なのでこの辺の作業はマクロで繰り返しで。)</p>

<p>MadRubyは、最初の<i class='key'>q</i>をした所で現れ、</p>

<ul>
<li><i class='key'>n</i><i class="icon-arrow-right"></i><i class='key'>&#x2318;</i>-<i class='key'>g</i></li>
<li><i class='key'>i</i>は記憶されず(右下のモード表示から<code>--VIM--</code>が消える)</li>
<li><i class='key'>&#x232b;</i></li>
<li>AAA</li>
<li><i class='key'>&#x238b;</i>は記憶されず(右下のモード表示へ<code>--VIM--</code>が現れる)</li>
</ul>


<p>と記憶され<i class='key'>q</i>で終了しています。</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/69911373 "></iframe></div></p>

<p>実用性はともかく、ちょっと、おぉっ、ってなります。</p>

<h1 id="その他の変更点">その他の変更点</h1>

<ul>
<li><code>d3w</code>など、<code>y</code>、<code>d</code>、<code>c</code>の時にも2-9で移動を数字分だけ出来る様に改善。</li>
<li>Visual Modeでライン選択の時、以前は最初に上に向かうとカレント行が除かれたが
最初に上に向かう時だけカレント行も選択する様に変更。</li>
<li>RturnはそのままRturnを返す様に変更。</li>
<li>H/Lについては意味ない動きしかできないので削除。(ubiquitous_vimを真似てみたものの
キーの無駄遣いにしかならないので...)</li>
<li>GitHubのレポジトリーバージョンをKeyRemap4MacBookの中に入っているものと
かち合わないように変更。</li>
<li>ドイツ語キーボードサポート。</li>
</ul>


<h1 id="インストール">インストール</h1>

<p>KeyRemap4MacBookが入った状態で<a href="https://github.com/rcmdnk/vim_emu">vim_emu</a>
をcloneしてきて中にある<code>install.sh</code>を実行すれば
自分設定のすぐ下にもう1つの<code>VIM Emulation</code>が現れます。</p>

<pre><code>$ git clone https://github.com/rcmdnk/vim_emu
$ cd vim_emu
$ ./install.sh
</code></pre>

<p>キーがバッティングするので元から入っている<code>VIM Emulation</code>項目はオフにして下さい。</p>

<p>アンインストールは<code>$HOME/Library/Application Support/KeyRemap4MacBook/</code>
から<code>vim_emu*</code>を消し、<code>private.xml</code>の下の方に追加された
<code>&lt;include path="vim_emu_test.xml"&gt;&lt;/include&gt;</code>を削除してください。</p>

<p>そのうちKeyRemap4MacBook本体の方にPull Requestしていつの間にか入れてもらおうと思ってます。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>2009年に開発が止まっている古いアプリですが、少なくともLionやMountain Lion
  で動くことは確認しました。
  他にも似たようなアプリがありましたが、有料だったり、ショートカットキーで
  記憶/再生出来なかったり、マウス操作も記憶してしまって逆に面倒だったり、
  で今のところこのアプリが一番良さげです。
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p>MadRuby自体には履歴機能あってメニューバーから過去の操作を再生することも出来ます。
  また、操作を保存したり、過去に保存した操作を読み込む事も可能です。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>MadRubyの表示が出続けるので忘れる事はないと思いますし、メニューバーからでも
  ストップすることは出来ます。
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
