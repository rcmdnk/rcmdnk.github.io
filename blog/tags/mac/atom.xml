<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Mac | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/mac/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2021-12-19T00:44:13+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[macOS 12 Montereyにアップグレード]]></title>
    <link href="https://rcmdnk.com/blog/2021/10/26/computer-mac/"/>
    <updated>2021-10-26T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/10/26/computer-mac</id>
    <content type="html"><![CDATA[<p>2021年10月26日からmacOS 12 Montereyが配布されたのでアップグレード。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#macos-12-monetary" id="markdown-toc-macos-12-monetary">macOS 12 Monetary</a></li>
  <li><a href="#アップグレードにかかった時間" id="markdown-toc-アップグレードにかかった時間">アップグレードにかかった時間</a></li>
  <li><a href="#アップデート後の変化" id="markdown-toc-アップデート後の変化">アップデート後の変化</a></li>
  <li><a href="#主な新機能" id="markdown-toc-主な新機能">主な新機能</a></li>
  <li><a href="#アプリの対応など" id="markdown-toc-アプリの対応など">アプリの対応など</a></li>
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="macos-12-monetary">macOS 12 Monetary</h2>

<p>2019年10月8日にmacOS 10.15 Catalina、2020年11月13日に11 Big Sur
がリリースされて居たので大体1年ぶり。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2021/03/17/computer-mac/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20210317_bigsur_120_90.jpg" width="120" height="90" alt="20210317_bigsur_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2021/03/17/computer-mac/">macOS 11 Big Surへのアップグレード</a></div></li></ul>

<p>1年1ヶ月ペースでメジャーアップデートがされてたので今回はちょっと早めの1年弱でのリリース。</p>

<p>前回のBig Surのときに新しいCPUが登場したりと色々あったりして
OSとしても今までの10.Xのシリーズから11になり
中身も結構変わった感じがありましたが、今回は12とメジャーバージョンのアップデートがあったものの
それ程OS自体に大きな変化はない感じでした。</p>

<h2 id="アップグレードにかかった時間">アップグレードにかかった時間</h2>

<p>ダウンロードするファイルはは12.13GBでした(macOS 12.0.1)。
大体10~20分くらいで完了。</p>

<p>その後、ディスクへの書き込みが10分ほど。
最初に58分とか表示されてましたが実際には10分ほどで終わりました。</p>

<p>この間は作業も出来ますが、その後再起動。</p>

<p>再起動が始まってから実際に立ち上がるまでは20分ほどでした。</p>

<p>なので実質使えない時間は20分ほど。</p>

<p>この前Windows 11にアップグレードしましたが、それよりも使えない時間は長かった。。。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2021/10/18/computer-windows/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20211018_settingscheck_120_90.jpg" width="120" height="90" alt="20211018_settingscheck_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2021/10/18/computer-windows/">Windows 11へアップグレード</a></div></li></ul>

<h2 id="アップデート後の変化">アップデート後の変化</h2>

<p>今回はアップグレード後の起動時にも特に何も表示されず、
以前と変わらない画面ですぐに立ち上がりました。
(マイナーアップデートでも出るときは出るのに。)</p>

<p>環境設定とかも特に目新しいものは見つからず。</p>

<p>と言った感じで言われなければメジャーアップグレードしたかどうか分からない感じ。</p>

<h2 id="主な新機能">主な新機能</h2>

<blockquote>
  <p><a href="https://www.apple.com/jp/macos/monterey/features/">macOS Monterey - 新機能 - Apple（日本）</a></p>
</blockquote>

<p>FaceTime/メッセージ/Safari/メモで色々新しいことが出来るようですが普段全く使わない。。。</p>

<p>集中モードとかは多分使わない。</p>

<p>通知はなんか違うな、とは感じるものの、特に。</p>

<p>今回は事前の話だとキーボードなどをiPadとかと共有する<strong>ユニバーサルコントロール</strong>
という機能が目玉だったみたいですが、現状のリリースには間に合わず、
12.0.1だと入っていません。</p>

<p>地味に<strong>写真内のテキスト認識表示</strong>というのがあって、場合によっては便利かも。</p>

<h2 id="アプリの対応など">アプリの対応など</h2>

<p>特にセキュリティ周りの変更なども無いので大きな問題は起こってない模様。</p>

<p>手元の環境では特に問題は起きていません。</p>

<ul>
  <li><a href="https://karabiner-elements.pqrs.org/">Karabiner-Elements</a></li>
  <li><a href="https://folivora.ai/">Better Touch Tool</a></li>
</ul>

<p>辺りも問題なく動いています。</p>

<p>Homebrewもちょうど(?)3.3.0がリリースされ、Montereyに対応しています。</p>

<blockquote>
  <p><a href="https://brew.sh/2021/10/25/homebrew-3.3.0/">3.3.0 — Homebrew</a></p>
</blockquote>

<h2 id="起こった問題">起こった問題</h2>

<p>問題というほどでもないですが、再起動後、入力ソースが一つもない状態になっていました。</p>

<p><img src="https://rcmdnk.com/images/post/20211026_keyboard.png" alt="20211026_keyboard" class="pic" /></p>

<p>この状態は頑張っても出来ない(残り1つのときに<strong>-</strong>は押せない)状態なのでレア。</p>

<p>とはいえ通常の英字入力は出来る状態でしたが、もちろん日本語入力は出来ない状態。</p>

<p>ただ、これは左下の<strong>+</strong>ボタンからGoogle日本語入力などを追加してあげれば良いっだけです。</p>

<p>どうもmacOS自体の日本語入力ではなくGoogle日本語入力などサードパーティー製のものだけを設定しているとこうなってしまうみたいです。</p>

<div class="postscript">
  <p><strong>追記: 2021/10/27 </strong></p>

  <p>Xcode(というかCommandLineTools)が無くなってました</p>

  <pre><code>$ brew upgrade
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</code></pre>

  <p>こんな感じのエラーが出ます。
というわけで、</p>

  <pre><code>$ xcode-select --install
</code></pre>

  <p>で再インストールしました。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<div class="postscript">
  <p><strong>追記: 2021/10/27 </strong></p>

  <p>外付けキーボード(HHKB Pro2)が効かなくなってました。</p>

  <blockquote>
    <p><a href="https://faq.pfu.jp/faq/show/3844?back=front%2Fcategory%3Ashow&amp;category_id=181&amp;page=1&amp;site_domain=hhkb&amp;sort=sort_access&amp;sort_order=desc">HHKBの旧製品は、macOS Monterey に対応しますか？  Happy Hacking Keyboard よくあるご質問</a></p>
  </blockquote>

  <p>を見る限りBig Surと同じく最新ドライバで問題なく動く模様。</p>

  <p>Big Surの時も効かなくなって、ドライバを再インストール後、
OSを再起動して治りましたが、
今回もドライバの再インストールだけではだめで再起動したら使える様になりました。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<h2 id="まとめ">まとめ</h2>

<p>というわけで名前が変わるアップグレードでしたが、
ユーザー感覚としてはBig Surと特に変わりは無い感じです。</p>

<p>上記にあるアプリとかを使ってると別なのかもしれませんが。</p>

<p>逆にアプリで問題が起こったりも特に無いので上げても良いし、無理にすぐに上げなくても良いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew-fileへのmainコマンドの追加]]></title>
    <link href="https://rcmdnk.com/blog/2021/09/13/comptuer-homebrew-brew-file-mac-windows/"/>
    <updated>2021-09-13T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/09/13/comptuer-homebrew-brew-file-mac-windows</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07H3JTZJY?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07H3JTZJY&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61zbjv7k9uL._SS200_.jpg" alt="味の加久の屋 brew プレミアムおつまみ ウニ入りホタテマヨ 70g" /></a>
</div>

<p>Homebrewのパッケージリストを管理するツールのHomebrew-file
でパッケージを管理する際に、<code>main</code>というコマンドを使えるようにしました。</p>

<p>これによってより柔軟に複数の環境でのBrewfileの共有が出来るようになりました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#homebrew-file" id="markdown-toc-homebrew-file">Homebrew-file</a></li>
  <li><a href="#brewfile" id="markdown-toc-brewfile">Brewfile</a></li>
  <li><a href="#file機能" id="markdown-toc-file機能">file機能</a></li>
  <li><a href="#ファイル指定で使える変数" id="markdown-toc-ファイル指定で使える変数">ファイル指定で使える変数</a></li>
  <li><a href="#mainコマンドの追加" id="markdown-toc-mainコマンドの追加">mainコマンドの追加</a></li>
  <li><a href="#チーム共有brewfileの運用" id="markdown-toc-チーム共有brewfileの運用">チーム共有Brewfileの運用</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="homebrew-file">Homebrew-file</h2>

<p>HomebrewのパッケージリストをBrewfileを使って管理するツール。</p>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>Homebrew自体にも公式にbundleというBrewfileファイルに書き出す機能がありますが、
Homebrew-fileにはGitHubとかと連携してBrewfileの履歴を管理したり他の環境と共有しやすくするための
機能だったり、Brewfileを自動的にアップデートする機能があったりします。</p>

<h2 id="brewfile">Brewfile</h2>

<p>Homebrew-fileにおけるBrewfileは基本的には以下の様な感じになります。</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">brew node
</span><span class="line">brew python@3.9
</span><span class="line">
</span><span class="line">tap rcmdnk/file
</span><span class="line">brew brew-file
</span><span class="line">
</span><span class="line">tap rcmdnk/file
</span><span class="line">brew brew-file
</span><span class="line">
</span><span class="line">tap homebrew/cask
</span><span class="line">cask bettertouchtool
</span><span class="line">cask google-japanese-ime
</span><span class="line">cask hyperswitch
</span><span class="line">cask iterm2
</span><span class="line">cask karabiner-elements
</span><span class="line">
</span><span class="line">appstore <span class="m">408981434</span>   iMovie        <span class="o">(</span><span class="m">10</span>.2.5<span class="o">)</span>
</span><span class="line">appstore <span class="m">409183694</span>   Keynote       <span class="o">(</span><span class="m">11</span>.1<span class="o">)</span>
</span><span class="line">appstore <span class="m">409203825</span>   Numbers       <span class="o">(</span><span class="m">11</span>.1<span class="o">)</span>
</span><span class="line">appstore <span class="m">409201541</span>   Pages         <span class="o">(</span><span class="m">11</span>.1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Ref: <a href="https://homebrew-file.readthedocs.io/en/latest/usage.html#brewfile">Usage — Homebrew-file documentation</a></p>

<p>Brewfileの中でコマンドとして使えるものとしては上の様に主に</p>

<ul>
  <li><code>tap</code>: Tapするレポジトリ</li>
  <li><code>brew</code>: インストールするFormulaパッケージ</li>
  <li><code>cask</code>: インストールするCaskパッケージ</li>
  <li><code>appstore</code>: AppStoreからインストールするApp (<code>mas</code>を利用。)</li>
</ul>

<p>があります。</p>

<p><code>cask</code>に関してはHomebrew 3.0.0から<code>brew cask</code>というコマンドはなくなり、<code>brew install ...</code>
で同じようにインストールできるようになりましたが、
<code>brew list --cask ...</code>の様に区別して見ることも出来る状態で
<code>brew file init</code>とかでBrewfileに書き出す場合には区別して書き出しています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2021/02/06/computer-mac-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20210206_homebrew300_120_90.jpg" width="120" height="90" alt="20210206_homebrew300_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2021/02/06/computer-mac-homebrew/">Homebrew 3.0.0リリース</a></div></li></ul>

<p>Brewfileに手動で<code>brew iterm2</code>みたいにCaskなものを書いておいても<code>brew file install</code>でインストールすることは出来ます。</p>

<h2 id="file機能">file機能</h2>

<p>上記の4つ以外にもいくつか使えるコマンドがありますが、
そのうちの一つに<code>file</code>というコマンドがあります。</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">file ./Brewfile.ext
</span></code></pre></td></tr></table></div></figure>

<p>の様に書くと、<code>brew file install</code>をするとき、<strong>Brewfile.ext</strong>に書いてある
パッケージも読み込んでインストールします。</p>

<p><code>brew file init</code>すると、<strong>Brewfile.ext</strong>に元からあったパッケージはそちらに、
新たに加わったパッケージは親の<strong>Brewfile</strong>に追加される様になっています。</p>

<p>ファイルの指定方法として、上のように相対パスの様に書くと、親の<strong>Brewfile</strong>のある
ディレクトリからの相対パスになります。
なので、上の場合は<strong>Brewfile</strong>と同じディレクトリにある<strong>Brewfile.ext</strong>を見に行きます。</p>

<p><strong>/home/user/Brewfile.ext</strong>の様に<code>/</code>から開始すると絶対パスとして見に行きます。</p>

<p>もしファイルがない場合にはエラーにならずに無視されます。</p>

<p>したがって、特定のマシンにだけ入れたいパッケージ、というものがある場合、</p>

<p>file $HOME/Brewfile.ext</p>

<p>としておいて、必要な環境にだけ<strong>$HOME/Brewfile.ext</strong>を置いておくと、
その環境にだけ<code>brew file install</code>で<strong>Brewfile.ext</strong>の中身をインストールしてくれます。</p>

<p>もし<strong>Brewfile</strong>と<strong>Brewfile.ext</strong>に同じパッケージが書かれているかつ
そのパッケージが既にインストールされている状態で<code>brew file init</code>すると
<strong>Brewfile.ext</strong>の方に優先して残すようになっています。</p>

<h2 id="ファイル指定で使える変数">ファイル指定で使える変数</h2>

<p><code>file</code>などで指定できるファイルに使える変数として、
<code>~</code>でホームディレクトリを指定したり、<code>$HOME</code>などの環境変数を使うことが出来ます。</p>

<p>加えて、
<code>$HOSTNAME</code>、<code>$HOSTTYPE</code>、<code>$OSTYPE</code>、<code>$PLATFORM</code>の4つの変数も使えます。</p>

<p>それぞれ</p>

<ul>
  <li><code>HOSTNAME</code>: <code>os.uname().nodename</code></li>
  <li><code>HOSTTYPE</code>: <code>os.uname().machine</code></li>
  <li><code>OSTYPE</code>: Bashのシェル変数(<code>subprocess</code>で取得)</li>
  <li><code>PLATFORM</code>: <code>sys.platform</code></li>
</ul>

<p>です。<code>HOSTNAME</code>、<code>HOSTTYPE</code>はシェル変数の同名のものと同じです。</p>

<ul>
  <li><code>HOSTNAME</code>: マシン名(ドメインなし)</li>
  <li><code>HOSTTYPE</code>: <code>x86_64</code>, <code>arm64</code>など</li>
  <li><code>OSTYPE</code>: <code>linux-gnu</code>、<code>darwin20.3.0</code>など</li>
  <li><code>PLATFORM</code>: <code>linux</code>、<code>darwin</code>など</li>
</ul>

<p>これを使うと、例えば特定のマシンにだけ入れたいパッケージがある場合、
親の<strong>Brewfile</strong>を</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">file ./Brewfile.<span class="nv">$HOSTNAME</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>Brewfile.machine1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>brew python@3.8
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>Brewfile.machine2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>brew python@3.9
</span></code></pre></td></tr></table></div></figure>

<p>というファイルを用意しておくと、machine1では<code>python@3.8</code>をインストールして
machine2では<code>python@3.9</code>をインストールし、
その他の環境ではこれらをインストールしません。</p>

<p>OSなど環境毎に変えたい場合には</p>

<p>file ./Brewfile.$PLATFORM.$HOSTTYPE</p>

<p>が便利です。</p>

<p><code>OSTYPE</code>にはバージョン情報が入ってしまうため、
そこまで管理したい場合には便利ですが、大概の場合はそのバージョンは無視して良いことが多く
<code>PLATFORM</code>を使ったほうが便利です。</p>

<p>あとはアーキテクチャの違いを<code>$HOSTTYPE</code>で追加しておきます。</p>

<p>これは、特に最近でたM1 Macで使う際に便利です。</p>

<p>M1のarm64の環境だと使えないCUIツールはまだ結構あって、
Rosettaを使ったIntel環境も作っている人は多いかと思いますが、
両方で同じ<strong>Brewfile</strong>を使おうと思うとIntel用に入れたものがarm64側でインストールに失敗してしまいます。</p>

<p>そこで、上の様な<code>file</code>設定をしておいて、</p>

<p><strong>Brewfile.darwin.x86_64</strong>というファイルにIntel側にだけ入れるものを書いておけば
他のものは<strong>Brewfile</strong>で共有して使うことが出来ます。</p>

<h2 id="mainコマンドの追加">mainコマンドの追加</h2>

<p>上の<code>file</code>の場合、<code>brew init</code>や、
<a href="https://homebrew-file.readthedocs.io/en/latest/brew-wrap.html">brew-wrap</a>
を使った<code>brew install</code>時に追加されるパッケージは親の<strong>Brewfile</strong>側になります。</p>

<p>したがって、その環境特有のものをインストールした場合には手動で
<strong>Brewfile</strong>から
<strong>Brewfile.machine1</strong>とかに移して、他の環境では使わないようにする必要があります。</p>

<p>これはほとんどが共通で、ほんの一部だけが特別なパッケージの場合には便利です。</p>

<p>一方で、例えば仕事のチームで最低限必要なパッケージ群をまとめる<strong>Brewfile</strong>を作り、
他を個別に管理したい、という場合、自動で<strong>Brewfile</strong>を管理するのが難しくなります。</p>

<p><code>main</code>コマンドはこういった場合に使えるようにv8.5.0で追加しました。
通常、<strong>メイン</strong>のファイルは最初に指定されている<strong>Brewfile</strong>本体になりますが、
<code>main</code>コマンドで指定されたファイルがあるとそれに移ります。</p>

<p><strong>メイン</strong>のファイルは、新たなパッケージが加わったときなどに、
<code>brew file init</code>や
brew-wrapを使った<code>brew install</code>でパッケージが加えられるファイルになります。</p>

<p><code>main</code>の使い方は<code>file</code>と同じ様にファイルへのパスを書く形で、</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>tap homebrew/core
</span><span class="line">brew neovim
</span><span class="line">
</span><span class="line">...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$HOSTNAME</span>
</span></code></pre></td></tr></table></div></figure>

<p>と言った感じ。</p>

<p>この場合、新たなパッケージが加えられた場合、
<code>brew file init</code>や
brew-wrapを使った<code>brew install</code>では<strong>./Brewfile.$HOSTNAME</strong>
に追加されます。</p>

<p>もしファイルがない場合には自動的に作られます。</p>

<p>これを使うと、<strong>Brewfile</strong>の自動アップデートを使っても共有ファイルの管理が簡単になります。</p>

<p>例えば、MacとLinuxで共有しようと思うと、</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$PLATFORM</span>
</span></code></pre></td></tr></table></div></figure>

<p>としておけば、それぞれの環境でインストールしたものはそれぞれ、<strong>Brewfile.darwin</strong>、<strong>Brewfile.linux</strong>に追加されます。</p>

<p>また、M1 Macでは</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$HOSTTYPE</span>
</span></code></pre></td></tr></table></div></figure>

<p>としておけば、
そのままのM1 (arm64)環境なら<strong>Brewfile.arm64</strong>、Rosetta使ったx86_64環境なら
<strong>Brewfile.x86_64</strong>に追加されます。</p>

<p>たまに整理してあげて、共通しているものを<strong>Brewfile</strong>に移す作業をしてあげれば良いかと。
(この辺をうまくやる機能もそのうち実装したい。。。)</p>

<p><strong>Brewfile</strong>と<code>main</code>で指定されてた<strong>Brewfile.$PLATFORM</strong>
などの両方に同じパッケージが書かれていた場合、
<code>brew file init</code>すると<code>main</code>の場合は<code>file</code>と違い
親の<strong>Brewfile</strong>の方に優先して残すようになっています。</p>

<p>ちなみに<code>main</code>や<code>file</code>は入れ子が可能で、</p>

<figure class="code"><figcaption><span>Brewfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$PLATFORM</span>
</span></code></pre></td></tr></table></div></figure>

<p>として、</p>

<figure class="code"><figcaption><span>Brewfile.darwin </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>...
</span><span class="line">
</span><span class="line">main ./Brewfile.<span class="nv">$HOSTNAME</span>
</span></code></pre></td></tr></table></div></figure>

<p>として、<strong>Brewfile.linux</strong>の方では<code>main</code>を追加しないままにしておくと、</p>

<ul>
  <li>Linux環境: HOSTによらず<strong>Brewfile.linux</strong>がメイン。</li>
  <li>Mac環境: HOST毎に別のものがメインに。</li>
  <li><strong>Brewfile</strong>にあるパッケージは全環境共通。</li>
  <li><strong>Brewfile.darwin</strong>にあるパッケージはMac環境だけで共通。</li>
</ul>

<p>とすることが出来ます。</p>

<h2 id="チーム共有brewfileの運用">チーム共有Brewfileの運用</h2>

<p>そこで、例えばチーム共有<strong>Brewfile</strong>みたいのを考えることが出来ます。</p>

<ul>
  <li>まず、共有する<strong>Brewfile</strong>を作り、適当なGitHubのレポジトリで共有。
    <ul>
      <li><strong>Brewfile</strong>に<code>main ~/.Brewfile</code>という一行を加えておく。</li>
      <li>このレポジトリは管理者だけが書き込めるものでも構いません。</li>
    </ul>
  </li>
  <li>各個人で<strong>~/.Brewfile</strong>を用意。
    <ul>
      <li>最初の時点でとくに必要なものがなければ自分で用意しなくても良くて勝手に作ってくれる。</li>
    </ul>
  </li>
  <li><code>brew file set_repo</code>で共有レポジトリを指定してセットする。</li>
  <li><code>brew install</code>したり色々して<strong>~/.Brewfile</strong>をアップデート。
    <ul>
      <li><a href="https://github.com/rcmdnk/dotfiles/">dotfiles</a>などで<strong>~/.Brewfile</strong>も管理すると良いかと。</li>
    </ul>
  </li>
  <li>管理者が共有の<strong>Brewfile</strong>をアップデートしてパッケージを追加したりする。
    <ul>
      <li>管理者以外でも便利で皆が使うべきものだと思えばPull Request出したり。</li>
    </ul>
  </li>
  <li><code>brew file update</code>によって共有<strong>Brewfile</strong>をアップデート。
    <ul>
      <li>個人ごとの利用ではこのファイルを変更することは無いので、レポジトリ側のアップデートのみを撮ってくる形になる。</li>
      <li>自分でインストールしたパッケージも共有<strong>Brewfile</strong>に追加されると<strong>~/.Brewfile</strong>からは消える。</li>
    </ul>
  </li>
</ul>

<p>と言った感じの運用が出ます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[M1 macでIntelな環境のシェルを使ったCronジョブを流したりする]]></title>
    <link href="https://rcmdnk.com/blog/2021/08/02/computer-mac/"/>
    <updated>2021-08-02T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/08/02/computer-mac</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B08N6MDVTB?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B08N6MDVTB&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61PaGScSrBS._SS200_.jpg" alt="2020 Apple MacBook Pro Apple M1 Chip (13インチPro, 8GB RAM, 256GB SSD) - シルバー" /></a>
</div>

<p>Appleシリコン(M1チップ)の載ったMacが販売されて大分経つので
アプリなども大分M1に対応したものが増えてきましたが
まだIntelプロセッサな環境でないと動かないものも結構あります。</p>

<p>通常のアプリはM1に対応してなくてもRosettaによってIntelプロセッサの上で動いている様にして
動かすことが可能です。</p>

<p>CLI環境に関しても同じようなことが出来るのですが、ちょっと特殊な状態があったのでそれについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#homebrewのインストールm1用" id="markdown-toc-homebrewのインストールm1用">Homebrewのインストール(M1用)</a></li>
  <li><a href="#homebrewのインストールintel用" id="markdown-toc-homebrewのインストールintel用">Homebrewのインストール(Intel用)</a></li>
  <li><a href="#パスの設定bashrczshrc" id="markdown-toc-パスの設定bashrczshrc">パスの設定(.bashrc/.zshrc)</a></li>
  <li><a href="#シェルの設定" id="markdown-toc-シェルの設定">シェルの設定</a></li>
  <li><a href="#シェルの状態" id="markdown-toc-シェルの状態">シェルの状態</a></li>
  <li><a href="#intelなcronジョブを流す" id="markdown-toc-intelなcronジョブを流す">Intelなcronジョブを流す</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="homebrewのインストールm1用">Homebrewのインストール(M1用)</h2>

<p>最初から入っているターミナル.appでもiTerm2のような3rdパーティーなアプリでも良いですが、
通常はM1でそのまま動きます。</p>

<p>もしかすると一部のターミナルアプリでM1非対応でRosettaが必須のものもあるかもしれませんが、
そのあたりは注意してください。</p>

<p>そのまま立ち上げて、
<a href="https://brew.sh/">ホームページ</a>
にあるように</p>

<pre><code>$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code></pre>

<p>をすると、<strong>/opt/homebrew</strong>の下にHomebrewをインストールしようとします。</p>

<p>この際、rootのパスワードを聞かれます。</p>

<p>とりあえず</p>

<pre><code>$ export PATH=/opt/homebrew/bin:$PATH
</code></pre>

<p>としてHomebrewのコマンドにパスを通し、
色々パッケージを入れていくと
一部パッケージで</p>

<pre><code>$ brew install embulk
embulk: The x86_64 architecture is required for this software.
Error: An unsatisfied requirement failed this build.
[ERROR]: Failed at command: /opt/homebrew/bin/brew install embulk
</code></pre>

<p>みたいなエラーが出ます。</p>

<p>まだパッケージとして対応してないものがあるみたいです。
個別に自分でコンパイルすれば入れられるものもあるようですが、いくつか出てくると結構手間です。</p>

<p>また、<code>python</code>をインストールして、<code>pip</code>を使って<code>numpy</code>を入れようとすると失敗してしまい、
機械学習的なことをやろうと思うと構築が面倒です。</p>

<p>ということでIntelな環境でCLI環境を構築します。</p>

<p>この時点で<strong>/opt/homebrew/bin</strong>などにPATHを通す設定をしてしまうと
下の作業で面倒なので一度それらは<strong>.bashrc</strong>なり<strong>.zshrc</strong>から外しておきます。</p>

<h2 id="homebrewのインストールintel用">Homebrewのインストール(Intel用)</h2>

<p>まず、今の環境がM1(Arm)環境なのを確認。</p>

<p>ターミナルを立ち上げて</p>

<pre><code>$ uname -m
arm64
</code></pre>

<p>となっていればM1(Arm)な環境です。</p>

<p>ここで、ターミナル.appなりiTerm.appのアイコンを右クリックして出てきたメニューから
<strong>情報を見る</strong>をクリックして情報画面を出して、
<strong>Rosettaを使用して開く</strong>にチェックを入れます。</p>

<p><img src="https://rcmdnk.com/images/post/20210802_iterm.png" alt="20210802_iterm.png" class="pic" /></p>

<p>こでアプリを立ち上げます。</p>

<p>そうすると</p>

<pre><code>$ uname -m
x86_64
</code></pre>

<p>となっているはずで、これでIntel(x86_64)な環境になりました。</p>

<p>この状態で</p>

<pre><code>$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code></pre>

<p>をすると今度はIntel版Macの様に<strong>/usr/local</strong>にHomebrewをインストールします。</p>

<p>ここでインストールされた<code>brew</code>コマンドを使って</p>

<pre><code>$ export PATH=/usr/local/bin:$PATH
</code></pre>

<p>とパスを通して色々インストールしていくと、今度は上でエラーが出た<code>embulk</code>などもそのままインストールできます。</p>

<p>また、<code>python</code>をインストールして<code>pip install numpy</code>などすると成功します。</p>

<p>ということで、今の所CLI環境はIntelでないと面倒なことが多いのでこちらをメインで使っていきたいと思っています。</p>

<p>なのでiTerm2の設定は上にあるようにRosettaの設定にしておきます。</p>

<p>使うことは殆どないと思いますが、ターミナル.appの方はチェックを入れずにM1な環境で立ち上がるようにしておきます。</p>

<h2 id="パスの設定bashrczshrc">パスの設定(.bashrc/.zshrc)</h2>

<p>それぞれのアーキテクチャで使っているときに正しいものを使えるように
Homebrewのパスの設定は以下のようにしておきます。</p>

<figure class="code"><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span>_set_homebrew_path <span class="o">{</span>
</span><span class="line">  <span class="nb">local</span> <span class="nv">brwe_dir_cand</span><span class="o">=()</span>
</span><span class="line">  <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$OSTYPE</span><span class="s2">&quot;</span> <span class="o">=</span> darwin* <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="k">$(</span>uname -m<span class="k">)</span><span class="s2">&quot;</span> <span class="o">=</span> arm64 <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">      <span class="nv">brew_dir_cand</span><span class="o">=(</span>/opt/homebrew<span class="o">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="nv">brew_dir_cand</span><span class="o">=(</span>/usr/local<span class="o">)</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="nv">brew_dir_cand</span><span class="o">=(</span>/home/linuxbrew/.linuxbrew <span class="nv">$HOME</span>/.linuxbrew<span class="o">)</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line">  <span class="k">for</span> path in <span class="s2">&quot;</span><span class="si">${</span><span class="nv">brew_dir_cand</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span><span class="k">do</span>
</span><span class="line">    <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;</span><span class="nv">$path</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">      <span class="nv">prefix</span><span class="o">=</span><span class="nv">$path</span>
</span><span class="line">      <span class="nb">break</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">  <span class="k">done</span>
</span><span class="line">  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;</span><span class="nv">$prefix</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$prefix</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">export</span> PATH <span class="s2">&quot;</span><span class="nv">$prefix</span><span class="s2">/sbin:</span><span class="nv">$PATH</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">export</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$prefix</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">_set_homebrew_path
</span></code></pre></td></tr></table></div></figure>

<p>上のはLinux用の設定も含めてまとめてあります。(<code>darwin</code>で見ているところがMac用。)</p>

<h2 id="シェルの設定">シェルの設定</h2>

<p>Macではデフォルトのシェルが設定されていて、最近は<code>/bin/zsh</code>になっています。</p>

<p>Bash派は<code>/bin/bash</code>とかにしているかと。</p>

<p>これらのシェルの設定は以下のような感じで変更が可能です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/05/25/computer-mac-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20150525_details_120_90.jpg" width="120" height="90" alt="20150525_details_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/05/25/computer-mac-bash-zsh/">Macでログインシェルを確認/変更するいくつかの方法</a></div></li></ul>

<p>Homebrewで最新シェル導入後、その最新版をデフォルトシェルとして使用したい、と思うのですが、
上の様に環境を共有している場合はやめておいた方が良いです。</p>

<p>というのも、Homebrewで入るシェルはarm64またはx86_64専用のものになっていて、
別の環境として開こうとした際に失敗します。</p>

<p><strong>/usr/local/bin/bash</strong>(x86_64用)を指定して
<strong>Rosettaを使用して開く</strong>のチェックを外して開くと
以下の様なエラーが出て使えません。</p>

<p><img src="https://rcmdnk.com/images/post/20210802_shellfail.png" alt="20210802_shellfail.png" class="pic" /></p>

<p>ただ、逆に
<strong>/opt/homebrew/bin/bash</strong>(arm64用)を指定して
<strong>Rosettaを使用して開く</strong>にチェックを入れて開くと何故か開けますが、
<code>uname -m</code>は<code>x86_64</code>を示す状態になります。</p>

<p>ただ、これでもHomebrew版を削除した場合とかに色々と面倒が起こるので、
デフォルトのシェルは<strong>/bin/bash</strong>などにしておいて、
必要な場合、iTermの設定などで設定したほうが良いと思います。</p>

<p>(<code>Profiles</code><i class="fa fa-arrow-right"></i><code>General</code><i class="fa fa-arrow-right"></i><code>Command</code>で<code>Custom Shell</code>を選んで<strong>/usr/local/bin/bash</strong>などを設定)</p>

<h2 id="シェルの状態">シェルの状態</h2>

<p>M1 macの<code>arch</code>というコマンドを使うと、上の様にアプリそのものをRosetta指定しなくても
Intelなコマンドを実行できるようになります。</p>

<p><strong>Rosettaを使用して開く</strong>のチェックを外して開いたターミナルで</p>

<pre><code>$ uname -m
arm64
</code></pre>

<p>となっている状態で</p>

<pre><code>$ arch -arch x86_64 uname -m
x86_64
</code></pre>

<p>の様に<code>arch -arch x86_64</code>に続けてコマンドを打つことで<code>x86_64</code>の状態でコマンドが実行されます。</p>

<p>逆も同様で、
<strong>Rosettaを使用して開く</strong>のチェックを入れて立ち上げて</p>

<pre><code>$ uname -m
x86_64
</code></pre>

<p>となっている状態で</p>

<pre><code>$ arch -arch arm64 uname -m
arm64
</code></pre>

<p>とすることもできます。</p>

<p>したがって、実はHomebrewもRosettaでターミナルを立ち上げなくても</p>

<pre><code>$ arch -arch x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code></pre>

<p>とすればIntelな環境が<strong>/usr/local/</strong>にインストールされます。
一時的にIntel環境も入れたい、というのであればこちらのほうが便利です。</p>

<p>今回はその後もRosettaを使って使うことが前提なので上のようにしています。</p>

<p>で、この<code>arch</code>コマンドを使って色々やってみると、</p>

<pre><code>$ arch -arch arm64 /bin/bash
$ uname -m
arm64

$ arch -arch x86_64 /bin/bash
$ uname -m
x86_64
</code></pre>

<p>といった感じで、コマンドラインの中でシェルの変更とアーキテクチャの変更を
一緒にすることもできます。</p>

<p>Macに最初から入っている<code>/bin/bash</code>などはこの様に両アーキテクチャで使える様に作られている様です。</p>

<p>一方で、Homebrewで入れたものは</p>

<pre><code>$ arch -arch x86_64 /opt/homebrew/bin/bash
arch: posix_spawnp: /opt/homebrew/bin/bash: Bad CPU type in executable

$ arch -arch arm64 /usr/local/bin/bash
arch: posix_spawnp: /usr/local/bin/bash: Bad CPU type in executable
</code></pre>

<p>といった感じで間違ったアーキテクチャでは使えません。</p>

<p>なんですが、なぜか上にあるように、Rosetta環境で<strong>/opt/homebrew/bin/bash</strong>をデフォルトにしても
そのまま立ち上げることができて、かつその環境はx86_64になっていて
ちょっとそこがどうなってるのかはよく分かってません。</p>

<p>また、上の様に<code>arch</code>を使ってアーキテクチャを切り替える事もできますが、
arm64の環境からx86_64にしたいだけなら</p>

<pre><code>$ uname -m
arm64
$ /usr/local/bin/bash
$ uname -m
x86_64
</code></pre>

<p>とするだけで必ずx86_64の環境になります。</p>

<p>逆にx86_64の環境で<strong>/opt/homebrew</strong>のBashを呼んでも</p>

<pre><code>$ uname -m
x86_64
$ /opt/homebrew/bin/bash
$ uname -m
x86_64
</code></pre>

<p>とアーキテクチャは変わりません。これは上で言ってるログインシェルのことと同様で
何故かx86_64で使えてしまう状態。</p>

<p>よくわからない状態なので敢えて使わない方が良いかとは思いますが。</p>

<h2 id="intelなcronジョブを流す">Intelなcronジョブを流す</h2>

<p>普通に</p>

<pre><code>0 * * * * uname -m
</code></pre>

<p>みたいなcronジョブを設定するとターミナルのRosetta使用状況とか関係なしに
<code>arm64</code>と出ます。</p>

<p>そもそもターミナルアプリごとの設定とは関係がないので。</p>

<p>ただ、Intel用Homebrewのアップデートを定期的にしたり、Intel用のツールを使って
cronジョブを流したいこともあると思います。</p>

<p>そういった場合は</p>

<pre><code>SHELL=/usr/local/bin/bash
0 * * * * uname -m
</code></pre>

<p>とすればx86_64の環境で流れます。</p>

<p>もしくは</p>

<pre><code>0 * * * * arch -arch x86_64 uname -m
</code></pre>

<p>の様に1つずつ設定するか(arm64なものも設定したい場合はこちらでやるしかない)。</p>

<p>Macではlaunchdがあるのでそれでcron的なことをやることもできますが、その場合も
そのままだとx86_64の環境で流れるので</p>

<figure class="code"><figcaption><span>test.plist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class="line"><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class="line"><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;dict&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;string&gt;</span>test<span class="nt">&lt;/string&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;array&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>arch<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>-arch<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>x86_64<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>uname<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>-m<span class="nt">&lt;/string&gt;</span>
</span><span class="line">  <span class="nt">&lt;/array&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>StartCalendarInterval<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;dict&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;integer&gt;</span>0<span class="nt">&lt;/integer&gt;</span>
</span><span class="line">    <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;integer&gt;</span>0<span class="nt">&lt;/integer&gt;</span>
</span><span class="line">  <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>StandardOutPath<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;string&gt;</span>/tmp/test.out<span class="nt">&lt;/string&gt;</span>
</span><span class="line">  <span class="nt">&lt;key&gt;</span>StandardErrorPath<span class="nt">&lt;/key&gt;</span>
</span><span class="line">  <span class="nt">&lt;string&gt;</span>/tmp/test.err<span class="nt">&lt;/string&gt;</span>
</span><span class="line"><span class="nt">&lt;/dict&gt;</span>
</span><span class="line"><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいなものを作ればx86_64な環境で動きます。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macOS 11 Big Surへのアップグレード]]></title>
    <link href="https://rcmdnk.com/blog/2021/03/17/computer-mac/"/>
    <updated>2021-03-17T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/03/17/computer-mac</id>
    <content type="html"><![CDATA[<p>今更になってしまいましたがmacOS 11.X Big Surへのアップグレードを行ったのでの
気づいた点や感想など。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#macos-11-big-sur" id="markdown-toc-macos-11-big-sur">macOS 11 Big Sur</a></li>
  <li><a href="#アプリの互換性" id="markdown-toc-アプリの互換性">アプリの互換性</a></li>
  <li><a href="#主な新機能" id="markdown-toc-主な新機能">主な新機能</a></li>
  <li><a href="#気になった部分とか" id="markdown-toc-気になった部分とか">気になった部分とか</a>    <ul>
      <li><a href="#環境設定" id="markdown-toc-環境設定">環境設定</a></li>
      <li><a href="#アクセントカラー" id="markdown-toc-アクセントカラー">アクセントカラー</a></li>
      <li><a href="#dockの背景色" id="markdown-toc-dockの背景色">Dockの背景色</a></li>
      <li><a href="#起動音を鳴らしたり消したり出来るようになった" id="markdown-toc-起動音を鳴らしたり消したり出来るようになった">起動音を鳴らしたり消したり出来るようになった</a></li>
      <li><a href="#色々な音が変わった" id="markdown-toc-色々な音が変わった">色々な音が変わった</a></li>
      <li><a href="#spotlightのプレビューがデフォルトで非表示に" id="markdown-toc-spotlightのプレビューがデフォルトで非表示に">Spotlightのプレビューがデフォルトで非表示に</a></li>
      <li><a href="#signed-system-volume-ssv" id="markdown-toc-signed-system-volume-ssv">Signed System Volume (SSV)</a></li>
    </ul>
  </li>
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="macos-11-big-sur">macOS 11 Big Sur</h2>

<p>これまでのmacOSはmacOS 10.15 Catalinaで、
2019年10月8日にリリースされました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/10/08/computer-mac/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20191008_catalina_120_90.jpg" width="120" height="90" alt="20191008_catalina_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/10/08/computer-mac/">macOS 10.15 Catalinaへアップグレード</a></div></li></ul>

<p>その前はmacOS 10.14 Mojaveは2018年9月25日リリース。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/09/25/computer-mac/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180925_mojave_120_90.jpg" width="120" height="90" alt="20180925_mojave_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/09/25/computer-mac/">macOS Mojave (10.14)へのアップグレード</a></div></li></ul>

<p>macOS 11 Big Surのリリースは2020年11月13日リリースなので
大体1年1ヶ月ということで同じような間隔で新バージョンがリリースされてることになります。</p>

<p>ただ、今回大きく違うのは、これまで10.Xというバージョンだったものが
11とメジャーバージョンのアップデートが行われました。</p>

<p>Mac OS X 10.0 Cheetahが発売されたのが2001年3月24日ということなので
実に20年ぶりのメジャーアップデート、ということになります。</p>

<p>それ以前は
<a href="https://ja.wikipedia.org/wiki/Classic_Mac_OS">Classic Mac OS</a>
と呼ばれているらしく、UIとかはMac OS Xになって大きく変わっています。</p>

<p>10.Xでも、最初はMac OS X 10.Xで、その後、10.8 Mountain Lionから<strong>Mac</strong>が外れOS X 10.8、
さらに10.12 SierraからmacOS 10.12、の様に変わりました。</p>

<p>メジャーアップデートということですが、
今までのMacを使いながらアップグレードするユーザーに取ってはUI/UX的に
9.Xから10.Xに変わったときのような
大きな変化があるわけではないと思います。
(まあその頃は私は使ってなかったので実際のところわかりませんが、10.Xが出た初めの頃は
新しいUI/UXが嫌で9.Xを使い続ける、という人は多かった様です。)</p>

<p>Big SurではこれまでのIntelのCPUに加えてApple Siliconでも動く、というのが
一番大きい変化でこれがメジャーアップデートにした大きな理由だと思います。</p>

<p>その中で一部古いドライバやソフトウェアが動かなくなる、という点もあるかもしれませんが、
10.15 Catalinaでも32ビットアプリが動かなくなるなどといった変化はあったので、
大きいのはApple Siliconへの対応ですね。</p>

<p>ちなみに、今後はまた、11.0, 11.1, …という感じで1年くらいおきにマイナーアップデートして
名前も変わっていくのかと思っていたら
すでにBig Surの名前のもの11.2.3とかがリリースされているので、
今後はマイナーバージョンも細かくアップデートされていくようです。</p>

<p>11.1だと新機能といえるものも少しありましたが、
11.2はbug fixだけで、この辺のリリース番号の付け方がどういう基準かは謎。</p>

<blockquote>
  <p><a href="https://support.apple.com/ja-jp/HT211896#macos111">macOS Big Sur のアップデートの新機能 - Apple サポート</a></p>
</blockquote>

<p>今年中か来年頭には12.Xがリリースされる?</p>

<h2 id="アプリの互換性">アプリの互換性</h2>

<p>すでに11.2.3がリリースされた状態になっていて、
色々と整理、アップデートされた後とあって今の所使っているアプリで
使えないものはありません。</p>

<p>個人的に重要なのは</p>

<ul>
  <li><a href="https://karabiner-elements.pqrs.org/">Karabiner-Elements</a></li>
  <li><a href="https://folivora.ai/">Better Touch Tool</a></li>
</ul>

<p>あたりでこの辺が動けばまあやりたいことできるかな、といった感じ。</p>

<h2 id="主な新機能">主な新機能</h2>

<p>Big Surの主な新機能については公式でまとめてくれています。</p>

<blockquote>
  <p><a href="https://www.apple.com/jp/macos/big-sur/features/">macOS Big Sur - 特長 - Apple（日本）</a></p>
</blockquote>

<p>以下はざっとそれぞれに関しての感想:</p>

<ul>
  <li>Macの体験
    <ul>
      <li>アイコンや様々な部分の見た目のアップデート</li>
      <li>なんか違うな?という感じで違和感を覚える程度。</li>
    </ul>
  </li>
  <li>コントロールセンター
    <ul>
      <li>iPhoneのコントロールセンター的なものの導入</li>
      <li>今の所有用性を余り感じない。</li>
      <li>サウンドなどをメニューバーから消してもコントロールセンターでアクセスできるので、メニューバーの整理、という意味では多少は良いかも。</li>
      <li>ただ、ものによってメニューバーだけ、コントロールセンターだけ、など決まってるものもあるのでその点が微妙。</li>
      <li>むしろこれがメニューバーから消せないのがちょっと邪魔。</li>
    </ul>
  </li>
  <li>通知センター
    <ul>
      <li>もともとポップアップ通知を見ることくらいしか使ってないので出てくる通知の表示が変わったな、と思った程度。</li>
      <li>開いてみたら色々なウィジェットが詰まってて邪魔くさかったので一旦全部消した。</li>
    </ul>
  </li>
  <li>Safari
    <ul>
      <li>Google Chrome利用。</li>
      <li>OSに最適化されてて速いというのは徐々に強い魅力になってきたかも。</li>
      <li>ただ拡張機能が十分使えない現状だとやはり移行は難しい。</li>
      <li>が、そんな人の助けになるように、Chromeの拡張機能などを移行するツールがあるらしい。
        <ul>
          <li><a href="https://developer.apple.com/jp/news/?id=kuswih5l">Safari向けWeb Extensionを容易に構築する - ニュース - Apple Developer</a></li>
          <li>そのうち試したい。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>メッセージ
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>マップ
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>プライバシー
    <ul>
      <li>プライバシー情報がどう扱われているか、などよりわかりやすくしてくれるということで。</li>
    </ul>
  </li>
  <li>ソフトウェア・アップデート
    <ul>
      <li>体感としてはまだ分からないですが、速くなったということで。</li>
    </ul>
  </li>
  <li>AirPods
    <ul>
      <li>AirPods持ってない。</li>
    </ul>
  </li>
  <li>Apple Arcade
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>バッテリー
    <ul>
      <li>過去にどういった感じで使ったかが見れるように。
        <ul>
          <li>バッテリーが持たなくなったな、と感じたらちょっと見てみるのには便利かも。</li>
        </ul>
      </li>
      <li>こういった充電の仕方を学習してバッテリーの寿命を伸ばす、的なものは最近良く見るようになった気がするが、それを実感出来た試しがない。
        <ul>
          <li>実際平均でどれくらい長持ちするようになったとかの記録はあるんだろうか?</li>
        </ul>
      </li>
      <li>メニューバーに<code>%</code>表示をさせる設定は<strong>環境設定</strong><i class="fa fa-arrow-right"></i><strong>バッテリーa</strong>ではなく、<strong>環境設定</strong><i class="fa fa-arrow-right"></i><strong>Dockとメニューバー</strong>の中の<strong>その他モジュール</strong>にある<strong>バッテリー(メニューバー)</strong>から設定できる。(よくMacであるややこしい罠設定。)</li>
      <li>使わない。</li>
    </ul>
  </li>
  <li>ホーム
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>ミュージック
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>メモ
    <ul>
      <li>きちんと使うメモは別アプリで管理。</li>
      <li>たまに使うが、使うのはシンプルだから。</li>
      <li>検索するほどは貯めないし、スキャンとかを取り込んだりもしないので余計な機能を入れ込むよりはよりシンプルで軽いアプリになってほしい。</li>
    </ul>
  </li>
  <li>写真
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>Podcast
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>リマインダー
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>Spotlight
    <ul>
      <li>高速化されて賢くなったのは嬉しい。</li>
      <li>あらゆる書類がフルプレビュー出来るようになったのも結構すごい。</li>
    </ul>
  </li>
  <li>Siri
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>ボイスメモ
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>天気
    <ul>
      <li>使わない。</li>
    </ul>
  </li>
  <li>インターナショナル機能
    <ul>
      <li>日本語もGoogle日本語入力なので特に影響がない。</li>
    </ul>
  </li>
</ul>

<h2 id="気になった部分とか">気になった部分とか</h2>

<p>上に挙げたものの中で少し詳しくみたいものとかそれ以外のものとか。</p>

<h3 id="環境設定">環境設定</h3>

<p>OSが新しくなったら環境設定をのぞいてなにか新しい設定無いかな、と探すのが1つの楽しみですが、
今回のアップデートではあまり面白い変更はありませんでした。</p>

<p>見た目で大きく変わったのは<strong>Dockとメニューバー</strong>のところに<strong>コントロールセンター</strong>
の設定が加わった位。</p>

<p>それ以外だと下に各アクセントカラーの設定が加わった程度で
ほとんど<strong>新しい設定</strong>的なものはない感じです。</p>

<h3 id="アクセントカラー">アクセントカラー</h3>

<p>環境設定の<strong>一般</strong>のところに、<strong>アクセントカラー</strong>という項目ができました。</p>

<p><img src="https://rcmdnk.com/images/post/20210317_color.jpg" alt="20210317_color.jpg" class="pic" /></p>

<p>これを変えることでウィンドウの左上にある閉じるなどのボタンの色や
その他もろもろのUIの色を変えることが出来ます。</p>

<p>上の絵だとグレーを選んでるので、左上のボタンがグレーになってることがわかります。</p>

<p>これによって完全なダークモードっぽい状態に出来るので地味に嬉しい追加機能。</p>

<h3 id="dockの背景色">Dockの背景色</h3>

<p>好みの問題ですが、ダークモードにしたときのDockの背景の色が
なんか濃くなったな、と感じました。</p>

<p><img src="https://rcmdnk.com/images/post/20210317_dock.jpg" alt="20210317_dock.jpg" class="pic" /></p>

<p>ライトな場合でも白が強い。</p>

<p>基本的にDockは隠しているし直接使うこと殆どないので個人的にはそこまで気にならないですが、
もし常に表示させてるんだとしたらもうちょっと目立たない色にしたいな、と。</p>

<h3 id="起動音を鳴らしたり消したり出来るようになった">起動音を鳴らしたり消したり出来るようになった</h3>

<p>その昔、Macは立ち上げる際に<strong>ジャーン</strong>という音が鳴り、
静かな環境でふと再起動した際に恥ずかしい思いをする、という
人を量産してきました。</p>

<p>これを避けるために過去の人達は様々な努力をしてきました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img"><a href="https://itunes.apple.com/jp/app/volume-reset/id495705418?mt=12&amp;at=10lc94" target="_blank" rel="nofollow"><img width="100" class="alignleft" align="left" src="http://is3.mzstatic.com/image/pf/us/r30/Purple6/v4/fb/6c/dc/fb6cdcb8-da7e-2487-5045-e282503c551d/AppIcon.100x100-75.png" style="border-radius: 20px 20px 20px 20px;-moz-border-radius: 20px 20px 20px 20px;-webkit-border-radius: 20px 20px 20px 20px;box-shadow: 1px 4px 6px 1px #999999;-moz-box-shadow: 1px 4px 6px 1px #999999;-webkit-box-shadow: 1px 4px 6px 1px #999999;margin: -5px 15px 1px 5px;" alt="Volume Reset" /></a></div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/05/07/computer-volumereset/">Macの起動時のジャーン音を消すやつ</a></div></li></ul>

<p>そんな起動音ですが、2016年以降に発売されたMacでは鳴らない様になっていました。</p>

<p>なければないで寂しいものかもしれませんが、
これが再び復活し、今度はOSの設定で自由に鳴らしたり鳴らさなかったり出来るようになりました。</p>

<p>環境設定の<strong>サウンド</strong>に</p>

<ul>
  <li>起動時にサウンドを再生</li>
</ul>

<p>というチェックボックスがあるのでそのチェックを外せば鳴らないしチェックすれば鳴る状態。</p>

<p><img src="https://rcmdnk.com/images/post/20210317_sound.jpg" alt="20210317_sound.jpg" class="pic" /></p>

<p>上の記事の最後にも書いてますが、
macOSが不調な時などにビープ音が鳴ったりするらしいんですが
おそらくこれは別設定でジャーンを消しても鳴るんだとは思います。
(確かめてないです。)</p>

<blockquote>
  <p><a href="https://support.apple.com/ja-jp/HT202768">Mac の起動時にビープ音が鳴る場合 - Apple サポート</a></p>
</blockquote>

<h3 id="色々な音が変わった">色々な音が変わった</h3>

<p>スクリーンショットを撮るとき、<strong>パシャ</strong>という音の上に<strong>ポコ</strong>といった感じの音がかぶさった音になりました。</p>

<p>それ以外にもちょこちょこ変わっている模様。</p>

<h3 id="spotlightのプレビューがデフォルトで非表示に">Spotlightのプレビューがデフォルトで非表示に</h3>

<p>これまでSpotlightで画像などを検索すると自動的にプレビューが表示されてましたが、
Big Surからは文字列のリストだけが表示されるようになりました。</p>

<p>結果が表示された状態で<i class="key">Tab</i>を押すとそのファイルのプレビューがクイックルック的に見えるようになります。</p>

<p>Big Surからは文章の書かれた数ページのPDFなどもこれでスクロールバー付きのプレビューとして全ページ見れるようになります。</p>

<p>検索して右に<code>&gt;</code>マークがでているものは画像などのこれまでもプレビューができていたようなもの。
これらに関してはプレビューが出てない状態で<i class="key">Return</i>を押すと
一旦プレビューが表示されます。</p>

<p>もう一度押すとファイルを開きます。</p>

<p><img src="https://rcmdnk.com/images/post/20210317_spotlight.jpg" alt="20210317_spotlight.jpg" class="pic" /></p>

<p>クリックに関しても<code>&gt;</code>マークのものは最初は開かずにプレビューを表示するようになっています。</p>

<p>そのあたり、macOS 10.Xのときとは少し動作が変わっていますが、
細かいことに関しては以下によくまとまっていたので参照してみてください。</p>

<blockquote>
  <p><a href="https://lacona.app/blog/2020/11/11/spotlight-changes-in-big-sur.html">Spotlight Changes in macOS 11 Big Sur - Lacona Blog</a></p>
</blockquote>

<h3 id="signed-system-volume-ssv">Signed System Volume (SSV)</h3>

<p>OS X 10.11 El Capitanの時にSystem Integrity Protection(SIP)という新しいセキュリティシステムが追加され色々と変わりました。</p>
<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B016AZMAIS?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B016AZMAIS&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/510n9cnBIrL._SS90_CR0,0,120,90_.jpg" alt="The Complete Beginners Guide to Mac OS X El Capitan: (For MacBook, MacBook Air, MacBook Pro, iMac, Mac Pro, and Mac Mini) (English Edition)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/10/10/computer-mac/">OS X 10.11 El CapitanのSystem Integrity Protection(SIP) (rootless)についてちょっと詳しく</a></div></li></ul>

<p>これに加えてmacOS 11.0 Big Surでは新たにSigned System Volume (SSV, 署名付きシステムボリューム)と呼ばれるセキュリティシステムが追加されました。</p>

<blockquote>
  <p><a href="https://support.apple.com/ja-jp/guide/mac-help/mchl0f9af76f/mac">署名済みシステムボリュームとは - Apple サポート</a></p>
</blockquote>

<blockquote>
  <p><a href="https://developer.apple.com/news/?id=3xpv8r2m">Protecting data at multiple layers - Discover - Apple Developer</a></p>
</blockquote>

<p>システムボリュームに関するセキュリティ強化はMojaveやCatalinaなどでも少しずつ追加され
書き込みが難しいようになってきていましたが、
SSVによってそれをさらに強化した形です。</p>

<p>これによって、以前はSIPを切ればなんとか変更できていたシステムのアイコンなども
事実上変更不可能になった模様。</p>

<p>SSV自体はSIP同様にリカバリーモードから無効化することはでき、</p>

<pre><code># csrutil authenticated-root disable
</code></pre>

<p>というコマンドを打てばSSVは無効化は出来ます。</p>

<p>ただし、SIP、SSVを無効化しても完全に自由に変更できる状態になるというわけではないようです。</p>

<p><a href="https://freemacsoft.net/liteicon/">LiteIcon</a>というアイコンを変更するアプリがありますが、
このHP上では</p>

<blockquote>
  <p>End of the road…<br />
We are sorry to announce that LiteIcon has been discontinued, as it is no longer possible to replace system icons on macOS Big Sur.</p>
</blockquote>

<p>という悲しいお知らせが出ています。</p>

<p>SIPが導入されたときはSIPを無効化すれば出来る、ということが多くて
最初の頃は無効化していましたが、
今回は無効化しても出来ないままのものも多いし、個人的には無効化してまでやりたいこともないため
無理にSSVを無効化してどうこうする、とうことは今の所するつもりはないです。</p>

<h2 id="起こった問題">起こった問題</h2>

<p>特に大きな問題は起こってないんですが、
繋げて使っていたHHKBがドライバのアップデートが必要で最初は一切効かない状態になってました。</p>

<p><a href="https://faq.pfu.jp/faq/show/3726?site_domain=hhkb">HHKBの旧製品はmacOS Big Surに対応しますか？  Happy Hacking Keyboard よくあるご質問</a></p>

<p>上にしたがってドライバをインストールしてmacOSを再起動
したら使えるようになりました。
(自分の環境では再起動しないと動かなかった。)</p>

<p>それ以外は特に大きな問題は起こっておらず、
逆に特に新しい機能で面白いな、と思うこともそれほどなく、
メジャーバージョンが更新されたOSということでしたが
アップグレードしたもののちょっと拍子抜け感すらある感じでした。</p>

<p>やはり違いを感じるにはApple Silicon製のMacを使ってみるしかないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mitmproxyを使ってアプリの通信内容を確認する]]></title>
    <link href="https://rcmdnk.com/blog/2021/03/02/computer-windows-mac-network/"/>
    <updated>2021-03-02T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/03/02/computer-windows-mac-network</id>
    <content type="html"><![CDATA[<p>アプリなどが何ら化クラウドサーバーと交信して色々やってる部分を
確認して別のところで操作出来るようにしてみるという話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#mitmproxy" id="markdown-toc-mitmproxy">mitmproxy</a></li>
  <li><a href="#windows-wslでの利用" id="markdown-toc-windows-wslでの利用">Windows WSLでの利用</a></li>
  <li><a href="#macでの利用" id="markdown-toc-macでの利用">Macでの利用</a></li>
  <li><a href="#iphoneからの接続" id="markdown-toc-iphoneからの接続">iPhoneからの接続</a></li>
  <li><a href="#mitmproxyを使って通信内容を見てみる" id="markdown-toc-mitmproxyを使って通信内容を見てみる">mitmproxyを使って通信内容を見てみる</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="mitmproxy">mitmproxy</h2>

<ul>
  <li><a href="https://mitmproxy.org/">mitmproxy - an interactive HTTPS proxy</a></li>
  <li><a href="https://docs.mitmproxy.org/stable/">mitmproxy doc: Introduction</a></li>
</ul>

<p>mitmproxyはプロキシサーバーをたてて、通信をそこを通すことで通信の内容を
監視したり、パラメータを変更して通信を送ったりすることを実現してくれるツール。</p>

<p>インストールは上記ページからインストーラーなりバイナリをダウンロードして使うか、
Homebrewを使っているならMacでもWindows WSLでも</p>

<pre><code>$ brew install mitmproxy
</code></pre>

<p>で入れられます。</p>

<p>これで</p>

<pre><code>$ mitmproxy
</code></pre>

<p>とすることでプロキシサーバーを立ち上げられます。デフォルトでは8080番ポートを使いますが、
変更したい場合は</p>

<pre><code>$ mitmproxy -p 10080
</code></pre>

<p>の様な感じでポートを指定します。</p>

<h2 id="windows-wslでの利用">Windows WSLでの利用</h2>

<p>WindowsのWSLから実行する場合は、WSLのポートとWindowsの外向けIPアドレスとを結びつける必要があります。</p>

<p>詳しくは以下で。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2021/03/01/computer-windows-network/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20210301_property_120_90.jpg" width="120" height="90" alt="20210301_property_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2021/03/01/computer-windows-network/">Windows WSL2に外部から直接アクセスするための設定</a></div></li></ul>

<p>この方法の中で外部向けファイアウォールの設定も行うので外部から<code>WindowsのIPアドレス:8080</code>(ポートを変更している場合は8080を変更したもの)でアクセス出来るようになります。</p>

<p>ファイアウォールに関する確認をしたい場合はWindows Defenderファイアウォールから。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/04/27/computer-windows-network/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180427_openssh_120_90.png" width="120" height="90" alt="20180427_openssh_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/04/27/computer-windows-network/">Windowsで公式ツールでSSHサーバーを立てる2つの方法</a></div></li></ul>

<p>設定したらアクセスするためにIPアドレスを調べます。</p>

<p><strong>設定</strong><i class="fa fa-arrow-right"></i><strong>ネットワークとインターネット</strong><i class="fa fa-arrow-right"></i><strong>状態</strong><i class="fa fa-arrow-right"></i><strong>プロパティ</strong></p>

<p>で使っているネットワークのプロパティにいって、下の方にある<strong>IPv4アドレス</strong>の値を取得します。</p>

<p>もしくはWSLの中からなら</p>

<pre><code>$ ipconfig.exe
</code></pre>

<p>出でてくるネットワークのうち、
イーサネットかWireless LANで使っているもののIPv4アドレスを取得。</p>

<h2 id="macでの利用">Macでの利用</h2>

<p><strong>システム環境設定</strong><i class="fa fa-arrow-right"></i><strong>セキュリティーとプライバシー</strong><i class="fa fa-arrow-right"></i><strong>ファイアウォール</strong>から必要なポートを開放したりしてください。</p>

<p>IPアドレスは
<strong>システム環境設定</strong><i class="fa fa-arrow-right"></i><strong>ネットワーク</strong>
で使っているネットワークの<strong>詳細</strong>を表示させて、
<strong>TCP/IP</strong>のタブにいって<strong>IPv4アドレス</strong>を取得。</p>

<p>もしくはターミナルで</p>

<pre><code>$ ifconfig
...
en0 flags=...
   ...
   inet 192.168.11.3 netmask ...
</code></pre>

<p>とかで使っているネットワークの<code>inet</code>の値を取得。</p>

<h2 id="iphoneからの接続">iPhoneからの接続</h2>

<p>まずは</p>

<p>まず、MacなりWindows WSLなりで体制を整えて、<code>mitmproxy</code>を実行して待つ状態にしておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mitmproxy
</span><span class="line">Flows
</span><span class="line">
</span><span class="line">
</span><span class="line">[0/0]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>みたいな感じの表示になってるはずです。</p>

<p>この状態でiPhoneから接続してみます。</p>

<p>使っているWi-Fiの設定を開き、
下の方に行くと<strong>プロキシを構成</strong>という項目があって<strong>オフ</strong>になっていると思います。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_wifi.jpg" alt="20210302_wifi.jpg" class="pic" /></p>

<p>このここを開いて、<strong>手動</strong>を選択すると<strong>サーバ</strong>、<strong>ポート</strong>の入力が出来るようになるので、
<strong>サーバ</strong>に上で取得したIPアドレスと、<strong>ポート</strong>に8080(別途指定してたらそれ)
を入力して保存します。
(<strong>認証</strong>の欄はオフのママ。)</p>

<p><img src="https://rcmdnk.com/images/post/20210302_proxy.jpg" alt="20210302_proxy.jpg" class="pic" /></p>

<p>これで保存。</p>

<p>この設定で一時的にiPhoneからネットワークに接続できない状態になっているので注意してください。</p>

<p>ネットワークを有効にするために、プロキシサーバーに対する証明書をインストールする必要があります。</p>

<p>上の設定後、Safariを開いて、<a href="http://mitm.it">http://mitm.it</a>を開きます。</p>

<p>もしプロキシ設定がきちんとできてないと</p>

<p><img src="https://rcmdnk.com/images/post/20210302_notpassing.jpg" alt="20210302_notpassing.jpg" class="pic" /></p>

<pre><code>If you can see this, traffic is not passing through mitmproxy.
Visit the Documentation
</code></pre>

<p>みたいなページが出てきます。(この状態だと普通にネットワーク接続は出来るがmitmproxyは通してない状態。)</p>

<p>正しく設定されていると以下の様なページが出てきます。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_mitmit.jpg" alt="20210302_mitmit.jpg" class="pic" /></p>

<p>もし、どちらのページも出てこず接続が出来ないような状況であれば
mitmproxyを立ち上げているサーバーに接続できていない状態なので、
サーバー側のファイアウォールやポートの設定などを再度調べてみてください。</p>

<p>ここで、iOSの<strong>Get mitmproxy-ca-cert.pem</strong>をクリックすると、
以下の様に<strong>このWebサイトは構成プロファイルをダウンロードしようとしています。
許可しますか？</strong>
という問いが出てくるので<strong>許可</strong>します。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_download.jpg" alt="20210302_download.jpg" class="pic" /></p>

<p>このとき、ブラウザがSafari以外のChromeとかだとこのダイアログが出ないので、
必ずSafariで開く必要があります。</p>

<p>ここでダウンロードが完了したら、<strong>設定</strong>を開きます。
そうすると、Apple IDの情報の下に以下のような
<strong>ファイルがダウンロードされました</strong>という項目が追加されています。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_settings.jpg" alt="20210302_settings.jpg" class="pic" /></p>

<p>そこをクリックするとダウンロードしたプロファイルのインストールページに行くのでインストールします。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_install.jpg" alt="20210302_install.jpg" class="pic" /></p>

<p>正しくインストールされたかどうかは<strong>設定</strong><i class="fa fa-arrow-right"></i><strong>一般</strong><i class="fa fa-arrow-right"></i><strong>プロファイル</strong>
に行って<strong>mitmproxy</strong>があれば確認できます。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_profile.jpg" alt="20210302_profile.jpg" class="pic" /></p>

<p>これで証明書はインストールされましたがまだ有効にはなってない状態です。</p>

<p>有効にするために、<strong>設定</strong><i class="fa fa-arrow-right"></i><strong>情報</strong><i class="fa fa-arrow-right"></i><strong>証明書信頼設定</strong>(一番下)
に行って、<strong>mitmproxy</strong>の欄があるはずなので、そのチェックを有効に変更します。</p>

<p><img src="https://rcmdnk.com/images/post/20210302_enable.jpg" alt="20210302_enable.jpg" class="pic" /></p>

<p>このルート証明書を全面的に信頼する、の欄でチェックを有効に。</p>

<p>これでmitmproxyを通した通信が出来るようになりました。</p>

<h2 id="mitmproxyを使って通信内容を見てみる">mitmproxyを使って通信内容を見てみる</h2>

<p>上の状態でブラウザでなにか見たり、なにか通信するアプリを使うと、
mitmproxyを起動したターミナルに色々と通信内容が出てくると思います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Flows
</span><span class="line">&gt;&gt; GET https://lh3.googleusercontent.com/-DD1vxNl412w/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclA1zzNkcym…
</span><span class="line">       ← 200 image/png 3.7k 167ms
</span><span class="line">   GET https://lh4.googleusercontent.com/-LctrK_qMfHM/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucnl1ioWQwg-…
</span><span class="line">       ← 200 image/png 2.46k 372ms
</span><span class="line">   GET https://lh5.googleusercontent.com/-cFfiOvjaCq8/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclMRErLwKii…
</span><span class="line">       ← 200 image/png 2.84k 172ms
</span><span class="line">   POST https://update.googleapis.com/service/update2 HTTP/2.0
</span><span class="line">        ← 200 text/xml 234b 145ms
</span><span class="line">   POST https://oauthaccountmanager.googleapis.com/v1/issuetoken HTTP/2.0
</span><span class="line">        ← 200 application/json 361b 139ms
</span><span class="line">   POST https://oauthaccountmanager.googleapis.com/v1/issuetoken HTTP/2.0
</span><span class="line">        ← 200 application/json 422b 147ms
</span><span class="line">   POST https://oauthaccountmanager.googleapis.com/v1/issuetoken HTTP/2.0
</span><span class="line">        ← 200 application/json 422b 137ms
</span><span class="line">   POST https://oauthaccountmanager.googleapis.com/v1/issuetoken HTTP/2.0
</span><span class="line">        ← 200 application/json 391b 162ms
</span><span class="line">   GET https://clientservices.googleapis.com/chrome-variations/seed?osname=ios&amp;channel=stable&amp;…
</span><span class="line">       ← 304 [no content] 243ms
</span><span class="line">   POST https://oauthaccountmanager.googleapis.com/v1/issuetoken HTTP/2.0
</span><span class="line">        ← 200 application/json 424b 105ms
</span><span class="line">   POST https://accounts.google.com/ListAccounts?gpsia=1&amp;source=ChromiumBrowser&amp;json=standard …
</span><span class="line">        ← 200 application/json 332b 95ms
</span><span class="line">⇩  [1/166]                                                                                [*:8080]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>この画面での操作はVimライクなもので、</p>

<ul>
  <li><i class="key">j</i>: 上を選択</li>
  <li><i class="key">k</i>: 下を選択</li>
</ul>

<p>また、選んだ状態で<i class="key">Enter</i>を押すと各通信の詳細を見ることが出来て、
<code>Request</code>、<code>Response</code>、<code>Details</code>のタブを持ったページに飛びます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2021-XX-XX XX:XX:XX POST https://clients4.google.com/chrome-sync/command/?client=Google+Chrome&amp;
</span><span class="line">                         client_id=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX HTTP/2.0
</span><span class="line">                         ← 200 application/vnd.google.octet-stream-compressible 475b 102ms
</span><span class="line">             Request                         Response                          Detail
</span><span class="line">content-length:    2396
</span><span class="line">pragma:            no-cache
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このページでもVimライクに</p>

<ul>
  <li><i class="key">h</i>: 左を選択</li>
  <li><i class="key">l</i>: 右を選択</li>
</ul>

<p>このページからは<i class="key">q</i>を押すと元の一覧ページに戻ります。</p>

<p>それぞれのページで<i class="key">?</i>を押すと
ショートカットキーの一覧のヘルプを見ることも出来ます。</p>

<p>よく使う便利な使い方としては、
一覧ページで
他に便利な使い方として、</p>

<ul>
  <li>一覧ページで<i class="key">Shift</i>-<i class="key">F</i>: 新しい通信があったとき一覧を常時更新する
    <ul>
      <li>デフォルトでは画面いっぱい表示されるとそこで停止する。<i class="key">j</i>とかで下に行くと新しいものが見れる。</li>
    </ul>
  </li>
  <li>一覧ページで<i class="key">f</i>: 文字入力モードに入って、入力して<i class="key">Enter</i>を押すと入力した文字列でフィルターした通信のみを表示する。</li>
  <li>一覧ページ、もしくは特定の通信を選んだページで<i class="key">:</i>でコマンドモードに入り、<code>: export.clip curl @focus</code>を実行。
    <ul>
      <li>選択中の通信を<code>curl</code>コマンドで再現するものをクリップボードに入れる。</li>
    </ul>
  </li>
</ul>

<p>あたり。</p>

<p>通信を見始めるといろいろな通信が出てきて溢れてしまいますが、
必要な通信は通信先のドメイン名などに特定のものがあるはずなので、それでフィルター。</p>

<p>興味がありそうな通信をそれぞれ見つつ、
使いたい通信が合った場合、<code>: export.clip curl @focus</code>でコマンドを取得。</p>

<p>コマンドラインにペーストして実際に通信が成功するか見てみる、といった具合。</p>

<p>さらに下のページを使うと適当な言語で通信を再現することが出来るようになります。</p>

<blockquote>
  <p><a href="https://curl.trillworks.com/#python">Convert cURL command syntax to Python requests, Ansible URI, browser fetch, MATLAB, Node.js, R, PHP, Strest, Go, Dart, JSON, Elixir, and Rust code</a></p>
</blockquote>

<p>上のページの<code>curl command</code>部分に取得したcURLコマンドを入力して、
欲しい言語を<strong>Language</strong>で選ぶとその言語で使える形で
通信を再現してくれます。</p>

<p>例えば、</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2021-XX-XX XX:XX:XX GET http://mitm.it/
</span><span class="line">                        ← 200 OK text/html 16.72k 25ms
</span><span class="line">             Request                         Response                          Detail
</span><span class="line">Host:                       mitm.it
</span><span class="line">Connection:                 keep-alive
</span><span class="line">Proxy-Connection:           keep-alive
</span><span class="line">Upgrade-Insecure-Requests:  1
</span><span class="line">Accept:                     text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class="line">User-Agent:                 Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X)
</span><span class="line">                            AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77
</span><span class="line">                            Mobile/15E148 Safari/604.1
</span><span class="line">Referer:                    http://mitm.it/
</span><span class="line">Accept-Language:            ja-jp
</span><span class="line">Accept-Encoding:            gzip, deflate
</span><span class="line">No request content                                                                        [m:auto]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>みたいな通信があった場合
cURLコマンドを取得すると</p>

<pre><code>curl -H 'Connection: keep-alive' -H 'Proxy-Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77 Mobile/15E148 Safari/604.1' -H 'Referer: http://mitm.it/' -H 'Accept-Language: ja-jp' --compressed http://mitm.it/
</code></pre>

<p>みたいなものになります。</p>

<p>これを上のページで整形すると、例えばPythonなら</p>

<figure class="code"><figcaption><span>mitm.py  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span></span><span class="kn">import</span> <span class="nn">requests</span>
</span><span class="line">
</span><span class="line"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s1">&#39;Connection&#39;</span><span class="p">:</span> <span class="s1">&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;Proxy-Connection&#39;</span><span class="p">:</span> <span class="s1">&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;Upgrade-Insecure-Requests&#39;</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;Accept&#39;</span><span class="p">:</span> <span class="s1">&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77 Mobile/15E148 Safari/604.1&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;Referer&#39;</span><span class="p">:</span> <span class="s1">&#39;http://mitm.it/&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s1">&#39;ja-jp&#39;</span><span class="p">,</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://mitm.it/&#39;</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Node.js (fetch)なら</p>

<figure class="code"><figcaption><span>mitm.js</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-fetch&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;http://mitm.it/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s1">&#39;Connection&#39;</span><span class="o">:</span> <span class="s1">&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;Proxy-Connection&#39;</span><span class="o">:</span> <span class="s1">&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;Upgrade-Insecure-Requests&#39;</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;Accept&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;User-Agent&#39;</span><span class="o">:</span> <span class="s1">&#39;Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77 Mobile/15E148 Safari/604.1&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;Referer&#39;</span><span class="o">:</span> <span class="s1">&#39;http://mitm.it/&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s1">&#39;Accept-Language&#39;</span><span class="o">:</span> <span class="s1">&#39;ja-jp&#39;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Goなら</p>

<figure class="code"><figcaption><span>mitm.go</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span></span><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">  <span class="s">&quot;fmt&quot;</span>
</span><span class="line">  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class="line">  <span class="s">&quot;log&quot;</span>
</span><span class="line">  <span class="s">&quot;net/http&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{}</span>
</span><span class="line">  <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewRequest</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="s">&quot;http://mitm.it/&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Connection&quot;</span><span class="p">,</span> <span class="s">&quot;keep-alive&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Proxy-Connection&quot;</span><span class="p">,</span> <span class="s">&quot;keep-alive&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Upgrade-Insecure-Requests&quot;</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Accept&quot;</span><span class="p">,</span> <span class="s">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;User-Agent&quot;</span><span class="p">,</span> <span class="s">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77 Mobile/15E148 Safari/604.1&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Referer&quot;</span><span class="p">,</span> <span class="s">&quot;http://mitm.it/&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Accept-Language&quot;</span><span class="p">,</span> <span class="s">&quot;ja-jp&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nx">bodyText</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">bodyText</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>といった感じ。</p>

<p>これで簡単に好きな言語で通信を再現できるようになります。</p>
]]></content>
  </entry>
  
</feed>
