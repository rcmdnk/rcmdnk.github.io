<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Vim | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/vim/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-31T00:48:54+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim 7.4をCygwinへインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim/"/>
    <updated>2013-08-17T00:44:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim</id>
    <content type="html"><![CDATA[<p>Vim 7.4の正式版がリリースされたので、
Cygwinへもインストールしました。
現在のCygwinで配布されてるバイナリは7.3+patch 1-1110, 1112-1152
なので、ソースからビルドしてインストールです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Mercurielをインストール">Mercurielをインストール</h1>

<p>Mercurielをまだインストールしてなかったので
<a href="/blog/2013/08/08/computer-windows-cygwin/">apt-cyg</a>で</p>

<pre><code>apt-cyg -u install mercurial
</code></pre>

<p>最初大文字で<code>Mercurial</code>やコマンドの<code>hg</code>で探しても見つからなかったので
ソースからインストールしなきゃいけないのかと思いましたが、
普通に<code>mercurial</code>でありました。。。</p>

<h1 id="Vimをインストール">Vimをインストール</h1>

<p><a href="/blog/2013/08/11/computer-linux-windows-cygwin/">Stow</a>を使って管理するようにします。
オプションはマルチバイト対応とLuaやPythonなどいくつかのインタプリタを有効に。以前までの色々のオプションはざっくり落としてみました。(要らないものをdisableしてもあまり意味が無い感じがしてきたので。)</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ ./configure  --prefix=$HOME/usr/local/stow/vim-7.4  --enable-multibyte  --enable-luainterp=yes  --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ stow vim-7.4
</code></pre>

<p>こんな感じで<code>~/usr/local/</code>へ。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>MacではHomebrew版のHEADが7.4になってますのでHomebrewで入れればOK。
  (<a href="/blog/2013/08/07/computer-vim">Lua対応Vimをインストール</a>)
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua対応Vimをインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/07/computer-vim/"/>
    <updated>2013-08-07T20:36:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/07/computer-vim</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048677977/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41otNZcUklL._SL160_.jpg" border="0"></a></p>

<p>Vimでの補完機能のプラグインである<a href="https://github.com/Shougo/neocomplcache.vim">neocompletecache</a>
の後継版<a href="https://github.com/Shougo/neocomplete.vim">neocomplete</a>
を使うためにVimを再インストールした際の手順。
<a href="http://www.lua.org/home.html">Lua</a>自体がない環境もあったので、
Luaのインストールからです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Linux">Linux</h1>

<ul>
<li>su権限持っていないのでローカルにluaをインストール:</li>
</ul>


<p><a href="http://www.lua.org/ftp/">luaのダウンロードページ</a>より最新のを取ってきてインストール。
取り敢えずmakeしてみるとエラーがでた。</p>

<pre><code>$ cd ~/tmp/
$ wget http://www.lua.org/ftp/lua-5.2.2.tar.gz
$ tar xzf lua-5.2.2.tar.gz
$ cd lua-5.2.2
$ make linux
...
make[1]: Entering directory `/home/user/tmp/lua-5.2.2/src'
make all SYSCFLAGS="-DLUA_USE_LINUX" SYSLIBS="-Wl,-E -ldl -lreadline"
make[2]: Entering directory `/home/user/tmp/lua-5.2.2/src'
gcc -o lua   lua.o liblua.a -lm -Wl,-E -ldl -lreadline-
/usr/lib/../lib64/libreadline.so: undefined reference to `PC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetflag'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetent'
/usr/lib/../lib64/libreadline.so: undefined reference to `UP'
/usr/lib/../lib64/libreadline.so: undefined reference to `tputs'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgoto'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetnum'
/usr/lib/../lib64/libreadline.so: undefined reference to `BC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetstr'
collect2: ld returned 1 exit status
make[2]: *** [lua] Error 1
make[2]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make[1]: *** [linux] Error 2
make[1]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make: *** [linux] Error 2
</code></pre>

<p>libreadlineを調べてみると</p>

<pre><code>$ ldd -r /usr/lib64/libreadline.so
        linux-vdso.so.1 =&gt;  (0x00007fffbe3aa000)
        /$LIB/snoopy.so =&gt; /lib64/snoopy.so (0x00002b2a6a387000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b2a6a5af000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b2a6a907000)
        /lib64/ld-linux-x86-64.so.2 (0x00002b2a69f29000)
undefined symbol: PC    (/usr/lib64/libreadline.so)
undefined symbol: UP    (/usr/lib64/libreadline.so)
undefined symbol: BC    (/usr/lib64/libreadline.so)
undefined symbol: tgetflag      (/usr/lib64/libreadline.so)
undefined symbol: tgetent       (/usr/lib64/libreadline.so)
undefined symbol: tputs (/usr/lib64/libreadline.so)
undefined symbol: tgoto (/usr/lib64/libreadline.so)
undefined symbol: tgetnum       (/usr/lib64/libreadline.so)
undefined symbol: tgetstr       (/usr/lib64/libreadline.so)
</code></pre>

<p>こんな感じ。
これに関することが
<a href="http://lua.2524044.n2.nabble.com/ANN-Lua-5-2-2-rc1-now-available-td7646399i20.html">このthread</a>
にあったので、個々にある通り<code>-ltermcap</code>を加えてみる。</p>

<pre><code>$ make linux MYLIBS=-ltermcap
</code></pre>

<p>OK。<code>$HOME/usr/local</code>に<a href="/blog/2013/08/04/computer-linux-mac/">paco</a>に登録しつつインストール。</p>

<pre><code>$ paco -D "make install INSTALL_TOP=$HOME/usr/local"
</code></pre>

<ul>
<li>Vimをインストール</li>
</ul>


<p>ソースからコンパイルしてインストール。</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src
$ LDFLAGS="-L$HOME/usr/local/lib/" ./configure --with-lua-prefix=$HOME/usr/local --prefix=$HOME/usr/local --with-local-dir=$HOME/usr/local --disable-selinux --disable-xim --disable-darwin --disable-xsmp --disable-xsmp-interact --enable-netbeans --enable-multibyte --enable-gui=no --enable-gtk2-check=no --enable-gnome-check=no --enable-motif-check=no --enable-athena-check=no --enable-nextaw-check=no --enable-carbon-check=no --disable-gtktest --disable-acl --disable-gpm --disable-sysmouse --enable-luainterp=yes --enable-mzschemeinterp=no --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes --enable-cscope --disable-workshop --disable-sniff --enable-hangulinput --enable-fontset --enable-largefile --enable-nls
</code></pre>

<p><code>--enable-luainterp=yes</code>でluaオプションを有効にします。
他は適宣自分に合わせて設定。</p>

<p><code>LDFLAGS</code>や<code>--with-local-dir</code>で<code>$HOME/usr/local</code>にあるライブラリー等を使う様に
指定してますが、lua用に
<code>--with-lua-prefix=$HOME/usr/local</code>が別途必要の様。</p>

<p>ちゃんとluaが見つかれば、<code>./configure</code>時に、</p>

<pre><code>...
checking if link with -L/home/user/usr/local/lib -llua is sane... yes
...
</code></pre>

<p>の様に見つかった、と言ってくれます。
<code>--with-lua-prefix</code>を指定しないと<code>/usr/</code>を見に行き、</p>

<pre><code>checking --with-lua-prefix argument... no
checking LUA_PREFIX environment var... not set, default to /usr
checking --with-luajit... no
checking for lua... (cached) /usr/bin/lua
checking Lua version... (cached) 5.1
checking if lua.h can be found in /usr/include... no
checking if lua.h can be found in /usr/include/lua5.1... no
</code></pre>

<p>な感じで失敗します。</p>

<p>configureが成功したら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<ul>
<li>PATHの設定</li>
</ul>


<p><code>$HOME/usr/local</code>にPATHが通ってない場合は以下の設定を<code>~/.bashrc</code>に加えておきます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/usr/local/bin:<span class="nv">$PATH</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1 id="Windows+(Cygwin)">Windows (Cygwin)</h1>

<ul>
<li>setup.exeを使うか<a href="http://rcmdnk.github.io/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
でluaをインストール:</li>
</ul>


<p>apt-cygで</p>

<pre><code>$ apt-cyg install lua
</code></pre>

<ul>
<li>Vimのインストール</li>
</ul>


<p>現状のCygwinで配布されてるバイナリが1-1110, 1112-1152のパッチが当たっていて、
さらにLua対応でビルドされてるので、
最近インストールしたなら対応しているはずです。</p>

<p>もし対応してなかったり古い場合は取り直し。</p>

<p>apt-cygには<code>update</code>と言ったコマンドが無いので、一度削除してから入れなおします。</p>

<pre><code>$ apt-cyg remove vim
</code></pre>

<p>そして新たにインストール:</p>

<pre><code>$ apt-cyg install vim
</code></pre>

<h1 id="Mac">Mac</h1>

<ul>
<li><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>を使ってLuaをインストール:</li>
</ul>


<p>Homebrewでluaを</p>

<pre><code>$ brew install lua
</code></pre>

<ul>
<li>HomebrewでMacVimのHEADバージョンをインストール<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</li>
</ul>


<p>さらにvimも</p>

<pre><code>$ brew install macvim --with-cscope --with-lua --HEAD
$ sudo ln -s /usr/local/Cellar/macvim/HEAD/MacVim.app /Applications/
</code></pre>

<ul>
<li>ターミナル等から使うため<code>~/.bashrc</code>に次を追加:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;For+MacVim&quot;</span>&gt;For MacVim&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$OSTYPE&quot;</span> <span class="o">=</span>~ <span class="s2">&quot;darwin&quot;</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="o">[</span> -d /Applications/MacVim.app/Contents/MacOS <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Applications/MacVim.app/Contents/MacOS:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>ソースから直接コンパイルしてインストール</li>
</ul>


<p>Homebrew版でも現状7.4b版がHEADで使えて、さらに<code>--with-lua</code>オプションで
luaを有効に出来るので充分ですが、もしソースから直接コンパイルして
インストールしたい場合は</p>

<pre><code>$ brew install mercurial
</code></pre>

<p>でMercurial(hg)をインストールしてから上のLinuxとかの様に<code>hg</code>でソースを取ってきて
インストール。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/07/03/macvim-with-lua-features/">最新パッチ＆if_luaなMacVimで高速検索＆補完！</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使う上でのIME(日本語入力)の取り扱い with AutoHotKey]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/04/computer-windows-autohotkey/"/>
    <updated>2013-08-04T08:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/04/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>以前書いた
<a href="/blog/2013/06/20/computer-mac-keyremap4macbook-vim/">Vimを使う上でのIME(日本語入力)の取り扱い</a>
への付け加えで、AutoHotkeyを使って行う方法について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<p><div><script src='https://gist.github.com/6147672.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>こんなかんじで。
<a href="http://www6.atwiki.jp/eamat/pages/17.htmla">eamat @Cabinet</a>さんのところで公開されている
IME.ahkが別途必要です。
(同じディレクトリに入れて起動するか必要な関数をコピペして入れておけばOK。)</p>

<p>初期設定ではPutty、Mintty (Cygwinで使ってる場合も)及びVim上で有効になります。</p>

<p>AutoHotkeyをインストールしてなくても使える様にexeファイルも作っておきました:
<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim_ime.exe?raw=true">vim_ime.exe</a>。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim以外でVimする: Windows+AutoHotkey編]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/03/computer-windows-autohotkey/"/>
    <updated>2013-08-03T17:47:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/03/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>前に<a href="/blog/2013/03/17/vim/">Vim以外でVimする: Windows編</a>
でWindowsで<a href="/blog/tags/yamy/">yamy</a>を使って
Vimっぽい動きを再現する物を作ってみましたが、
<a href="/blog/tags/autohotkey/">AutoHotkey</a>
に移行することにしたので、
AutoHotkeyでも同様の物をつくってみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="vim_ahk">vim_ahk</h1>

<h2 id="インストール方法">インストール方法</h2>

<p>AutoHotkey用vim設定ファイルはGithubの<a href="https://github.com/rcmdnk/vim_ahk">vim_ahk</a>レポジトリに置きました。</p>

<p>ここにある<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim.ahk">vim.ahk</a>
をAutoHotkeyを使って開くか、
もし、すでにAutoHotkeyを使っている場合、
このファイルを使っている設定ファイルのディレクトリに置いて、
設定ファイルの<a href="http://www.autohotkey.com/docs/Scripts.htm#auto">Auto-execute section</a>
(ReturnやHotkeyの設定などが始まる前)に</p>

<pre><code>#Include  %A_ScriptDir%\vim.ahk
</code></pre>

<p>を書いてファイルをインクルードします。(内容をコピペしても良いですが、最初のAuto-execute sectionの部分は分けてファイルの先頭に書いてください。)</p>

<p>また、AutoHotkeyは実行ファイル化の機能があって、AutoHotkey本体をインストールしなくても動かせます。
もし、AutoHotkeyをインストールしないまま試してみたい場合は、
上のレポジトリにある<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim_ahk.exe?raw=true">vim_ahk.exe</a>
をダウンロードして実行してみてください。
これだとAutoHotkeyをインストールしてなくても単独で使えます。</p>

<h2 id="設定">設定</h2>

<p>初期設定では以下のソフト上で有効になっています。</p>

<ul>
<li>Notepad (メモ帳)</li>
<li>Wordpad</li>
<li>TeraPad</li>
<li>Exploler</li>
<li>Thunderbird (only sending window)</li>
<li>Power Point</li>
<li>Word</li>
<li>Evernote</li>
</ul>


<p>vim.ahkの先頭にこれらの設定(<code>GroupAdd</code>)が書いてあります。
Thuderbirdに関しては、class名にするとFirefoxと被ってしまうので、
Windowのタイトルを取って送信Windowのみで有効に成るようになっています。
他のソフトでWindowタイトルが<code>作成:</code>等となるものがあると、そのソフトでも
有効になります。</p>

<p>Windowの調べ方や設定方法は<a href="http://rcmdnk.github.io/blog/2013/07/29/computer-windows-autohotkey/#Windowごとの設定">こちら</a>を参考にしてみてください。</p>

<p>もう一つ<code>vim_verbose</code>の値が初期では2になっていますが、
これはモードが変わったりした時に表示される情報の詳細さを指定して</p>

<ul>
<li>0: 何も表示しない</li>
<li>1: モード名のみ(<code>Vim_Normal</code>, <code>Vim_Visual</code>など)をTask Tray Tipsとして表示</li>
<li>2: リピート回数等の情報もTask Tray Tipsとして表示</li>
<li>3: メッセージボックスも表示</li>
</ul>


<p>注意として、各動き(<code>j</code>で下に下る)などすべてのNormal Modeでの動きの後に
設定の変更があるので、殆の場合にメッセージが表示されます。
従って3は完全デバッグ用です。
Tipsが邪魔な場合は0にして下さい。</p>

<h2 id="使い方">使い方</h2>

<p>Vimの基本的な動きを再現してあります。
基本的に<a href="/blog/2013/03/17/vim/">yamyでやった事</a>と
同じ事が出来ます。</p>

<p>詳細はレポジトリのREADME(<a href="https://github.com/rcmdnk/vim_ahk">vim_ahk</a>)
を参照してください。</p>

<p>AutoHotkeyの方が優れている点としては、リピート回数(38jで38行下がるなど)とかが変数で
定義できるので、yamyの場合は100回が限度にしていましたが、、
今回の場合は上限はありません。(100回以上のリピートは滅多に必要とされないと思いますが...)</p>

<p>気になる点としては、たまにホットキー先で<i class='key'>Ctrl</i>などを使う場合、
そのキーを押し続けてキーリピートを実行させようとすると
たまに<i class='key'>Ctrl</i>+<i class='key'>押したキー</i>の様な信号が送られてしまう点。</p>

<p>例えばNormal Modeで<i class='key'>p</i>は貼り付けですが、貼り付けるために<i class='key'>Ctrl</i>-<i class='key'>v</i>にマップしてあります。
複数貼り付けたい時、<i class='key'>p</i>を押し続けると途中でプリンタが呼び出される(<i class='key'>Ctrl</i>-<i class='key'>p</i>)事がありました。
これを回避するために、この貼り付けについてはリピートが効かないように
なっています。(<i class='key'>p</i>を押し続けても1回しか貼り付けられない。)</p>

<p>他の動きのキーはキーリピートを制限してませんが、おかしな動きをした場合は教えていただけるとありがたいです。</p>

<h2 id="カーソルやマウス、Windowなどを複数修飾キーと共にhjklなどで操作する">カーソルやマウス、Windowなどを複数修飾キーと共にhjklなどで操作する</h2>

<p><a href="/blog/2013/03/17/vim/">yamy</a>や<a href="/blog/2013/06/10/computer-mac-keyremap4macbook-vim/">MacでKeyRemap4macBook</a>
でやった様にカーソルやマウス、Windowsなどをvimっぽい操作で動かす
設定は現在使っている
<a href="https://github.com/rcmdnk/windows/blob/master/AutoHotkey.ahk">Mainファイル</a>
の中に書いてあります。
この中の<code>Cursor, Mouse, Window move/size</code>の項目をコピペするなり参照するなり
してください。</p>

<h2 id="今後の改善点">今後の改善点</h2>

<p>上のキーリピートの問題は1つなんとかしたいところです。
キーを離すのを待つ関数などがあるのですが、色々試しても今のところ上手く出来てません。
このvim設定の場合はそれ程問題が無いのですが、
<i class='key'>Ctrl</i>+<i class='key'>Alt</i>-<i class='key'>j</i>などで直接上下左右に移動するとき、
その時にたまに<code>j</code>などが記入されてしまって困ってるので、
なんとかしたいところです。</p>

<p>もう一つはMacの方でKeyRemap4MacBook+MadRubyで
<a href="/blog/2013/07/08/computer-mac-keyremap4macbook-vim/">マクロっぽい動きを再現</a>
してみましたが、これと同じことをしたいと思ってます。
Windowsにも似たようなソフトはいくつかあるのでそういうのも使っても良いのですが、
AutoHotkey自体が変数を使えたりするので、
なんとか単独出来ないかな、とおもってます。</p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dev版jedi-vimのインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/21/computer-vim/"/>
    <updated>2013-07-21T17:24:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/21/computer-vim</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a>はpythonコードを書くときに
コード補完をしてくれる<a href="https://github.com/davidhalter/jedi">jedi</a>
をVimで使うためのプラグインです。
これを使いたいがためにVimをpythonサポートで入れなおしたりしてましたが、
jedi本体の入れ方が面倒だったり
何やら落ちたりWarningが出たりと途中で投げ出してました。
再度挑戦しようと思ったらdev版があって、それを入れたら
全て簡単に上手くいった、という話です。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="jedi-vim_devのインストール">jedi-vim_devのインストール</h1>

<p>Warningメッセージでちょっと検索してた所下のページがヒット。</p>

<p>Ref:</p>

<blockquote><p><a href="http://d.hatena.ne.jp/heavenshell/20130601/1370042187">jedi.vim に Pull Request した</a></p></blockquote>

<p>実際にはここに出ている意外にもWaningが出てたりおかしな挙動があったのですが
取り敢えず使ってみることに。</p>

<p>dev版のインストールはNeoBundle等を使っていれば簡単で、</p>

<pre><code>" Python autocompletion
NeoBundleLazy "davidhalter/jedi-vim", {
      \ "rev" : 'dev',
      \ "autoload": {
      \ "filetypes": [ "python", "python3", "djangohtml"]}}
</code></pre>

<p>この様に、<code>revision</code> (<code>rev</code>)に<code>drv</code>を指定するだけです。
すると、<code>~/.vim/bundle/</code>以下には<code>jedi-vim_dev</code>というディレクトリ名で
プラグインがインストールされます。</p>

<h1 id="jedi-vim_devの良い所">jedi-vim_devの良い所</h1>

<p>取り敢えず、上記のリンク先にあるWarningは消えてくれましたし、
その他にも出てたWarning等も一通り消えて問題なく動く様になりました。</p>

<p><strike>さらにdev版では、jediをjedi-vim初回起動時に自動的にインストールする
様になっているみたいです。</strike></p>

<p>通常版だと、jediだけ別個に入れるか、
jedi-vimの中で手動でsubmoduleとしてインストールする<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>必要があります。
jedi-vimを入れてる<code>.vimrc</code>だと</p>

<pre><code>NeoBundleLazy "davidhalter/jedi-vim", {
      \ "autoload": {
      \   "filetypes": ["python", "python3", "djangohtml"]},
      \ "build": {
      \   "mac": "pip install jedi",
      \   "unix": "pip install jedi" }}
</code></pre>

<p>こんな感じでjedi-vimインストール時に自動的にpipでインストールしてしまう、
と言った方法もよく見ます。</p>

<p><strike>
これが、dev版では、恐らくsubmodule化コマンドを初回に打つ様になったようです。
(コード見てませんが、起動後<code>~/.vim/bundle/jedi-vim_dev/jedi</code>にインストールされているので。)
なので、一番最初に立ち上げた時、驚く程遅くてびっくりしましたが、
2回目以降は快適に立ち上がりました。
</strike></p>

<hr />

<p>追記</p>

<p>dev版だから自動でインストールされる、と言うのは嘘でした。</p>

<p>取り敢えずMacの場合、別個にjediをpipで入れていたので気づきませんでしたが、
jedi-vim以下にあるjediは空のディレクトリでした。
これは<code>.gitmodules</code>にjediがsubmoduleとして登録されているので、
空のディレクトリだけがjedi-vimをcloneした時に出来るのは正しい動きのはず。
jedi-vimのディレクトリで<code>git submodule update --init</code>
することでインストール出来ます。</p>

<p>これが使っているLinux環境だとjedi-vimをcloneした時にjediの中身も取ってきていました。
(masterでもdevでも)</p>

<p>Cygwinの場合は、元々<code>https</code>が理解出来ないと言うエラーで
<code>git submodule update --init</code>自体が働いてなかったのでインストールされていませんでしたが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、
gitを対応せきる用アップデート後はjediが最初からインストールされるようになりました。</p>

<p>...
と、ここまでgitのversion(1.8.1.3-1.8.4まで様々)やVimのversion等の違いも疑ってきましたが、
どうやらNeoBundleのversionの違いだったようで、
Macで一度<code>:NeoBundleUpdate</code>をしてからjedi-vimを再インストールしたらjediも直接インストールされました。
どうやらNeoBundleでインストールする際にはsubmoduleの初期化を行う様になった様です。</p>

<hr />

<p>また、pythonファイルを最初に開いた時に遅く感じたのはjediをインストールしているからではないので、
何やらメモリかtmpファイルにロードしているからでしょうか？</p>

<p>実際、新しいシェルを立ち上げてpythonファイルを開くと再び最初は遅かったりします。
シェルを立ち上げて最初だけなのでそれ程問題ないわけですが、
できればなんとかしたい所...</p>

<hr />

<p>これでやっとjediの恩恵を受けられます。</p>

<h1 id="その他jedi-vim+++Python+for+vim用メモリンク">その他jedi-vim + Python for vim用メモリンク</h1>

<p>まだあまり初期設定からいじってないこともあるので
備忘録用リンク集:</p>

<blockquote><p><a href="http://mattn.kaoriya.net/software/vim/20121018212621.htm">python 補完のVimプラグイン「jedi-vim」がスゲー</a></p>

<p><a href="http://d.hatena.ne.jp/heavenshell/20121025/1351179999">edi-vim の設定</a></p>

<p><a href="http://d.hatena.ne.jp/heavenshell/20121216/1355640807">jedi.vim で virtualenv を使ってる場合の補完</a></p>

<p><a href="http://kazy.hatenablog.com/entry/2012/12/03/174431">jedi-vim(ジュダイ-ヴィム)で2ヶ月近くハマった話</a></p>

<p><a href="http://tekkoc.tumblr.com/post/42845501741/vim-python">VimでPython環境をいい感じに整える</a></p>

<p><a href="http://lambdalisue.hatenablog.com/entry/2013/06/23/071344">Vimを最強のPython開発環境にする2</a></p>

<p><a href="http://slowquery.hatenablog.com/entry/2013/04/30/020630">Python用のvimの設定</a></p></blockquote>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://d.hatena.ne.jp/heavenshell/20121203/1354534796">jedi.vim で使う Python の jedi を入れる簡単な方法</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="/blog/2013/07/27/computer-cygwin-git/">fatal: Unable to find remote helper for 'https'の対処</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
