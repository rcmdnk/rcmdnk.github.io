<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Vim | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/vim/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-16T21:05:32+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vimプラグインlightline導入]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/06/computer-vim/"/>
    <updated>2013-09-06T00:02:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/06/computer-vim</id>
    <content type="html"><![CDATA[<p>前回
<a href="/blog/2013/09/06/computer-cygwin/putty-vim/">Cygwin+screenで256 colorを有効にする</a>
というのを書いたので、
その表示させたかったVimのステータスラインについて。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="lightline">lightline</h1>

<p><a href="https://github.com/itchyny/lightline.vim">lightline</a>は
Vimのステータスラインを綺麗に表示させてくれるプラグインです。</p>

<p>Vimには元々<a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a>
(とその後継の<a href="https://github.com/Lokaltog/powerline">powerline</a>)
というPythonを使ったプラグインがありましたが、
最近、<a href="https://github.com/bling/vim-airline">vim-airline</a>
というプラグインが出来て、純粋Vim Scriptなので速いし、
他のプラグインとの融合等もあって嬉しい、
ということで移行した、と言う人が増えていました。</p>

<p>元々vim-powerlineはもっさりする気がして一度入れてから外してましたが、
すごい話題になってたのでまずvim-airlineを入れてみました。</p>

<p>そんな中、<a href="https://github.com/itchyny/lightline.vim">lightline</a>
というプラグインが登場。
vim-airlineをさらに拡張性高くしたような感じで、さらに
作者の方のブログ<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>ではその設計思想まで熱く語られています。</p>

<p>ということで、vim-airlineを導入したばかりでしたが、
lightlineも試してみることに。
ちょっと使ってみてとても拡張性が高いのが楽しい所です。</p>

<p>取り敢えず置いてみた設定はこんな感じ。</p>

<p><div><script src='https://gist.github.com/6457180.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>プラグインのhelpや
レポジトリにある<a href="https://github.com/itchyny/lightline.vim">README</a>
がかなり詳しいので、取り敢えず追ってくだけでも色々出来るようになります。</p>

<p>上のも関数などはREADMEを追って作ったものを変更したりしています。
ちょっと工夫してるところとしては、表示幅によって表示する項目を変えれるよう、各関数で表示幅とすべての表示文字数を比較して表示するかどうか決めています。</p>

<p>こんな感じで最後までファイル名は残るように。</p>

<p><img src="/images/post/20130906_lightline.gif" "" ""></p>

<p>表示の優先度などが全部の関数がお互いに上手く対応出来るように
書かないといけない様に関数を作ってしまっているので
もうちょっと上手く書けないかな、と思うところですが、
取り敢えずは良い感じに欲しい情報を載せる事が出来ました。</p>

<p>ちなみに、上のgifアニメでは、
<a href="https://github.com/kana/vim-submode">vim-submode</a>
を使ってWindowを動かしています<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p>作者の方のブログでは加えて、<a href="http://d.hatena.ne.jp/itchyny/20130828/1377653592">作者が教える！</a>
シリーズもやってくれるみたいで、今後も追っていきたい所です。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://d.hatena.ne.jp/itchyny/20130824/1377351527">lightline.vim作りました - プラグインの直交性について</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://d.hatena.ne.jp/thinca/20130131/1359567419">submode.vim とその設定例なんかを紹介</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwin+screenで256 colorを有効にする]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/05/computer-cygwin-putty-vim/"/>
    <updated>2013-09-05T19:26:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/05/computer-cygwin-putty-vim</id>
    <content type="html"><![CDATA[<p>最近、vimのステータス表示で
<a href="https://github.com/bling/vim-airline">vim-airline</a>がリリースされたり
それに追随して<a href="https://github.com/itchyny/lightline.vim">lightline</a>
がリリースされたり<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>、
気になっていたのでインストールしました。
これまであまりターミナルの表示色を気にしてませんでしたが、
これらを導入した際にちゃんと表示されてない部分があったので
それらの設定と、後、導入したステータスラインの設定等。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Cygwin+++GNU+Screen">Cygwin + GNU Screen</h1>

<p>CygwinではMac同様、GNU Screenはソースからコンパイルして
インストールしていますが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、
この際、<code>configure</code>で<code>--enable-colors256</code>として256色表示を有効にしてるんですが、
実際にはそれ程色を気にするわけでもないのでCygwin上ではきちんと試してませんでした。</p>

<p>で、今回vimのステータスラインを入れてみて他の端末ではこんな感じで綺麗に見れてたのが</p>

<p><img src="/images/post/20130905_vimstatusok.png" "" ""></p>

<p>Cygwinだと</p>

<p><img src="/images/post/20130905_vimstatusno.png" "" ""></p>

<p>こんな感じで状態がとても見辛く(ともに<code>lightline</code>の<code>jellybeans</code>テーマ)。</p>

<p>色々試していると、GNU screenを起動した時だけがおかしくなるので、
screenインストール時にcolors256オプション付け忘れかと思って再インストールしてみるも駄目。
<code>.screenrc</code>に</p>

<pre><code>term xterm-256color
</code></pre>

<p>とtermを指定したりしても関係なし(そもそも他の端末ではなくてもOK。)</p>

<p>問題はMinttyのターミナルオプションが<code>xterm</code>になっていて、これを
<code>xterm-256color</code>に指定する必要があったみたいです。
(つまりはずっと256色表示でなかった。。。)</p>

<p>ターミナルにメニューバーが無いので、タイトルバーを右クリックから<code>Options...</code>
を選び下の様にTerminalのTypeを<code>xterm-256color</code>に。</p>

<p><img src="/images/post/20130905_cygwin.png" "" ""></p>

<p>これでちゃんと表示出来る様になりました。</p>

<p>テストとして<code>bash</code>でこんなスクリプトを使って表示。
<div><script src='https://gist.github.com/6457780.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><img src="/images/post/20130905_256colOK.png" "" ""></p>

<p>こんな感じに見れます。もし256色表示が有効でないと、</p>

<p><img src="/images/post/20130905_256colNO.png" "" ""></p>

<p>こんな感じで、同じ色を表示する所が出てきます。</p>

<h1 id="Putty">Putty</h1>

<p>一応同じWindowsとしてPuttyについても。</p>

<p>Puttyは各Sessionの<code>Connection</code>の<code>Data</code>の所に<code>Terminal-type string</code>
という項目があるので、ここに<code>xterm-256color</code>を記入します。
こちらは昔設定したみたいでこうなっていて、外に繋げたりcoLinuxでは
きちんと256色表示されていたみたいです。</p>

<p><img src="/images/post/20130905_putty.png" "" ""></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://d.hatena.ne.jp/itchyny/20130824/1377351527">lightline.vim作りました - プラグインの直交性について</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="/2013/03/22/screen-install/">Macでの文字化け対策用のGNU screenのインストール</a>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 7.4をCygwinへインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim/"/>
    <updated>2013-08-17T00:44:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/17/computer-windows-cygwin-vim</id>
    <content type="html"><![CDATA[<p>Vim 7.4の正式版がリリースされたので、
Cygwinへもインストールしました。
現在のCygwinで配布されてるバイナリは7.3+patch 1-1110, 1112-1152
なので、ソースからビルドしてインストールです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Mercurielをインストール">Mercurielをインストール</h1>

<p>Mercurielをまだインストールしてなかったので
<a href="/blog/2013/08/08/computer-windows-cygwin/">apt-cyg</a>で</p>

<pre><code>apt-cyg -u install mercurial
</code></pre>

<p>最初大文字で<code>Mercurial</code>やコマンドの<code>hg</code>で探しても見つからなかったので
ソースからインストールしなきゃいけないのかと思いましたが、
普通に<code>mercurial</code>でありました。。。</p>

<h1 id="Vimをインストール">Vimをインストール</h1>

<p><a href="/blog/2013/08/11/computer-linux-windows-cygwin/">Stow</a>を使って管理するようにします。
オプションはマルチバイト対応とLuaやPythonなどいくつかのインタプリタを有効に。以前までの色々のオプションはざっくり落としてみました。(要らないものをdisableしてもあまり意味が無い感じがしてきたので。)</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src/
$ ./configure  --prefix=$HOME/usr/local/stow/vim-7.4  --enable-multibyte  --enable-luainterp=yes  --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ stow vim-7.4
</code></pre>

<p>こんな感じで<code>~/usr/local/</code>へ。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p>MacではHomebrew版のHEADが7.4になってますのでHomebrewで入れればOK。
  (<a href="/blog/2013/08/07/computer-vim">Lua対応Vimをインストール</a>)
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua対応Vimをインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/07/computer-vim/"/>
    <updated>2013-08-07T20:36:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/07/computer-vim</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048677977/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41otNZcUklL._SL160_.jpg" border="0"></a></p>

<p>Vimでの補完機能のプラグインである<a href="https://github.com/Shougo/neocomplcache.vim">neocompletecache</a>
の後継版<a href="https://github.com/Shougo/neocomplete.vim">neocomplete</a>
を使うためにVimを再インストールした際の手順。
<a href="http://www.lua.org/home.html">Lua</a>自体がない環境もあったので、
Luaのインストールからです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Linux">Linux</h1>

<ul>
<li>su権限持っていないのでローカルにluaをインストール:</li>
</ul>


<p><a href="http://www.lua.org/ftp/">luaのダウンロードページ</a>より最新のを取ってきてインストール。
取り敢えずmakeしてみるとエラーがでた。</p>

<pre><code>$ cd ~/tmp/
$ wget http://www.lua.org/ftp/lua-5.2.2.tar.gz
$ tar xzf lua-5.2.2.tar.gz
$ cd lua-5.2.2
$ make linux
...
make[1]: Entering directory `/home/user/tmp/lua-5.2.2/src'
make all SYSCFLAGS="-DLUA_USE_LINUX" SYSLIBS="-Wl,-E -ldl -lreadline"
make[2]: Entering directory `/home/user/tmp/lua-5.2.2/src'
gcc -o lua   lua.o liblua.a -lm -Wl,-E -ldl -lreadline-
/usr/lib/../lib64/libreadline.so: undefined reference to `PC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetflag'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetent'
/usr/lib/../lib64/libreadline.so: undefined reference to `UP'
/usr/lib/../lib64/libreadline.so: undefined reference to `tputs'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgoto'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetnum'
/usr/lib/../lib64/libreadline.so: undefined reference to `BC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetstr'
collect2: ld returned 1 exit status
make[2]: *** [lua] Error 1
make[2]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make[1]: *** [linux] Error 2
make[1]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make: *** [linux] Error 2
</code></pre>

<p>libreadlineを調べてみると</p>

<pre><code>$ ldd -r /usr/lib64/libreadline.so
        linux-vdso.so.1 =&gt;  (0x00007fffbe3aa000)
        /$LIB/snoopy.so =&gt; /lib64/snoopy.so (0x00002b2a6a387000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b2a6a5af000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b2a6a907000)
        /lib64/ld-linux-x86-64.so.2 (0x00002b2a69f29000)
undefined symbol: PC    (/usr/lib64/libreadline.so)
undefined symbol: UP    (/usr/lib64/libreadline.so)
undefined symbol: BC    (/usr/lib64/libreadline.so)
undefined symbol: tgetflag      (/usr/lib64/libreadline.so)
undefined symbol: tgetent       (/usr/lib64/libreadline.so)
undefined symbol: tputs (/usr/lib64/libreadline.so)
undefined symbol: tgoto (/usr/lib64/libreadline.so)
undefined symbol: tgetnum       (/usr/lib64/libreadline.so)
undefined symbol: tgetstr       (/usr/lib64/libreadline.so)
</code></pre>

<p>こんな感じ。
これに関することが
<a href="http://lua.2524044.n2.nabble.com/ANN-Lua-5-2-2-rc1-now-available-td7646399i20.html">このthread</a>
にあったので、個々にある通り<code>-ltermcap</code>を加えてみる。</p>

<pre><code>$ make linux MYLIBS=-ltermcap
</code></pre>

<p>OK。<code>$HOME/usr/local</code>に<a href="/blog/2013/08/04/computer-linux-mac/">paco</a>に登録しつつインストール。</p>

<pre><code>$ paco -D "make install INSTALL_TOP=$HOME/usr/local"
</code></pre>

<ul>
<li>Vimをインストール</li>
</ul>


<p>ソースからコンパイルしてインストール。</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src
$ LDFLAGS="-L$HOME/usr/local/lib/" ./configure --with-lua-prefix=$HOME/usr/local --prefix=$HOME/usr/local --with-local-dir=$HOME/usr/local --disable-selinux --disable-xim --disable-darwin --disable-xsmp --disable-xsmp-interact --enable-netbeans --enable-multibyte --enable-gui=no --enable-gtk2-check=no --enable-gnome-check=no --enable-motif-check=no --enable-athena-check=no --enable-nextaw-check=no --enable-carbon-check=no --disable-gtktest --disable-acl --disable-gpm --disable-sysmouse --enable-luainterp=yes --enable-mzschemeinterp=no --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes --enable-cscope --disable-workshop --disable-sniff --enable-hangulinput --enable-fontset --enable-largefile --enable-nls
</code></pre>

<p><code>--enable-luainterp=yes</code>でluaオプションを有効にします。
他は適宣自分に合わせて設定。</p>

<p><code>LDFLAGS</code>や<code>--with-local-dir</code>で<code>$HOME/usr/local</code>にあるライブラリー等を使う様に
指定してますが、lua用に
<code>--with-lua-prefix=$HOME/usr/local</code>が別途必要の様。</p>

<p>ちゃんとluaが見つかれば、<code>./configure</code>時に、</p>

<pre><code>...
checking if link with -L/home/user/usr/local/lib -llua is sane... yes
...
</code></pre>

<p>の様に見つかった、と言ってくれます。
<code>--with-lua-prefix</code>を指定しないと<code>/usr/</code>を見に行き、</p>

<pre><code>checking --with-lua-prefix argument... no
checking LUA_PREFIX environment var... not set, default to /usr
checking --with-luajit... no
checking for lua... (cached) /usr/bin/lua
checking Lua version... (cached) 5.1
checking if lua.h can be found in /usr/include... no
checking if lua.h can be found in /usr/include/lua5.1... no
</code></pre>

<p>な感じで失敗します。</p>

<p>configureが成功したら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<ul>
<li>PATHの設定</li>
</ul>


<p><code>$HOME/usr/local</code>にPATHが通ってない場合は以下の設定を<code>~/.bashrc</code>に加えておきます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/usr/local/bin:<span class="nv">$PATH</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1 id="Windows+(Cygwin)">Windows (Cygwin)</h1>

<ul>
<li>setup.exeを使うか<a href="http://rcmdnk.github.io/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
でluaをインストール:</li>
</ul>


<p>apt-cygで</p>

<pre><code>$ apt-cyg install lua
</code></pre>

<ul>
<li>Vimのインストール</li>
</ul>


<p>現状のCygwinで配布されてるバイナリが1-1110, 1112-1152のパッチが当たっていて、
さらにLua対応でビルドされてるので、
最近インストールしたなら対応しているはずです。</p>

<p>もし対応してなかったり古い場合は取り直し。</p>

<p>apt-cygには<code>update</code>と言ったコマンドが無いので、一度削除してから入れなおします。</p>

<pre><code>$ apt-cyg remove vim
</code></pre>

<p>そして新たにインストール:</p>

<pre><code>$ apt-cyg install vim
</code></pre>

<h1 id="Mac">Mac</h1>

<ul>
<li><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>を使ってLuaをインストール:</li>
</ul>


<p>Homebrewでluaを</p>

<pre><code>$ brew install lua
</code></pre>

<ul>
<li>HomebrewでMacVimのHEADバージョンをインストール<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</li>
</ul>


<p>さらにvimも</p>

<pre><code>$ brew install macvim --with-cscope --with-lua --HEAD
$ sudo ln -s /usr/local/Cellar/macvim/HEAD/MacVim.app /Applications/
</code></pre>

<ul>
<li>ターミナル等から使うため<code>~/.bashrc</code>に次を追加:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;For+MacVim&quot;</span>&gt;For MacVim&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$OSTYPE&quot;</span> <span class="o">=</span>~ <span class="s2">&quot;darwin&quot;</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="o">[</span> -d /Applications/MacVim.app/Contents/MacOS <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Applications/MacVim.app/Contents/MacOS:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>ソースから直接コンパイルしてインストール</li>
</ul>


<p>Homebrew版でも現状7.4b版がHEADで使えて、さらに<code>--with-lua</code>オプションで
luaを有効に出来るので充分ですが、もしソースから直接コンパイルして
インストールしたい場合は</p>

<pre><code>$ brew install mercurial
</code></pre>

<p>でMercurial(hg)をインストールしてから上のLinuxとかの様に<code>hg</code>でソースを取ってきて
インストール。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/07/03/macvim-with-lua-features/">最新パッチ＆if_luaなMacVimで高速検索＆補完！</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使う上でのIME(日本語入力)の取り扱い with AutoHotKey]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/04/computer-windows-autohotkey/"/>
    <updated>2013-08-04T08:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/04/computer-windows-autohotkey</id>
    <content type="html"><![CDATA[<p>以前書いた
<a href="/blog/2013/06/20/computer-mac-keyremap4macbook-vim/">Vimを使う上でのIME(日本語入力)の取り扱い</a>
への付け加えで、AutoHotkeyを使って行う方法について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<p><div><script src='https://gist.github.com/6147672.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>こんなかんじで。
<a href="http://www6.atwiki.jp/eamat/pages/17.htmla">eamat @Cabinet</a>さんのところで公開されている
IME.ahkが別途必要です。
(同じディレクトリに入れて起動するか必要な関数をコピペして入れておけばOK。)</p>

<p>初期設定ではPutty、Mintty (Cygwinで使ってる場合も)及びVim上で有効になります。</p>

<p>AutoHotkeyをインストールしてなくても使える様にexeファイルも作っておきました:
<a href="https://github.com/rcmdnk/vim_ahk/blob/master/vim_ime.exe?raw=true">vim_ime.exe</a>。</p>

<hr />
]]></content>
  </entry>
  
</feed>
