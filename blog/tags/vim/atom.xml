<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Vim | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/vim/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-10T19:28:04+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim (Neovim)起動時にPythonの仮想環境を準備する]]></title>
    <link href="https://rcmdnk.com/blog/2020/08/11/computer-vim/"/>
    <updated>2020-08-11T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/08/11/computer-vim</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B0899SR52S?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B0899SR52S&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51joaz95UyL._SS200_.jpg" alt="Vimが好きになる本 (技術の泉シリーズ（NextPublishing）)" /></a>
</div>

<p>NeovimではPythonを使ったプラグインがありますが、
そのPythonを仮想環境から呼んでやることも出来ます。</p>

<p>Pythonを使ったプラグインを使う際には
<a href="https://github.com/neovim/pynvim">pynvim</a>(旧<code>neovim</code>)というパッケージが入っていないと
動かない場合がありエラーが出たりします。</p>

<p>ユーザーの全体環境に入れてしまっても良いのですが、
エラーを吐かずに気づかずに使えてない場合とかもあるので、
できれば初期設定としてどの環境でも同じにしたいところです。</p>

<p>そこで<strong>.vimrc</strong>の中で仮想環境がなければ作って
それを使うようにしてみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#設定" id="markdown-toc-設定">設定</a></li>
  <li><a href="#各所の説明" id="markdown-toc-各所の説明">各所の説明</a>    <ul>
      <li><a href="#実行するかどうかのチェック" id="markdown-toc-実行するかどうかのチェック">実行するかどうかのチェック</a></li>
      <li><a href="#python3チェック" id="markdown-toc-python3チェック">Python3チェック</a></li>
      <li><a href="#インストール場所" id="markdown-toc-インストール場所">インストール場所</a></li>
      <li><a href="#仮想環境構築" id="markdown-toc-仮想環境構築">仮想環境構築</a></li>
      <li><a href="#仮想環境を使う設定" id="markdown-toc-仮想環境を使う設定">仮想環境を使う設定</a></li>
    </ul>
  </li>
  <li><a href="#チェック" id="markdown-toc-チェック">チェック</a></li>
  <li><a href="#アップデート方法" id="markdown-toc-アップデート方法">アップデート方法</a></li>
  <li><a href="#deinの自動インストール" id="markdown-toc-deinの自動インストール">Deinの自動インストール</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="設定">設定</h2>

<p><strong>.vimrc</strong>の最初の方に、以下のようなブロックを追加します。</p>

<figure class="code"><figcaption><span>.vimrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if has('nvim') &amp;&amp; !filereadable(expand('~/.vim_no_python'))
</span><span class="line">  let s:python3 = system('which python3')
</span><span class="line">  if strlen(s:python3) != 0
</span><span class="line">    let s:python3_dir = $HOME . '/.vim/python3'
</span><span class="line">    if ! isdirectory(s:python3_dir)
</span><span class="line">      call system('python3 -m venv ' . s:python3_dir)
</span><span class="line">      call system('source ' . s:python3_dir . '/bin/activate &amp;&amp; pip install neovim flake8 jedi')
</span><span class="line">    endif
</span><span class="line">    let g:python3_host_prog = s:python3_dir . '/bin/python'
</span><span class="line">    let $PATH = s:python3_dir . '/bin:' . $PATH
</span><span class="line">  endif
</span><span class="line">endif</span></code></pre></td></tr></table></div></figure>

<p>以下各所の説明。</p>

<h2 id="各所の説明">各所の説明</h2>

<h3 id="実行するかどうかのチェック">実行するかどうかのチェック</h3>

<pre><code>if has('nvim') &amp;&amp; !filereadable(expand('~/.vim_no_python'))
</code></pre>

<p>Vimでもシンタックスチェックでpipで入れた実行ファイルを使いたい場合とかも
ありますが、最近は
<a href="https://github.com/rcmdnk/dotfiles">dotfiles</a>
入れる環境ではすべてNeovimを使ってるので余計なことをしないように、ということで
Neovimの場合だけ。</p>

<p>さらに、もしこれを入れたくない環境があったらHOMEに<strong>.vim_no_python</strong>というファイルを
置いておけば無視するようになります。</p>

<h3 id="python3チェック">Python3チェック</h3>

<pre><code>let s:python3 = system('which python3')
if strlen(s:python3) != 0
</code></pre>

<p>これで<code>python3</code>が環境にある場合だけ以下を行います。</p>

<h3 id="インストール場所">インストール場所</h3>

<pre><code>let s:python3_dir = $HOME . '/.vim/python3'
</code></pre>

<p>仮想環境は<strong>~/.vim/</strong>の下に<code>python3</code>という名前で作ることにしました。</p>

<h3 id="仮想環境構築">仮想環境構築</h3>

<pre><code>if ! isdirectory(s:python3_dir)
  call system('python3 -m venv ' . s:python3_dir)
  call system('source ' . s:python3_dir . '/bin/activate &amp;&amp; pip install neovim flake8 jedi')
endif
</code></pre>

<p>仮想環境のディレクトリがない場合、<code>-m venv</code>で新たな仮想環境を作ります。
そして、その環境下に<code>pip</code>で必要なパッケージを入れます。</p>

<pre><code>  call system('source ' . s:python3_dir . '/bin/activate')
  call system('pip install neovim flake8 jedi')
</code></pre>

<p>みたいに2つに分けてしまうと、2つ目では仮想環境下ではなくユーザーの通常環境への
インストールになってしまうのでまとめて(<code>system</code>は恐らくサブプロセスを呼ぶだけなのでここで行ったものは維持されない。以下にある<code>PATH</code>の設定とかも<code>system</code>の中で<code>export</code>とかしても意味が無い)。</p>

<h3 id="仮想環境を使う設定">仮想環境を使う設定</h3>

<pre><code>let g:python3_host_prog = s:python3_dir . '/bin/python'
let $PATH = s:python3_dir . '/bin:' . $PATH
</code></pre>

<p>1つ目がPythonを使うモジュールが使うPythonの指定。
<code>g:python3_host_prog</code>という値に仮想環境の場所の中のPythonを指定してあげればOK。</p>

<p>2つ目が仮想環境下にインストールされた実行ファイル(<code>flake8</code>とか)を使うための設定。
上の仮想環境を使う設定をしてもPythonを直接呼ぶだけで、いわゆる手元で<code>activate</code>した状態、とは違って
シェルのPATHとかは通らないので、インストールしたコマンドを使いたい場合には
この様に別途PATHを通す必要があります。</p>

<blockquote>
  <p><a href="https://vim.fandom.com/wiki/Environment_variables">Environment variables  Vim Tips Wiki  Fandom</a></p>
</blockquote>

<p>せっかく入れるので最優先で見るように一番前に追加。</p>

<h2 id="チェック">チェック</h2>

<p>Neovimを立ち上げて<code>:checkhealth</code>コマンドを打ってみると、</p>

<pre><code>## Python 3 provider (optional)
  - INFO: Using: g:python3_host_prog = "/home/user/.vim/python3/bin/python"
  - INFO: Executable: /home/user/.vim/python3/bin/python
  - INFO: Python version: 3.8.5
  - INFO: pynvim version: 0.4.1
  - OK: Latest pynvim is installed.
</code></pre>

<p>みたいな感じの部分があるかと思います。
ここできちんと<code>g:python3_host_prog</code>が指定されていて、
<code>pynvim</code>のパッケージもちゃんと入っていればOK。</p>

<p>他のコマンド類もちゃんと使えるか、</p>

<pre><code>:echo system('which flake8')
</code></pre>

<p>とかしてみて、ちゃんと
<code>/home/user/.vim/python3/bin/flake8</code>で見つかればOK。</p>

<h2 id="アップデート方法">アップデート方法</h2>

<p>この方法で作ると手動でアップデートするか、ディレクトリを一旦消すかしないと
仮想環境がアップデートされません。</p>

<p>たまに手でやってもよいのですが、
普段、Homebrewのパッケージやらなにやらを毎日cronでアップデートしていて、
その中でNeovimのプラグインもアップデートしているので
その前にディレクトリを削除して再構築するようにしてみます。</p>

<figure class="code"><figcaption><span>update.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="k">if</span> <span class="nb">type</span> nvim &gt;<span class="p">&amp;</span> /dev/null<span class="p">;</span><span class="k">then</span>
</span><span class="line">  <span class="nv">vim_proc</span><span class="o">=</span><span class="k">$(</span>pgrep -l -f <span class="s2">&quot;nvim -c&quot;</span><span class="p">|</span>cut -d <span class="s1">&#39; &#39;</span> -f <span class="m">1</span><span class="k">)</span>
</span><span class="line">  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;</span><span class="nv">$vim_proc</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;previous nvim -c is still running, kill it.&quot;</span>
</span><span class="line">    <span class="nb">kill</span> -kill <span class="s2">&quot;</span><span class="nv">$vim_proc</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">fi</span>
</span><span class="line">  rm -rf ~/.vim/python3
</span><span class="line">  nvim -c <span class="s2">&quot;silent call dein#update()&quot;</span> -c <span class="s2">&quot;quit&quot;</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じ。</p>

<p>前半部分はたまにスタックしてしまう場合があったので、
残ってたら強制削除して新たに始めるにするためのもの。</p>

<p>その後で仮想環境を削除して、
プラグインのアップデートを呼んでいます。</p>

<p>プラグインはDeinでやってるのでその<code>update</code>を呼んでいます。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00L8P0R6I?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00L8P0R6I&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61AOinx9z-L._SS90_CR0,0,120,90_.jpg" alt="be quiet! 静音PC電源 80PLUS GOLD認証 DARK POWER PRO 10シリーズ 750W 国内正規代理店品" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2016/03/10/computer-vim/">NeoBundleからDein.vimへの移行</a></div></li></ul>

<p>このときにNeovimが立ち上がるのでPythonの仮想環境がインストールされます。</p>

<p>これを適当な時間に</p>

<pre><code>30 12 * * * /path/to/update.sh
</code></pre>

<p>みたいに設定して呼んであげればOK(上のは毎日お昼の12:30。ずっと動かしてるサーバーとかなら深夜とか使わない時間にしたほうが良いです。)</p>

<h2 id="deinの自動インストール">Deinの自動インストール</h2>

<p>同じ様な初期インストールをDeinに関しても行っています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4760860096?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4760860096&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41CGhPHUoVL._SS90_CR0,0,120,90_.jpg" alt="対話的な学び: アクティブ・ラーニングの1つのキーポイント (教育フォーラム)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/08/20/computer-vim/">Vim起動時にdeinを使うかどうか対話的に設定する(confirm())</a></div></li></ul>

<h2 id="まとめ">まとめ</h2>

<p>この辺の初期環境構築に関しては、毎回Vim(Neovim)起動時にチェックすることになるので、
別の仕組みで行った方が良いとは思います。</p>

<p>ただ、最初の構築時に数秒かかる程度で、一回作ってしまえばほとんど負荷はかかりません。
それを全部<strong>.vimrc</strong>の中で出来てしまうならそれで良いかな、という感じ。</p>

<p>アップデートに関しても、適当なタイムスタンプ付けたファイルを作っておいて、
それ見ながらもし期限切れになってたら再構築、
みたいなことを<strong>.vimrc</strong>の中でやっても良いかな、とも思いましたが、
それはやりすぎかな、というのと、
上の様に別のところで毎日動かしてるcronがあるのでそれに乗ったほうが良いな、という感じです。</p>

<p>ちなみにPython2に関しては作ってないです。
大概のプラグインがPython3があればそちらを使うのでなくても問題がないので。
あと、Python2だと<code>pip install virtualenv</code>する必要があったりひと手間かかるので。
今後消えゆくPython2は無理に入れる必要はないかな、と。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim emulation using Karabiner-Elements (on macOS)でメニューバーに状態表示させたり通知でお知らせしたり]]></title>
    <link href="https://rcmdnk.com/blog/2020/07/29/computer-mac-karabiner-vim/"/>
    <updated>2020-07-29T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/07/29/computer-mac-karabiner-vim</id>
    <content type="html"><![CDATA[<p>macOS上のVim以外の部分でVimな動作をKarabiner-Elementsを使って
再現しようとして作ったVim emulationに関して、
これまで今どういう状態にあるか、はパット見わからない状態でした。</p>

<p>そこで、メニューバーに状態を表示したり変更時に通知を出したりできるようにしてみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#vim-emulation-using-karabiner-elements" id="markdown-toc-vim-emulation-using-karabiner-elements">Vim emulation using Karabiner-Elements</a></li>
  <li><a href="#モードインジケーターの実装" id="markdown-toc-モードインジケーターの実装">モードインジケーターの実装</a></li>
  <li><a href="#通知" id="markdown-toc-通知">通知</a></li>
  <li><a href="#メニューバー" id="markdown-toc-メニューバー">メニューバー</a></li>
  <li><a href="#windowsでは" id="markdown-toc-windowsでは">Windowsでは</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="vim-emulation-using-karabiner-elements">Vim emulation using Karabiner-Elements</h2>

<p><a href="https://karabiner-elements.pqrs.org/">Karabiner-Elements</a>
は言わずとしれたmacOS上でキーマップを自在に出来るツールです。</p>

<p>色々な設定も公開されています。</p>

<blockquote>
  <p><a href="https://ke-complex-modifications.pqrs.org/">karabiner-elements-complex_modifications</a></p>
</blockquote>

<p>これとは別に個人的に公開してるのが以下のもの。</p>

<blockquote>
  <p><a href="https://ke-complex-modifications.pqrs.org/">Karabiner-Elements complex_modifications rules by rcmdnk</a></p>
</blockquote>

<div class="github-widget" data-repo="rcmdnk/KE-complex_modifications"></div>

<p>この中にVim emulationがあります。</p>

<p>本家の方にもViモードとかありますが、より色々なことができるようになっています。
(上の方のに入れようかと思ってたんですが、スクリプトをあまりに変更しすぎて統一するのが大変そうだったのでできてない。。。)</p>

<p>Vim emulationを有効にするとではメモ帳などの上で<i class="key">ESC</i>を押すと
<strong>ノーマルモード</strong>に入って
<i class="key">H</i>、<i class="key">J</i>、<i class="key">K</i>、<i class="key">L</i>で左下上右に動ける様になったり
コピーしたり貼り付けたり、ビジュアルモードが使えたりするようになります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/09/05/computer-mac-karabiner-vim/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20170905_vimemu_120_90.jpg" width="120" height="90" alt="20170905_vimemu_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/09/05/computer-mac-karabiner-vim/">Vim以外でVimする: Mac+Karabiner-Elements編</a></div></li></ul>

<h2 id="モードインジケーターの実装">モードインジケーターの実装</h2>

<blockquote>
  <p><a href="https://github.com/rcmdnk/KE-complex_modifications/issues/6">Visual Indicator of Mode · Issue #6 · rcmdnk/KE-complex_modifications</a></p>
</blockquote>

<p>前から自分でもやりたいな、とは思ってたんですが、
Issueでもらったのでやってみました。</p>

<p>実装したのは</p>

<ul>
  <li><i class="key">⌃</i>-<i class="key">⌘</i>-<i class="key">⇧</i>-<i class="key">V</i>でモード変更時に通知センターを使って通知を出すようにする(もう一回押すと停止する)</li>
  <li><a href="https://github.com/rcmdnk/VEM">rcmdnk/VEM</a>を使ってメニューバーに状態を表示する</li>
</ul>

<p>の二種類です。</p>

<h2 id="通知">通知</h2>

<p>Vim emulationに</p>

<pre><code>Vim emulation: Enable the display notification when the mode is changed: toggle by Ctrl-Cmd-Shift-v
</code></pre>

<p>という項目を加わえたので、これをEnableすると使えるようになります。</p>

<p>ただ、他の項目も中で変更があるので、すでにVim emulationを使ってた人は、一旦設定を外し、一覧表の方からも削除して新しいものを入れ直す必要があります。</p>

<p>有効にして、<i class="key">⌃</i>-<i class="key">⌘</i>-<i class="key">⇧</i>-<i class="key">V</i>
を押すと、</p>

<p><img src="https://rcmdnk.com/images/post/20200730_notification.jpg" alt="20200730_notification.jpg" class="pic" /></p>

<p>こんな感じでモードが変更されるたびに通知が出ます。</p>

<p>実装としては、変更するキーを押した際に</p>

<pre><code>{
  shell_command: "osascript -e 'display notification \"Normal Mode\" with title \"vim_emu\"'"}]
}
</code></pre>

<p>といった感じのシェルコマンドも送るようにして、これによって通知を出しています。</p>

<p>ただ、通知の表示時間はmacOS自体の設定で決まっいて、</p>

<pre><code>$ defaults write com.apple.notificationcenterui bannerTime -int 1 &amp;&amp; killall NotificationCenter
</code></pre>

<p>とかすると1秒にしたり出来ますが、他の通知も同様になってしまいます。</p>

<p>まあ面倒なことをしようとすれば、毎回現在の設定を取ってきて、一時的に変更して、通知出した後に戻す、とか出来なくも無いわけですが。</p>

<p>もう一つ問題があって、これを有効、無効化出来るようにしてるわけですが、
これ実はある値が1の時はこれ、0の時はこれ、という2つの別の設定を入れていて、
設定ファイルが膨大になってしまっています。</p>

<p>なので入れてみたものの、もしかしたらそのうち外すかも。。。</p>

<h2 id="メニューバー">メニューバー</h2>

<p>メニューバーにどうやって表示しようか、と思ったんですが、
やったことは別のアプリを作って、Karabiner-Elementsの状態を監視して表示する、というもの。</p>

<p><img src="https://rcmdnk.com/images/post/20200730_vem.png" alt="20200730_vem.png" class="pic" /></p>

<p><a href="https://github.com/rcmdnk/VEM">rcmdnk/VEM</a>というアプリをrumpsを使って作りました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/11/16/computer-mac-python/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20151116_rumps_test_120_90.jpg" width="120" height="90" alt="20151116_rumps_test_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/11/16/computer-mac-python/">rumpsを使ってPythonで簡単にMacのメニューバーアプリを作る</a></div></li></ul>

<p>Vim emulationではKarabiner-Elementsの中で変数を覚えておける機能を使ってモードの変更を行っていますが、
それらの値は以下のファイルに記録されています。</p>

<pre><code>/Library/Application Support/org.pqrs/tmp/karabiner_grabber_manipulator_environment.json
</code></pre>

<blockquote>
  <p><a href="https://github.com/pqrs-org/Karabiner-Elements/issues/2278">Request for a –get-variables option for cli · Issue #2278 · pqrs-org/Karabiner-Elements</a></p>
</blockquote>

<p>なので、後はアプリ側でこれを定期的に見に行くようにすれば良いだけ。</p>

<p>rumpsを使えばそういったメニューバーアプリは簡単に作れます。</p>

<p>なのでこれに関してはVim emulationの方は何も変更せず、アプリを入れるだけで使えるようになります。</p>

<p>起動すると、Vim emulationが有効になっていてモードを変えたりしていれば、</p>

<p><img src="https://rcmdnk.com/images/post/20200730_menubarinsert.jpg" alt="20200730_menubarinsert.jpg" class="pic" /></p>

<p>こんな感じで現在のモードがメニューバーに表示されます。</p>

<p>ノーマルモードになれば、</p>

<p><img src="https://rcmdnk.com/images/post/20200730_menubarnormal.jpg" alt="20200730_menubarnormal.jpg" class="pic" /></p>

<p>こんな感じ。</p>

<p>デフォルトは色付きアイコンですが、グレースケールな方が良ければ、
オプションで設定できて、</p>

<p><img src="https://rcmdnk.com/images/post/20200730_menubarinsertgray.jpg" alt="20200730_menubarinsertgray.jpg" class="pic" /></p>

<p>こんな感じで全部がグレースケールなアイコンになります。</p>

<p>rumpsで定期的に実行できる最小単位が1秒なので、変更した後、メニューバーの表示が変わるまでちょっとタイムラグがあります。</p>

<p>ちょっと使ってみた感じでは1秒ごとにチェックしてもシステムに負荷をかけることはないです。</p>

<p>最初はVim emulation側でモード変更時に信号を送って積極的に変更するようなものを考えていたんですが、
rumpsで簡単に作れてしまったのと、Vim emulation側に手を加えなくてもよいということで
まずはこれで。</p>

<p>実際作ってみた感じ、このVEMは思った以上にいい感じに出来たと思ってます。</p>

<p>もう1つ欲しい機能としてはVim emulationが有効でないアプリの上に来たときに
Disabled表示にしたい、というものがあるのですが、</p>

<h2 id="windowsでは">Windowsでは</h2>

<p>Windowsでは
<a href="https://www.autohotkey.com/">AutoHotkey</a>を使って同じようなものを作っています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2013/08/03/computer-windows-autohotkey/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20130723_AutoHotKey_120_90.jpg" width="120" height="90" alt="20130723_AutoHotKey_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2013/08/03/computer-windows-autohotkey/">Vim以外でVimする: Windows+AutoHotkey編</a></div></li></ul>

<div class="github-widget" data-repo="rcmdnk/vim_ahk"></div>

<p>最近一番スターがあるレポジトリになってきました。</p>

<p>こちらでは結構前にタスクトレイアイコンとして状態を表示できるようにしていました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/11/06/computer-windows-autohotkey/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20130723_AutoHotKey_120_90.jpg" width="120" height="90" alt="20130723_AutoHotKey_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/11/06/computer-windows-autohotkey/">AutoHotkeyでのメニューの追加</a></div></li></ul>

<p>AutoHotkey自体がポップアップメッセージを出したりも出来るので、インジケーター的なものもあります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cVimがchromeウェブストアから消えた]]></title>
    <link href="https://rcmdnk.com/blog/2020/06/11/computer-chrome-vim/"/>
    <updated>2020-06-11T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/06/11/computer-chrome-vim</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07TN1HBTG?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07TN1HBTG&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51xSDA7k3OL._SS200_.jpg" alt="HP 14インチ Chromebook HD タッチスクリーン ラップトップ PC (Intel Celeron N3350 最大2.4GHz、4GB RAM、32GB フラッシュメモリ、WiFi、HDカメラ、Bluetooth、最大10時間のバッテリー寿命、クロームOS、ブラック) (更新済み" /></a>
</div>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#cvim" id="markdown-toc-cvim">cVim</a></li>
  <li><a href="#chromeウェブストアから消えている" id="markdown-toc-chromeウェブストアから消えている">Chromeウェブストアから消えている</a></li>
  <li><a href="#少し前からメンテはされなくなってた" id="markdown-toc-少し前からメンテはされなくなってた">少し前からメンテはされなくなってた?</a></li>
  <li><a href="#乗り換えかどうするか" id="markdown-toc-乗り換えかどうするか">乗り換えかどうするか</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="cvim">cVim</h2>

<p>cVimはGoogle Chromeの拡張機能で、VimライクなキーバインドをChrome上で
設定できるようにしてくれるものです。</p>

<p>ほかにも同じ様な拡張機能もありますが、<strong>.vimrc</strong>的な設定ファイルで
キーバインドを変更できるのが特徴です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00IE67ZSM?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00IE67ZSM&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/3110x9TzbSL._SS90_CR0,0,120,90_.jpg" alt="【並行輸入品】Toshiba Chromebook CB35-A3120 PLM01U-002005 13.3-Inch Cloud Computer" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/10/22/computer-firefox/">cVim: Google ChromeのVimperatorみたいな拡張</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/04/24/computer-chrome-vim/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180424_cvimrcopacity_120_90.jpg" width="120" height="90" alt="20180424_cvimrcopacity_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/04/24/computer-chrome-vim/">cVimでコマンドモードの候補などの表示を半透明にする</a></div></li></ul>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/11/18/computer-chrome/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20171118_cvim_120_90.jpg" width="120" height="90" alt="20171118_cvim_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/11/18/computer-chrome/">Google ChromeでcVimの設定をアップデート</a></div></li></ul>

<p>以前FirefoxではVimperatorという拡張機能があってそれをずっと使ってきましたが、
これが使えなくなったタイミングでcVimを使うためにGoogle Chromeをメインブラウザにした位、
ブラウザに必須な拡張機能。</p>

<h2 id="chromeウェブストアから消えている">Chromeウェブストアから消えている</h2>

<p>消えてる。。。</p>

<p>https://chrome.google.com/webstore/detail/ihlenndgcmojhcghmfjfneahoeklbjjh</p>

<p>すでに入っていれば使い続けることはできますが、
新しくインストールすることはできない状態です。</p>

<p>Chromeで拡張機能の同期を行っていても新しい環境ではインストールされません。</p>

<h2 id="少し前からメンテはされなくなってた">少し前からメンテはされなくなってた?</h2>

<p>GitHubのレポジトリやほかのところでまだ言及されてる感じはありません。</p>

<blockquote>
  <p><a href="https://github.com/1995eaton/chromium-vim/issues?q=is%3Aissue">Issues · 1995eaton/chromium-vim</a></p>
</blockquote>

<p>ちょうどちょっと前にこんなことを書いてる人もいました。</p>

<blockquote>
  <p><a href="https://blog.ottijp.com/2020/06/07/github-forks/">GitHubで開発が止まったリポジトリの引き継ぎ開発してそうなリポジトリを探す ottijp blog</a></p>
</blockquote>

<p>おそらくこの時点(6/4)ではまだウェブストアにあったと思うんですが、
その直後に消えてしまった感じ?</p>

<p>ソースコードはあるので自分でビルドして入れることは可能です。</p>

<p>ただ、ちゃんとメンテしないとそのうち使えなくなってしまうかも。</p>

<h2 id="乗り換えかどうするか">乗り換えかどうするか</h2>

<p>おそらくVim動作をする拡張機能で一番有名なのは<a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja">Vimium</a>。</p>

<p>Firefox版もあって、Chrome+cVimに移る前にちょっと試してはいました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/10/20/computer-firefox-vimperator/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20171020_vimium_120_90.jpg" width="120" height="90" alt="20171020_vimium_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/10/20/computer-firefox-vimperator/">Vimperator亡き後のためにVimium-FFを試してみる</a></div></li></ul>

<p>上で上げてる問題点、というのは当時でもFirefoxだけのものだったり
今は治ってるものもあるみたいでよいんですが、
<code>qmark</code>だとか動作以外の部分での意味合いのツールが足りてないです。</p>

<p>単に<i class="key">J</i>で下に送る、とかなら
WindowsでAutoHotkey、MacでKarabiner Elementsで出来てしまう。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/KE-complex_modifications">rcmdnk/KE-complex_modifications</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/rcmdnk/vim_ahk">rcmdnk/vim_ahk: Setting file to emulate vim with AutoHotkey</a></p>
</blockquote>

<p>上の全体で行う動作設定でとりあえずはできるし、ちょっと手を加えれば<code>qmark</code>とかも何とかなりそう?</p>

<p>ブラウザ側の情報が取れないと文字入力時との切り替えがちょっと面倒ではありますが。</p>

<p>使えなくなる前にちょっと考えておかないといけない。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Neovimで色が付かない問題]]></title>
    <link href="https://rcmdnk.com/blog/2018/11/02/computer-vim/"/>
    <updated>2018-11-02T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2018/11/02/computer-vim</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/168050262X?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=168050262X&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41Yw7Cck-4L._SS200_.jpg" alt="Modern Vim: Craft Your Development Environment with Vim 8 and Neovim" /></a>
</div>

<p>ちょっと久しぶりにNeovimを試してみようと思って
立上げたところ白黒画面で全く色が付かない状態になってしまいました。</p>

<p>表示からしてプラグインとかはロードできている感じでしたが色が出ない。
colorschemeも想定通りにロードされている状態。</p>

<p>調べてみたところ問題は環境変数の<code>TERM</code>の値でした。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#neovimの設定" id="markdown-toc-neovimの設定">Neovimの設定</a></li>
  <li><a href="#色が付かない" id="markdown-toc-色が付かない">色が付かない</a></li>
  <li><a href="#termscreen-256colorとしてしまってもよいのか" id="markdown-toc-termscreen-256colorとしてしまってもよいのか">TERM=screen-256colorとしてしまってもよいのか?</a></li>
  <li><a href="#neovimをlinuxにローカルインストールするのはすごい簡単" id="markdown-toc-neovimをlinuxにローカルインストールするのはすごい簡単">NeovimをLinuxにローカルインストールするのはすごい簡単</a></li>
  <li><a href="#escが効かない問題は解決した" id="markdown-toc-escが効かない問題は解決した">ESCが効かない問題は解決した?</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="neovimの設定">Neovimの設定</h2>

<p>Neovimでは設定ファイルは<strong>$HOME/.config/nvim</strong>になります。</p>

<p>基本的にはVimの<strong>$HOME/.vimrc</strong>をそのまま使いこなせますし、
プラグインなども同じものを使えます。</p>

<p>なので<strong>$HOME/.config/nvim</strong>は<strong>$HOME/.vimrc</strong>へのシンボリックリンクにしています。</p>

<p>一部切り替えが必要な部分もありますが
<code>has('nvim')</code>などの値を見たりして設定を変更しています。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/dotfiles/blob/master/.vimrc">dotfiles/.vimrc at master · rcmdnk/dotfiles</a></p>
</blockquote>

<p>colorschemeは
defaultにちょっと手を加えただけで十分だと気づいたので自作のものを使っています。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/11/13/computer-vim/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20171113_vimcolor_120_90.jpg" width="120" height="90" alt="20171113_vimcolor_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/11/13/computer-vim/">.vimrc見直しの一環としてカラースキームプラグインを作った</a></div></li></ul>

<div class="github-widget" data-repo="rcmdnk/rcmdnk-color.vim"></div>

<h2 id="色が付かない">色が付かない</h2>

<p>Neovimを使ってみて基本的にVimと同じ動作になることを期待してましたが色が全く付きませんでした。</p>

<p>以前試したときはそこは特に問題なかったと思うのですが。</p>

<p>いろいろ試していると、上のcoloschemeのプラグインの中でしている</p>

<pre><code>set background=dark
</code></pre>

<p>をした場合に色がすべて消えることがわかりました。</p>

<pre><code>set background=light
</code></pre>

<p>とすると色が付きます。</p>

<p>この設定はバックグラウンド自体を設定するのではなく
バックグラウンドに合わせて対応しているものに関してcolorschemeなどで設定される色を変更するものですが、
<code>dark</code>にするとすべて消える状態です。</p>

<p>なので上のプラグインの中で本来<code>dark</code>としたときに変わる色をすべて設定しても良いのですが、
かなり面倒だし汚くなってしまいます。</p>

<p>ということで検索してみたところ、以下のIssueがひっかりました。</p>

<blockquote>
  <p><a href="https://github.com/neovim/neovim/issues/3024">set background is dark removes syntax highlighting · Issue #3024 · neovim/neovim</a></p>
</blockquote>

<p>環境変数の<code>TERM</code>の値が問題だ、ということです。</p>

<p><code>TERM</code>の値を調べてみるとたしかに<code>screen</code>になっていました。</p>

<p>別のターミナルを立ち上げてGNU screenを立ち上げる前の<code>TERM=xterm-256color</code>の状態だと確かに問題なく色が付きましたし、
screenを立ち上げたあとでも<code>TERM=screen-256color</code>とすればNeovimで<code>set background=dark</code>でも問題なく色が付きました。</p>

<p>なので問題を解決するためには<code>.screenrc</code>に</p>

<pre><code>term "screen-256color"
</code></pre>

<p>を書いておけば<code>TERM</code>が毎回<code>screen-256color</code>となるので解決されます。</p>

<p>また、tmuxを使っていて同じ問題を抱えているなら</p>

<pre><code>set -g default-terminal "screen-256color"
</code></pre>

<p>を<code>.tmux.conf</code>に加えることで解決できます。</p>

<h2 id="termscreen-256colorとしてしまってもよいのか">TERM=screen-256colorとしてしまってもよいのか?</h2>

<p>実はこの設定は以前は入れていたものをある時からコメントアウトしていたものになります。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/02/02/computer-bash-network/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180202_terminfo_120_90.jpg" width="120" height="90" alt="20180202_terminfo_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/02/02/computer-bash-network/">GNU screen内からsshした先にTERM=screen.xterm-256color等がない場合の対処法</a></div></li></ul>

<p>この設定をしてしまうと、そこから<code>ssh</code>した先に<code>screen-256color</code>などの値がないときに
エラーが出てそれこそVimでのカラー表示とかが上手くできなくなります。</p>

<p>その辺いろいろ解決しようとしたのが上の記事ですが、
余計なことを抑えようと思って<code>sshrc</code>とかも使うのをやめて
一応使う限りのところでは問題のない<code>TERM=screen</code>を使うことにしていました。
特に<code>term</code>指定をしなければこれが指定されます。</p>

<p><code>xterm-256color</code>とかに設定すると<code>ssh</code>の問題は解決できますが、
<code>TERM</code>が<code>screen</code>を含んでいることによっていろいろ設定することがあるので
そうは出来ないところ。</p>

<p>今回接続先の問題がすべて解決したわけではないんですが、
しばらくは個別に接続先の<strong>.bashrc</strong>で対処したりどうにかしておこうと思っています。</p>

<h2 id="neovimをlinuxにローカルインストールするのはすごい簡単">NeovimをLinuxにローカルインストールするのはすごい簡単</h2>

<p>NeovimはLinux用に
<a href="https://appimage.org/">AppImage</a>
と呼ばれる形式でバイナリを配布しています。</p>

<blockquote>
  <p><a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">Installing Neovim · neovim/neovim Wiki</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/neovim/neovim/releases">Releases · neovim/neovim</a></p>
</blockquote>

<p>インストールは欲しいバーションをダウンロードして実行権限を与えて適当な所に置くだけ</p>

<pre><code>$ curl -L https://github.com/neovim/neovim/releases/download/v0.3.1/nvim.appimage -o nvim
$ mv nvim ~/bin/nvm
$ chmod 755 ~/bin/nvim
</code></pre>

<p><strong>Linux用</strong>ということでディストリビューションによらずどのLinuxでも実行できる実行ファイルになっています。</p>

<p>これによってコンパイルとかしなくてもすぐに使えます。</p>

<p>どうやって作るんだろう、と思ってみてみると、どうやら
各ディストリビューションに対応したバイナリを集めてまとめ上げてるみたいです。</p>

<blockquote>
  <p><a href="https://github.com/AppImage/AppImageKit/wiki/Creating-AppImages">Creating AppImages · AppImage/AppImageKit Wiki</a></p>
</blockquote>

<p>なのでファイル自体は結構大きくて、Macで入れた<code>nvim</code>が2.4MBくらいなのに対して20MB位になっています。</p>

<p><code>yum</code>や<code>apt-get</code>でも取れる様になっているので
システムとして入れるのであればそちらのが良いかと思います。</p>

<h2 id="escが効かない問題は解決した">ESCが効かない問題は解決した?</h2>

<p>以前Neovimを試したときに辞めた理由として、
Puttyを使うときに<i class="key">ESC</i>が上手く送れなくて諦めていました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4309463290?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4309463290&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61Kz0ypVVRL._SS90_CR0,0,120,90_.jpg" alt="タイムアウト (河出文庫)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/11/17/computer-vim/">GNU screen/tmux内でNeovimを使う時に必須な設定</a></div></li></ul>

<p>これを今試してみるとどうも以前感じていた不具合はなくなっている感じです。</p>

<p>Commit履歴を見てもこれに該当するものはちょっと見つけれられませんでしたが、
少なくともVimでは問題なかった問題だったはずなのでソフト的に何か変わったのだと思います。</p>

<p>上の記事の中に書いてますが、最後の<i class="key">ESC</i>がPutty(+screen+neovim)だと上手く送れない、
ということが解決できれば
逆にVimの中では上手く扱えない<i class="key">M</i>-<i class="key">X</i>的なAltキーなどを使ったバインドが
Neovimではきちんと使えるのでむしろNeovimの方が良くなります。</p>

<p>ということでNeovimを使わない理由がなくなったので
Neovimを使って行こうと思います。
もしかしたらこの辺のESC周りで上手くいかない部分もあるかもしれませんが
しばらく使い続けないと気づかないこともあるので。</p>

<p>上にLinuxへのインストールを書きましたが、Macでも</p>

<pre><code>$ brew install neovim
</code></pre>

<p>してインストールしています。</p>

<p>また、<strong>.bashrc</strong>では</p>

<pre><code>if type nvim &gt;&amp; /dev/null;then
  alias vi="nvim" # vi-&gt;nvim
  alias memo="nvim ~/.memo.md"
  alias vid="nvim -d"
  alias vinon="nvim -u NONE"
elif type vim &gt;&amp; /dev/null;then
  alias vim="vim -X" # no X
  alias vi="vim" # vi-&gt;vim
  alias memo="vim ~/.memo.md"
  alias vid="vim -d"
  alias vinon="vim -u NONE"
fi
</code></pre>

<p>な感じのエイリアスを貼って<code>vi</code>で<code>nvim</code>を呼ぶ様にしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yankround.vimを使ったクリップボード共有]]></title>
    <link href="https://rcmdnk.com/blog/2018/10/01/computer-vim/"/>
    <updated>2018-10-01T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2018/10/01/computer-vim</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B019PKH8SC?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B019PKH8SC&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51kodjmFvlL._SS200_.jpg" alt="Yank [DVD] [Import]" /></a>
</div>

<p>普段ターミナルで作業する際、
GNU screenを使っていくつかのウィンドウを開いて作業していて、
Vimもそれぞれで開いたりしています。</p>

<p>この際に、別々のVimプロセス間でもクリップボードを共有したいときがあります。</p>

<p>これまで自分で<strong>.vimrc</strong>に設定を書いてやっていましたが、
<a href="https://github.com/LeafCage/yankround.vim">Yankround.vim</a>
をちょっといじって使うととても便利になったのでそれについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#以前までの設定" id="markdown-toc-以前までの設定">以前までの設定</a></li>
  <li><a href="#yankroundvim" id="markdown-toc-yankroundvim">Yankround.vim</a></li>
  <li><a href="#textyankpostイベントの追加" id="markdown-toc-textyankpostイベントの追加">TextYankPostイベントの追加</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="以前までの設定">以前までの設定</h2>

<p>以下の様な設定を<strong>.vimrc</strong>の中に書いていました。</p>

<figure class="code"><figcaption><span>.vimrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line"><span></span><span class="c">&quot; yankshare prefix</span>
</span><span class="line"><span class="nb">noremap</span> [yshare] <span class="p">&lt;</span>Nop<span class="p">&gt;</span>
</span><span class="line">map s [yshare]
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="k">g</span>:yankshare_file <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;~/.vim/yankshare.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;g:yankshare_file&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">let</span> <span class="k">g</span>:yankshare_file <span class="p">=</span> <span class="s1">&#39;/tmp/yankshare.txt&#39;</span>
</span><span class="line"><span class="k">endif</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="p">!</span> YSStore<span class="p">()</span> range
</span><span class="line">  <span class="k">call</span> writefile<span class="p">(</span>[getreg<span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">)</span>]<span class="p">,</span> <span class="k">g</span>:yankshare_file<span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">endfunction</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="p">!</span> YSLoad<span class="p">()</span> range
</span><span class="line">  <span class="k">call</span> setreg<span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">,</span> readfile<span class="p">(</span><span class="k">g</span>:yankshare_file<span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>[<span class="m">0</span>]<span class="p">)</span>
</span><span class="line"><span class="k">endfunction</span>
</span><span class="line">
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">y</span>  <span class="c">&quot;syy:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]yy <span class="c">&quot;syy:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]Y  <span class="c">&quot;sY:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">y</span>$ <span class="c">&quot;sy$:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]y0 <span class="c">&quot;sy0:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]yw <span class="c">&quot;syw:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">cc</span> <span class="c">&quot;scc&lt;ESC&gt;:call YSStore()&lt;CR&gt;i</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]C  <span class="c">&quot;sC&lt;ESC&gt;:call YSStore()&lt;CR&gt;i</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">c</span>$ <span class="c">&quot;sc$&lt;ESC&gt;:call YSStore()&lt;CR&gt;i</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]c0 <span class="c">&quot;sc0&lt;ESC&gt;:call YSStore()&lt;CR&gt;i</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">cw</span> <span class="c">&quot;scw&lt;ESC&gt;:call YSStore()&lt;CR&gt;i</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]dd <span class="c">&quot;sdd:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]D  <span class="c">&quot;sD:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">d</span>$ <span class="c">&quot;sd$:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]d0 <span class="c">&quot;sd0:call YSStore()&lt;CR&gt;</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]dw <span class="c">&quot;sdw:call YSStore()&lt;CR&gt;</span>
</span><span class="line">
</span><span class="line">xnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">y</span> <span class="c">&quot;sy:call YSStore()&lt;CR&gt;</span>
</span><span class="line">xnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">c</span> <span class="c">&quot;sc&lt;ESC&gt;:call YSStore()&lt;CR&gt;i</span>
</span><span class="line">xnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">d</span> <span class="c">&quot;sd:call YSStore()&lt;CR&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="k">p</span> :<span class="k">call</span> YSLoad<span class="p">()&lt;</span>CR<span class="p">&gt;</span>&quot;<span class="k">sp</span>
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]P :<span class="k">call</span> YSLoad<span class="p">()&lt;</span>CR<span class="p">&gt;</span>&quot;sP
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]<span class="nb">gp</span> :<span class="k">call</span> YSLoad<span class="p">()&lt;</span>CR<span class="p">&gt;</span>&quot;sgp
</span><span class="line"><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> [yshare]gP :<span class="k">call</span> YSLoad<span class="p">()&lt;</span>CR<span class="p">&gt;</span>&quot;sgP
</span></code></pre></td></tr></table></div></figure>

<p>基本的にまず<i class="key">s</i>を押した後にコピーや削除の作業を行うと
それを<strong>~/.vim/yankshare.txt</strong>に書き出し、
<i class="key">s</i><i class="key">p</i>とすると他のVimのプロセスでも貼り付けられる、というもの。</p>

<p>これ自体をプラグイン化しようかとも思いましたが、
この設定ではヤンクの履歴がとれません。</p>

<h2 id="yankroundvim">Yankround.vim</h2>

<p>一方で普通のヤンク作業ではYankround.vimという
プラグインを使って前にヤンクしたものとかも呼び出せる様にしていました。</p>

<div class="github-widget" data-repo="LeafCage/yankround.vim"></div>

<blockquote>
  <p><a href="http://leafcage.hateblo.jp/entry/2013/10/31/yankroundvim">副作用の少ないYankRing.vimみたいなのができました - cafegale</a></p>
</blockquote>

<p><a href="https://github.com/vim-scripts/YankRing.vim">YankRing.vim</a>というもっと古くからあるプラグインもありますが、
YankroundはYankRingが作る副作用を減らしより使いやすくしたものになっています。</p>

<p>このYankroundもヤンクしたものをファイルに保存しておき呼び出すので、
原理的には他のVimプロセスでも使えるはずです。</p>

<p>ただ、ヤンク時の操作にちょっと足りない点があって思い通りに動かなかったので
そのへんを直してみました。</p>

<h2 id="textyankpostイベントの追加">TextYankPostイベントの追加</h2>

<p>Yankroundではもともと
<code>CursorMoved</code>というイベントで<code>Yankround_append()</code>という
ヤンクしたものをファイルに保存する関数を呼んでいました。</p>

<p>ただ、これだと<i class="key">y</i><i class="key">y</i>とかした直後はまだファイルがアップデートされておらず、
他のVimプロセスで呼び出そうと思っても呼び出せません。</p>

<p>そこで<code>TextYankPost</code>というイベントでも呼ぶようにしました。</p>

<blockquote>
  <p><a href="https://github.com/LeafCage/yankround.vim/pull/27">Yankround_append at TextYankPost by rcmdnk · Pull Request #27 · LeafCage/yankround.vim</a></p>
</blockquote>

<p>この<code>TextYankPost</code>というのは
比較的最近Vim 8.0のPatch 1394で入ったものです。</p>

<blockquote>
  <p><a href="https://machakann.hatenablog.com/entry/2017/12/17/141925">Vim の TextYankPost イベント - 書いたものなど</a></p>
</blockquote>

<p>まさにYankroundなどのためのイベントです。</p>

<p>ただしそのまま入れると古いVimでエラーを出すので、</p>

<pre><code>if exists('##TextYankPost')
  autocmd TextYankPost *   call Yankround_append()
endif
</code></pre>

<p>みたいな感じで導入。</p>

<p>これによりヤンクした瞬間にファイルがアップデートされる様になりました。</p>

<p>これで、あるVimプロセスで<i class="key">y</i><i class="key">y</i>した直後に他の
Vimプロセスで<i class="key">p</i>を一回押した後<i class="key">Ctrl</i>-<i class="key">n</i>を押せば
前のプロセスでヤンクしたものが出てきます。</p>

<p>もともと作っていたYankshareに比べるとペースト時に最初に<i class="key">s</i>を押すか、
後からYankround機能的に<i class="key">Ctrl</i>-<i class="key">n</i>で候補を回すかの違いがありますが、
ヤンクのリストを統一的に管理できる様になるので良いんじゃないかな、と。</p>

<p>Pull Requestを出してみましたが、更新が古いプラグインで反応がまだ無いですが、
<a href="https://github.com/rcmdnk/yankround.vim">rcmdnk/yankround.vim</a>
に変更したものがあります。</p>

<p>Deinとかであれば、</p>

<pre><code>call dein#add('rcmdnk/yankround.vim')
</code></pre>

<p>で導入できます。</p>

<h2 id="まとめ">まとめ</h2>

<p>YankshareはYankshareで別物のクリップボードになるのでこれはこれで
特別に取っておきたいものとかに使えるとは思います。
レジスターとかを使えば良い、という点もあるかもしれませんが余り上手く使いこなせてないので
ちょっと整理してみる必要はあるかもしれません。</p>

<p>いずれにしろYankroundのアップデートで統一してクリップボードを共有して
履歴管理できる様になり結構便利になりました。</p>
]]></content>
  </entry>
  
</feed>
