<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Vim | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/vim/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2022-03-07T00:51:01+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim_ahkにciwなどを追加]]></title>
    <link href="https://rcmdnk.com/blog/2022/01/24/computer-autohotkey-vim-windows/"/>
    <updated>2022-01-24T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2022/01/24/computer-autohotkey-vim-windows</id>
    <content type="html"><![CDATA[<p>Winndows上でVimをEmulateするvim_ahkに<code>ciw</code>など
カーソル下の単語を選択してコピーしたり変更したりするキーバインドを追加しました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#vim_ahk" id="markdown-toc-vim_ahk">vim_ahk</a></li>
  <li><a href="#viwyiwdiwciw" id="markdown-toc-viwyiwdiwciw">viw/yiw/diw/ciw</a></li>
  <li><a href="#例" id="markdown-toc-例">例</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="vim_ahk">vim_ahk</h2>

<p>vim_ahkはWindowsで<a href="https://www.autohotkey.com/">AutoHotkey</a>を使ってVim以外のアプリでもVimライクな動作を実現するツールです。</p>

<div class="github-widget" data-repo="rcmdnk/vim_ahk"></div>

<p>vim_ahkではNormal ModeとかVisual Modeとかも実装されていて、
Normal Modeで<code>vw</code>とすると現在位置から次の単語の先頭まで選択、みたいなことは簡単に出来る様になっています。</p>

<h2 id="viwyiwdiwciw">viw/yiw/diw/ciw</h2>

<p>Vimコマンドの中でもよく使うキーバインドとして、</p>

<ul>
  <li><code>ciw</code>: 現在カーソルがある下の単語を消して書き直す</li>
</ul>

<p>というものがあります。単語のどの位置に居たとしてもその単語全体を消して書き直します。</p>

<p>同様に<code>yiw</code>なら単語をコピー、<code>diw</code>なら単語を削除です。</p>

<p><code>viw</code>は<code>v</code>でVisual Modeに入ってその後単語を選択した状態になります。</p>

<p>これらをvim_ahkでも出来るようになりました。</p>

<p>ちょっと本物との違いとして、
単語の末尾、をきちんと捉える方法が無いので、現在カーソルのある位置にある単語から次の単語の切れ目の前まで、を
選択したり削除したりするようになっています。</p>

<p>また、<code>単語</code>の単位がアプリによって違うためアプリによって選択される範囲が違ったりします。</p>

<h2 id="例">例</h2>

<p><code>|</code>の位置がカーソルの位置とする:</p>

<table>
  <thead>
    <tr>
      <th>状況</th>
      <th>選択範囲</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>abc e|fg　hij</code></td>
      <td><code>efg　</code></td>
    </tr>
    <tr>
      <td><code>print("a|bc")</code></td>
      <td><code>abc</code> (ワードパッド)、<code>("abc")</code> (メモ帳)</td>
    </tr>
    <tr>
      <td><code>abc/d|ef/ghi</code></td>
      <td><code>def</code> (ワードパッド)、 <code>abc/def/ghi</code> (メモ帳)</td>
    </tr>
  </tbody>
</table>

<p>こんな感じでワードパッドだと記号を区切りとして扱ってくれますがメモ帳だと
一部扱いが通常文字扱いになっていたりちょっと様子が違います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim_ahkに一時停止機能を追加]]></title>
    <link href="https://rcmdnk.com/blog/2021/09/24/computer-windows-autohotkey-vim/"/>
    <updated>2021-09-24T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/09/24/computer-windows-autohotkey-vim</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B008GXT6SK?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B008GXT6SK&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/61AU73nfrFL._SS200_.jpg" alt="PFU キーボード Happy Hacking Keyboard Professional2 Type-S 無刻印/白 PD-KB400WNS" /></a>
</div>

<p>Windows上でVimをEmulateするvim_ahkに
一時停止機能を追加しました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#vim_ahk" id="markdown-toc-vim_ahk">vim_ahk</a></li>
  <li><a href="#一時停止機能" id="markdown-toc-一時停止機能">一時停止機能</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="vim_ahk">vim_ahk</h2>

<p>vim_ahkはWindowsで
<a href="https://www.autohotkey.com/">AutoHotkey</a>
を使ってVim以外のアプリでもVimライクな動作を実現するツールです。</p>

<div class="github-widget" data-repo="rcmdnk/vim_ahk"></div>

<h2 id="一時停止機能">一時停止機能</h2>

<p>vim_ahkでは各アプリのショートカットなどとconflictするキーバインドを設定している可能性があります。</p>

<p>そういった場合、一時的にvim_ahkを無効にしてそのアプリのキーバインドを実行したい場合もあるかと思います。</p>

<p>そういった場合、vim_ahkを有効にしながらvim_ahkのショートカットキーと被るそのアプリ特有のキーバインドを使いたい場合もあるかと思います。</p>

<p>この様な状況に対応するため、一時的にvim_ahkを無効化するショートカットキーを追加しました。</p>

<p><i class="key">Ctrl</i>-<i class="key">Alt</i>-<i class="key">Shift</i>-<i class="key">s</i></p>

<p>で無効化、有効化(suspend/restart)をトグルします。</p>

<p>このショートカットキーはVimGroupに対応する、vim_ahkが有効なアプリに限り有効です。</p>

<p>このショートカットキーをメモ帳などvim_ahkが有効なアプリが最前面の状態で押すと、
トレイアイコンを有効にしていれば</p>

<p><img src="https://rcmdnk.com/images/post/20210925_disabled.png" alt="alt" class="pic" /></p>

<p>の様な無効化の状態になります。</p>

<p>この間は</p>

<p><i class="key">Ctrl</i>-<i class="key">Alt</i>-<i class="key">Shift</i>-<i class="key">s</i></p>

<p>以外のvim_ahkに関するキーバインドは無効になります。
(<i class="key">Ctrl</i>-<i class="key">Alt</i>-<i class="key">Shift</i>-<i class="key">v</i>で設定画面を表示するものだけは有効)</p>

<p>再び同じキーを押すと有効になります。</p>

<p><a href="https://github.com/rcmdnk/vim_ahk/releases/tag/v0.10.0">Release Release v0.10.0 · rcmdnk/vim_ahk</a></p>

<h2 id="まとめ">まとめ</h2>

<p>何かしらvim_ahkとconflictしてしまうキーバインドが出てしまう可能性もありますが、
これにより一時的に無効飲してあらゆるショートカットキーを使うことが出来るようになります。
(<i class="key">Ctrl</i>-<i class="key">Alt</i>-<i class="key">Shift</i>を使うようなものはめったに無い、という前提で。)</p>

<p>直接スクリプトをいじれば特定のアプリで必要の無いショートカットキーを変更することも出来ますが、
exeを使う場合や、あまりAutoHotkeyに詳しくない状態でconflictしてしまうキーバインドを一時的に無効にしてアプリのキーを使うことが出来るようになります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim_ahkで簡単にアプリケーション上で有効に出来るようにした]]></title>
    <link href="https://rcmdnk.com/blog/2021/05/02/windows-autohotkey-vim/"/>
    <updated>2021-05-02T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/05/02/windows-autohotkey-vim</id>
    <content type="html"><![CDATA[<p>WindowsでAutoHotkeyを使ってVimライクな動作をどこでも実現する
vim_ahkではこれまで有効にするアプリケーションを指定する方法を取っていましたが、
簡単にすべてのアプリケーション上でも有効に出来るようにしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#vim_ahk" id="markdown-toc-vim_ahk">vim_ahk</a></li>
  <li><a href="#これまでのアプリケーションの指定" id="markdown-toc-これまでのアプリケーションの指定">これまでのアプリケーションの指定</a></li>
  <li><a href="#新しいオプション" id="markdown-toc-新しいオプション">新しいオプション</a></li>
  <li><a href="#実装" id="markdown-toc-実装">実装</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="vim_ahk">vim_ahk</h2>

<div class="github-widget" data-repo="rcmdnk/vim_ahk"></div>

<p>vim_ahkはAutoHotkeyのスクリプトで、Windows上のどこでも
<i class="key">H</i>/<i class="key">J</i>/<i class="key">K</i>/<i class="key">L</i>
で移動したり<i class="key">Y</i>/<i class="key">P</i>でコピペしたりするVimチックな動きを
再現するためのスクリプトです。</p>

<p>exeファイルを直接使えばAutoHotkeyがインストールされてない環境でも動きます。</p>

<h2 id="これまでのアプリケーションの指定">これまでのアプリケーションの指定</h2>

<p>これまでは設定メニューの<code>Application</code>欄に記入されたアプリケーションのみの上で
有効になるようにしていました。</p>

<p>これは、ターミナル上やVim上で有効になってしまうとそこでオリジナルのVimが使えなくなってしまったりするためです。</p>

<p>後は基本的にはエディタ的な所での動作を想定してたので、Allow List的なもののが良いかな、と思ってそうしていました。</p>

<h2 id="新しいオプション">新しいオプション</h2>

<p>今回<code>Application list usage</code>というオプションを追加しました。</p>

<p><img src="https://rcmdnk.com/images/post/20210502_vimahksettings.png" alt="20210502_vimahksettings.png" class="pic" /></p>

<p>スクリプト内では<code>VimAppList</code>という変数が該当します。</p>

<p>これまでと同じ動作にするには<code>Allow List</code>を選びます(デフォルト設定)。</p>

<p>これ以外に<code>All</code>、<code>Deny List</code>という選択肢があって、
<code>All</code>を選択すれば<code>Application</code>のリストを無視してWindows内すべてのアプリケーション上で
vim_ahkが有効になります。</p>

<p>一方で<code>Deny List</code>を選択すれば<code>Application</code>のリストにあるもの以外で有効に出来ます。</p>

<h2 id="実装">実装</h2>

<p>AutoHotkeyのスクリプト内では通常</p>

<pre><code>#If WinActive("ahk_group XXX")
</code></pre>

<p>みたいな感じで現在最前面にあるウィンドウが指定のウィンドウ(もしくはウィンドウグループ)かどうかを確かめ、該当する場合にキー設定を有効にする、みたなことをします。</p>

<p>ここを</p>

<pre><code>#If Vim.IsVimGroup()
</code></pre>

<p>みたいな感じで関数にして、</p>

<pre><code>IsVimGroup(){
  if(this.Conf["VimAppList"]["val"] == "Allow List"){
    Return WinActive("ahk_group " . this.GroupName)
  }else if(this.Conf["VimAppList"]["val"] == "Deny List"){
    Return !WinActive("ahk_group " . this.GroupName)
  }
  Return True
}
</code></pre>

<p>の様な感じで状況に応じて扱いを変えてやることでやっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim_ahkでモードによってキャレットの太さを変える]]></title>
    <link href="https://rcmdnk.com/blog/2021/04/20/computer-vim-autohotkey/"/>
    <updated>2021-04-20T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/04/20/computer-vim-autohotkey</id>
    <content type="html"><![CDATA[<p>Vimの機能で編集時にノーマルモードとインサートモードでキャレットの形を変更する機能があります。</p>

<p>CLI版だとターミナルエミューレーターによって使えたり使えなかったりしますが、
GUI版だとノーマルモードだと文字にかぶる様なインジケーターで
インサートモードに入ると文字の間に入るようなのになったりアンダーバーになったり。</p>

<p>それをvim_ahkでなんとかできないか、ということで入れてみたもの。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#vim_ahk" id="markdown-toc-vim_ahk">vim_ahk</a></li>
  <li><a href="#キャレットサイズ" id="markdown-toc-キャレットサイズ">キャレットサイズ</a></li>
  <li><a href="#windowsの設定" id="markdown-toc-windowsの設定">Windowsの設定</a></li>
  <li><a href="#systemparameterinfoa" id="markdown-toc-systemparameterinfoa">SystemParameterInfoA</a></li>
  <li><a href="#有効にする方法" id="markdown-toc-有効にする方法">有効にする方法</a></li>
  <li><a href="#残っている問題" id="markdown-toc-残っている問題">残っている問題</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="vim_ahk">vim_ahk</h2>

<div class="github-widget" data-repo="rcmdnk/vim_ahk"></div>

<p>vim_ahkはWindows上でAutoHotkeyを使ってあらゆるアプリケーション上で
Vimライクな操作を実現するためのスクリプトです。</p>

<p>ノーマルモードやインサートモードといったモード変更をした上で
<i class="key">J</i><i class="key">K</i>で上下に動いたりすることができます。</p>

<h2 id="キャレットサイズ">キャレットサイズ</h2>

<p>キャレットというかテキストカーソルというか。</p>

<p>文字を書き込む時に書き込む位置に表示される四角形のインジケーター的なやつです。</p>

<p>Vimではモードが変わった際に、それをわかりやすくするため、
ノーマルモードでは位置の文字に被さるようなものになり、
インサートモードでは文字の左側に細いものだったり、アンダーバーにしたりする機能があります。</p>

<p>WindowsやMacのアプリ版だと恐らく最初から使えると思います。</p>

<p>ターミナル上のVimだとターミナルエミュレーターとの兼ね合いもあるので
その上で設定している人もいるかと。</p>

<p>それをvim_ahkでも実現したいな、というもの。</p>

<blockquote>
</blockquote>

<p>1年くらい前にIssueで出してくれたもので、確かに面白いな、と思ったもので
どうにかできないかと調べてました。</p>

<h2 id="windowsの設定">Windowsの設定</h2>

<p>調べてると、
Windows 10ではそもそもテキストカーソルを変更する設定が追加されてることに気づきました。</p>

<p><img src="https://rcmdnk.com/images/post/20210420_winsettings.jpg" alt="20210420_winsettings.jpg" class="pic" /></p>

<p>この設定は上の設定画面で変更すると再起動とかしないでも即座に反映されます。</p>

<p>なのでこいつの値をなんとか変更してやれば良いんじゃないかと。</p>

<p>で、こいつを決めてるレジストリ値を見つけ出し、
AutoHotkeyではレジストリを直接いじることも出来るので、
モード変更時に変えてやればよいだろうということで、</p>

<pre><code>RegWrite, REG_DWORD, HKEY_CURRENT_USER\Control Panel\Desktop, CaretWidth, 0xa
</code></pre>

<p>みたいなものを変更時にやってやれば良いんじゃないか、と。</p>

<p><strong>HKEY_CURRENT_USER\Control Panel\Desktop</strong>の下にある<strong>CaretWidth</strong>というレジストリ値が、
デフォルトでは0 (0x1)になっていて、これを10 (0xa)に変更する設定です。</p>

<p>これをノーマルモードに入る時に実行して、インサートモードでは最後を0x1にしてあげれば
できそう。</p>

<p>ということでやってみたのですが、実際レジストリの値は変更されるものの、
キャレットの太さは変わらず。</p>

<p>太くした状態で再ログインとかすると太く反映されますが、また再ログインするまで
変更は反映されません。</p>

<p>Windowsの設定のところでは即座に変わっていて、これも実際レジストリ値の変更を行っているので、
レジストリの値を反映した後に何らかそれを別の実際に使うところに反映するためのコマンドが必要な様です。</p>

<h2 id="systemparameterinfoa">SystemParameterInfoA</h2>

<p>直接レジストリの変更だけでは駄目だったようですが、
<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfoa">SystemParametersInfoA function</a>
というシステムワイドな設定変更をするものを見つけてくれた人がいました。</p>

<p>これを使った設定変更も作ってくれた人がいて、
これによってアプリ上でインサートモードからノーマルモードに移ると太いテキストカーソルに、
インサートモードに移ると細いカーソルに戻す設定を実現しました。</p>

<h2 id="有効にする方法">有効にする方法</h2>

<p>vim_ahk v0.9.0以上のバージョンを入れると</p>

<pre><code>Change to thick text caret when in normal mode
</code></pre>

<p>という設定項目がvim_ahkの設定の中に出てくるのでそれにチェックを入れます。</p>

<p><img src="https://rcmdnk.com/images/post/20210420_vimahksettings.jpg" alt="20210420_vimahksettings.jpg" class="pic" /></p>

<p>もしくはvim_ahkを他のスクリプトの中から呼んでいるならvim_ahkを読み込む前に
<code>VimChangeCaretWidth</code>の値を<code>1</code>に設定してください。</p>

<h2 id="残っている問題">残っている問題</h2>

<p>とりあえずそれっぽいものが出来たのですが、まだちょっと実用化が難しい状態です。</p>

<p>問題としては</p>

<ul>
  <li>特定のアプリ上でしか変更が反映されない
    <ul>
      <li>基本的にはWindowsネイティブなアプリのみが対象</li>
      <li>Wordpad, Word, OneNoteなど</li>
      <li>Evernoteなどに移ると常に元の太さのまま</li>
    </ul>
  </li>
  <li>一部のアプリでは太くなった状態(ノーマルモード)で移るとキャレットは太い状態になっているが、インサートモードに移ってもカーソルが変わらない
    <ul>
      <li>Wordpadでノーマルモードに入り、そのままメモ帳に移るとキャレットが太い状態のまま維持される</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><a href="https://github.com/rcmdnk/vim_ahk/issues/65">Issues on VimChangeCaretWidth · Issue #65 · rcmdnk/vim_ahk</a></p>
</blockquote>

<p>実際にやってみた様子:</p>

<p><img src="https://rcmdnk.com/images/post/20210420_vimahkcaret.gif" alt="20210420_vimahkcaret.gif" class="pic" /></p>

<p>Wordpad上ではモードを切り替えるごとにキャレットの太さが変わっているのがわかります。</p>

<p>ただ、太いママメモ帳に移るとモードを変えても太いままになります。</p>

<p>一方で、Evernoteなどでは太い状態で移ってもEvernote上では元の細い状態が維持されます。</p>

<p>このあたり、レジストリの変更とは少し状態が違うようで、
まだうまく反映しきれてない部分があるみたいです。</p>

<p>メモ帳などの上で設定は維持されるものの変更するための命令が効かないのもよくわからない点です。</p>

<p>もし何かわかる方がいたら教えていただけるとありがたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vieb: Electron製Vimライクな操作が出来るブラウザ]]></title>
    <link href="https://rcmdnk.com/blog/2021/04/19/computer-vim/"/>
    <updated>2021-04-19T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2021/04/19/computer-vim</id>
    <content type="html"><![CDATA[<p>ViebというElectronで作られたVimライクな操作が出来るブラウザについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#vieb" id="markdown-toc-vieb">Vieb</a></li>
  <li><a href="#他のブラウザとの違い" id="markdown-toc-他のブラウザとの違い">他のブラウザとの違い</a></li>
  <li><a href="#viebで出来ること" id="markdown-toc-viebで出来ること">Viebで出来ること</a></li>
  <li><a href="#vimライクなブラウザ" id="markdown-toc-vimライクなブラウザ">Vimライクなブラウザ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="vieb">Vieb</h2>

<p><a href="https://vieb.dev/">Vieb - Vim bindings for the web by design</a></p>

<div class="github-widget" data-repo="Jelmerro/Vieb"></div>

<p>ViebはElectron製のブラウザで、操作がVim的なキーバインディングになっています。</p>

<p>Windows、macOS、Linuxの環境で使うことができるマルチプラットフォームなアプリケーションです。</p>

<p>ソースコードはGitHubで公開されていて、GPL3.0のライセンスが付けられているOSSです。</p>

<h2 id="他のブラウザとの違い">他のブラウザとの違い</h2>

<p><img src="https://rcmdnk.com/images/post/20210419_vieb.png" alt="20210419_vieb.png" class="pic" /></p>

<p>基本的な機能としては他の一般的なブラウザと同じだと思います。
タブ機能なども備えています。
アドレスバー的なものが上にあってそこにURLを書き込めばページに移動できます。</p>

<p>一方で、一般的なブラウザを考えると、
まずマウスで操作するためのボタンなどが上部に全くありません。</p>

<p>操作は基本的にキーボードでVimライクに、ということで。</p>

<p>なんとなくターミナル上のブラウザ<a href="https://ja.wikipedia.org/wiki/W3m">w3m</a>
を思い出させる様な感じがしました。</p>

<p>一応マウスでもスクロールやリンクをクリックしたりなど通常のブラウジング作業はできますし、
右クリックで出てくるメニューで前のページに戻ったりタブを消したりすることができます。</p>

<h2 id="viebで出来ること">Viebで出来ること</h2>

<p>Viebで出来ることしては</p>

<ul>
  <li><i class="key">J</i>/<i class="key">K</i>で上下へスクロール</li>
  <li>その他タブの作成、削除、ブラウザバックなどの基本操作をすべてキーボードで(かつVimライクに)</li>
  <li>Windowの分割</li>
  <li>Follow mode (Hit a Hint)</li>
  <li>vimrcライクなviebrcでの設定管理</li>
</ul>

<p>などがあります。</p>

<p>Windowの分割、に関しては拡張機能などで実現しているブラウザもありますが、
Viebでは元から実装されていて、かつVimの様な間隔で分割を管理できる、移動が出来ます。</p>

<p><img src="https://rcmdnk.com/images/post/20210419_split.png" alt="20210419_split.png" class="pic" /></p>

<p>また、Vimライクな拡張機能でよくあるHit a Hint (<i class="key">F</i>などを押すとページ中のリンクに文字が割り当てられ、その文字キーを押すことでリンクに飛べるもの)的な機能が
Follow modeとして実装されています。</p>

<p><img src="https://rcmdnk.com/images/post/20210419_followmode.png" alt="20210419_followmode.png" class="pic" /></p>

<p>加えてこういった拡張機能で特に重要だと思うのが自分で自由にカスタマイズ出来る点で、
Viebではvimrc的な文法で設定が出来る<strong>viebrc</strong>というファイルで設定が出来るようになっています。</p>

<pre><code>set incsearch
noremap &lt;C-h&gt; &lt;:history&gt;
colorsehcheme default
</code></pre>

<p>の様に設定を<code>set</code>で指定したり<code>noremap</code>でキーバインディングを設定したりできます。</p>

<p><strong>viebrc</strong>はOSによって</p>

<ul>
  <li>Linux: <strong>~/.config/Vieb/</strong></li>
  <li>Windows: <em>*%APPDATA%\Vieb*</em></li>
  <li>Mac: <strong>~/Library/Application Support/Vieb/</strong></li>
</ul>

<p>の様な場所がデフォルトの場所です。</p>

<p>最初に<code>:mkviebrc full</code>とすると初期設定が上記の場所に<strong>viebrc</strong>として書き出されます。</p>

<p>また、helpページからChromeやFirefoxのデフォルトキーバインディングに合わせる様な設定をダウンロードして使うこともできます。</p>

<h2 id="vimライクなブラウザ">Vimライクなブラウザ</h2>

<p>ブラウザでVimライクな操作感を実現してくれたものとして
FirefoxのVimperatorというものがありました。</p>

<p>ただ、この拡張機能はFirefoxのアップデートにより、拡張機能からいじれるブラウザの機能が制限されたため使えなくなりました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/6134432512?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=6134432512&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41pP9qkUQrL._SS90_CR0,0,120,90_.jpg" alt="Vimperator" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/11/15/computer-firefox/">Firefox Quantum 57リリース: Vimperatorは無事死亡</a></div></li></ul>

<p>そこでcVimというChromeで使える拡張機能を使っていました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07TN1HBTG?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07TN1HBTG&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51xSDA7k3OL._SS90_CR0,0,120,90_.jpg" alt="HP 14インチ Chromebook HD タッチスクリーン ラップトップ PC (Intel Celeron N3350 最大2.4GHz、4GB RAM、32GB フラッシュメモリ、WiFi、HDカメラ、Bluetooth、最大10時間のバッテリー寿命、クロームOS、ブラック) (更新済み" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2020/06/11/computer-chrome-vim/">cVimがchromeウェブストアから消えた</a></div></li></ul>

<p>が、この拡張機能はすでに開発者が開発を止めていて、現在は自分でソースコードからコンパイルして
なんとか使える状態ですがこれもChromeのアップデートでいつ使えなくなるかわかりません。</p>

<p>ブラウザのセキュリティ性を上げるために拡張機能で出来ることに対する制限が強くなっていくなかで
こういったものはどんどん使えなくなっていくかもしれません。</p>

<p>VimperatorやcVimの良いところはコマンドモードやサービモードがVimライクなところや、
設定ファイルがvimrcの様な書き方ができ、色々とカスタマイズ出来るところでした。</p>

<p>他にもキーバインドだけを変更出来る様な拡張機能はちょこちょこありますが、
それであればAutoHotkeyやKarabiner-Elementで変更すれば十分であまり意味がありません。</p>

<p>そういった中でブラウザとして元からそういった機能を全面的に押し出している
Viebはかなり気になるブラウザ。</p>
]]></content>
  </entry>
  
</feed>
