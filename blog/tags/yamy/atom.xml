<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: yamy | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/yamy/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-16T20:03:29+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vimを使う上でのIME(日本語入力)の取り扱い]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/20/computer-mac-keyremap4macbook-vim/"/>
    <updated>2013-06-20T20:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/20/computer-mac-keyremap4macbook-vim</id>
    <content type="html"><![CDATA[<p>Vimで日本語入力をしているとノーマルモードに戻ったと時に
毎回IMEをoffにしてやらないとコマンドが打てません。
これはかなり面倒なのでノーマルモード移行時に
自動的にIMEがoffになるようにしたい所で、
その辺りのまとめというか、自分設定とついでに見つけた情報の寄せ集め。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="MacでKeyRemap4MacBookを使ってIMEをノーマルモードで必ずオフにする">MacでKeyRemap4MacBookを使ってIMEをノーマルモードで必ずオフにする</h1>

<p>Macでは<a href="http://rcmdnk.github.io/blog/tags/keyremap4macbook/">KeyRemap4MacBook</a>を使ったキーリマップで
ノーマルモードに戻るときに<i class='key'>ESC</i>/<i class='key'>ctrl</i>-<i class='key'>[</i>を押した際
IMEをオフにするようにしています。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>ESC to IME off (to English) + Esc + Esc<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appendix&gt;</span>Enable for all but HHK<span class="nt">&lt;/appendix&gt;</span>
</span><span class='line'>  <span class="nt">&lt;identifier&gt;</span>private.vim.ime_off_ESC<span class="nt">&lt;/identifier&gt;</span>
</span><span class='line'>  <span class="nt">&lt;only&gt;</span>TERMINAL, VI<span class="nt">&lt;/only&gt;</span>
</span><span class='line'>  <span class="nt">&lt;inputsource_only&gt;</span>JAPANESE<span class="nt">&lt;/inputsource_only&gt;</span>
</span><span class='line'>  <span class="nt">&lt;autogen&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>__KeyToKey__ KeyCode::ESCAPE, ModifierFlag::NONE,
</span><span class='line'>KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
</span><span class='line'>KeyCode::VK_CHANGE_INPUTSOURCE_JAPANESE,
</span><span class='line'>KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
</span><span class='line'>KeyCode::ESCAPE, KeyCode::ESCAPE
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/autogen&gt;</span>
</span><span class='line'><span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;item&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Control + BRACKET_LEFT to IME off (to English) + Esc + Esc<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;identifier&gt;</span>private.vim.ime_new<span class="nt">&lt;/identifier&gt;</span>
</span><span class='line'>  <span class="nt">&lt;only&gt;</span>TERMINAL, VI<span class="nt">&lt;/only&gt;</span>
</span><span class='line'>  <span class="nt">&lt;inputsource_only&gt;</span>JAPANESE<span class="nt">&lt;/inputsource_only&gt;</span>
</span><span class='line'>  <span class="nt">&lt;autogen&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>__KeyToKey__ KeyCode::BRACKET_LEFT,
</span><span class='line'>MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL|ModifierFlag::NONE,
</span><span class='line'>KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
</span><span class='line'>KeyCode::VK_CHANGE_INPUTSOURCE_JAPANESE,
</span><span class='line'>KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH,
</span><span class='line'>KeyCode::ESCAPE, KeyCode::ESCAPE
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/autogen&gt;</span>
</span><span class='line'><span class="nt">&lt;/item&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ターミナル(含iTerm)及びVim(含MacVim)上で有効になります。</p>

<p>最後に<i class='key'>ESC</i>を2回使っているのは文字を変換中の場合でも
一気に抜けるためです。
これだと本来のIME変換中の<i class='key'>ESC</i>の機能(変換中の文字を消すだけ)
が失われますが、1回でも消してIMEをオフにする、状態になって
中途半端なので取り敢えず2回に。</p>

<p>KeyRemap4MacBookでは<code>変換中</code>の状態を取る要素が(調べた限り)無いので、
どちらか好みの設定にする、ということで。</p>

<p>また、こういった設定を書いてある所で余り見かけませんが、
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;inputsource_only>JAPANESE&lt;/inputsource_only></span></code></pre></td></tr></table></div></figure></notextile></div>
を使うとIMEがON(日本語入力)の時だけ有効になります。</p>

<p>これはGNU screenと併用している時に絶対必要で、
これを外してしまうとGNU screenでコピーモードに入ろうと
<i class='key'>ctrl</i>-<i class='key'>[</i>を押してもすぐ<i class='key'>ESC</i>が押され終了することになり
コピーモードが使えなくなります。</p>

<p><i class='key'>ESC</i>1回設定なら特に問題が無いのですが、2回設定の場合は必須。</p>

<p>日本語に戻す際に
<code>英語</code><i class="icon-arrow-right"></i><code>日本語</code><i class="icon-arrow-right"></i><code>英語</code>
と言った周りくどいことをしてますが、
これはGoogle日本語入力等を使っていて、入力中に補完表示がある状態で
GNU screenのコピーモードに入ろうとプレフィクス+<i class='key'>ctrl</i>-<i class='key'>[</i>
を押してしまうと補完表示が残る様になってしまったのでその処置です。</p>

<p>IMEをオフにするには
<code>KeyCode::VK_CHANGE_INPUTSOURCE_ENGLISH</code>の代わりに
<code>KeyCode::JIS_EISUU</code>(USキーボード使用時にも使えます)でもOKです。
(VK_CHANGE_INPUTSOURCE_*と言うバーチャルキーを使ってみたかっただけ。)</p>

<h1 id="Windowsでyamyを使ってIMEをノーマルモードで必ずオフにする">Windowsでyamyを使ってIMEをノーマルモードで必ずオフにする</h1>

<p>Windowsでは<a href="http://rcmdnk.github.io/blog/tags/yamy/">yamy</a>
を使って同じ様な事をしています。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="For+Cygwin+{{{">For Cygwin {{{&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>window Cygwin /cygwin/ : Global
</span><span class='line'>  key A-v = RButton # Paste&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  # IL: IME on
</span><span class='line'>  # IC: IME inserting&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  key IL-~IC-Esc = $ToggleIME Esc # Make IME off, Exit insert mode
</span><span class='line'>  key IC-Esc = Esc # Stop inserting, Make IME off, Exit insert mode&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  key IL-*IC-C-LeftSquareBracket = Esc $ToggleIME Esc # Stop inserting, Make IME off, Exit insert mode&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="}}}">}}}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>window PuTTY /putty/ : Global</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>cygwin上のみで有効になる様な設定です。
yamyではIMEが有効である(<code>IL</code>)の状態に加え、入力中(<code>IC</code>)と言う状態を使えるので、
上の設定では</p>

<ul>
<li>IMEオンの状態で文字を入力中に<i class='key'>ESC</i>を押したら入力キャンセル(元々のESCの動き)</li>
<li>IMEオンの状態で文字を入力中でないときに<i class='key'>ESC</i>を押したらIMEをオフにしてESC(ノーマルモードへ)</li>
<li><i class='key'>ctrl</i>-<i class='key'>[</i>を押したら入力中でもどんな状態でも最初にESCで行動をキャンセルし、IMEをオフにしてESC(ノーマルモードへ)</li>
</ul>


<p>となっています。</p>

<p>ついでに最初の<i class='key'>Alt</i>-<i class='key'>v</i>の設定は、
このキーで右クリックをすることにより
<code>貼り付け</code>を出来る様にしてあります。
<code>cygwin</code>を<code>putty</code>に替えて、puttyの設定で右クリックが貼り付けになっていれば
puttyでも同じ事が出来ます。
(ただし、マウスカーソルはターミナル上に無いとカーソル下のウィンドウを選ぶ
だけなので注意。)</p>

<p>Macだと元々<i class='key'>Command</i>-<i class='key'>v</i>が貼り付けで<i class='key'>Control</i>と区別されているので
ターミナルなどでも貼り付けが使えますが、Windowsだと貼り付けキーが
使えないのでこれで代用を。</p>

<hr />

<p><em>2013/06/28 追記</em></p>

<p>下記ではGvimやPuttyでも同じ様な設定を使うため、
<code>Terminal</code>という新しいグループを作って
<code>Cygwin</code>、<code>Gvim</code>、<code>Putty</code>上で有効にするようにしています。
CUIの<code>vim.exe</code>を直接呼び出したWindowは
<code>ConsoleWindowClass</code>と言うクラスだと言う事がyamyの調査から確認できるのですが
そもそもIMEの変換が良く分からない動きをしたりして、
イマイチちゃんと設定できなかったのでコメントアウトしてあります。
(わざわざCUI版Vimを直接呼び出す必要も無いと思いますし。)</p>

<p>後、上のコードコメントがちょっとおかしいのと
<code>$ToggleIME</code>の前<code>Esc</code>が要らない(<code>$ToggleIME</code>で入力を中断してIME Offの動きをするので)点も下では治してあります。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="Terminal/Vim+{{{">Terminal/Vim {{{&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>keymap Terminal : Global
</span><span class='line'>  key A-v = RButton # Paste
</span><span class='line'>  # IL: IME on
</span><span class='line'>  # IC: IME inserting
</span><span class='line'>  key IL-~IC-Esc = $ToggleIME Esc # Make IME off, Exit insert mode
</span><span class='line'>  key IC-Esc = Esc # Stop inserting
</span><span class='line'>  key IL-*IC-C-LeftSquareBracket = $ToggleIME Esc # Stop inserting, Make IME off, Exit insert mode
</span><span class='line'>keymap Global&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="}}}">}}}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="For+Cygwin+{{{">For Cygwin {{{&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>window Cygwin /cygwin/ : Terminal&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="}}}">}}}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="For+Gvim+{{{">For Gvim {{{&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>window GVim /Vim/ : Terminal&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="window+CVim+/ConsoleWindowClass/+:+Terminal">window CVim /ConsoleWindowClass/ : Terminal&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="}}}">}}}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="For+PuTTY+{{{">For PuTTY {{{&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>window PuTTY /putty/ : Terminal&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1 id="}}}">}}}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>keymap Global</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>追記終わり</em></p>

<hr />

<h1 id="GVimで出来る設定">GVimで出来る設定</h1>

<p>GVimではCUI版と違い、IMEを制御出来る部分があり、
Vim側だけで詳細に制御出来ます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" ime setting
</span><span class='line'>if has('multi_byte_ime') || has('xim') || has('gui_macvim')
</span><span class='line'>  " Insert mode: lmap off, IME ON
</span><span class='line'>  set iminsert=2
</span><span class='line'>  " Serch mode: lmap off, IME ON
</span><span class='line'>  set imsearch=2
</span><span class='line'>  " Normal mode: IME off
</span><span class='line'>  inoremap &lt;silent> &lt;ESC> &lt;ESC>:set iminsert=0&lt;CR>
</span><span class='line'>endif</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>といった感じで<code>.vimrc</code>で設定すればインサートモードやサーチモードに入った時はIMEをONにして
ノーマルモードに戻るときにオフにします。</p>

<p>GVimの方は殆ど使わないので実際使ってみないと分からない事もあるんですが、
日本語関連のことだと普通のGVimやらMacVimだと上手く設定が効かなくて、
KaoriYa version (<a href="http://www.kaoriya.net/software/vim/">Windows</a>、
<a href="http://code.google.com/p/macvim-kaoriya/">Mac</a>)だと
効く、と言った話も見ました。</p>

<p>Ref:</p>

<blockquote><p><a href="http://vimwiki.net/?" title="iminsert">iminsert</a></p>

<p><a href="http://code.google.com/p/macvim-kaoriya/wiki/Readme#%e6%97%a5%e6%9c%ac%e8%aa%9e%e5%85%a5%e5%8a%9b(IM)%e8%87%aa%e5%8b%95%e3%82%aa%e3%83%b3/%e3%82%aa%e3%83%95">macvim-kaoriya:日本語入力(IM)自動オン/オフ</a></p></blockquote>

<h1 id="日本語固定モード">日本語固定モード</h1>

<p><a href="https://github.com/fuenor/im_control.vim">im_control.vim</a>
というプラグインを使ってIMEのオン/オフをより詳細に設定する方法が
<a href="https://sites.google.com/site/fudist/Home/vim-nihongo-ban">vim UTF-8 日本語版</a>
の中サイトの以下のページにに詳しくあります。基本的にはGVim専用。</p>

<blockquote><p><a href="https://sites.google.com/site/fudist/Home/vim-nihongo-ban/vim-japanese/ime-control">Vim/GVimで「日本語入力固定モード」を使用する</a></p></blockquote>

<p>Windows専用ですが、こんなプラグインも。</p>

<blockquote><p><a href="http://qiita.com/rbtnn/items/855a8dce0ff0a3ea26f2">Vimのノーマルモード中は自動的にIMEをOFFにする。（Windowsのみ）</a></p></blockquote>

<h1 id="Tera+Termでの制御シーケンスの使用">Tera Termでの制御シーケンスの使用</h1>

<p>普段Tera Termは使わないのですが
IMEの制御以外にもシーケンスを使った色々な設定が以下のサイトに詳しくあります。</p>

<blockquote><p><a href="http://ttssh2.sourceforge.jp/manual/ja/usage/tips/vim.html">vim からの制御シーケンスの使用例</a></p>

<p><a href="http://slashdot.jp/journal/522812/IME-%e5%88%b6%e5%be%a1">dodaの日記： IME 制御</a></p></blockquote>

<p>Tera Termを使ってない場合でもシーケンスを使った設定や使い方が参考になると思います。</p>

<h1 id="WindowsでAutoHotkeyを使う方法">WindowsでAutoHotkeyを使う方法</h1>

<p><a href="http://www.autohotkey.com/">Autohotkey</a>はちゃんと使ったことないですが
<a href="http://rcmdnk.github.io/blog/tags/yamy/">yamy</a>で
<i class='key'>Ctrl</i><i class="icon-arrow-exchange"></i>の交換でちょこちょこ不具合がるので
ちょっと他のリマップソフトも検討中のため、メモ。
下記のサイトには<code>imdisable</code>を
<code>挿入モード</code><i class="icon-arrow-exchange"></i><code>ノーマルモード</code>
変換の際に自動で変更する設定も載っています。</p>

<blockquote><p><a href="http://blog.blueblack.net/item_393">VimのノーマルモードでIMEを常時無効化する</a></p></blockquote>

<hr />

<p>2013/08/04 追記</p>

<p>AutoHotkeyを使い始めたので、AutoHotkeyでの方法を自分でも作ってみました:
<a href="/blog/2013/08/04/computer-windows-autohotkey/">Vimを使う上でのIME(日本語入力)の取り扱い with AutoHotKey</a></p>

<hr />

<h1 id="IMEの状態でカーソルの色を変更する">IMEの状態でカーソルの色を変更する</h1>

<p>GVim限定ですが、<code>CursorIM</code>というhightlighが定義されていて
通常の時の<code>CursorIM</code>と違う色を設定することでIMEの状態でカーソルの色を変えられます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if has('multi_byte_ime')
</span><span class='line'>  highlight Cursor guifg=NONE guibg=Green&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>highlight CursorIM guifg=NONE guibg=Purple
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h1 id="IMEのON/OFFをsyntaxで制御する">IMEのON/OFFをsyntaxで制御する</h1>

<p>vim-jpにこんな話もありました。</p>

<blockquote><p><a href="https://github.com/vim-jp/issues/issues/13">IMEのON/OFFをsyntaxで制御する</a></p></blockquote>

<p>以上!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim以外でVimする: Windows編]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/03/17/vim/"/>
    <updated>2013-03-17T05:37:00+01:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/03/17/vim</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/33746">Vim Advenvimt Calendar 2012</a> 107日目の記事です。
前回は@manga_osyoさんの<a href="http://d.hatena.ne.jp/osyo-manga/20130316/1363403701">quickrun.vim で make する</a>でした。</p>

<p>ブログ自体始めたばかりですが、よろしくお願いします。</p>

<p>Advenvimtの記事を見ていると、日常生活全てでVimを使わないと生きていけない人も居るようですが、
今回の記事では特にWindowsの中で、他のソフトから編集だけVimを呼んでみたり、
全くVimエディタとは関係のない所でVimっぽい感じで作業したりする方法を紹介して行きたいと思います。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Firefox/ThunderbirdでVim">Firefox/ThunderbirdでVim</h1>

<p>FirefoxやThunderbirdをブラウザやメーラーのメインとして使っていますが、
使ってる最大の理由として、簡単にテキスト入力などのためにVimを外部エディタを
呼び出せたり、また、Vimperatorといった、Vimライクな操作を可能にしてくれる
アドオンがあることです。
(Chromeにも大分出て来ましたが、Vimperatorでしか出来ないちょっと込み入った
ことを覚えてしまうとなかなか移る気にはなれません。)</p>

<p>これらについては、ちょっと無駄にページが長くなるのと今回のメインとは逸れるので、
<a href="/blog/2013/03/16/vim-firefox-thunderbird">こちらの投稿</a>に分けておきました。</p>

<p>絵がなくて寂しいので、Vimperatorのスクリーンショットだけ。</p>

<p><img src="/images/post/20130317_vimperator.jpg" alt="vimperator"></p>


<p>こんなかんじで、コマンドライン(Vimみたく<code>:</code>で入って一番下にコマンド欄が表示される)
を使えて<code>open</code>コマンド(<code>o</code>を押しただけで補完)でurlを開くのですがブックマークや履歴、
さらにGoogle Search Suggestionも
候補として表してくれます。</p>

<h1 id="yamyを使って全ての動きをVimライクに">yamyを使って全ての動きをVimライクに</h1>

<p><a href="http://sourceforge.jp/projects/yamy/"><p><img src="/images/WinApp/yamy.png" width="100" height="100" alt="Yet Another Mado tsukai no Yuutsu (yamy)"></p></a>
WindowsにしてもMacにしてもキーバインドを変更してる方は沢山居ると思いますが、
自分の環境ではWindowsでは<a href="http://sourceforge.jp/projects/yamy/">yamy</a>、
Macでは<a href="http://pqrs.org/macosx/keyremap4macbook/index.html.ja">KeyRemap4MacBook</a>
といったソフトでキーバインド変更を行なっています。</p>

<p>取り敢えず、これらを使う最大のモチベーションはVimエディター以外の所でも
Vimライクに動くことが出来るようにすることなので、今回はWindowsでつかている
yamyの設定を紹介したいと思います。
yamyの導入に関しては<a href="/blog/2013/03/13/yamy/">こちら</a>から。</p>

<p>yamy自体古いソフトで、最近アップデートもされてないので、
どれくらい需要があるかわかりませんが、
基本的にはWindowsで出来る動きをリマップしてるだけなので、
他のキーバインド変更ソフトでも同じような事ができると思います。</p>

<p>話がそれますが、つい先日、
<a href="https://sites.google.com/site/craftware/keyhac">keyhac</a>というpythonベースらしい
物も見つけたので、より複雑な事が出来るのかな、と思い試してみたい今日このごろ。</p>

<p>それは良いとして、設定ファイルとして<a href="https://github.com/rcmdnk/windows/blob/master/vimedit.mayu">vimedit.mayu</a>をダウンロードして読み込むことで、今回の設定をすぐに試すことが出来ます。
詳しくは、<a href="https://github.com/rcmdnk/windows">こちら</a>の方にまとめてみました。</p>

<p>簡単に説明すると</p>

<ul>
<li>どの場所でも<code>Alt-Ctrl-</code>+<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>によってカーソルを左下上右に動かせる</li>
<li>マウスやウィンドウも<code>Alt-Ctrl-</code>/<code>Alt+Shift-</code>+<code>y</code>,<code>u</code>,<code>i</code>,<code>o</code>(<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>の上のキー達)で左下上右に動かせる</li>
<li>ついでにクリックとかも出来る(<code>Alt-Ctrl-</code>+<code>n</code>/<code>p</code>で左/右クリック)</li>
<li>ホイール操作も(<code>Alt-Ctrl-</code>+<code>m</code>/<code>,</code>で下/上ホイール)</li>
<li>特定のアプリケーション上ではVim emulationを行える</li>
</ul>


<p>最後の物以外は、通常の場面全てで有効にしてあります。
<code>Alt-Ctrl-</code>と同時に3つボタンを押すようなショートカットキーなら既存のショートカットキー
とは殆ど競合しないし、<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>のためだけ様に左手で<code>Alt-Ctrl-</code>を押すのは
それ程面倒ではないと思います。</p>

<p>実際、Vimで編集してても、普通の文章を書いている時なんかだと、
ちょっと移動したいときは<code>A-C</code>を押して<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>で移動しています。
(これはVimの中のマップで行なっている人もいるかと思います。)</p>

<p>ただ、最近Macも使う様になったらいくつか(<code>Cmd+Ctrl-</code>での3つ押しとか)競合してて、そのうちまた考えなおそうか直さないか考え中です。(取り敢えず競合した相手の方を他に移したりしてますが。)</p>

<p>最後にあるVim emulationですが、常に有効にしておくと流石に面倒が起こるので(vim on vim...)、
取り敢えず上のファイル内ではThunderbird、メモ帳、TeraPadで有効にしてあります。
TeraPadでは矩形選択ができるソフト、ということで試してみました。</p>

<p>アプリケーションは<a href="/blog/2013/03/16/yamy4/">こちら</a>を参考にしていただければ
簡単に追加できるかと思います。</p>

<h1 id="Vim+emulation+with+yamy">Vim emulation with yamy</h1>

<p>Vim emulationの部分について、もう少し補足したいと思います。
Vimの様に<code>モード</code>を変化させてそれぞれで出来る事を変えています。</p>

<p><code>Insert Mode</code>が所謂Windowsの標準状態です。アプリケーション起動時の初期状態はこのModeです。</p>

<p><code>Normal Mode</code>はキーひとつ(<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>)で移動できたり
<code>w</code>で単語移動、<code>3j</code>で3行下がる、<code>gg</code>、<code>G</code>でトップ、ボトムに移動、
等出来るようにしてあります。
<code>Insert Mode</code>から<code>Esc</code>/<code>C-[</code>で入る事が出来ます。</p>

<p><code>Visual Mode</code>は、<code>Shift</code>+<code>移動</code>で通り道が選択されることを使っています。
<code>Normal Mode</code>から<code>v</code>、<code>S-v</code>、<code>C-v</code>で文字毎、行毎、矩形選択のモードに入ります。
矩形選択に対応してない場合は普通に文字毎の選択になります。
選択後に<code>y</code>や<code>d</code>を押すことでコピーしたりカットしたりできます。
勿論、それを<code>Normal Mode</code>で、<code>p</code>によって貼り付けられます。</p>

<p>一応<code>Command Line Mode</code>もどきも加えてありますが、
取り敢えず、<code>Normal Mode</code>で<code>:</code>を押した後、<code>w</code>や<code>q</code>を押すと、
ファイルの保存、終了、おまけとして<code>:h</code>でヘルプをだせる、という程度です。
<code>Command</code>といわれるほどのものはありません...</p>

<p>Windowsの機能をキーマップで変えてるだけに過ぎないので、
多少カットアンドペーストの部分で違う動きがあったり、
<code>.</code>コマンドは完全に固定の<code>1単語削除+貼り付け</code>だったり、
後、コマンド同様、マクロなんかなにそれ、状態なので、
常時使い、とまでは行きませんが、メーラーとかで軽くVimライクな
編集をしたいときには便利に使っています。
特にVisualモードで複数行選んで削除、他に移す、とか、簡単にショートカットキー
だけでは出来ないので嬉しい感じです。</p>

<p>ちょっとわかりづらいですが、デモンストレーションも作ってみました。</p>

<p><img src="/images/WinApp/YamyVimEmulation.gif" ></p>


<p>TeraPad上で、yamyを起動させてVimっぽい編集操作をしています。
途中で項目を反転表示させてるのは、<code>S-v</code>を使ってライン選択をしているわけです。</p>

<p>キーボード部分は<a href="http://cappuccino28.web.fc2.com/daikoukai/">ny_keydas</a>
と言うソフトを使わせて頂きました。
yamyからの出力部分と元の入力を両方捉えてしまうようで、<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>
と同時にカーソルキーも反応している様に見えていますが、文字は入力されずに
移動だけしているのは分かるかと思います。
後、これは日本語キーボードで表示されてますが、使っているのがUSキーボードなので、
記号部分とかよく見るとおかしいかもしれません。
まあ、各キーが詳細にどれが押されたか、はぱっと見わかりづらいですが、Vimを普段使ってる人達なら
なんとなく雰囲気でわかって頂けるかな、と。</p>

<!--
[LICEcap](http://www.cockos.com/licecap/)でキャプチャして、
[Giam](http://homepage3.nifty.com/furumizo/giamd.htm)で間を詰めたり編集したりしました。

[DesktopCam](http://soft.noniwa.net/DesktopCam/)で撮影しようとしたらny_keydasが移りませんでした。
[Camstudio](http://camstudio.org/)というソフトなら映ったのですが、
ちょっと数分でものすごいサイズになってしまって辞めました。(簡単にサイズ調整出来ると思いますが...)
まあgifを作りたいだけだったので、LICEcapなら最初から簡単にgifが作れるのでこれが一番簡単でした。
-->


<h1 id="最後に">最後に</h1>

<p>実用的なのは実は最初の<code>Alt-Ctrl-</code>使ってちょっと移動する、という方なんですが、
メールなんかだと相手の問に一つ一つ答える様なメールの時など、
切ったり貼ったりすることが多かったりするので
Emulationの方も結構重宝するかとおもいます。
まあ、外部エディタ立ち上げればいいじゃん、と言われればそれまですが...</p>

<p>今回のVim emulationの部分に関しては
<a href="http://d.hatena.ne.jp/tokorom/20080913/1221281204">窓使いの憂鬱でいろいろvi風キーバインドにしてみる</a>にある設定を参考にさせて頂きました。
随分昔にファイルだけ拾ってあったので、ファイルの中身の言葉で検索して見つけたのであれですが、おそらく本家はここだろうと。</p>

<p><a href="http://d.hatena.ne.jp/janus_wel/20091113/1258076024">vim な感覚で Windows Common Control を操作する mayu 設定</a>にも同じような事をやっている方がいらっしゃいました。
まだ詳しく見てないですが、取り入れてない機能があれば取り入れてアップデートしたいな、とは思っています。</p>

<p>Macでも、KeyRemap4MacBookを使って同じような事が出来ます。
こちらの方には最初からVimライクにする設定も入っているので、
簡単なことであればすぐに使えますし、
自分設定でも凝った設定もできるので
そのうち紹介したいと思います。</p>

<p>(<a href="/blog/2013/08/03/computer-windows-autohotkey/">Vim以外でVimする: Windows+AutoHotkey編</a>でAutoHotkey (or Standalone)でする方法も追加。)</p>

<p>次回は@ujihisaさんです。</p>

<ul>
<li><a href="http://vim-users.jp/2013/03/vim-advent-calendar-2012-ujihisa-6/">vitalのData.List.take_whileを例にvital開発の指南書</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox/ThunderbirdでVim]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/03/16/vim-firefox-thunderbird/"/>
    <updated>2013-03-16T17:22:00+01:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/03/16/vim-firefox-thunderbird</id>
    <content type="html"><![CDATA[<p><img src="/images/WinApp/Firefox.png"  with="100" height="100" title="" alt="">
<img src="/images/WinApp/Thunderbird.png"  with="100" height="100" title="" alt=""></p>

<p>普段はVimをエディタとして使っていますが、
どうしてもエディタ以外の所で書き込みをしなくてはいけなかったり、
アプリケーションを動かすときにマウスか、最低でもカーソルキーを使わないと
いけないことがあります。</p>

<p>Vimで<code>hjkl</code>で移動できたりその他もろもろの部分に慣れているとどうしても
他の物が面倒になってしまうので、なんとかVimライクに使えるようにしたいものです。</p>

<p>今回は、簡単にVimを呼び出したりVimライクにできるFirefoxとThunderbirdでの方法です。
Vimのエディタ以外は、Macとかでも共通のお話です。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="FirefoxからのVimの呼び出し">FirefoxからのVimの呼び出し</h1>

<p>Firefoxには
<a href="https://addons.mozilla.org/ja/firefox/addon/its-all-text/?src=search">It's All Text!</a>
と言うアドオンがあり、
これに好きなエディタを設定することで、テキストエリアの入力を好きなエディタで行う事が出来ます。</p>

<p><img src="/images/post/20130317_installtext.jpg" alt="installtext"></p>


<p>この様に、gvimを指定しておきます。、</p>

<p><img src="/images/post/20130317_installtext_textarea.jpg" alt="installtext_textarea"></p>


<p>すると、テキストエリアにマウスを持って行くと右下に<code>編集</code>というマークが出るのでそれをクリックします。</p>

<p><img src="/images/post/20130317_installtext_gvim.jpg" alt="installtext_gvim"></p>


<p>gvimが立ち上がるので、適当に入力して、<code>:wq</code>などで、<code>保存して閉じる</code>をします。
そうするとgvimで入力した文字が</p>

<p><img src="/images/post/20130317_installtext_insert.jpg" alt="installtext_insert"></p>


<p>この様に入力されます。</p>

<p>このアドオンでは、まず、テキストエリアの内容を元に一時ファイルを作り、それが書き換えれる度に
テキストエリアを更新する、と言う手順をとっているようです。</p>

<p>従って、上記の状態で再び<code>編集</code>を押せば、<code>It's All Text</code>が既に書かれたファイルが開かれますし、
<code>:w</code>で保存する度にテキストエリアも更新されます。</p>

<p>gvimを立ち上げた状態でテキストエリアを直接編集することもできますが、その変更はgvim側には反映されず、
その後、gvimで保存を行うとそちらで上書きされます。</p>

<p>普通にエディタを立ち上げているわけなので、編集途中で他のファイルへバックアップとして書きだす事も可能です。</p>

<p>特に、webインターフェイスを使ったブログなどを書いてる人は便利だと思います。</p>

<h1 id="FirefoxでVimperator">FirefoxでVimperator</h1>

<p><a href="http://www.vimperator.org/vimperator">Vimperator</a>はFirefoxでの動きをvimライクにしてくれるアドオンです。
これには<a href="http://atnd.org/events/34070">Vimperator Advent Calendar 2012</a>も開催されているので詳細は省きますが、
簡単に</p>

<ul>
<li>Vim同様Normalモード等、モードがある。</li>
<li>Vimと同じ文法でmapping等が出来る。(同じように<code>_vimperatorrc</code>(Windowsでのデフォルト)というファイルを作り設定を行う。</li>
<li>Normalモードでは<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>、<code>C-d</code>、<code>C-u</code>、<code>C-f</code>、<code>C-b</code>などでページを移動できる。勿論<code>gg</code>や<code>G</code>でtopに行ったり一番下に行ったりも出来る。</li>
<li>TextエリアをクリックすればInsertモードになるが、<code>gi</code>としてもページにテキストエリアがあればInsertモードに入り、いずれかのテキストエリアにフォーカスする。(<code>i</code>はデフォルトでは<code>ignore key</code>として、直後の一回だけのキー入力をVimperatorを無視したものとして入力出来るようにする。)</li>
<li><code>Esc</code>もしくは<code>C-[</code>でNormalモードに帰る。</li>
<li><code>:</code>でCommandモードに入り、取り敢えず困ったらhelp</li>
<li><code>:open url</code>とすればurlが開けますし、<code>:open keyword</code>とすれば
<code>keyword</code>を引数に設定された検索エンジンで検索結果を出す。</li>
<li>また、<code>keyword</code>を入力していく段階で補間でき、その候補も閲覧履歴、検索履歴、ブックマーク、検索エンジンのサジェスト、等を設定できる。</li>
</ul>


<p><img src="/images/post/20130317_vimperator.jpg" alt="vimperator"></p>


<p>他にもhint機能やcaretモード等、vim同様夢が広がります。</p>

<p>また、上であった外部エディタを、Vimperatorから設定することも出来て、</p>

<pre><code>set editor="C:/Program\\\ Files/vim/gvim.exe -f"
"set editor="gvim.exe  -f--remove-tab-silent"
</code></pre>

<p>としておくと(pathは適当に変えて下さい)<code>c-i</code>でgvimが立ち上がります。
また、環境設定からvimディレクトリにpathを通しておけば2番目の様に
いきなり<code>gvim.exe</code>を書いてもOKです。</p>

<p>ヘルプにもforkさせないよう、<code>-f</code>オプションを使えと書いてあるのでつけておきます。
<code>--remote-tab-silent</code>を指定しておけば、既にgvimが立ち上がってる場合には
新しいタブとして開きます。</p>

<h1 id="ThunderbirdでVimの呼び出し">ThunderbirdでVimの呼び出し</h1>

<p>Thunderbirdからも<a href="http://globs.org/download.php?lng=en">External Editor</a>
というアドオンを使うとメールの編集にVimを使うことが出来ます。
FirefoxのIt's All Textと同様、設定項目にgvimを入れますが、<code>-f</code>オプションを
加えて置いて下さい。
これで、作成画面で<code>ツール</code>から<code>外部エディタで編集</code>を選ぶか<code>C-e</code>で
gvimがたちががります。</p>

<h1 id="ThunderbirdでMuttator">ThunderbirdでMuttator</h1>

<p><a href="http://www.vimperator.org/muttator">Muttator</a>は、vimperatorの
Thunderbird用として開発されたものですが、何度かチャレンジして
どうしても使い切れなかったので未だにまともにつかったことがありません…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yamyを使ったWindowsでのキーバインドの変更 4: アプリケーション毎の設定]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/03/16/yamy4/"/>
    <updated>2013-03-16T10:34:00+01:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/03/16/yamy4</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/03/14/yamy3">前回</a>Windowの調査という機能について紹介しましたが、
今回はそれで調べた結果を元に、各アプリケーションごとに設定を変更する方法を見てみます。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<p>各アプリケーション毎の設定をするには、<code>window</code>という新たなキーマップを作ります。</p>

<pre><code>window キーマップ名 ウィンドウクラス名
window キーマップ名 ( ウィンドウクラス名 &amp;&amp; ウィンドウタイトル名 )
window キーマップ名 ( ウィンドウクラス名 || ウィンドウタイトル名 )
</code></pre>

<p>前回の調査でFirefoxのClass名と表示していたウィンドウのタイトル名は</p>

<ul>
<li>CLASS: C:\Program Files\Mozilla Firefox\firefox.exe:MozillaWindowClass</li>
<li>CLASS: C:\Program Files\Mozilla Firefox\firefox.exe:Mozilla Firefox スタートページ - Firefox</li>
</ul>


<p>となっていました。
このウィンドウクラス名等は<a href="http://mayu.sourceforge.net/mayu/doc/CUSTOMIZE-ja.html#regexp">正規表現</a>で
表現することが可能で、firefoxと言う表現が入るようなアプリケーションが他に無ければ、</p>

<pre><code>window FirefoxKeyMap /firefox.exe/ :Global
  key a = b
</code></pre>

<p>といったキーマップを作れば、Firefox上だけで<code>a</code>を入力した時<code>b</code>になります。</p>

<p>Firefoxの場合はタイトル名が各ページのタイトル名になるので、上記スタートページだけに適用したければ</p>

<pre><code>window firefoxstat (/firefox.exe/ &amp;&amp; /Mozilla Firefox スタートページ - Firefox/ ) : Global
  key a = b
</code></pre>

<p>とすれば、このスタートページのみに使えるキーマップになります。
Firefox上でも他のサイトでは<code>a</code>は<code>a</code>になります。
ですので、サイトごとにキーマップを使い分ける事も可能になるわけです。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yamyを使ったWindowsでのキーバインドの変更 3: キー設定]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/03/14/yamy3/"/>
    <updated>2013-03-14T03:09:00+01:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/03/14/yamy3</id>
    <content type="html"><![CDATA[<table  border="0" cellpadding="5" style="border:none"><tr><td style="border:none;text-align:left"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXZ0VC/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" target="_top">PFU Happy Hacking Keyboard Professional2 墨 英語配列 静電容量無接点 USBキーボード Nキーロールオーバー UNIX配列 WINDOWS/MAC両対応 ブラック PD-KB400B</a></td></tr><tr><td style="border:none"><table  border="0" cellpadding="0" style="border:none"><tr><td valign="top" style="border:none"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXZ0VC/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" target="_top"><img src="http://ecx.images-amazon.com/images/I/41WFYKNEMPL._SL160_.jpg" border="0" style="margin-right:10px" /></a></td><td valign="top" style="border:none;text-align:left"><div class="kaerebalink-detail" style="margin-bottom:5px;"> PFU 2006-03-23</div><div class="kaerebalink-salesranking" style="margin-bottom:5px">売り上げランキング : 2291</div><table style="border:none;margin-top:10px"><tr><td style="border:none;text-align:left;"><div class="shoplinkamazon" style="margin-right:5px"><a href="http://www.amazon.co.jp/gp/search?keywords=PD-KB400B&__mk_ja_JP=%83J%83%5E%83J%83i&tag=rcmdnk0c-22" rel="nofollow" target="_blank" title="アマゾン" >Amazonで見る</a></div><div class="shoplinkrakuten" style="margin-right:5px"><a href="http://hb.afl.rakuten.co.jp/hgc/111f634c.5fb25e94.111f634d.1a56ae16/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FPD-KB400B%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F" rel="nofollow" target="_blank" title="楽天市場" >楽天市場で見る</a></div></td><td style="vertical-align:bottom;padding-left:10px;font-size:x-small;border:none">by <a href="http://kaereba.com" target="_blank">カエレバ</a></td></tr></table></font></td></tr></table></td></tr></table>


<p>現在Happy Hacking Keyboard (HHK) Professional2(英字配列)をメインのキーボードとして使ってるんですが、
このキーボードにはちょっと特殊なキーがついているので、<code>104.mayu</code>だけでは
定義できていないキーがあります。
今回はそれらのキーを定義する方法と、実際どう使われているか調べる方法についてです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="HHKのダイヤモンドキー">HHKのダイヤモンドキー</h1>

<p><img src="/images/post/20130314_hhk.jpg" ></p>

<p>この様にHHKには◇なマークがついたキーが付いていて、
Windowsの場合はWinキー、Macの場合はCommandキーにして使ったりします
(キーボードの後ろにスイッチが付いていて、Altと入れ替えたり好みに設定できたりもします)。</p>

<p>ちなみに、このキーの正式な呼び方が未だに分かりません。
(公式の説明でも◇キーと書いてあったりWindowsの設定ではWinキー、
MacではCommandキー、とそのまま書いてあったりするので。)</p>

<p>ともかく、これらのキー番号を調べてyamyの中で使える様に
キーを定義してあげます。</p>

<h1 id="キー番号を調べる">キー番号を調べる</h1>

<p><img class="left" src="/images/post/20130314_yamy.png"></p>

<p>yamyアイコンを右クリックして<code>調査</code>をクリックします。
すると、このような画面が出てくるので、<code>スキャンコードの調査</code>の枠を一度クリックした後、
適当にキーボードを叩いてみます。</p>

<br class="clearBoth">


<p><img src="/images/post/20130314_hhk0.png" title="" alt=""></p>

<p>そうするとしたのログに、各キーボードの番号とそれがyamyでなんという名前で定義されているかが表示されます。
ここでは、<code>a</code>は<code>A</code>と定義されていますが、その後の左右◇は定義されていないことが分かります。
(それぞれの前の<code>D-</code>、<code>U-</code>はキーボードを押した、離した、で、<code>L-Button</code>とあるのは左クリックです。)</p>

<h1 id="キーを定義する">キーを定義する</h1>

<p>yamyフォルダにある<code>104.mayu</code>などを見れば分かりますが、<code>A</code>は、</p>

<pre><code>def key A = 0x1e
</code></pre>

<p>と定義されています。
これに従って自分の設定ファイルに左右◇を定義してあげます。</p>

<pre><code># Happy Hacking Keyboard (HHK) key definition
def key LD = E0-0x7b
def key RD = 0x79
</code></pre>

<p>この設定ファイルを読み込んでやるとこの様に<code>LD</code>、<code>RD</code>されています。</p>

<p><img src="/images/post/20130314_hhk1.png" title="" alt=""></p>

<p>こうすることによって、以下で</p>

<pre><code># Left Meta key to Alt (at SW5=Off)
mod alt += LD
key *LD = *LAlt

# Right Meta key to Win key
mod Windows += RD
key *RD = *RWindows
</code></pre>

<p>と言った定義が可能になります。</p>

<h1 id="仮想キーの調査">仮想キーの調査</h1>

<p>調査windowの右側に<code>仮想キーの調査</code>と言うものがありますが、ここをクリックしてから
キーを押すと、実際にyamyでどのように定義されているか調査することが出来ます。
ここでは、</p>

<pre><code>key a = b
</code></pre>

<p>を定義したファイルを読み込んで調査してみます。</p>

<p><img src="/images/post/20130314_yamy0.png" title="" alt=""></p>

<p>まず、<code>スキャンコードの調査</code>をクリックした後、<code>a</code>、<code>b</code>、<code>C-a</code>、<code>C-b</code>を押しています。
その後、<code>仮想キーの調査</code>をクリックして、同じく<code>a</code>、<code>b</code>、<code>C-a</code>、<code>C-b</code>を押しています。
見て分かる様に、最初の<code>a</code>を押した所が、仮想キーでは<code>b</code>として認識されています。
しかし、下で、<code>Ctontrol</code>と同時に押したときは<code>C-a</code>としてそのまま認識されていることが分かります。</p>

<h1 id="+a+id=+yamy_window_search+>Windowの調査+/a>"><a id="yamy_window_search">Windowの調査</a></h1>

<p>調査のwindowを使ったので、ついでにウィンドウの調査も説明していきます。
yamyではアプリケーション毎に仮想キーを定義してあげることも出来るのですが、
その時にウィンドウのクラス名とタイトル名が必要になります。
これを調査するには、</p>

<p><img src="/images/post/20130314_yamy1.png" title="" alt=""></p>

<p>この様に、<code>ウィンドウの調査</code>にあるターゲットをドラッグして知りたいアプリケーションの
ウィンドウまで持っていきます
ここではFirefoxのウィンドウを調べました。ログにはyamyの項目やExplorerの項目がありますが、
これはFirefoxまでにたどり着くまでに出てきたものです。
最後の行を見ると、<code>CLASS</code>、<code>TITLE</code>とある行がありますので、これをメモっておくと後で
各アプリケーション用の定義をする時に使えます。</p>

<p>というわけで、yamyについては今回は以上です。</p>

<h1 id="新しいHHKが欲しい">新しいHHKが欲しい</h1>

<p>yamyとは全く関係無いですが、
久しぶりにHHKをググってみたら新しいType-Sと言うものが発売されていました。
(というか２年くらい前なんで恐ろしいほどスルーしてたことになります...)</p>

<table  border="0" cellpadding="5" style="border:none"><tr><td style="border:none;text-align:left"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008GXT6SK/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" target="_top">Happy Hacking Keyboard Professional2 Type-S 白／無刻印（英語配列）</a></td></tr><tr><td style="border:none"><table  border="0" cellpadding="0" style="border:none"><tr><td valign="top" style="border:none"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008GXT6SK/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" target="_top"><img src="http://ecx.images-amazon.com/images/I/411QSwWvcuL._SL160_.jpg" border="0" style="margin-right:10px" /></a></td><td valign="top" style="border:none;text-align:left"><div class="kaerebalink-detail" style="margin-bottom:5px;"> PFU </div><div class="kaerebalink-salesranking" style="margin-bottom:5px">売り上げランキング : 31088</div><table style="border:none;margin-top:10px"><tr><td style="border:none;text-align:left;"><div class="shoplinkamazon" style="margin-right:5px"><a href="http://www.amazon.co.jp/gp/search?keywords=Happy%20Hacking%20Keyboard%20Professional2%20Type-S&__mk_ja_JP=%83J%83%5E%83J%83i&tag=rcmdnk0c-22" rel="nofollow" target="_blank" title="アマゾン" >Amazonで見る</a></div><div class="shoplinkrakuten" style="margin-right:5px"><a href="http://hb.afl.rakuten.co.jp/hgc/111f634c.5fb25e94.111f634d.1a56ae16/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FHappy%2520Hacking%2520Keyboard%2520Professional2%2520Type-S%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F" rel="nofollow" target="_blank" title="楽天市場" >楽天市場で見る</a></div></td><td style="vertical-align:bottom;padding-left:10px;font-size:x-small;border:none">by <a href="http://kaereba.com" target="_blank">カエレバ</a></td></tr></table></font></td></tr></table></td></tr></table>


<p>実際に触ってみないことにはなんともわからないのですが、持っている人の感想とかを見ていると、
特に静かになっている、と言う部分に惹かれます。</p>

<p>最近(と言ってもこれも２年位前からですが)Macを使う様になって、
Mac純正のキーボードが薄くて音が小さくて良い感じなのでちょっと惹かれてたわけですが、
やっぱり余計な物が付いてないのと、一旦慣れると叩き心地が忘れられないのでHHKをMacでも使っています。
たまに自分でもうるさいな、と思う時があるので、その点が改善されてるのは嬉しいところです。
(キーが軽くなり過ぎると微妙なのかもしれませんが、多分慣れでどうにでもなるのかな、と。)</p>

<p>ただ、今の時点で発売されているのが全て白で、日本語刻印有り、英語刻印あり、無し、だけなんですね。</p>

<p>今は、黒の英語、刻印有り、を使ってるんですが、白だとどうしても汚れが目立つのと、刻印有りだと
刻印がうるさい感じになるので、やっぱり黒の方が好きです。</p>

<p>黒で刻印有りだと、遠目からは刻印無い感じでスッキリしてて素敵です(たまに文字ないじゃん?と突っ込まれて良く見せたり)。
刻印無しだと流石にやり過ぎ感がある感じが...</p>

<p>でも、白にするならいっそ刻印無しの方が潔くて良いので、白なら刻印無しが欲しいところ。</p>

<p>しかし、3万とな...</p>

<p>Liteだと5千円もしないわけですが...</p>

<table  border="0" cellpadding="5" style="border:none"><tr><td style="border:none;text-align:left"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXXEWE/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" target="_top">PFU Happy Hacking Keyboard Lite2 日本語配列かな印字なし USBキーボード ブラック PD-KB220B/U</a></td></tr><tr><td style="border:none"><table  border="0" cellpadding="0" style="border:none"><tr><td valign="top" style="border:none"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EXXEWE/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" target="_top"><img src="http://ecx.images-amazon.com/images/I/21W0Wvz00FL._SL160_.jpg" border="0" style="margin-right:10px" /></a></td><td valign="top" style="border:none;text-align:left"><div class="kaerebalink-detail" style="margin-bottom:5px;"> PFU 2004-06-17</div><div class="kaerebalink-salesranking" style="margin-bottom:5px">売り上げランキング : 1565</div><table style="border:none;margin-top:10px"><tr><td style="border:none;text-align:left;"><div class="shoplinkamazon" style="margin-right:5px"><a href="http://www.amazon.co.jp/gp/search?keywords=PD-KB220B%2FU&__mk_ja_JP=%83J%83%5E%83J%83i&tag=rcmdnk0c-22" rel="nofollow" target="_blank" title="アマゾン" >Amazonで見る</a></div><div class="shoplinkrakuten" style="margin-right:5px"><a href="http://hb.afl.rakuten.co.jp/hgc/111f634c.5fb25e94.111f634d.1a56ae16/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FPD-KB220B%252FU%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F" rel="nofollow" target="_blank" title="楽天市場" >楽天市場で見る</a></div></td><td style="vertical-align:bottom;padding-left:10px;font-size:x-small;border:none">by <a href="http://kaereba.com" target="_blank">カエレバ</a></td></tr></table></font></td></tr></table></td></tr></table>

]]></content>
  </entry>
  
</feed>
