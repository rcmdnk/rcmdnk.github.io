<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: coLinux | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/colinux/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-02T18:18:21+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[coLinuxのインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/07/07/computer-windows-colinux-cygwin/"/>
    <updated>2013-07-07T15:26:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/07/07/computer-windows-colinux-cygwin</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881664875/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/516NNAVFW6L._SL160_.jpg" border="0"></a></p>

<p>Octopressで記事が増えるに連れてCygwinの中で<code>rake generate</code>にかかる時間が
馬鹿にならなくなって来たのでなんとかならないものかと思い、
今更ながらCooperative Linux (coLinux)を入れてみました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Cygwinの遅さ">Cygwinの遅さ</h1>

<p>Cygwinは立ち上げ時やTab補完時に異常に遅いな、と思っていましたが、これは
<code>bash_completion</code>が遅いせいでした。
これは
<code>/etc/profile.d/bash_completion.sh</code>を消してしまうか、もしくは
最初の行に<code>return</code>を追加して実際に<code>bash_completion</code>部分を読み込ませない様に
することで避ける事が出来ます。
これで立ち上げ時と、Tab補完の時の待ち時間が劇的に早くなります。</p>

<p>Cygwinを使う場合は少なくとも<code>bash_completion</code>は読み込まないようにしておいた
方が良いと思います。
(使っているのが古いPCなせいもありますが...Linux使っている時に
それなりに新しいマシンでも結構遅くするのでなるべく切ってます。)</p>

<p>上記の事は回避出来るのですが、
さらにCygwinはfork()が古い形式のfork()の様に動作するために
makeで子プロセスを沢山生むような場合に異常に遅くなる、とのことです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup><sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>。</p>

<p>実際、ちょっとした作業を行う分には<code>bash_completion</code>を除くだけでかなり快適に
使えますが、Octopressの記事を<code>rake generate</code>した時など、記事がこのブログほどでも
結構な時間がかかる様になってきました。</p>

<p>スペックが違うとはいえ、Macで行うときの数倍かかってちょっと見過ごせなくなって来たので
なんとかならないものかということでcoLinuxを入れてみました。</p>

<h1 id="coLinux">coLinux</h1>

<p><a href="http://www.colinux.org/">coLinux</a>
はWindows上で動かす事が出来るLinuxカーネルで
coLinuxはCygwinと違い｢本物｣のLinuxです。</p>

<p>VMWareも同じようにLinuxを動かす事が出来ますが、
coLinuxの方が軽い様なのと、Windowsサービスへの登録が
最初からサポートされてるのでcoLinuxにしました<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup><sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<p>他にも</p>

<ul>
<li><a href="http://atratus.org/">Atratus</a></li>
<li><a href="http://www.andlinux.org/">andLinux</a></li>
<li><a href="http://www.mingw.org/wiki/MSYS">MSYS+MinGW</a></li>
</ul>


<p>等も考えましたが、
MinGWはもともとCygwinからフォークしたものですが、
色々やろうとして出来ないことが多かったので駄目。</p>

<p>andLinuxはcoLinuxのインストールを簡単にしたバージョン(と思ってる)なので
取り敢えずcoLinuxを入れれば良いか、と。</p>

<p>Atratusに関しては新しい物なので今後に期待ですが、まだあまり使える物ではありませんでした。</p>

<p>ということで以下、今回のcoLinuxをインストールした手順です(インストールしたのは
共に32bitのvistaと7)。</p>

<h1 id="coLinuxのインストール">coLinuxのインストール</h1>

<h2 id="必要パッケージのインストール">必要パッケージのインストール</h2>

<p><a href="http://www.colinux.org/">coLinux</a>のページから
<a href="http://sourceforge.net/projects/colinux/files/">Downloads</a>ページへ行き
一番新しいインストーラーをダウンロード
(この時は<code>0.7.9-linux-2.6.33.7/coLinux-0.7.9.exe</code>)。</p>

<p>インストーラーを実行して</p>

<ul>
<li><code>Choose Components</code>のところでは初期状態のママ全てチェック付けた状態</li>
<li>Destination Folderは空白があるとやっかいなので<code>C:\coLinux</code>に変更</li>
<li>Obtain a coLinux root file system imageでは古いものしか選べないため、
後で別にダウンロードするので<code>No download</code>のまま</li>
</ul>


<p>これで一旦ウェブページに戻り、先ほどの
<a href="http://sourceforge.net/projects/colinux/files/">Downloads</a>ページへ行き、
<a href="http://sourceforge.net/projects/colinux/files/Images%202.6.x%20Debian/">Images 2.6.x Debian</a>
から<code>Debian 6.0 Squeeze</code>(<code>Debian-6.0.1-squeeze.7z</code>)をダウンロード<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>。</p>

<p>この<code>7z</code>ファイルを解凍するためのソフトがない場合は<a href="http://sevenzip.sourceforge.jp/">7-Zip</a>
などをインストールしてファイルを解凍します。</p>

<p>出てきたファイルを先ほど<code>coLinux</code>をインストールしたディレクトリに移動します。</p>

<p>Debianのこのバージョンだと2GB程のシステムイメージ(<code>rootfs_2gb.img</code>)になります。</p>

<h2 id="confファイル">confファイル</h2>

<p>起動用のconfファイル(解凍したときに出てきた<code>squeeze.conf</code>)を以下の様に修正します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>squeeze.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>kernel=vmlinux
</span><span class='line'>cobd0=&quot;rootfs_2gb.img&quot;
</span><span class='line'>cobd1=&quot;swap_128.img&quot;
</span><span class='line'>root=/dev/cobd0
</span><span class='line'>ro
</span><span class='line'>initrd=initrd.gz
</span><span class='line'>mem=128
</span><span class='line'>eth0=tuntap
</span><span class='line'>cofs0=C:\
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>eth0=slirp</code>だったところを<code>tuntap</code>へ、最後にWindows領域をマウントするために
<code>cofs0</code>の値をを設定しておきます。</p>

<h2 id="最初のテスト起動">最初のテスト起動</h2>

<p>ここで一回立ち上げて見ます。
先ほど解凍した中にあった、<code>squeeze.bat</code>をダブルクリックで立ち上げます。</p>

<p>もしくはコマンドプロンプトから</p>

<pre><code>&gt; cd C:\coLinux
&gt; colinux-daemon -t nt @squeeze.conf
</code></pre>

<p>とするか、coLinuxフォルダにある<code>colinux-daemon.exe</code>のショートカットを作り、
<code>colinux-daemon-debian.exe</code>等と名前を変更して、
プロパティから<code>リンク先</code>の欄を</p>

<pre><code>C:\coLinux\colinux-daemon.exe -t nt @squeeze.conf
</code></pre>

<p>として起動してみます(全てやってることは一緒です)(-t ntは余計なコマンドプロンプトを立ち上げないオプション)。</p>

<p>上手く立ち上がらない時はimgのパスや名前が間違ってる可能性があります。</p>

<p>立ち上がってloginを聞かれたら<code>root</code>でログインします。
初期状態はパスワード無しで、ユーザー名に<code>root</code>を入れるだけでログインできます。</p>

<h2 id="ユーザー設定">ユーザー設定</h2>

<p>取り敢えずrootのパスワードを変更</p>

<pre><code># passwd
</code></pre>

<p>続いてユーザーを作成</p>

<pre><code># adduser USER
</code></pre>

<p>Windowsと同じ名前のユーザーを1つ作っておきました。</p>

<h2 id="ネットワーク設定">ネットワーク設定</h2>

<p>まず、一旦Windows側でネットワークの設定を行います<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup>。</p>

<p>コントロールパネルから<code>ネットワーク接続</code>のページヘ行きます<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup>。
ここまで行っていると<code>ネットワーク接続</code>のページに<code>ローカルエリア接続3</code>
(数字はこれまで作ったローカルエリア接続の数による), <code>TAP-Win32 Adapter V8 (coLinux)</code>
と言う項目があるはずです。
これを扱いやすいように名前を<code>tap</code>等と変更しておきます。</p>

<p>次に、普段使っているネットワーク接続(ローカルエリア接続orワイヤレスネットワーク接続、等)
のプロパティ開き、共有タブへ行き、
<code>ネットワークのほかのユーザーに、このコンピューターのインターネットをとおして接続を許可する</code>
の項目にチェックし、下の<code>ホームネットワーク接続</code>の項目から先ほど名前を変更した
<code>tap</code>を選択します。</p>

<p>今度は<code>tap</code>のプロパティを開き、<code>TCP/IPv4</code>を開きます。
先ほどの共有設定がちゃんと行われていると、<code>次のIPアドレスを使う</code>にチェックが入り、</p>

<ul>
<li>IPアドレス: 192.168.137.1</li>
<li>サブネットマスク: 255.255.255.0</li>
</ul>


<p>の様になってるかと思います。(IPアドレスの137の部分はネットワーク環境によります。
ここで他のネットワークで使われている値以外の物を使用しなくてはいけないので、
もし値が他で使われているようなら適時変更します。)
このIPアドレスの値はメモしておきます。</p>

<p>ここまで来たらcoLinuxに戻り、
<code>/etc/network/interfaces</code>を
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><code>/etc/network/interfaces</code></span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 192.168.137.2
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.137.1</span></code></pre></td></tr></table></div></figure></notextile></div>
とします。<code>137</code>の部分は先ほどメモしたものと同じ様に。</p>

<p>設定が終わったらネットワークを再起動します。</p>

<pre><code># /etc/init.d/networking restart
</code></pre>

<p>これで</p>

<pre><code># ping google.com
</code></pre>

<p>などして反応がありそうならOKです。</p>

<h2 id="色々パッケージをインストール">色々パッケージをインストール</h2>

<p>ネットワークが繋がる様になったので、<code>apt-get</code>でパッケージをインストールしていきます。</p>

<pre><code># apt-get update
# apt-get upgrade
</code></pre>

<p>でローカルにあるリストと既にインストールされているパッケージを最新に。</p>

<p>差し当たり必要そうなものとして</p>

<pre><code># apt-get install ssh sudo less bc apt-file
</code></pre>

<p>vim等は<code>apt-get</code>だと古いので別途後でインストール。</p>

<h2 id="sudoerに登録">sudoerに登録</h2>

<p>sudoを入れたので、自分をsudoerに登録しておきます。</p>

<pre><code># /usr/sbin/visudo
USER ALL=(ALL) ALL
</code></pre>

<p>と、自分(USERを自分のアカウントへ)へ全権を使えるようにしておきました。</p>

<h2 id="sshの確認">sshの確認</h2>

<p>上でsshを入れたのでsshサーバーが走っているはずです。
試しに</p>

<pre><code># ssh localhost
</code></pre>

<p>で自分のところへssh出来る事を確認。
出来たら、
Puttyから接続してみます。
coLinuxを動かしたままでPutty(cygwinからでも良いですが)から
先ほどの<code>address</code>と同じ192.168.137.2へ接続してみます。</p>

<p>上で加えたユーザーとしてログインできればOKです。</p>

<h2 id="coLinuxをサービスへ登録">coLinuxをサービスへ登録</h2>

<p>ここまで来たらcoLinuxのプロンプトは邪魔なので、サービスへ登録して
毎回Windows起動時に自動的にバックグラウンドで走る様にします。</p>

<p>ここで一度PuttyやcoLinuxを止めておきます。</p>

<p>coLinuxは</p>

<pre><code># shutdown -h now
</code></pre>

<p>などとして止めます。</p>

<p>コマンドプロンプトを開いて</p>

<pre><code>&gt; cd \coLinux
&gt; colinux-daemon.exe @squeeze.conf --install-service debian
</code></pre>

<p>登録ができたら、コンピュータを右クリックなどして<code>コンピューターの管理</code>を開き、
サービスの項目に<code>debian</code>があることを確認します<sup id='fnref:9'><a href='#fn:9' rel='footnote'>9</a></sup> 。</p>

<p>これをダブルクリックで開いて<code>スタートアップの種類</code>を<code>自動</code>もしくは
他の立ち上げの妨げにしたくなければ<code>自動(遅延開始)</code>にします。
これで適用して、開始ボタンを押して開始してみます。</p>

<p>開始出来たらもう一度Puttyで接続してみます。sshでログインできれば
バックグラウンドでcoLinuxが正常に動いていまうす。
今後はcoLinuxを直接立ち上げずにバックグラウンドで起動して
Putty等でsshログインして使う事になります。</p>

<h2 id="Windows領域をマウント">Windows領域をマウント</h2>

<p>今の状態だと、Windowsから見れる領域とcoLinux内で見れる領域が完全に分かれていて
共有が出来ていません。
共有する方法はcofsを使うかsambaを使うかがありますが、ここではcofsを使います。</p>

<p>最初の設定でconfigファイルの中で</p>

<pre><code>cofs0=C:\
</code></pre>

<p>としてあるのでこれをマウントします。
面倒なのでrootになって作業</p>

<pre><code>$ su
# mkdir /mnt/c
# mount -t cofs cofs0 /mnt/c
</code></pre>

<p>とすると、<code>/mnt/c</code>以下に<code>C:</code>以下の領域が見える様になります。</p>

<p>このままだと、<code>/mnt/c</code>以下はrootでしか変更出来ないので、
USERに管理権限を与えてあげます。
<code>/etc/fstab</code>を編集して</p>

<pre><code>cofs0 /mnt/c cofs defaults,uid=1000,gid=1000,noatime 0 0
</code></pre>

<p>を加えます<code>uid</code>、<code>gid</code>は<code>/etc/passwd</code>にあるUSERの列にある</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USER&#58;x&#58;1000&#58;1000&#58;,,&#58;/home/USER&#58;/bin/sh</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>となっている様なところにある3番目と4番目の値です。</p>

<p>設定を変えたら</p>

<pre><code># umount /mnt/c
# mount -a
</code></pre>

<p>でマウントし直して</p>

<pre><code># ls -l /mnt/c
</code></pre>

<p>などして、<code>/mnt/c</code>以下がユーザー所有になっていたらOK。</p>

<p>ここで一旦rootは終了。</p>

<pre><code># exit
</code></pre>

<h2 id="ssh鍵生成">ssh鍵生成</h2>

<p>毎回ログインでパスワードを入れるのは面倒なので鍵認証にします。
Puttyでログインしてユーザーの状態で</p>

<pre><code>$ ssh-keygen -N "" -t rsa
$ cd .ssh
$ cat id_rsa.pub &gt;&gt; authorized_keys
$ chmod 600 authorized_keys
$ cp id_rsa /mnt/c/Users/USER/
</code></pre>

<p>としてパスフレーズ無しで鍵を生成し公開鍵を登録しておきます。
さらに秘密鍵をWindows領域にコピーします。</p>

<p>ここで、<code>PuttyGen</code>を立ち上げ、<code>Load</code>から先ほどコピーした秘密鍵id_rsaを読み込みます。
(拡張子を付けてないので種類を<code>All Files(*.*)</code>にして検索。)</p>

<p>読み込めたら<code>Save private key</code>を押して適当な名前(debian.ppkなど)で
適当なフォルダに保存します。</p>

<h2 id="Puttyの設定">Puttyの設定</h2>

<p>先ほど登録した鍵などを使ってログインする設定を作ります。</p>

<ul>
<li>Host Name: 192.168.137.2 (coLinuxの<code>address</code>の値)</li>
<li>Window<i class="icon-arrow-right"></i>Translation: Remote character setをUTF-8へ</li>
<li>Connection<i class="icon-arrow-right"></i>Data: Auto-login username: USER</li>
<li>Connection<i class="icon-arrow-right"></i>SSH: Auto-login username: Preferred SSH protocol version: 2</li>
<li>Connection<i class="icon-arrow-right"></i>SSH<i class="icon-arrow-right"></i>Auth: Private key file for authenticatioへ先ほど保存したファイルを</li>
</ul>


<p>これでパスワードを聞かれずにログインできればOK。</p>

<p>一通り済んだらXmingやCygwinのXwinサーバー等を立ち上げてみて、
Putty+coLinuxでもXサーバーが動いているかチェック。
(テスト用に<code>apt-get install emacs</code>してemacsで試したり。)</p>

<h2 id="vimインストール">vimインストール</h2>

<p>vimをインストールするため、Mercurialをインストール(以下rootで)。</p>

<pre><code># apt-get install python-setuptools python-dev build-essential
# easy_install -U mercurial
</code></pre>

<p>その他vimに必要なパッケージをインストール。</p>

<pre><code># apt-get install ncurses-dev
</code></pre>

<p><a href="/blog/2013/06/28/computer-linux-mac-vim/">この前インストールした時</a>の様にインストール。
ただし、以下のインストールも含め、基本的にrootで<code>/usr/local</code>以下にインストール。</p>

<h2 id="gitインストール">gitインストール</h2>

<p>gitに必要なパッケージをインストール:</p>

<pre><code>$ apt-get install autoconf tcl8.5 gettext
</code></pre>

<p>取り敢えずのgitは入っているので
後は<a href="/blog/2013/06/25/computer-windows-git-cygwin/">Cygwinにgit-1.8.3.1をインストール</a>に従い最新版をインストール。</p>

<h2 id="GNU+screenインストール">GNU screenインストール</h2>

<p><a href="/blog/2013/03/22/screen-install/">Macでの文字化け対策用のGNU screenのインストール</a>
に従いGNU screenをインストール。
(<a href="/blog/2013/05/11/computer-screen-install/">GNU screenアップデート</a>に書いた
バグは治っている様です。)</p>

<h2 id="日本語対策">日本語対策</h2>

<p>取り敢えず最初に入っている言語パックを調べてみると</p>

<pre><code>$ locale -a
C
POSIX
</code></pre>

<p>しか入ってないので<code>loacles-all</code>を入れる、</p>

<pre><code>$ sudo apt-get install locales-all
$ locale -a
...
en_GB.utf8
...
ja_JP.utf8
...
</code></pre>

<p>これで下にあるように共通の<code>.bashrc</code>を入れて</p>

<pre><code>LANG=en_GB.UTF-8
LC_ALL=en_GB.UTF-8
alias ls='ls --color=auto --show-control-char'
</code></pre>

<p>辺りの設定で日本語ファイルが<code>ls</code>で見れる様になります。</p>

<p><code>.vimrc</code>の設定で</p>

<pre><code>set encoding=utf8
set fileencodings=utf-8,iso-2022-jp,cp932,euc-jp,default,latin
</code></pre>

<p>辺りがあればvimでも日本語が扱えます<sup id='fnref:10'><a href='#fn:10' rel='footnote'>10</a></sup>。</p>

<h2 id="Octopressのためセットアップ:+Rubyのインストールなど">Octopressのためセットアップ: Rubyのインストールなど</h2>

<p><a href="http://octopress.dev/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a>に従いruby等をインストール。</p>

<p>まずユーザーでログインしてruby1.9.3を以下のようにインストール。
この時に、スクリプトの中でsudoを使うので上にあるようにsudoerに登録してある必要があります。</p>

<pre><code>$ \curl -L https://get.rvm.io | bash -s stable --ruby=1.9.3
</code></pre>

<p>rvmディレクトリ等については共通の<code>.bashrc</code>に既に記述があるのでOK。
オプションによってrvmへのPATHが<code>.bashrc</code>の最後にが書き加えられてた
りする場合もあるので必要がない場合は削除します。</p>

<p>先ほどリンクしたDropbox内にあるoctopressのディレクトリへ行って</p>

<pre><code>$ gem install bundler
$ bundle install
</code></pre>

<p>ここでbundle installで<code>gem</code>が見当たらない、と言うエラーが出ましたが、
一度ログアウトしてログインし直したら通る様になりました。
(ログアウト前に<code>.bashrc</code>を再度読み込んでも駄目でした。
なんか変なPATHが入っていたみたい...?)</p>

<p>間違ってもここで<code>rake install</code>等しないようにして、
(現在の<code>/sass/</code>、<code>/source</code>が元のclassicテーマで置き換えられてしまう...)
<code>rake generate</code>等試してみます。</p>

<p>目次を入れてるので、
<a href="http://octopress.dev/blog/2013/03/23/octopress/#見出し目次の追加" >Octopress Tips: 見出し目次の追加</a>
にある様に<code>markdown.rb</code>を書き換える必要がありました。</p>

<p>加えて、先ほど作った公開鍵<code>~/.ssh/id_rsa.pub</code>の内容を
<a href="https://github.com/">GitHub</a>、及び<a href="https://bitbucket.org/">BitBucket</a>へ登録しておきます。</p>

<h2 id="rake+generateにかかる時間">rake generateにかかる時間</h2>

<p>ここまでで<code>rake generate</code>出来る様になたので時間を測って比べてみました。
<code>sass</code>内に変更が無い状態で</p>

<p>Cygwin:</p>

<pre><code>$rake generate
...
real    5m39.245s
user    1m13.412s
sys     4m2.110s
</code></pre>

<p>coLinux+Debian</p>

<pre><code>$rake generate
...
real    1m20.220s
user    0m53.520s
sys     0m26.580s
</code></pre>

<p>ということで圧倒的に速くなっています。何回か見てみましたが大体同じくらい。
特にCygwinの時はカーネルモードの時間が以上に長いです。
vista 32bitが載ってる古いPCなのであれですが
少なくともCygwinに比べて圧倒的に速いです。</p>

<p>一方、Mac(lionが載ってるこれももう古いMBA)だと</p>

<pre><code>$rake generate
...
real    0m32.040s
user    0m24.341s
sys     0m4.184s
</code></pre>

<p>こんなもんでした。</p>

<h1 id="ファイルシステム">ファイルシステム</h1>

<h2 id="coLinux/Cygwin/Windowsそれぞれから見たパーミッション">coLinux/Cygwin/Windowsそれぞれから見たパーミッション</h2>

<p><a href="/blog/2013/05/12/computer-octopress-git-github-dropbox/">以前ちょっと調べた</a>
様に、Windowsで作ったファイルとCygwinで作ったファイルのパーミッションの
違いが結構面倒でしたが、
新たに違うシステムが入ったので再度見てみました。</p>

<p>基本的に、WindowsもしくはCygwinで作った物はcoLinuxでcofsを使って接続して
見るとファイルは644, ディレクトリは755、所有者は上で
mountした時にfstabで設定したUSERになっています。
ですので、基本、USERが全てそのまま操作できるのでCygwinよりより感じです。</p>

<p>Cygwin/Windows側から見たcoLinuxで作ったファイルのパーミッションはそれぞれ
Cygwinから見たWindowsで作ったファイル、
Windowsから見たCygwinで作ったファイル、と同じです。</p>

<h2 id="coLinux/Cygwin/Windowsそれぞれのショートカット、シンボリックリンクなど">coLinux/Cygwin/Windowsそれぞれのショートカット、シンボリックリンクなど</h2>

<p>Windowsで作ったショートカットはcoLinuxでは判別出来ません。これはCygwinと同じです。</p>

<p>また、CygwinのlnやWindowsで作ったハードリンクはcoLinuxを含めどのシステムからでも
同じように見えます(ただの実体だから当たり前か)。</p>

<p>Windowsで作ったシンボリックリンクやジャンクション(ジャンクションはフォルダだけ)
はCygwinからは認識できます。
(また<a href="/blog/2013/06/25/computer-windows-cygwin/">ここ</a>で書いたように
CygwinでWindowsのシンボリックリンクを作ったりも出来ます。)</p>

<p>これらはcoLinuxからは、フォルダだと辿れるのですが、
ファイルへ作ったシンボリックリンクについてはたどれません。</p>

<p>また、Cygwin lnで作ったシンボリックリンクはcoLinuxからはたどれません。</p>

<p>逆にcoLinuxで作った場合は、と見てみたいのですが、
coLinuxでマウントしたWindows領域でlnコマンドを打つと</p>

<pre><code>$ ln -s a.txt b.txt
ln: creating symbolic link \`a.txt' to \`b.txt': Function not implemented
</code></pre>

<p>などと言われて作れません。通常のcoLinux内では<code>ln</code>は正しく動いていますし、
Windows領域でも<code>touch</code>でファイルを作ったり<code>vim</code>で編集して保存したり、
<code>rm</code>でファイルを消したりすることは出来ます。</p>

<p>どうもこれは今のところ解決する手段がないようなので、
共有領域にはリンクとかは作らない様にするしかありません。</p>

<p>これに関連して、最初、CygwinとHomeを共通にしてあげようと思って、</p>

<pre><code># usermod -d /mnt/c/cygwin/home/USER USER
</code></pre>

<p>等としてみましたが、今、dotfile系を全てDropboxに入れて
そこからのリンクになっているのでCygwin側で作ったリンクが見れず駄目でした。</p>

<p>しかたがないので素直に元に戻してcoLinux内にリンクを貼っています。</p>

<pre><code># usermod -d /home/USER USER
# exit
$ cd
$ ln -s /mnt/c/Users/USER
$ ln -s /mnt/c/Users/USER/Documents/My\ Dropbox Dropbox
$ cd Dropbox/08_Settings/git/dotfiles
$ chmod 755 install.sh
$ ./install.sh
$ cd ../scripts
$ chmod 755 *.sh
$ ./install.sh
</code></pre>

<p>これでDropboxのディレクトリ経由でdotfiles等を共有できます。</p>

<h2 id="その他coLinuxを使う上での注意点">その他coLinuxを使う上での注意点</h2>

<p>この問題を探している時に、<code>perl -pi -e 's/(.)/$1/' a.txt</code>
コマンドをすると中身が空になる、と言う話もセットで出てきたので<sup id='fnref:11'><a href='#fn:11' rel='footnote'>11</a></sup>、
自分ではあまりperlは使わないのであれですが、これもcoLinuxを使う上で注意するべき所の様です。</p>

<h1 id="Cygwin+V.S.+coLinux">Cygwin V.S. coLinux</h1>

<ul>
<li>パフォーマンス的には圧倒的にcoLinuxの方が良い事が分かりました。
特に古いPCではCygwinでmake等をするとちょっと辛い感じです。</li>
<li>インストールはCygwinの方が圧倒的に簡単。</li>
<li>coLinuxはCygwinと違って本体が先に走っている必要がありますが、
サービスとして登録しておくことでWindows起動時に自動的に起動させ、
Puttyからパスワードレスでログインすることで
Cygwinのターミナルを開くのと同じ感じで作業を始められます。</li>
<li>Cygwinの方が便利な点としては<code>cmd.exe</code>が使えるので、
Windowsのコマンドプロンプトで使えるコマンドが全て使えます。
これによってWindowsのシンボリックリンク等が扱えたり、
Windows本来の仕事を行う事も出来ます。
一方、coLinuxはリンク操作など、いくつかWindows領域での操作に制限があります。</li>
<li>Cygwinの場合は<code>$HOME</code>がWindowsの環境変数で決まるので、
Windowsでこの変数を使うvimやfirefox-vimperatorが影響を受けます。
coLinuxの方はこの辺りは完全にcoLinux内で閉じています。</li>
<li>ここでは触れてませんが、Windows自体でsshサーバーをたてて外から
ログインしたりする場合はCygwinからサービス登録する方が余計なネットワーク設定を
しなくて済むので簡単です。</li>
</ul>


<p>とりとめない感じですが、取り敢えず通常作業はcoLinuxで、
Windows関連の作業が必要な時はCygwinで、のような感じで、
しばらくは両方使っていくと思います。</p>

<p>もし次Windows買って64bitマシンとなったらVMWareも考えなきゃいけないかな、とも。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://www.sixnine.net/cygwin/translation/faq/faq_3.html">Cygwin について頻繁に尋ねられる質問と回答: 3. 質問と回答集</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://d.hatena.ne.jp/syasuda/20091107/1257610294">Cygwinでmakeやconfigureが遅いのはforkのせい</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>開発的には去年の始め頃から更新がされてないみたいであれですが、他にめぼしいものもなかったので。
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p>coLinuxは64bitではパッチが出たりしてるものの動かないっぽいのでVMWareにするしかないと言う話も(使ってるPCは32bit時代のもの、、、)。
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p>VMWareも<a href="http://www.nanshiki.co.jp/software/index.html?sexe">sexe</a>と言うソフトを使ってサービスへ登録することが出来るようです。
  <a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p>Ubuntuも選択肢としてありますが、coLinuxでの最新の12.04はデフォルトがドイツ語キーボードだったりそれ以上に色々面倒な上、不安定(<a href="2013-07-07-computer-windows-colinux-cygwin.md">Ubuntu12.04→Ubuntu9.04に変えたらすこぶる快適になった</a>)。さらにイメージファイルが4GBでした。9.04の方も入れて見ましたがこちらはgitのインストールが上手く行かなかったので断念。こちらはサイズが1GBでしたがDebianよりさらに古いので色々面倒なのもあってやめました。
  <a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p><a href="http://dqn.sakusakutto.jp/2011/07/colinux-network-tap.html">[coLinuxインストール完全マニュアル]ネットワークの設定をする</a>, <a href="http://scratchpad.fc2web.com/colinux/install-0.7/install-5-1.html">coLinux(0.7.x)のインストール [TAP-Win32でのNAT接続]</a>
  <a href='#fnref:7' rev='footnote'>↩</a></p>
</li><li id='fn:8'><p>7の場合<code>ネットワークとインターネット</code><i class="icon-arrow-right"></i>
  <code>ネットワークと共有センター</code><i class="icon-arrow-right"></i>
  左から<code>アダプターの設定の変更</code>
  <a href='#fnref:8' rev='footnote'>↩</a></p>
</li><li id='fn:9'><p>サービスの登録の際に、confファイルをフルパスで@"C:\coLinux\squeeze.conf"
  等としないと動かない、と書いてある所もありましたが、一応ファイル名だけで動いています。
  また、<code>Program Files</code>等、スペースを含む場合、<code>"</code>で囲ってあってもサービスとして
  登録された際にはずされてしまって正しく読み込めません。
  自分の環境ではファイル名だけを指定すれば大丈夫なのでこれでも問題ないですが
  フルパスが必要な場合はどうしようもなくなるので、やはり<code>C:</code>直下に<code>coLinux</code>をインストールしておいた方が良さそうです。
  <a href='#fnref:9' rev='footnote'>↩</a></p>
</li><li id='fn:10'><p>1つはまったのが、上で書いたPuttyの設定で、<code>Remote character set</code>
  をセットしてなくて、<code>ls</code>では見れるが<code>vim</code>では正しく表示できない状態に
  なったところでした。
  暫くvimを疑ってましたが、ふとCygwinからログインしてみたら正しく表示できたので
  Puttyが悪かった、ということに気付いた、と。
  <a href='#fnref:10' rev='footnote'>↩</a></p>
</li><li id='fn:11'><p><a href="http://tech.kayac.com/archive/cofs-development-notes.html">coLinuxのcofs環境下で開発する場合の注意点Add Star</a>
<a href='#fnref:11' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
