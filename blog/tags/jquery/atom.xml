<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: jQuery | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/jquery/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2021-12-19T00:44:13+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[window.onloadとjQueryの$(document).ready等の比較]]></title>
    <link href="https://rcmdnk.com/blog/2015/07/11/computer-javascript-jquery/"/>
    <updated>2015-07-11T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/07/11/computer-javascript-jquery</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00HZ96DBE?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00HZ96DBE&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51wXuc8T0-L._SS200_.jpg" alt="Amazon.co.jp： Alligator: OnLoad: デジタルミュージック" /></a>
</div>

<p>JavaScriptでページを読み込み後に何かを行いたいときは
<code>window.onload = function()</code>を使ったり、jQueryを使っていれば
<code>$(document).ready(function())</code>を使ったりしますが、
これらはちょっと違うものです。</p>

<p>特にjQuery無しで<code>$(document).ready(function)</code>的な事をするのが
ちょっと面倒ですがその辺について。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#windowonload" id="markdown-toc-windowonload">window.onload</a></li>
  <li><a href="#documentready" id="markdown-toc-documentready">$(document).ready</a></li>
  <li><a href="#jquery無しでdocumentreadyな呼び出しをする" id="markdown-toc-jquery無しでdocumentreadyな呼び出しをする">jQuery無しで$(document).readyな呼び出しをする</a></li>
  <li><a href="#onload時に行う物を複数登録する" id="markdown-toc-onload時に行う物を複数登録する">onload時に行う物を複数登録する</a></li>
  <li><a href="#実行される順序" id="markdown-toc-実行される順序">実行される順序</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="windowonload">window.onload</h2>

<p><code>window.onload</code>メソッドは<code>onload</code>イベント発生時に実行されますが、
これはDOMツリーの構築だけでなく、画像や他の全てのデータの
読み込みが完了した時、になります。</p>

<p>また、</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onload 1&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>の様に<code>onload</code>に値を1つ与える形になるので、
この後で</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onload 2&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>の様にすると、この最後に指定されたものだけが実行されます(‘onload 2’だけ表示される)。</p>

<p>また、<code>document.body.onload</code>を指定することも出来ますが、
基本的に<code>window.onload</code>と同じ動作をしますが、
ブラウザによって違う場合があるので使うなら<code>window.onload</code>を使うべきです。</p>

<h2 id="documentready">$(document).ready</h2>

<p>jQueryを使ってる時にはよく使う形。</p>

<p>こちらは画像の読み込みなどは待たず、
DOMツリーの構築が終わった時点で実行されます。</p>

<p>従って、<code>window.onload</code>で指定されているものよりも先に実行されます。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 1&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>これは複数書いてもそれら全てが実行されます。</p>

<p><code>document</code>も<code>ready</code>も短縮して</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 2&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>と書くことも出来ます。</p>

<p>また、<code>$</code>が他と衝突するような場合、</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nx">jQuery</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 3&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>という感じの書き方になります。</p>

<p>また、
<code>on</code>を使って、</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 4&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>と書いても同じような動作になります。(が、下に書くように上のものと区別する必要があります。)</p>

<h2 id="jquery無しでdocumentreadyな呼び出しをする">jQuery無しで$(document).readyな呼び出しをする</h2>

<p><code>window.onload</code>とjQueryの<code>$(document).ready</code>は
呼び出されるタイミングが違うのと、
複数の処理を別々に与えられるかどうか、の違いが有ります。</p>

<p>タイミングについてはDOMツリーが出来てればJavaScriptでしたいことは出来ることが多いので
画像とかの読み込みを待たずに実行したいことが多いかと思います。</p>

<p>また、別々の場所で必要に応じてやりたいことを追加できる方が便利です。</p>

<p>なので、jQueryがない場合でも<code>$(document).ready</code>的な事をしたいわけです。</p>

<p>これを行うには
<code>DOMContentLoaded</code>イベントに対して
イベントリスナーを追加します<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じ。</p>

<p><code>DOMContentLoaded</code>は文字通りDOMが出来上がった時で、
jQueryの中の<code>ready</code>も実際には<code>DOMContentLoaded</code>を使ったりしして
実装されています<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>。</p>

<p><code>addEventListener</code>での追加は複数行っても全て実行されます<sup id="fninref:3"><a href="#fnin:3" rel="footnote">3</a></sup>。</p>

<p>今はIEやSafariなんかでもこの<code>DOMContentLoaded</code>を使える<sup id="fninref:4"><a href="#fnin:4" rel="footnote">4</a></sup>
のでこれで<code>$(document).ready</code>と殆ど同じ動作として使うことが出来ます。</p>

<h2 id="onload時に行う物を複数登録する">onload時に行う物を複数登録する</h2>

<p>一方で画像などを全て読み込んだ後にやりたいこともあるかもしれません。</p>

<p>そのような時は<code>window.onload</code>を使えば良いのですが、
これだと1つしか指定できません。</p>

<p>こんな時はjQueryを使えば</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onload jquery 0&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>としたり、</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="nx">$</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span><span class="s1">&#39;load&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;event add load 0&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;on load 0&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>みたいに、<code>event.add</code>を使ったり、<code>on</code>を使って書くことが出来、
これらは<code>load</code>時に実行され、
また、複数加えても加えた分だけ実行されます。</p>

<p>これをjQueryなしでやるには</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="kd">function</span> <span class="nx">ready_func</span> <span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready_func&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="p">){</span>
</span><span class="line">  <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="nx">ready_func</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">attachEvent</span> <span class="p">){</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onload&#39;</span><span class="p">,</span> <span class="nx">ready_func</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">//else{</span>
</span><span class="line"><span class="c1">//  window.onload = ready_func;</span>
</span><span class="line"><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>

<p>見たいな感じで<code>window</code>へイベントリスナーを加えたいわけですが、
IEとかだと<code>window</code>には<code>addEventListener</code>の代わりに
<code>attachEvent</code>というメソッドが用意されてるので
それを使う様にします。引数も<code>load</code>と<code>onload</code>で違います<sup id="fninref:5"><a href="#fnin:5" rel="footnote">5</a></sup>。</p>

<p><code>addEventListener</code>と<code>attachEvent</code>でカバーできない物は殆ど無いと思いますが、
もし他で<code>onload =</code>してる場所が無ければ(もしくはここで上書きしても良いのなら)ここで<code>onload =</code>を最後に
加えることも出来ます。</p>

<p><a href="https://px.a8.net/svt/ejp?a8mat=2HO4L5+GB1GSI+2XBO+5Z6WX" target="_blank" rel="nofollow">
<img border="0" width="300" height="250" alt="" src="https://www22.a8.net/svt/bgt?aid=150611513986&amp;wid=003&amp;eno=01&amp;mid=s00000013650001004000&amp;mc=1" /></a>
<img border="0" width="1" height="1" src="https://www18.a8.net/0.gif?a8mat=2HO4L5+GB1GSI+2XBO+5Z6WX" alt="" /></p>

<h2 id="実行される順序">実行される順序</h2>

<p>上に書いたとおり、<code>ready</code>の物の方が<code>load</code>の物よりも先に実行されます。</p>

<p>ではそれらの中では順序はどうなるか、テストしてみます。</p>

<figure class="code"><figcaption><span>test.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">charset</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;IIFE 0&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}());</span>
</span><span class="line">
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 0 window.onload = function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 0 window.addEventListener(&quot;load&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 0 $(window).load(function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 0 $(window).on(&quot;load&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 0 $.event.add(window, &quot;load&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 0 $(document).ready(function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 0 document.addEventListener(&quot;DOMContentLoaded&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 0 $(document).on(&quot;ready&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 0 $(function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;IIFE 1&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}());</span>
</span><span class="line">
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 1 window.onload = function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 1 window.addEventListener(&quot;load&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 1 $(window).load(function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 1 $(window).on(&quot;load&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;load 1 $.event.add(window, &quot;load&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 1 $(document).ready(function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 1 document.addEventListener(&quot;DOMContentLoaded&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 1 $(document).on(&quot;ready&quot;, function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready 1 $(function() {...&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;IIFE 2&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}());</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>ここでは</p>

<ul>
  <li>load:
    <ul>
      <li><code>window.onload = function() {...</code></li>
      <li><code>window.addEventListener("load", function() {...</code></li>
      <li><code>$(window).load(function() {...</code> (jQuery)</li>
      <li><code>$(window).on("load", function() {...</code> (jQuery)</li>
      <li><code>$.event.add(window, "load", function() {...</code> (jQuery)</li>
    </ul>
  </li>
  <li>ready:
    <ul>
      <li><code>document.addEventListener("DOMContentLoaded", function() {...</code></li>
      <li><code>$(document).ready(function() {...</code> (jQuery)</li>
      <li><code>$(function() {...</code> (jQuery)</li>
    </ul>
  </li>
</ul>

<p>を使っています。</p>

<p>ついでに間に即時呼び出し関数式(Immediately-invoked function expression, IIFE)<code>(function() {...</code>も挟んであります。</p>

<p>これを実行すると、Google Chrome(43.0.2357.130, Mac)だと</p>

<pre><code>IIFE 0
IIFE 1
IIFE 2
ready 0 $(document).ready(function() {...
ready 0 $(function() {...
ready 1 $(document).ready(function() {...
ready 1 $(function() {...
ready 0 $(document).on("ready", function() {...
ready 1 $(document).on("ready", function() {...
ready 0 document.addEventListener("DOMContentLoaded", function() {...
ready 1 document.addEventListener("DOMContentLoaded", function() {...
load 0 window.addEventListener("load", function() {...
load 0 $(window).load(function() {...
load 0 $(window).on("load", function() {...
load 0 $.event.add(window, "load", function() {...
load 1 $(window).load(function() {...
load 1 $(window).on("load", function() {...
load 1 $.event.add(window, "load", function() {...
load 1 window.onload = function() {...
load 1 window.addEventListener("load", function() {...
</code></pre>

<p>一方、Firefox(39.0, Mac)でみると、
殆ど同じ順序ですが、<code>load 1 window.onload = function() {...</code>が
<code>load 0 window.addEventListener("load", function() {...</code>の前に来ます。</p>

<p>ちょっと色々テストしてみると</p>

<ul>
  <li><code>ready</code>に関して:
    <ul>
      <li>まず、<code>$(document).ready</code>、または<code>$(function()</code>等のjQueryのいわゆるdocument readyな物が最初に順に実行される。</li>
      <li>次に<code>$(document).on("ready"</code>な物が実行される。</li>
      <li>その後、<code>"DOMContentLoaded"</code>の物が実行される。</li>
    </ul>
  </li>
  <li><code>load</code>に関して:
    <ul>
      <li><code>window.onload</code>は最後に書かれたものだけが実行される。</li>
      <li><code>window.onload</code>と<code>addEventListener("load"</code>は、記述された順序で実行される。ただし、<code>window.onload</code>が2つ以上ある場合、
  最初に書かれた所が基準になる。
        <ul>
          <li>上の例で、2つ目の<code>load 1 window.onload</code>が一番最後に書かれたとしても、
  <code>load 0 window.onload</code>の位置が基準になるので、
  <code>load 1 window.addEventListener("load"</code>よりも先に<code>load 1 window.onload</code>が実行される。</li>
        </ul>
      </li>
      <li><code>$(window).load</code>、<code>$(window).on("load"</code>、<code>$event.add(window, "load"</code>のjQueryな物はこれらの中では記述通りの順序が保たれる。</li>
      <li>Firefoxでは<code>window.onload</code>と<code>addEventListener("load"</code>な物は、
  jQueryの<code>load</code>に関するものの全てより先にあれば先に実行される。
        <ul>
          <li>もし、jQueryの<code>load</code>の物が一つでも先にあれば、全てのjQueryのものより後で実行される。</li>
          <li>この時も<code>window.onload</code>の基準は一番最初の物。</li>
        </ul>
      </li>
      <li>Google Chromeでは<code>addEventListener("load"</code>な物は
  jQueryの<code>load</code>に関するものの全てより先にあれば先に実行される。
        <ul>
          <li>もし、jQueryの<code>load</code>の物が一つでも先にあれば、全てのjQueryのものより後で実行される。</li>
        </ul>
      </li>
      <li>Google Chromeでは<code>window.onload</code>は何処に書いても全てのjQueryの<code>load</code>のものより後で実行される。</li>
    </ul>
  </li>
</ul>

<p>と言った感じの順序です。</p>

<p>ちょっとごちゃごちゃしてしまいますが、
要するに色々使うと結構前後する可能性があるので
特別な理由がない限り<code>load</code>や<code>ready</code>内では統一した書き方で
書くべきだ、と。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログの画像にその画像へのリンクを付ける]]></title>
    <link href="https://rcmdnk.com/blog/2014/07/28/blog-octopress-jquery/"/>
    <updated>2014-07-28T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2014/07/28/blog-octopress-jquery</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B000051TAX?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B000051TAX&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41PbbCfXLcL._SS200_.jpg" alt="イマージュ" /></a>
</div>

<p>このブログでは画像のサイズを指定せずおいているので
画面が小さかったりブラウザを小さくしてるとその幅に合わせるように画像が表示されて、
細かいところを見るに画像だけ右クリックから表示させたりして拡大して。。。
みたいなことをしなくちゃいけなくて面倒です。</p>

<p>ので、画像を簡単に拡大できる様にしようと思いましたが、
結局はJavaScriptで元画像へのリンクを貼るようにしました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#octopressmarkdownでの画像の貼り方" id="markdown-toc-octopressmarkdownでの画像の貼り方">Octopress/Markdownでの画像の貼り方</a></li>
  <li><a href="#javascriptを使ってリンクにする" id="markdown-toc-javascriptを使ってリンクにする">JavaScriptを使ってリンクにする</a></li>
  <li><a href="#その他の方法" id="markdown-toc-その他の方法">その他の方法</a></li>
  <li><a href="#他のプラグイン" id="markdown-toc-他のプラグイン">他のプラグイン</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="octopressmarkdownでの画像の貼り方">Octopress/Markdownでの画像の貼り方</h2>

<p>Octopressでは<strong>img</strong>というタグで画像を挿入できますが、これだとリンクは貼れません。
(<strong>/plugins/img_tag.rb</strong>で定義されてるのでいじればいけますが。)</p>

<p>ので、下のissueにあるようにMarkdownのリンク機能を使うなり
HTMLで直接書いてしまうなりしないといけません。</p>

<blockquote>
  <p><a href="https://github.com/imathis/octopress/issues/683">Image with link and style · Issue #683 · imathis/octopress</a></p>
</blockquote>

<p>例えば</p>

<pre><code>[{%img /images/post/image.jpg%}](/images/post/image.jpg)
</code></pre>

<p>とか、Markdownだけで書くなら</p>

<pre><code>[![alt text](/images/post/image.jpg)](/images/post/image.jpg)
</code></pre>

<p>な感じで最初の<code>[]</code>に通常の画像挿入の記述を入れてさらに全体を
<code>/images/post/image.jpg</code>へのリンクへ。</p>

<h2 id="javascriptを使ってリンクにする">JavaScriptを使ってリンクにする</h2>

<p>ただ、コレを全てに書くのが面倒だし冗長なので、
JavaScript(jQuery使用)を使って画像の箇所に
元画像へのリンクを貼るようにしてみます。</p>

<p>Octopressでの適当な自家製スクリプトは<strong>source/javascripts/utils.js</strong>
にまとめて入れて<strong>source/_includes/head.html</strong>で読み込んでいるので
その中に次の物を追加します。</p>

<figure class="code"><figcaption><span>source/javascripts/utils.js</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">jQuery</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span>
</span><span class="line">  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;img&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">!=</span> <span class="s2">&quot;a&quot;</span><span class="p">){</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;imglink&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">).</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;/images/post/&#39;</span><span class="p">)){</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;a href=&quot;&#39;</span><span class="o">+</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot; /&gt;&#39;</span><span class="p">));</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>img</strong>タグのもので、親要素が<strong>a</strong>でなく、
<code>imglink</code>というクラスを持っているか、もしくは<strong>/images/post/</strong>
に入ってるものに関してa要素でwrapしてあげます。
(通常、記事で使う画像はすべて<strong>/imgages/post/</strong>に入れてるため)</p>

<p>これを使いたい場合は通常<strong>/images/post/</strong>にあるものだけですが、
一応クラス指定でも出来る様に。</p>

<p>Kramdown等では、画像を挿入する際、
後ろに<code>{}</code>を使って<strong>class</strong>等を追加することが出来るので</p>

<pre><code>![imglinktest](/images/post/20140727_imglinktest.jpg){:class="imglink"}
</code></pre>

<p>の様に書いておけば</p>

<pre><code>&lt;p&gt;&lt;img src="https://rcmdnk.com/images/post/20140727_imglinktest.jpg" alt="imglinktest" class="imglink" /&gt;&lt;/p&gt;
</code></pre>

<p>の様になります。</p>

<p>これを使って書いておけばJavaScriptが使える状態では
下の画像もリンクになってるはずです。
(HTMLのソースはただの<code>&lt;img~/&gt;</code>。<strong>/images/post/</strong>のものなのでクラスも<code>imglink</code>なし。)</p>

<p><img src="https://rcmdnk.com/images/post/20140727_imglinktest.jpg" alt="imglinktest" class="pic" /></p>

<h2 id="その他の方法">その他の方法</h2>

<p>上に辿り着く前にちょっとやった方法。</p>

<figure class="code"><figcaption><span>source/javascripts/utils.js</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">jQuery</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span>
</span><span class="line">  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.imglink&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>こんな感じでクリック時に<code>src</code>の場所を開く様にする方法。</p>

<p>さらに、この場合はカーソルを画像上に持っていてもカーソルが変わらないので
リンクと分かるように変更するためCSSで</p>

<figure class="code"><figcaption><span>sass/plugins/_plugins.scss</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span></span><span class="o">//</span> <span class="nt">images</span>
</span><span class="line"><span class="p">.</span><span class="nc">imglink</span><span class="p">{</span>
</span><span class="line">  <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>とリンク上のカーソルに変わるように指定しておきます。</p>

<p>CSSの定義を使うために<strong>/images/post/</strong>の方でも
<code>imglink</code>を加えてあげないといけないので、上の関数の前に</p>

<figure class="code"><figcaption><span>source/javascripts/utils.js</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">jQuery</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span>
</span><span class="line">  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;img[src ^= &#39;/images/post/&#39;]&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;imglink&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>と書いてあげれば、先に書いた<code>wrap</code>を使った方法と大体おなじになります。
(ただ、この場合、このままだとマウスオーバー時にステータスバーにはURLが表示されません。)</p>

<p>まあ、<code>wrap</code>を使った方がシンプルかな、ということでそちらを使うようにしました。</p>

<h2 id="他のプラグイン">他のプラグイン</h2>

<p>最初、適当なLightbox系のプラグインを使って表示しようと思ってたのですが、
きちんと拡大したいと思った場合にシンプルに画像だけ表示した方が良かったので
そうしました。</p>

<p>一応ちょっと見てみたものリスト。</p>

<ul>
  <li><a href="http://terrymun.github.io/Fluidbox/">Fluidbox, a jQuery plugin for beautiful lightboxes</a>
    <ul>
      <li>シンプルに拡大するだけな感じがいい感じ。</li>
    </ul>
  </li>
  <li><a href="http://osvaldas.info/examples/image-lightbox-responsive-touch-friendly/">Image Lightbox: Responsive and Touch-Friendly demo by Osvaldas Valutis</a>
    <ul>
      <li>デモだとちょっと遅い気が。</li>
    </ul>
  </li>
  <li><a href="http://sandbox.scriptiny.com/tinybox2/">TinyBox 2 - javascript modal windows</a>
    <ul>
      <li>軽量だけど色々出来る。</li>
    </ul>
  </li>
  <li><a href="http://noelboss.github.io/featherlight/">Featherlight – The ultra slim jQuery lightbox.</a>
    <ul>
      <li>こちらも色々出来る。</li>
    </ul>
  </li>
  <li><a href="http://lokeshdhakar.com/projects/lightbox2/">Lightbox</a>
    <ul>
      <li>元祖。</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topへ戻るボタンの設置]]></title>
    <link href="https://rcmdnk.com/blog/2013/05/12/blog-octopress/"/>
    <updated>2013-05-12T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2013/05/12/blog-octopress</id>
    <content type="html"><![CDATA[<p>画面を下にスクロールしていった時に右下に出てくる
Topへ戻る、ボタンを設置したいな、と思ったので、
jQueryのプラグインを使を使って設置してみました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#scrolltopcontrol" id="markdown-toc-scrolltopcontrol">scrolltopcontrol</a></li>
  <li><a href="#その他のオプション" id="markdown-toc-その他のオプション">その他のオプション</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="scrolltopcontrol">scrolltopcontrol</h2>
<p><a href="http://www.dynamicdrive.com/dynamicindex3/scrolltop.htm">jQuery Scroll to Top Control v1.1</a>
は、Topへ戻るボタンのjQueryプラグインです。</p>

<p>Octopressへのインストール方法は
まず上のページから<code>scrolltopcontrol.js</code>をダウンロードして
<code>source/javascripts/</code>へ入れます。</p>

<p>次に<code>scrolltopcontrol.js</code>の中身を書きなおしてボタンの画像部分を変更します。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span></span><span class="o">-</span><span class="nx">controlHTML</span><span class="o">:</span> <span class="s1">&#39;&lt;img src=&quot;up.png&quot; style=&quot;width:48px; height:48px&quot; /&gt;&#39;</span><span class="p">,</span> <span class="c1">//HTML for control, which is auto wrapped in DIV w/ ID=&quot;topcontrol&quot;</span>
</span><span class="line"><span class="o">+</span><span class="nx">controlHTML</span><span class="o">:</span> <span class="s1">&#39;&lt;i class=&quot;fa fa-chevron-up icon-scroll-up&quot;&gt;&lt;/i&gt;&#39;</span><span class="p">,</span> <span class="c1">//HTML for control, which is auto wrapped in DIV w/ ID=&quot;topcontrol&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>今回は画像の代わりにFont-Awesomeの
<code>fa-chevron-up</code><i class="fa fa-chevron-up"></i>
を使いました。</p>

<p>さらに<code>source/_includes/custom/head.html</code>へ</p>

<pre><code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="{{root_url}}/javascripts/scrolltopcontrol.js" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>

<p>の2行を加えます。(jqueryの行は、既にfootnote等のインストール時に導入済みの場合は
必要ありません。)</p>

<p>最後に以下の設定を<code>sass/custom/_style.scss</code>へ加えます。</p>

<pre><code>.icon-scroll-up {
  font-size: 3em;
  color: #999999;
  border: solid 2px #999999;
  -webkit-border-radius: 4px;
  -moz-border-radius: 4px;
  border-radius: 4px;
}
#topcontrol {
  z-index: 100;
}
</code></pre>

<p><code>icon-scroll-up</code>は上の<code>scrolltopcontrol.js</code>内でcontrolHTMLに使った
アイコン用の設定なので特に必要ありませんが、
必要であれば適時用意して下さい。</p>

<p>このcontrolHTMLの部分が最終的に<code>&lt;div id="topcontrol"&gt;~&lt;/div&gt;</code>
に囲まれるので、これをページ上で一番上に持ってくるために最後の3行を加えてあります。</p>

<p>Octopressの中で、<code>footer</code>が<code>z-index: 1;</code>に指定されているので、
これがないと、下の方に行った時に<code>Copyright</code>の横でボタンが隠れてしまうので必要です。</p>

<p>以上で、右下にあるようなボタンを作ることが出来ました。
(<img alt="warning" src="https://rcmdnk.com/images/emoji/unicode/26a0.png" class="emoji" />現在は右上<img alt="arrow_upper_right" src="https://rcmdnk.com/images/emoji/unicode/2197.png" class="emoji" />)</p>

<p><img src="https://rcmdnk.com/images/post/20130512_gototop.jpg" title="" alt="" /></p>

<h2 id="その他のオプション">その他のオプション</h2>
<p><code>scrolltopcontrol.js</code>の中の<code>var scrolltotop</code>内を変更することで
動作を変更することが出来ます。</p>

<ul>
  <li>setting:
    <ul>
      <li>startline: ボタンをいつ出すかを整数で指定(デフォルト100)。トップから指定ピクセルだけ下がった時にボタンが出る(0にすれば常に表示)。</li>
      <li>scrollto: 戻る位置の指定。デフォルト(0)だとトップへ。<code>&lt;div id="scrollto-point"&gt;&lt;/div&gt;</code>
等と書いておいて<code>scrollto: "scrollto-point"</code>と指定すればここまで戻る様になる。</li>
      <li>scrollduration: 戻る速度(デフォルト1000(ms))。</li>
      <li>fadeduration: ボタンのフェードイン/アウトの時間指定。デフォルト<code>[500,100]</code>(ms)。</li>
    </ul>
  </li>
  <li>controlHTML: ボタンの画像指定。</li>
  <li>controlattrs: ボタンの位置のオフセット(右下からの距離)。デフォルト{offsetx:5, offsety:5}(ピクセル)
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup></li>
  <li>anchorkeyword: 戻る位置のアンカー名(デフォルト#top)。この名前がtopの位置として
埋め込まれるので、<code>&lt;a href="#top"&gt;上に戻る&lt;/a&gt;</code>等と書いてもボタンと同じ位置に
戻れる様になる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Tips]]></title>
    <link href="https://rcmdnk.com/blog/2013/03/23/octopress/"/>
    <updated>2013-03-23T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2013/03/23/octopress</id>
    <content type="html"><![CDATA[<p>以前書いて以降にOctopressに関して変更した部分や、
調べた事のメモです。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#faviconの変更" id="markdown-toc-faviconの変更">faviconの変更</a></li>
  <li><a href="#404-not-found" id="markdown-toc-404-not-found">404 not found</a></li>
  <li><a href="#画像の挿入" id="markdown-toc-画像の挿入">画像の挿入</a></li>
  <li><a href="#自分のpostへのリンク" id="markdown-toc-自分のpostへのリンク">自分のpostへのリンク</a></li>
  <li><a href="#markdown記法でのtable" id="markdown-toc-markdown記法でのtable">Markdown記法でのtable</a></li>
  <li><a href="#見出し目次の追加" id="markdown-toc-見出し目次の追加">見出し目次の追加</a></li>
  <li><a href="#footnote" id="markdown-toc-footnote">footnote</a></li>
  <li><a href="#テンプレートの変更" id="markdown-toc-テンプレートの変更">テンプレートの変更</a></li>
  <li><a href="#markdown拡張子の変更" id="markdown-toc-markdown拡張子の変更">Markdown拡張子の変更</a></li>
  <li><a href="#関連記事" id="markdown-toc-関連記事">関連記事</a></li>
  <li><a href="#タグクラウド" id="markdown-toc-タグクラウド">タグクラウド</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="faviconの変更">faviconの変更</h2>
<p>小さいサイズの絵を用意して<code>source/favicon.png</code>と取り替えるだけです。</p>

<h2 id="404-not-found">404 not found</h2>
<p>Octopress+GitHub Pagesで自分のurl以下でページ下で存在しないページにアクセスすると、</p>

<p><img src="https://rcmdnk.com/images/post/20130323_GitHabPages404NotFound.png" alt="" title="" class="pic imglink" /></p>

<p>この様に全てGitHub Pagesの404 Page not found が出てきます。
これを、自分のurl以下では自分用の物を表示させるためには</p>

<pre><code>rake new_page["404.md"]
</code></pre>

<p>で<code>source/404.md</code>を作り、中身を適当に編集します。
<code>source/404.html</code>を直接作ってもこれがそのままコピーされるのでそれも可能です
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>。</p>

<p><code>source/index.html</code>なんかを元にして上の方に<code>ページがみつかりませんでした</code>、
的なものを付けて作るのが手っ取り早いです。</p>

<p>こんな感じで書いておくと、</p>

<figure class="code"><figcaption><span>source/404.md</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span></span>---
</span><span class="line">layout: page
</span><span class="line">title: &quot;404 Page Not Found&quot;
</span><span class="line">comments: false
</span><span class="line">sharing: false
</span><span class="line">footer: false
</span><span class="line">published: true
</span><span class="line">---
</span><span class="line">
</span><span class="line">{% if site.pic_404nf %}
</span><span class="line"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;{{ site.root_url }}/&quot;</span><span class="p">&gt;&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;{{ site.pic_404nf }}&quot;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&quot;notfound&quot;</span> <span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span><span class="line">{% endif %}
</span><span class="line">
</span><span class="line"><span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span><span class="line">*Sorry, Page Not Found!*
</span><span class="line">
</span><span class="line">Here are recent posts:
</span><span class="line">
</span><span class="line"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;blog-archives&quot;</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;missing&quot;</span><span class="p">&gt;</span>
</span><span class="line">  {% for post in site.posts limit: 10 %}
</span><span class="line">  <span class="p">&lt;</span><span class="nt">article</span><span class="p">&gt;</span>
</span><span class="line">    {% include archive_post.html %}
</span><span class="line">  <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>
</span><span class="line">  {% endfor %}
</span><span class="line"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://rcmdnk.com/blog/aaaaaaaaaaa">こんな感じ</a>になります。</p>

<div class="postscript">
  <p><strong>追記: 2014/02/14</strong></p>

  <p>404.mdのコードを追加。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<h2 id="画像の挿入">画像の挿入</h2>

<blockquote>
  <p>Ref: <a href="http://octopress.org/docs/plugins/image-tag/">公式ブログ</a></p>
</blockquote>

<p>より</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{% img &#091;class names&#093; /path/to/image &#091;width&#093; &#091;height&#093; &#091;title text &#091;alt text&#093;&#093; %}</span></code></pre></td></tr></table></div></figure>

<p>Octopressと同じサイト内で画像を挿入させるには、通常<code>source/images/</code>に画像を入れ、</p>

<pre><code>{% img /images/pic.png %}
</code></pre>

<p>と言うように呼び出すことが出来ます。勿論、画像ファイルは通常のurlでも構いません。</p>

<p>上の公式にあるように、左寄せにして、サイズを100 x 200 にしたいときは</p>

<pre><code>{% img left /images/pic.png 100 200 %}
</code></pre>

<p>とします。</p>

<div class="postscript">
  <p><strong>追記: 2014/02/14</strong></p>

  <p>上のOctopress用のimgタグの両側に<code>raw</code>を入れ忘れて
普通の<code>&lt;img...&gt;</code>になってしまっていたので修正。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<p>取り敢えず色々試した感じ、<code>width</code>以降に関しては</p>

<ul>
  <li>imageファイル直後に数字が1つ若しくは2つある順に<code>weight</code>、<code>height</code>になる。</li>
  <li>2つめが数字でない場合、<code>"</code>で囲っていなくても<code>title</code>になる。</li>
  <li>ただし、数字から始まる文字列(<code>10aaa</code>)みたいな場合は10だけが<code>height</code>の値になり<code>aaa</code>は無視される。</li>
  <li>数字の後、<code>"</code>で囲った言葉ひとつだと、それが<code>"</code>も含めた言葉として認識されて<code>title</code>、<code>alt</code>の両方になる。</li>
</ul>

<p>ちょっと挙動が良くわからないですが、<code>title</code>、<code>alt</code>を気にしなければ、取り敢えず
1つ数字を入れれば<code>width</code>に、2つ入れれば<code>height</code>にも数字が入る、と。</p>

<p>また、Markdownの通常の画像挿入も使えます。</p>

<pre><code>![alt](/images/pic.png "title")
</code></pre>

<p>これを使っておけば、GitHubやBitbucketでのプレビューでも画像がみれるので
そちらでも見たいような物はなるべくOctopress(jekyll)独特の文法は避けた方が無難かと。</p>

<p>ただ、これだと画像のサイズが調整できないので、直接htmlを書いてもokです。</p>

<pre><code>&lt;img src="https://rcmdnk.com/images/pic.png" alt="alt" title="title" width="100" height="100"&gt;
</code></pre>

<p>これもちょっと注意が必要で、必ず<code>&lt;p&gt;</code>~<code>&lt;/p&gt;</code>が前後に挿入されるため
インライン的には使えません。
(このラインの前後を他の文章とつなげると、つなげたもの全てが<code>&lt;p&gt;</code>でくくられる様です。)</p>

<p>それから、<code>height</code>だけを指定することが出来ませんでした。
出来上がったhtmlファイルを見ると正しくheightの部分も変換されていて、
そのファイルを直接見ると大きさが正しくブラウザで表示されるのですが、
多分どこかでスタイルが邪魔してOctopressで出来上がったページを見るとサイズ指定が無視されます(bugなのか使用なのか…?)</p>

<p>とりあえず両方共設定してやれば思い通りにはいきます
(高さだけ揃えて横幅が違う物も一揃えに、とやるやり方が今のところ分かりません。)</p>

<h2 id="自分のpostへのリンク">自分のpostへのリンク</h2>
<p><code>post</code>は<code>publish</code>される時にデフォルトだと</p>

<pre><code>2013-03-07-setup-octopress.markdown
</code></pre>

<p>といったpostは</p>

<pre><code>/blog/2013/03/07/setup-octopress
</code></pre>

<p>的な物に変更されますが(<code>_config.yml</code>内の<code>permalink</code>の値)、
これだと少し面倒だし、これらのページヘのリンクを書くと、
ディレクトリ構造を変えた時に全て手で書き換えないといけなくなってしまいます。</p>

<p>そこで、<a href="https://raw.github.com/michael-groble/jekyll/fix_post_url/lib/jekyll/tags/post_url.rb">post_url.rb</a>
というものを導入します
(ダウンロードして<code>plugin</code>フォルダに入れる)。
これを使うと</p>

<pre><code>[link to the post]({% post_url 2013-03-07-setup-octopress %})
</code></pre>

<p>といった、そのままの形で書くことが出来ます。</p>

<h2 id="markdown記法でのtable">Markdown記法でのtable</h2>
<p>Markdownでは</p>

<pre><code> left column | center column | right column
:-----------|:------------:|------------:
a|a|a
b|b|c
</code></pre>

<p>と書くと表組みが簡単に書けるわけですが(二段目の<code>:---</code>等の部分で<code>:</code>が左だけなら
左寄せ、両側なら中寄せ、右だけなら右寄せ)、Octopressでは</p>
<strike>どうやら表組みはHTMLで書きなさいと言うことで最初はサポートされてません</strike>
<p>スタイルがちゃんと用意されてないので表示が微妙ですが、一応最初から表組みにはなってます。。</p>

<p>これを有効にするには次の様な表組み用スタイルシートを
<code>source/stylesheets/data-table.css</code>に用意し</p>
<div><script src="https://gist.github.com/5218040.js"></script>
<noscript><pre><code>* + table {
border-style:solid;
border-width:1.5px;
border-color:#CCCCCC;
}

* + table th, * + table td {
border-style:solid;
border-width:1.5px;
border-color:#CCCCCC;
}

* + table th {
border-style:solid;
font-weight:bold;
background: #FFFFFF;
}

* + table tr:nth-child(2n+1) {
  background: #F8F8F8;
}

* + table tr:nth-child(even) {
  background: #FFFFFF;
}

* + table th[align=&quot;left&quot;], * + table td[align=&quot;left&quot;] {
text-align:left;
}

* + table th[align=&quot;right&quot;], * + table td[align=&quot;right&quot;] {
text-align:right;
}

* + table th[align=&quot;center&quot;], * + table td[align=&quot;center&quot;] {
text-align:center;
}</code></pre></noscript></div>

<p>更に<code>source/_includes/head.html</code>の<code>head</code>内に</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span></span><span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;/stylesheets/data-table.css&quot;</span> <span class="na">media</span><span class="o">=</span><span class="s">&quot;screen, projection&quot;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;text/css&quot;</span> <span class="p">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>の一行を加えます。</p>

<div class="postscript">
  <p><strong>追記</strong></p>

  <p>stylesheetはせっかくsassでまとめる様になってるので
<code>data-table.css</code>の内容を<code>sass/custom/_styles.scss</code>に書いて
あげるのが素直。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<p>上の表組みもこのように表示されます。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">left column</th>
      <th style="text-align: center">center column</th>
      <th style="text-align: right">right column</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">a</td>
      <td style="text-align: center">a</td>
      <td style="text-align: right">a</td>
    </tr>
    <tr>
      <td style="text-align: left">b</td>
      <td style="text-align: center">b</td>
      <td style="text-align: right">b</td>
    </tr>
    <tr>
      <td style="text-align: left">c</td>
      <td style="text-align: center">c</td>
      <td style="text-align: right">c</td>
    </tr>
    <tr>
      <td style="text-align: left">d</td>
      <td style="text-align: center">d</td>
      <td style="text-align: right">d</td>
    </tr>
  </tbody>
</table>

<p>Note: 通常のMarkdownと違って、両側に<code>|</code>を入れてしまうと、
左端は余計な区切りに、右端は<code>|</code>文字の最後に挿入される様な形になってしまうので、
Octopressで使う場合は両端の<code>|</code>は入れない様にしないといけません。
(もしかしたらどこか変な使い方をしてるだけかもしれませんが)</p>

<blockquote>
  <p>Ref.: <a href="http://samwize.com/2012/09/24/octopress-table-stylesheet/">Octopress Table Stylesheet</a></p>
</blockquote>

<div class="postscript">
  <p><strong>追記: 2015/11/14 </strong></p>

  <p>以前まで上のSCSSの中で<code>table</code>要素について
上の参考記事に従って<code>* + table</code>みたいに隣接要素を要求してましたが、
今は下の様な変更を行っています。</p>

  <ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2015/11/14/blog-octopress/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20151114_table_120_90.jpg" width="120" height="90" alt="20151114_table_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/11/14/blog-octopress/">HTMLでブラウザの表示幅が狭い時にテーブルの右側が切れるのを防ぐ</a></div></li></ul>

  <p><strong>追記ここまで</strong></p>
</div>

<h2 id="見出し目次の追加">見出し目次の追加</h2>
<p>上の<code>Contents</code>下に出している各見出しをまとめた目次の出し方です。
<code>_config.yml</code>に</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rdiscount:
</span><span class="line">  extensions: &#091;'generate_toc'&#093;
</span><span class="line">  toc_token: "{TOC}"</span></code></pre></td></tr></table></div></figure>

<p>を追加。記事に</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{:TOC}</span></code></pre></td></tr></table></div></figure>

<p>を入れればそこに目次が出来ます。</p>

<p>ただ、これだけだと日本語の見出しを使った場合</p>

<pre><code>Liquid Exception: incompatible character encodings: UTF-8 and ASCII-8BIT in atom.xml
</code></pre>

<p>と怒られるので、</p>

<p><code>~/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.1/lib/jekyll/converters/markdown.rb</code></p>

<p>(Macで$HOMEにインストールした場合)</p>

<p>または、</p>

<p><code>/lib/ruby/gems/1.9.1/gems/jekyll-0.12.1/lib/jekyll/converters/markdown.rb</code></p>

<p>(cygwinでcommonディレクトリにインストールした場合)</p>

<p>の中身を
<a href="https://github.com/Kinvey/jekyll/commit/21325ce2b71ad138be66748b8df7290dd3438ba4">ここ</a>
で紹介されてるように変更します。</p>

<h2 id="footnote">footnote</h2>
<p><a href="https://github.com/fmcypriano/footnote-octopress">ここ</a>から
<code>footnote.rb</code>をインストール(/plugins/に追加)します。</p>

<div class="postscript">
  <p><strong>追記: 2013/05/01</strong></p>

  <p>書いた人がユーザー名を変更したらしく
(<code>fmcypriano</code><i class="fa fa-arrow-right"></i><code>fcy</code>)
現在はこちら
<a href="https://github.com/fcy/footnote-octopress">https://github.com/fcy/footnote-octopress</a>
になってます。</p>

  <p><strong>追記ここまで</strong></p>
</div>

<div class="postscript">
  <p><strong>追記: 2013/12/20</strong></p>

  <p>Latexの様にその場で書けて番号等を気にしなくても自動で投資番号を振ってくれることが
出来るプラグインを作りました。</p>

  <blockquote>
    <p><a href="https://rcmdnk.com/blog/2013/10/12/blog-octopress/">footnote-extra: Octopress用footnoteのプラグイン</a></p>
  </blockquote>

  <blockquote>
    <p><a href="https://rcmdnk.com/blog/2013/12/20/blog-octopress/">footnote-inline: Octopress用footnoteのプラグイン</a></p>
  </blockquote>

  <p><strong>追記ここまで</strong></p>
</div>

<p>フットノートは</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{% footnote_ref 2 %}</span></code></pre></td></tr></table></div></figure>

<p>を挿入するとリンクが出来て<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>
下記を記事の下に書き込めばOK。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{% footnotes %}
</span><span class="line">  {% fn %} このように下に表示されます。
</span><span class="line">{% endfootnotes %}</span></code></pre></td></tr></table></div></figure>

<p>リンクにマウスを持って行くとノートがポップアップもしてくれる。</p>

<p>これはmarkdownのコンバーターにrdiscountを使っている場合で、
<code>kramdown</code>などを使うと通常のMarkdownの様な<code>[^1]</code>でリンクを作って
<code>[^1]:</code>で参照先を書く、と言うことも出来ます。</p>

<p>(<code>kramdown</code>ソースコード表示を変更したくてちょっと変えてみましたが、
色々あって取り敢えず保留中です)</p>

<h2 id="テンプレートの変更">テンプレートの変更</h2>
<p>Rakefileにちょっと手を加えて、
<code>rake new_post['xxx']</code>で作る段階でYAMLブロックに挿入される要素を増やします。</p>

<p><code>Rakefile</code>内の110行目辺りに<code>new_post</code>にあたる部分があるので
ここの<code>Creating new post...</code>以下にある部分を変更します。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">...
</span><span class="line">  puts "Creating new post: #{filename}"
</span><span class="line">  open(filename, 'w') do |post|
</span><span class="line">    post.puts "---"
</span><span class="line">    post.puts "layout: post"
</span><span class="line">    post.puts "title: \"#{title.gsub(/&amp;/,'&amp;')}\""
</span><span class="line">    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
</span><span class="line">    post.puts "comments: true"
</span><span class="line">    post.puts "categories: [#{title.gsub(' ',',')}]"
</span><span class="line">    post.puts "keywords: #{title.gsub(' ',',')}"
</span><span class="line">    post.puts "tags: [#{title.gsub(' ',',')}]"
</span><span class="line">    post.puts "published: false"
</span><span class="line">    post.puts ""
</span><span class="line">    post.puts "---"
</span><span class="line">    post.puts ""
</span><span class="line">    post.puts "&lt;!-- more --&gt;
</span><span class="line">    post.puts ""
</span><span class="line">    post.puts "&lt;h2&gt;Contents&lt;/h2&gt;"
</span><span class="line">    post.puts "{:TOC}"
</span><span class="line">  end
</span><span class="line">...</span></code></pre></td></tr></table></div></figure>

<p>初期値が<code>published: false</code>にしておいた方が気楽に<code>new_post</code>できると思います。
(間違って作った中途半端なファイルがいつの間にかアップロードされることが無い様に)</p>

<p>それから、ほぼ毎回使う下に区切りの<code>more</code>と、目次の項目も最初から書いてあります。</p>

<p><code>categories</code>等にタイトル名をそのまま入れていますが、
通常<code>rake new_post</code>をするときには、カテゴリーになるような言葉を
いくつか入れる様にして、最初からそれを<code>categories</code>と<code>keywards</code>と<code>tags</code>に入れて
しまっています。
(タイトル名はいずれにしろ変更するので)</p>

<p>同じ日に同じカテゴリーの投稿をするときには変更する必要がありますが、
それくらいなら手作業で良いと思いますので。</p>

<p>それから、YAMLブロックの最後に空白を入れてあります。
こうしないとブロックの一番最後の行がMarkdownエディタで見出し文字に
なってしまいますので。</p>

<p><code>categories</code>と<code>tags</code>については、今のところちゃんと使い切れてないので、
取り敢えず両方に同じ値を入れています。</p>

<p>直ぐ下の<code>new_page</code>にあたる部分にも、取り敢えず
<code>published: false</code>だけ追加してあります。</p>

<h2 id="markdown拡張子の変更">Markdown拡張子の変更</h2>
<p>Rakefileでついでに26行目あたりにある</p>

<pre><code>new_post_ext    = "markdown"  # default new post file extension when using the new_post task
new_page_ext    = "markdown"  # default new page file extension when using the new_page task
</code></pre>

<p>の行を</p>

<pre><code>new_post_ext    = "md"  # default new post file extension when using the new_post task
new_page_ext    = "md"  # default new page file extension when using the new_page task
</code></pre>

<p>として、新しく<code>new_post</code>した時に出来るファイルの拡張子を<code>.md</code>にして短くして
おきました。</p>

<h2 id="関連記事">関連記事</h2>
<p><a href="https://github.com/LawrenceWoodman/related_posts-jekyll_plugin">ここ</a>から
<code>related_posts.rb</code>をとってきて<code>plugins</code>ディレクトリに入れます。</p>

<p>次に、</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;div class="related_posts"&gt;
</span><span class="line">&lt;h3&gt;You may also like...&lt;/h3&gt;
</span><span class="line">&lt;ul&gt;
</span><span class="line">{% for post in site.related_posts limit:5 %}
</span><span class="line">&lt;li&gt;&lt;a href="{{ post.url }};"&gt;{{post.title }}&lt;/a&gt;&lt;/li&gt;
</span><span class="line">{% endfor %}
</span><span class="line">&lt;/ul&gt;
</span><span class="line">&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>

<p>と言った形の内容で、<code>source/_includes/post/related_posts.html</code>と言うファイルを作ります。</p>

<p>次に、<code>source/_layouts/post.html</code>を編集して、</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{% unless site.related_posts == false %}
</span><span class="line">{% include post/related_posts.html %}
</span><span class="line">{% endunless %}</span></code></pre></td></tr></table></div></figure>

<p>の3行を<code>footer</code>内に挿入する。(一番下に入れました。)</p>

<p>下にある<code>You may also like...</code>のところです。</p>

<p>さらに<code>_config.yml</code>へ</p>

<pre><code># Related post
related_posts: true
related_posts_limit: 5
</code></pre>

<p>と入れておきます。</p>

<p>このプラグインでは<code>tags</code>の値をみて、関連ある投稿を集めます。
プラグインの中身を見れば直ぐ分かるのですが、
最初、<code>categories</code>だけを設定していたので、
全然関連付け記事が取れなくてちょっと悩みました</p>

<h2 id="タグクラウド">タグクラウド</h2>

<blockquote>
  <p>Ref: <a href="http://tokkonopapa.github.com/blog/2012/01/04/octopress-plugin-for-categories-cloud/">Octopress用Tag Cloudプラグインをリリースします</a></p>
</blockquote>

<p>で公開されているプラグインを使いました。
<a href="https://github.com/tokkonopapa/octopress-tagcloud">このレポジトリ</a>
をcloneするなり中身をダウンロードしてくるなりして、</p>

<ul>
  <li><code>octopress-tagcloud/plugin/tag_cloud.rb</code>を<code>plugin/</code>フォルダに、</li>
  <li><code>octopress-tagcloud/source/_includes/custom/asdies/</code>にある
<code>tag_cloud.html</code>と<code>category_list.html</code>を
<code>source/_includes/custom/asdies/</code>に</li>
</ul>

<p>コピーします。</p>

<p>後は
<code>_config.yml</code>内の<code>default_asides:</code>の配列に</p>

<pre><code>custom/asides/tag_cloud.html
</code></pre>

<p>を加えればタグクラウドが表示されます。</p>

<p>さらに</p>

<pre><code>custom/asides/category_list.html
</code></pre>

<p>を加えればカテゴリーが
リスト形式で表示されます。</p>

<p>ここでタグクラウド、と言っているものは<code>categories</code>で指定された物の
クラウド表記になります。(category_listも同様)</p>

]]></content>
  </entry>
  
</feed>
