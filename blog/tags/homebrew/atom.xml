<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Homebrew | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/homebrew/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-09-13T14:10:11+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brewall: brewパッケージを管理する]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/"/>
    <updated>2013-09-13T12:37:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0062009273/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51C2N2o2HkL._SL160_.jpg" border="0"></a>
昨日、<a href="/blog/2013/09/12/computer-mac-install/">Homebrewの拡張:brewdler, tap, cask</a>
という記事でbrewdlerを試したことを書きましたが、
どうもただリストを管理してるだけなうえ、
tapでインストールするパッケージはきちんとインストール出来ないし、
削除も対応してなかったりして利点が見いだせなかったので、
それらを出来るようにしたスクリプトを作りました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Brewall">Brewall</h1>

<p>ファイルはGitHubにあります:<a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>。</p>

<h2 id="Brewallのインストール">Brewallのインストール</h2>

<p>brew-tapでインストール出来るようにしたので、
Homebrewがインストールされてれば</p>

<pre><code>$ brew tap rcmdnk/brewall
$ brew install brewall
</code></pre>

<p>でインストール出来ます。</p>

<p>必要なファイルは<code>/bin/brewall</code>だけなので、これを取ってきてパスが通った好きな所に入れてもOKです。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インプットファイル">インプットファイル</h3>

<p>管理はデフォルトでは<code>/usr/local/Library/Brewfile</code>をインプットファイルとして使います。
最初に</p>

<pre><code>$ brewall -i
</code></pre>

<p>とすると、現在インストールされているファイルからBrewfileを作ってくれます。
このファイルはBrewdlerでも使えますし、
Brewdler様に作ったBrewfileもそのまま流用できます。</p>

<p>Brewdler同様、<code>tap</code>/<code>cask</code>にも対応していて、こんな感じで
Brewfilwを作って下さい(既にHomebrewで何かインストールしてある場合は先
に<code>brewall -i</code>でファイルを作りそれを編集して下さい):</p>

<pre><code>brew 'mercurial'
brew 'macvim --with-lua'
tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>最初にコマンド(<code>brew</code>/<code>tap</code>/<code>cask</code>)、次にパッケージやインストール時のオプションです。
基本的2番目以降の項目は<code>brew install</code>等の引数に直接渡されるだけなので、
<code>brew install</code>に使える引数は全て使えます。</p>

<p>なので、MacVimを<code>+lua</code>でコンパイルしてインストールしたい場合は上の様に<code>--with-lua</code>付きで。
<code>brewall -i</code>でも、これらのオプション付きでインストールしたものはオプション付きで初期化します。</p>

<p>また、Brewdlerだと<code>tap</code>で書いただけの場合、<code>brew install</code>が行われないので
手作業が必要でしたが(上のファイルだと<code>cask</code>がないと言って怒られる)、
Brewallは<code>brew install</code>もパッケージ名を探してきて自動的に一緒に<code>brew install</code>もされます。</p>

<p>また、<code>cask</code>コマンドがある場合、自動で<code>tap 'phinze/cask'</code>と同じことをするようにしてあるので、
上の例では<code>phinze/cask</code>の項を落としてもOKです。</p>

<p>順番も、先に<code>cask</code>の項目があっても、その時に<code>cask</code>をインストールしてしまうので
問題ありません。</p>

<h3 id="インストール">インストール</h3>

<p>引数なしで<code>brewall</code>を行うと、<code>Brewfile</code>にあるパッケージをインストールします。</p>

<p>MacVim等、アプリケーションを含むパッケージの場合、<code>-l</code>を与えることで、
ローカルの<code>~/Applications/</code>へ各アプリケションへのリンクを作ります(<code>brew linkapps</code>)。
もし、グローバルな<code>/Applications/</code>へインストールしたい場合は<code>-g</code>を使います。
この場合は<code>sudo</code>するのでrootパスワードを聞かれます。</p>

<h3 id="クリーンアップ">クリーンアップ</h3>

<p><code>brewall -c</code>とすると、<code>Brewfile</code>に無い項目を削除します。
デフォルトではdry runモードで走るので実際には削除しません。</p>

<p>一度<code>brewall -c</code>でチェックして、実際に削除したい場合は</p>

<pre><code>$ brew -c -r
</code></pre>

<p>と<code>-r</code>を付けて下さい。</p>

<p>また、<code>cask</code>コマンドがある場合、<code>tap 'phinze/cask'</code>がなくてもこれを削除しません。</p>

<h3 id="Brewfile編集">Brewfile編集</h3>

<pre><code>$ brew -e
</code></pre>

<p>とするとBrewfileを編集できます。Editorはデフォルトでは<code>vim</code>ですが、
<code>EDITOR</code>変数が設定してある場合はその値を使います。</p>

<h1 id="まとめ">まとめ</h1>

<p>Homebrew等、基本Rubyで書かれてるのでRubyで作った方が喜ばれるところかもしれませんが、
RubyはOctopressで使うくらいでおぼつかない(じゃあなぜOctopressを使ったか。。。)ので、
簡単にシェルスクリプトで書きました。</p>

<p>Brewdlerで出来る事は網羅し、かつ、インストールは全自動化、
削除も簡単に行える様にできたので取り敢えず満足なところ。</p>

<p></p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewの拡張:brewdler, tap, cask]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/09/12/computer-mac-install/"/>
    <updated>2013-09-12T18:03:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/09/12/computer-mac-install</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003HT5RV8/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/51FeRgNZqeL._SL160_.jpg" border="0"></a>
Macでのパッケージ管理は<a href="/blog/2013/06/21/computer-mac/">Homebrewで行うようにしてますが</a>、
<a href="https://github.com/andrew/brewdler">brewdler</a>というものがあって、
より簡単に管理できそうだ、と言うことでちょっと試してみました。
ついでに、brewdlerのREADMEで始めてHomebrewにtapというコマンドがあることや
Homebrew-caskという拡張があることも知ったのでその辺について。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<hr />

<p>追記 2013/09/13</p>

<p><a href="https://github.com/rcmdnk/homebrew-brewall">Brewall</a>
というHomebrewのパッケージたちをを管理するスクリプトを書いてみました。
Brewdlerでの使い勝手に加え、Brewderでいまいちだったところを改善してあります。
簡単なシェルスクリプトです。</p>

<blockquote><p><a href="http://rcmdnk.github.io/blog/2013/09/13/computer-mac-install-homebrew/">Brewall: brewパッケージを管理する</a></p></blockquote>

<hr />

<h1 id="brewdler">brewdler</h1>

<p><a href="https://github.com/andrew/brewdler">brewdler</a>は、
<a href="http://bundler.io/">Bundler</a>でRubyのプロジェクトを管理する感覚で、
<a href="http://brew.sh/">Homebrew</a>で管理されるパッケージも管理しよう、という向きの管理パッケージです<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。
現状は、インストールするパッケージリストの記述しておいて他のマシンに移った時でも
簡単にまとめてインストール出来るようにする、と言った感じです。
アップグレード等はbrewコマンド自体で管理。</p>

<p>インストールは簡単でRubyGemsがインストールしてあれば<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></p>

<pre><code>$ gem install brewdler
</code></pre>

<p>でOK。
使い方も簡単で、Gemfileの様な<code>Brewfile</code>と言う名前のファイルを作り、その中に、</p>

<pre><code>brew 'vim'
</code></pre>

<p>と言った感じで記述しておくと、<code>Brewfile</code>のあるディレクトリで</p>

<pre><code>$ brewdle
</code></pre>

<p>とするだけで記述されているパッケージをまとめてインストールしてくれます。</p>

<p>現状Homebrewでインストールするvimは<code>-lua</code>な状態ですが、<code>+lua</code>にしたければ</p>

<pre><code>brew 'vim --with-lua'
</code></pre>

<p>の様に、brewで使えるオプションをそのまま書いておけばそのオプション付きでインストールされます。
(基本的には<code>第一引数のコマンド</code>+<code>install</code>+<code>第二引数</code>の様な感じをしているみたい。)</p>

<p>これだけだとはっきり言って単にシェルスクリプトで回せば良いのでは。。。
という疑問があって、あまりメリットを感じてないので実はbrewdler自体は使わないでいいかな、
と思ってたりするんですが、
<a href="https://github.com/andrew/brewdler">brewderのREADME</a>で、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>と
<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>も使えるとの
記述があって、それらも初めて知ったのでちょっと試してみました。</p>

<h1 id="brew+tap">brew tap</h1>

<p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>は
Homebrewに実装されてるコマンドで、GitHubのレポジトリにある
パッケージをそのままインストールするコマンドです。
最近のHomebrewがインストールされてればそのまま使えます。</p>

<p>使い方は<code>brew</code>の後に<code>tap</code>コマンドを入れて、後はレポジトリ名。
次に使うcaskなんかだと、</p>

<pre><code>$ brew tap phinze/homebrew-cask
$ brew install brew-cask
</code></pre>

<p>こんな感じで。まず<code>tap</code>コマンドでHomebrewに必要なファイルを取ってきて<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、
そのファイルに従いインストール出来るようにします。
(<code>brew-cask</code>の名前は<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>
にある<code>brew-cask.rb</code>の名前)</p>

<p>その後、他のパッケージ同様、<code>brew install</code>コマンドでインストール出来るようになります。</p>

<p>tapするときにレポジトリ名の<code>homebrew-</code>の部分は省略して<code>phinze/cask</code>でも通ります。
逆に、tapで管理したいレポジトリを作りたい時は必ず<code>homebrew-</code>を付ける必要があり、
また、この部分以外に<code>-</code>を付けるのは禁止だそうです<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>。</p>

<p>(<code>/usr/local/Library/Taps/</code>以下にまずレポジトリごと取ってきてその中にある
<code>brew-cask.rb</code>等を参照してるみたいで、かつ、<code>install</code>時には新たに
GitHubから直接ファイルをとて来てるので、<code>Tap</code>ディレクトリにあるものが
ただただムダに思えるんですが。。。
設定ファイル用のレポジトリと実体用のレポジトリを分けて、
設定ファイルでそのレポジトリを指定すれば良いのかもしれませんが、
いずれにしろなんか無駄な感じが。。。)</p>

<p>アンインストールする時はまず通常通り、</p>

<pre><code>$ brew uninstall brew-cask
</code></pre>

<p>でbrew内でアンインストールし、</p>

<pre><code>$ brew untap phinze/homebrew-cask
</code></pre>

<p>でアンタップ(<code>Tap</code>ディレクトリから削除)。</p>

<p>これをbrewdlerで管理したい場合は</p>

<pre><code>tap 'phinze/homebrew-cask'
brew 'brew-cask'
</code></pre>

<p>の様に、<code>tap</code>と<code>brew</code>のコマンドを順に書きます。
<code>tap</code>の方は第一項を<code>tap</code>にして第二項をレポジトリ名に。
<a href="https://github.com/andrew/brewdler">brewderのREADME</a>だと、
caskが<code>tap</code>だけ書かれてますが、
これだと<code>tap</code>するだけでインストールしてくれません。
なので、必ずインストールするために<code>brew</code>の項を下に書く必要があります。</p>

<h1 id="brew+cask">brew cask</h1>

<p><a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>は
Homebrewの拡張でWebから落としてきてインストールする様なソフトを
自動でインストールしてくれます。
cask自体のインストールは上でやったように<code>brew tap</code>で。</p>

<p>インストールできるソフトは現在デフォルトではこんな感じ:
<a href="https://gist.github.com/rcmdnk/6541661">brew-cask-search.txt</a>。</p>

<p>インストールは</p>

<pre><code>$ brew cask install firefox
</code></pre>

<p>こんな感じで。
実体は<code>/opt/homebrew-cask/Caskroom</code>にインストールされ、そこから
デフォルトだと、<code>~/Applications/</code>へリンクが貼られます。
(最初に<code>homebrew-cask</code>ディレクトリがない場合はディレクトリを作るためにroot権限が求められます。)</p>

<p>インストール先を変えたい場合は環境変数<code>HOMEBREW_CASK_OPTS</code>を</p>

<pre><code>$ export HOMEBREW_CASK_OPTS="--appdir=/Applications"
</code></pre>

<p>と設定すると<code>/Applications</code>にインストールする様になります。
<code>brew cask install</code>コマンド時に直接<code>--appdir=/Applications</code>を加えてもOK<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup>。</p>

<p>アンインストールは</p>

<pre><code>$ brew cask uninstall firefox
</code></pre>

<p>で<code>~/Applications/</code>のリンクも<code>.../Caskroom/</code>の実体も削除。</p>

<p>デフォルトのfirefoxは英語版ですが、日本語版をインストールしたい場合は</p>

<pre><code>$ brew cask edit firefox
</code></pre>

<p>とすると設定ファイルが開けるので、その中で</p>

<pre><code>-  url 'https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=en-US'
+  url 'https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=ja-JP-mac'
</code></pre>

<p>の様に、<code>url</code>の部分で<code>lang</code>を<code>en-US</code>から<code>ja-JP-mac</code>に変更します。</p>

<p>ここで注意が必要なのが、一回<code>cask install</code>すると、
<code>/Library/Caches/Homebrew/</code>に<code>firefox-latest</code>のキャシュが残ってて、
これを使ってしまうので、再度違う言語でインストールしたい場合には
このファイルを先に消しておく必要があります。
(caskでダウンロードされたキャッシュは<code>brew cleanup</code>等で消えないので、
手で消すしか無い？)</p>

<p>これをbrewdleで管理したい場合はBrewfileに</p>

<pre><code>cask 'firefox'
</code></pre>

<p>と書いて<code>brewdle</code>すれば良いだけです。</p>

<p>ただ、<a href="https://github.com/andrew/brewdler">brewdleのREADME</a>にあるように
いきなり<code>tap</code>での<code>cask</code>のインストールと<code>cask</code>でのインストールを</p>

<pre><code>tap 'phinze/cask'
cask 'firefox'
</code></pre>

<p>こんな感じで書いてもおいても、caskは無いと言われてしまいます。</p>

<p>なので、これらがインストールされてない状態からBrewfileを作る時は、</p>

<ol>
<li>tap 'phinze/homebrew-cask'</li>
<li>brew 'brew-cask'</li>
<li>cask 'firefox'</li>
</ol>


<p>の様にまず、caskを<code>tap</code>、caskをインストール、
その後に<code>cask</code>でインストールするもの、のように書いていく必要があります。</p>

<h1 id="まとめ">まとめ</h1>

<p>brewdlerが便利そうだな、と思って使ってみたんですが、いまいち単なる
リストと違って何が嬉しいのかわからないのが現状。
いっそのこと適当なスクリプトを自分で書いてしまった方が色々できて
良さそう。。。</p>

<p>ただ、
<a href="https://github.com/mxcl/homebrew/wiki/brew-tap">Homebrew brew-tap</a>と
<a href="https://github.com/phinze/homebrew-cask">Homebrew-cask</a>を
知れたのは良かったです。
差し当たり現在入れてある物はcaskで置き換えたりはしてませんが、
そのうち。</p>

<p>と、思って、<code>cask</code>についていろいろ調べてた時、
<code>cask</code>の実体が<code>/opt/</code>以下にあるのでちょっと<code>/opt/</code>行った所、
<code>boxen</code>ディレクトリを発見。
そう言えば、ちょっと前に</p>

<blockquote><p><a href="http://qiita.com/yuku_t/items/c6f20de0e4f4c352046c">Boxen使わなくても許されるのは2012年までだよね</a></p></blockquote>

<p>とかあったので<a href="http://boxen.github.com/">Boxen</a>入れてみようと思って、
でも途中でMac1台しか持ってないし、まだ暫く買い換えなそうだし、
次Mac買うとも限らないし、、、と思って途中で辞めたのを思い出しました。</p>

<p>ただ、<a href="http://brew.sh/">Homebrew</a>自体がBoxenで管理できたりするので、
まずはBoxenで管理出来るパッケージはBoxenでして、
それ以外をHomebrew(+cask)で管理する、と言う感じにするのが良いのかも。</p>

<p>そのうちやりたいところ。。。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://qiita.com/futoase/items/9a52ddd8bb19863372d0">homebrewのパッケージをGemfileみたく管理したい -> brewdlerがあった...</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a>でrubyと一緒に導入済。
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>通常のHomebrewの各パッケージ用の設定ファイルは<code>/usr/local/Library/Formula/</code>内の<code>vim.rb</code>等。
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="https://github.com/mxcl/homebrew/wiki/brew-tap">brew tap</a>
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p><a href="https://github.com/phinze/homebrew-cask/blob/master/USAGE.md">homebrew-cask/USAGE.md</a>
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stowでmake installしたパッケージを管理]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin/"/>
    <updated>2013-08-11T03:53:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/11/computer-linux-windows-cygwin</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003KOAR0G/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41PYjDYaZvL._SL160_.jpg" border="0"></a></p>

<p><a href="/blog/2013/08/04/computer-linux-mac/">pacoでmake installしたパッケージを管理</a>
で書いた様に、Linux(WindowsのcoLinuxも含む)で
make installしたパッケージも管理出来る様にしましたが、
Cygwinにもpacoを入れようとした所コンパイル出来なかったので
代わりにstowと言うインストーラーを入れました。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Cygwinではpacoをコンパイル出来ない">Cygwinではpacoをコンパイル出来ない</h1>

<p>pacoのパッケージを取ってきてCygwinでコンパイルしようとすると</p>

<pre><code>log.c:67:20: error: ‘RTLD_NEXT’ undeclared (first use in this function)
</code></pre>

<p>と言った様なエラーが出てコンパイル出来ないのですが、これはglibcが入ってないからですが、
Cygwinではglibcは入れられない様です<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>いくつかそれっぽいものはありましたが<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>、素直に入れることは
出来なそうなのでpacoは辞めておくことに。</p>

<h1 id="stow">stow</h1>

<p><a href="http://www.gnu.org/software/stow/">stow</a>はpacoと同じ様な<code>make install</code>などで
<code>apt-get</code>などを通さず直接インストールするパッケージを管理する
インストーラーです。</p>

<h2 id="paco+v.s.+stow">paco v.s. stow</h2>

<p>pacoとstowの違いは</p>

<ul>
<li>paco: <code>/usr/local/var/log/paco</code>等のディレクトリ以下にパッケージ名情報ファイルを作り、
その情報を元にインストールされたファイルを管理する。</li>
<li>stow: <code>/usr/local/stow/</code>等のディレクトリ以下にパッケージ名ディレクトリを作り、
その中にパッケージをインストールする。
そこから<code>/usr/local/</code>などへリンクを張る。</li>
</ul>


<p>pacoでインストールした場合は、パッケージ自体は通常通りインストールされるので、<code>/usr/local/var/log/paco</code>自体を削除しても問題有りません。</p>

<p>stowの場合は<code>/usr/local/</code>へはリンクが貼られるだけなので
通常インストールとは形が変わります。
一方、stowは<code>/usr/local/stow/</code>からのリンクを管理するので、
例えば1つのパッケージでバージョンの違う物を両方インストールしておいて、
一時的に切り替える事が簡単に出来ます。
新しいバージョンを入れて取り敢えず試してみる、と言うことができるので、
その点でstowが結構便利かもしれません。</p>

<h2 id="stowインストール">stowインストール</h2>

<ul>
<li>Cygwin</li>
</ul>


<p><a href="/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>で</p>

<pre><code>$ apt-cyg install stow
</code></pre>

<ul>
<li>Mac</li>
</ul>


<p><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>で</p>

<pre><code>$ brew install stow
</code></pre>

<ul>
<li>Linux</li>
</ul>


<p>apt-getなど。root権限がないところでローカルに入れる場合は自分もstowで管理。</p>

<pre><code>$ cd ~/tmp/
$ wget http://ftp.gnu.org/gnu/stow/stow-2.2.0.tar.gz
$ tar xzf stow-2.2.0.tar.gz
$ cd stow-2.2.0
$ ./configure --prefix=$HOME/usr/local/stow/stow-2.2.0
$ make &amp;&amp; make install
$ cd ~/usr/local/stow
$ ./stow-2.2.0/bin/stow stow-2.2.0
</code></pre>

<h2 id="stowの使い方">stowの使い方</h2>

<p>まず、stowで管理するパッケージをインストールするディレクトリを決めておきます。
通常は最終的にインストールするディレクトリ下にstowというディレクトリを作ります。
(上の場合は<code>$HOME/usr/local/</code>に<code>bin/stow</code>などをインストールするので
<code>$HOME/usr/local/stow</code>ディレクトリを作って入れています。)</p>

<p>パッケージをインストールする際は、prefix等でインストール先を
<code>$HOME/usr/local/stow</code>+<code>パッケージ名</code>に指定して後は通常通りインストールします。</p>

<p>インストール後、stowディレクトリへ行き、</p>

<pre><code>$ stow package
</code></pre>

<p>とすることで、package内から<code>../</code>の<code>/bin/</code>等へリンクが張られます。</p>

<p>アンインストールは</p>

<pre><code>$ stow -D package
</code></pre>

<p>とするとリンクが削除されます。パッケージがその後必要なければ
stowディレクトリから実体も削除すればOK。</p>

<p>バージョンの違う同じパッケージをインストールしてる場合は</p>

<pre><code>$ stow -D package-1.0
$ stow package-2.0
</code></pre>

<p>の様にすれば1.0から2.0へ切り替える事が出来、
実体は残ったままなので、同じ様に1.0に戻る事もすぐ出来ます。</p>

<pre><code>$ stow -n package-2.0
</code></pre>

<p>とすると、ドライランすることが出来ます。</p>

<p>通常は、カレントディレクトリがstowディレクトリ、親ディレクトリが
リンクを作るインストール先ですが、これを変えたい場合は</p>

<ul>
<li><code>-d stow_dir</code>、<code>--dir=stow_dir</code>でstowディレクトリを指定。</li>
<li><code>-t target_dir</code>、<code>--target=target_dir</code>でインストール先ディレクトリを指定。</li>
</ul>


<p>します。ただ、pacoの場合と違い、これらの情報は残らないので、
特別指定した場合はアンインストールする場合も指定する必要があるので、
管理上、最終的なインストール先の下にstowディレクトリを作るのが良いかと思います。</p>

<h2 id="すでにインストールしてあるパッケージに対してstowで再インストールする場合">すでにインストールしてあるパッケージに対してstowで再インストールする場合</h2>

<p>すでにパッケージがインストールしてあると、
リンクでなく実体が存在するのでstowでリンクを作ろうとすると
エラーが出ます。
(<code>-D</code>で削除しようとするとリンクじゃない、と言って削除してくれない。)
一旦それらのファイルを削除しないとstowで管理しようがないみたいで、
結構面倒です。</p>

<p>そこで<a href="https://github.com/rcmdnk/scripts/blob/master/stowReset.sh">stowReset.sh</a>
と言うスクリプトを作りました。</p>

<p>使い方は、まず、インストールしたいパッケージをstowディレクトリに
インストールした後、
stowディレクトリに行き、</p>

<pre><code>$ stowReset.sh package
</code></pre>

<p>とすると、packageに関連するファイルが親ディレクトリから削除されます。
stow同様に<code>-d</code>、<code>-t</code>、<code>-n</code>のオプションが使えます(<code>--dir</code>等2重ハイフンオプションは未対応)。</p>

<p>その後、通常通り、</p>

<pre><code>$ stow package
</code></pre>

<p>とすればリンクを作れる様になります。</p>

<h1 id="まとめ">まとめ</h1>

<p>pacoに比べて、新しいバージョンのテスト等にも便利に使えそうなので、
MacやLinuxでもpacoからstowへ移行しようと思います。</p>

<p>pacoだとconfigureの引数等の情報がそのまま残るのでちょっと便利ですが、
その点はちゃんとメモするようにしておけばOKかな、と。</p>

<hr />

<p>追記 2013/08/28</p>

<p><strike>暫く使ってみて問題発見。stowだと、<code>~/usr/local/stow</code>の下にパッケージディレクトリを置いて、
そこから<code>~/usr/local/</code>へリンクを張るわけですが、その際、例えば
<code>~/usr/local/bin</code>がある場合はその下からリンクを作り始め、一方<code>bin</code>ディレクトリが
ない場合は<code>bin</code>自体がリンクになってしまうみたいです。</p>

<p>つまり、最初に何も<code>~/usr/local/</code>にない状態で<code>vim</code>などをインストールすると、
<code>~/usr/local/bin</code>が<code>~/usr/local/stow/vim/bin</code>などへのシンボリックリンクになってしまいます。
こうなると、次に別のソフトをインストールするときに実質的に<code>~/usr/local/stow/vim/bin</code>内に
シンボリックリンクを置くことになってしまうので<code>~/usr/local/stow/vim/</code>を削除してしまうと
<code>~/usr/local/bin</code>自体がリンク切れになってしまいますし、vimをアップデートすると他のソフトのインストールが消えます。</p>

<p>stowのインストールでディレクトリはリンクでなく必ず掘る様にして、
また、アンインストール時はディレクトリ内に何も無いときに限り消す、みたいなラッパーを作れば良いのだと思うのですが。。。
(sourceコード直接いじった方が楽かな。。。？)そのうちなんとかしたい所。
できればpacoみたいにconfigureオプションを保存出来る様になればなおもよしですが。。。
</strike></p>

<hr />

<hr />

<p>さらに追記 2013/08/29</p>

<p>stowは意外と賢かったです。マニュアルを見たらこの辺をきちんと処理する様になってることが
分かりました。</p>

<p>最初にインストールする時は最も上位のディレクトリだけのリンクを作ろうとして
これを<code>folding</code>と呼んでいます。</p>

<p>で、<code>~/usr/local/bin</code>等が<code>~/usr/local/stow/vim/bin</code>などへのシンボリックリンクの
状態で、次にgit等をインストールすると、<code>bin</code>がシンボリックだと言う事を理解して、
まず、vimへのリンクを消し、新たにディレクトリを作り、
その中にvimとgitの<code>bin</code>内のコンテンツへのリンクを作りなおしてくれます。</p>

<p>逆に、<code>stow -D</code>で削除していく時も、中身が1つのパッケージだけになったディレクトリは
まとめてシンボリックリンクに変えられます。</p>

<p>自分でディレクトリを作ってしまったりするとこのアンインストール時に
無駄にディレクトリを残してしまうことが有ります。
(2つ以上のパッケージが同じディレクトリを使っていると、アンインストールしていって
最後の1つになった時にそのディレクトリをシンボリックリンクにしてくれますが、
最初から1つしか無いとそのディレクトリはパッケージをアンインストールしても残ってしまいます。)</p>

<p>なので、基本的に<code>bin</code>等を自分で作るべきではないです。</p>

<p>これに関連するオプションで<code>--no-folding</code>というオプションが有ります(<code>stow -h</code>では記述を忘れてるのか出て来ない)。
このオプションをインストール時につけると、所謂上で間違って指摘していたような、
各ディレクトリをシンボリックリンクでなく全て掘り下げる様に作ってくれます。
ただ、これをしてしまうとアンインストール時にからディレクトリのゴミが残ります。</p>

<p>また、<code>--no-folding</code>をアンインストール時に使うと、仮にそのディレクトリ内が
1つのパッケージだけになるような場合でもシンボリックリンクに変えたりしないで
そのまま残します。
この場合も後々アンインストールするときにゴミが残るような状態になります。</p>

<p>ので、特別理由がない限りあまり使うことはなさそうです。</p>

<p>他に、<code>--adopt</code>というオプションもあり、ちょっと特殊な動きをします。
通常、stowでインストールするとき、上に書いたように、先にシンボリックリンクでない
普通のファイルがインストールされていると上書きできずにエラーとなります。
しかし、このオプションを使うと、もし、通常ファイルがある場合、
<code>そのファイルをstowディレクトリにあるパッケージにコピーした上でシンボリックリンクを作る</code>、という動きをします。</p>

<p>ここで注意しなければいけないのは、もともとパッケージに入っているファイルが上書きされることです。
つまり、古いファイルが残っていて、それを上書きできる様なオプションではありません。</p>

<p>このオプションの使い道としては、上で作っった<code>stowReset.sh</code>を使わなくてはいけない様な状況で、
パッケージをstowディレクトリにインストール後、一度そのコピーを作り、
そのコピーパッケージでadoptし、その後、オリジナルのパッケージをrestowする、とかでしょうか？</p>

<pre><code>$ pwd
~/usr/local/stow
$ ls
vim
$ cp -r vim vim.tmp
$ stow --adopt vim.tmp &amp;&amp; stow -D vim.tmp &amp;&amp; rm -rf stow.tmp
$ stow vim
</code></pre>

<p>これで、<code>stowReset.sh</code>でやってることとだいたい同じことが出来ます。</p>

<p>ただし、パッケージ内にシンボリックリンクが元々入ってる場合があり
(ライブラリーや実行ファイルの別名など)それらは<code>--adopt</code>しようとすると
他のパッケージに管理されてるとみなされて無視されます。
従ってそのまま残り新しくインストール出来ません。その場合には<code>stowRest.sh</code>を
使ってみてください。
(数ファイルだけだと思うので、その際には手作業でもいいかもしれませんが。)</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://cygwin.com/faq.html#faq.programming.glibc">Where is glibc?</a>
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p><a href="http://www.gurucoding.com/en/pc_cross_compiler/building_glibc_cygwin_vm.php">Building GLibc in the Cygwin VM</a>
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p><a href="http://artfiles.org/cygwin.org/pub/glibc/releases/">Index of /cygwin.org/pub/glibc/releases</a>
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua対応Vimをインストール]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/08/07/computer-vim/"/>
    <updated>2013-08-07T20:36:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/08/07/computer-vim</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4048677977/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41otNZcUklL._SL160_.jpg" border="0"></a></p>

<p>Vimでの補完機能のプラグインである<a href="https://github.com/Shougo/neocomplcache.vim">neocompletecache</a>
の後継版<a href="https://github.com/Shougo/neocomplete.vim">neocomplete</a>
を使うためにVimを再インストールした際の手順。
<a href="http://www.lua.org/home.html">Lua</a>自体がない環境もあったので、
Luaのインストールからです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="Linux">Linux</h1>

<ul>
<li>su権限持っていないのでローカルにluaをインストール:</li>
</ul>


<p><a href="http://www.lua.org/ftp/">luaのダウンロードページ</a>より最新のを取ってきてインストール。
取り敢えずmakeしてみるとエラーがでた。</p>

<pre><code>$ cd ~/tmp/
$ wget http://www.lua.org/ftp/lua-5.2.2.tar.gz
$ tar xzf lua-5.2.2.tar.gz
$ cd lua-5.2.2
$ make linux
...
make[1]: Entering directory `/home/user/tmp/lua-5.2.2/src'
make all SYSCFLAGS="-DLUA_USE_LINUX" SYSLIBS="-Wl,-E -ldl -lreadline"
make[2]: Entering directory `/home/user/tmp/lua-5.2.2/src'
gcc -o lua   lua.o liblua.a -lm -Wl,-E -ldl -lreadline-
/usr/lib/../lib64/libreadline.so: undefined reference to `PC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetflag'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetent'
/usr/lib/../lib64/libreadline.so: undefined reference to `UP'
/usr/lib/../lib64/libreadline.so: undefined reference to `tputs'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgoto'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetnum'
/usr/lib/../lib64/libreadline.so: undefined reference to `BC'
/usr/lib/../lib64/libreadline.so: undefined reference to `tgetstr'
collect2: ld returned 1 exit status
make[2]: *** [lua] Error 1
make[2]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make[1]: *** [linux] Error 2
make[1]: Leaving directory `/home/user/tmp/lua-5.2.2/src'
make: *** [linux] Error 2
</code></pre>

<p>libreadlineを調べてみると</p>

<pre><code>$ ldd -r /usr/lib64/libreadline.so
        linux-vdso.so.1 =&gt;  (0x00007fffbe3aa000)
        /$LIB/snoopy.so =&gt; /lib64/snoopy.so (0x00002b2a6a387000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b2a6a5af000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b2a6a907000)
        /lib64/ld-linux-x86-64.so.2 (0x00002b2a69f29000)
undefined symbol: PC    (/usr/lib64/libreadline.so)
undefined symbol: UP    (/usr/lib64/libreadline.so)
undefined symbol: BC    (/usr/lib64/libreadline.so)
undefined symbol: tgetflag      (/usr/lib64/libreadline.so)
undefined symbol: tgetent       (/usr/lib64/libreadline.so)
undefined symbol: tputs (/usr/lib64/libreadline.so)
undefined symbol: tgoto (/usr/lib64/libreadline.so)
undefined symbol: tgetnum       (/usr/lib64/libreadline.so)
undefined symbol: tgetstr       (/usr/lib64/libreadline.so)
</code></pre>

<p>こんな感じ。
これに関することが
<a href="http://lua.2524044.n2.nabble.com/ANN-Lua-5-2-2-rc1-now-available-td7646399i20.html">このthread</a>
にあったので、個々にある通り<code>-ltermcap</code>を加えてみる。</p>

<pre><code>$ make linux MYLIBS=-ltermcap
</code></pre>

<p>OK。<code>$HOME/usr/local</code>に<a href="/blog/2013/08/04/computer-linux-mac/">paco</a>に登録しつつインストール。</p>

<pre><code>$ paco -D "make install INSTALL_TOP=$HOME/usr/local"
</code></pre>

<ul>
<li>Vimをインストール</li>
</ul>


<p>ソースからコンパイルしてインストール。</p>

<pre><code>$ cd ~/tmp/
$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src
$ LDFLAGS="-L$HOME/usr/local/lib/" ./configure --with-lua-prefix=$HOME/usr/local --prefix=$HOME/usr/local --with-local-dir=$HOME/usr/local --disable-selinux --disable-xim --disable-darwin --disable-xsmp --disable-xsmp-interact --enable-netbeans --enable-multibyte --enable-gui=no --enable-gtk2-check=no --enable-gnome-check=no --enable-motif-check=no --enable-athena-check=no --enable-nextaw-check=no --enable-carbon-check=no --disable-gtktest --disable-acl --disable-gpm --disable-sysmouse --enable-luainterp=yes --enable-mzschemeinterp=no --enable-perlinterp=no --enable-pythoninterp=yes --enable-python3interp=yes --enable-tclinterp --enable-rubyinterp=yes --enable-cscope --disable-workshop --disable-sniff --enable-hangulinput --enable-fontset --enable-largefile --enable-nls
</code></pre>

<p><code>--enable-luainterp=yes</code>でluaオプションを有効にします。
他は適宣自分に合わせて設定。</p>

<p><code>LDFLAGS</code>や<code>--with-local-dir</code>で<code>$HOME/usr/local</code>にあるライブラリー等を使う様に
指定してますが、lua用に
<code>--with-lua-prefix=$HOME/usr/local</code>が別途必要の様。</p>

<p>ちゃんとluaが見つかれば、<code>./configure</code>時に、</p>

<pre><code>...
checking if link with -L/home/user/usr/local/lib -llua is sane... yes
...
</code></pre>

<p>の様に見つかった、と言ってくれます。
<code>--with-lua-prefix</code>を指定しないと<code>/usr/</code>を見に行き、</p>

<pre><code>checking --with-lua-prefix argument... no
checking LUA_PREFIX environment var... not set, default to /usr
checking --with-luajit... no
checking for lua... (cached) /usr/bin/lua
checking Lua version... (cached) 5.1
checking if lua.h can be found in /usr/include... no
checking if lua.h can be found in /usr/include/lua5.1... no
</code></pre>

<p>な感じで失敗します。</p>

<p>configureが成功したら</p>

<pre><code>$ make &amp;&amp; make install
</code></pre>

<ul>
<li>PATHの設定</li>
</ul>


<p><code>$HOME/usr/local</code>にPATHが通ってない場合は以下の設定を<code>~/.bashrc</code>に加えておきます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/usr/local/bin:<span class="nv">$PATH</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1 id="Windows+(Cygwin)">Windows (Cygwin)</h1>

<ul>
<li>setup.exeを使うか<a href="http://rcmdnk.github.io/blog/2013/06/24/computer-windows-git-cygwin/">apt-cyg</a>
でluaをインストール:</li>
</ul>


<p>apt-cygで</p>

<pre><code>$ apt-cyg install lua
</code></pre>

<ul>
<li>Vimのインストール</li>
</ul>


<p>現状のCygwinで配布されてるバイナリが1-1110, 1112-1152のパッチが当たっていて、
さらにLua対応でビルドされてるので、
最近インストールしたなら対応しているはずです。</p>

<p>もし対応してなかったり古い場合は取り直し。</p>

<p>apt-cygには<code>update</code>と言ったコマンドが無いので、一度削除してから入れなおします。</p>

<pre><code>$ apt-cyg remove vim
</code></pre>

<p>そして新たにインストール:</p>

<pre><code>$ apt-cyg install vim
</code></pre>

<h1 id="Mac">Mac</h1>

<ul>
<li><a href="/blog/2013/06/21/computer-mac/">Homebrew</a>を使ってLuaをインストール:</li>
</ul>


<p>Homebrewでluaを</p>

<pre><code>$ brew install lua
</code></pre>

<ul>
<li>HomebrewでMacVimのHEADバージョンをインストール<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>:</li>
</ul>


<p>さらにvimも</p>

<pre><code>$ brew install macvim --with-cscope --with-lua --HEAD
$ sudo ln -s /usr/local/Cellar/macvim/HEAD/MacVim.app /Applications/
</code></pre>

<ul>
<li>ターミナル等から使うため<code>~/.bashrc</code>に次を追加:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;For+MacVim&quot;</span>&gt;For MacVim&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$OSTYPE&quot;</span> <span class="o">=</span>~ <span class="s2">&quot;darwin&quot;</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="o">[</span> -d /Applications/MacVim.app/Contents/MacOS <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Applications/MacVim.app/Contents/MacOS:<span class="nv">$PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>ソースから直接コンパイルしてインストール</li>
</ul>


<p>Homebrew版でも現状7.4b版がHEADで使えて、さらに<code>--with-lua</code>オプションで
luaを有効に出来るので充分ですが、もしソースから直接コンパイルして
インストールしたい場合は</p>

<pre><code>$ brew install mercurial
</code></pre>

<p>でMercurial(hg)をインストールしてから上のLinuxとかの様に<code>hg</code>でソースを取ってきて
インストール。</p>

<p></p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href="http://supermomonga.com/2013/07/03/macvim-with-lua-features/">最新パッチ＆if_luaなMacVimで高速検索＆補完！</a>
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitの更新とHomebrewの導入]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/06/21/computer-mac/"/>
    <updated>2013-06-21T18:24:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/06/21/computer-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008B3AMNI/rcmdnk0c-22/ref=nosim/" rel="nofollow" target="_blank" ><img class="left" src="http://ecx.images-amazon.com/images/I/41RrsWMRLJL._SL160_.jpg" border="0"></a></p>

<p>単にgitを新しくしたかっただけなんですが、
Homebrewで入れてみよう、と思ったら
意外と色々やることがあったのでそのまとめ。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




</p>

<h1 id="gitの更新">gitの更新</h1>

<p>Linux環境で使ってるgitが1.8になって</p>

<pre><code>warning: push.default is unset; its implicit value is changing in Git 2.0 from 'matching' to 'simple'...
</code></pre>

<p>と言った注意が出るようになってたので、</p>

<pre><code>$ git config --global push.default simple
</code></pre>

<p>で<code>push.default</code>を設定。主なオプションは<code>simple</code>と<code>matching</code>で
<code>matching</code>の方がこれまでのデフォルトと同じ動きで
<code>simple</code>の方はupstreamでのブランチ名と現在のブランチ名を比べて
違った場合は<code>push</code>しない様にちょっと保守的にする。</p>

<p>まあ、基本、自分用バックアップで使ってる程度なのでどっちでも良いのですが、
新しい初期値と言うことで<code>simple</code>に。</p>

<p><code>.gitconfig</code>は他のdotfilesと同様いくつかの環境で同期しているので、
他の所でもこの設定で動かすように、、、した所、Macのgitがまだ1.7の古いバージョン
(いくつだったか見てなかった...)で、
この<code>.gitconfig</code>設定を使うと<code>simpleというオプションは無い</code>と言われてしまいました<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>。</p>

<p>ということで、gitをアップデートしよう、と思って<code>/usr/bin/git</code>をアップデート
する方法がぱっとわからないのと<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>、Homebrewとかもうちょっと
ちゃんと見てみよう、ってのがあったのでHomebrewで入れて見ることにしました。</p>

<h1 id="Homebrewインストール">Homebrewインストール</h1>

<p>Homebrew自体は以前なんとなくインストールしていたのですが、</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)”
</code></pre>

<p>こんなコマンドでさくっとインストール出来ます。</p>

<h1 id="MacPortsの削除">MacPortsの削除</h1>

<p>MacPortsも以前なんとなく使ってみたくて入れた記憶はあるのですが、
なんのために入れたかさっぱり覚えてない(上に記録もない...)。</p>

<p>MacPortsが入っている状態で<code>brew</code>コマンドを打つとMacPortsとかあって
衝突起こすからそっちは削除しなさい、毎回と注意されて嫌なのでこっちは削除することに。</p>

<p>取り敢えずMacPortsで管理されてるパッケージをメモ。</p>

<pre><code>$ port installed | tee port_installed.txt

The following ports are currently installedu
  bzip2 @1.0.6_0 (active)
  curl-ca-bundle @7.25.0_0 (active)
  db46 @4.6.21_6 (active)
  expat @2.1.0_0 (active)
  gdbm @1.10_1 (active)
  gettext @0.18.1.1_2 (active)
  gperf @3.0.4_2 (active)
  libedit @20110802-3.0_0 (active)
  libiconv @1.14_0 (active)
  mercurial @2.1.2_0 (active)
  ncurses @5.9_1 (active)
  ncursesw @5.8_0 (active)
  openssl @1.0.1_2 (active)
  perl5 @5.12.3_1+perl5_12 (active)
  perl5.12 @5.12.4_0 (active)
  python27 @2.7.3_0 (active)
  python_select @0.3_1 (active)
  sqlite3 @3.7.11_0 (active)
  xz @5.0.3_0 (active)
  zlib @1.2.6_0 (active)
</code></pre>

<p>内容を見て、さらに謎<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>。
取り敢えず必要になったら入れればいいやのスタンスで全て削除。</p>

<p>MacPortsのガイド<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>に従い</p>

<pre><code>$ sudo port -fp uninstall installed
$ sudo rm -rf \
    /opt/local \
    /Applications/DarwinPorts \
    /Applications/MacPorts \
    /Library/LaunchDaemons/org.macports.* \
    /Library/Receipts/DarwinPorts*.pkg \
    /Library/Receipts/MacPorts*.pkg \
    /Library/StartupItems/DarwinPortsStartup \
    /Library/Tcl/darwinports1.0 \
    /Library/Tcl/macports1.0 \
    ~/.macports
</code></pre>

<p>さらに<code>.bashrc</code>(から読み込んでるファイル)にあった下の様なPATHの設定を削除。</p>

<pre><code>#for MacPort
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
export MANPATH=/opt/local/man:$MANPATH
</code></pre>

<h1 id="brew+doctor">brew doctor</h1>

<p>準備が整ったのでHomebrewを使っていきます。</p>

<p>Homebrewでは<code>brew doctor</code>というコマンドで環境のチェックをしてくれるので、</p>

<pre><code>$ brew doctor
</code></pre>

<p>としたところ
最初はMacPortsを消すまえだったのでMacPortsを消しなさいの文句もありましたが、
削除後にも何やら沢山Warningが出ていて面倒そうでしたが、、せっかくなので全部Fixしてみました。</p>

<p>最初に出たWarningは<a href="https://gist.github.com/rcmdnk/5832989">こんな感じ</a>でした。</p>

<h2 id="/usr/localの管理権限の追加">/usr/localの管理権限の追加</h2>

<p>Homebrewではユーザー権限で<code>/usr/local</code>以下に色々追加していくのですが、
他のアプリを導入する際に<code>prefix</code>を<code>/usr/local</code>指定にして
<code>sudo make install</code>等としていると、root権限で<code>/usr/local</code>を作るので、
このディレクトリ下は通常のユーザー権限ではいじれなくなります。</p>

<p><code>doctor</code>がそう言っていた(!?)こともあるので、これに対しては安易に</p>

<pre><code>$ sudo chown -R $USER /usr/local
</code></pre>

<p>で権限をユーザーにあげてしまうことで解決。</p>

<h2 id="Xcodeのアップデート">Xcodeのアップデート</h2>

<p>Xcodeをインストールする際、App Storeからと、直接ダウンロードして入れたものが
あったみたいで、まず古いXcodeを消しなさい、的な表示があったので支持に従い</p>

<pre><code>$ sudo   /Developer/Library/uninstall-developer-folder
</code></pre>

<p>を実行。これには数分かかりました。</p>

<h2 id="Xcodeの再インストール">Xcodeの再インストール</h2>

<p>残ったXcodeも古いのか再インストールするよう促されるので、
一旦削除し(<a href="http://www.freemacsoft.net/appcleaner/">App Cleaner</a>を使用)、
App Storeから再インストール。</p>

<p>さらにコマンドラインツールも古いから新しくしろと言われるので、
<a href="https://developer.apple.com/downloads/index.action">AppleのDevelopersページ</a>
から<code>Command Line Tools (OS X Lion) for Xcode - April 2013</code>
をダウンロードしてきてインストール。</p>

<p>インストール後、一度もXcodeを立ちあげないとライセンスに同意してない、
と注意されるので、取り敢えずGUI版でもコマンドラインツールでも
いいから立ち上げてライセンスに同意しておく必要があります。</p>

<h2 id="一回Homebreewをアップデートしてみる">一回Homebreewをアップデートしてみる</h2>

<p>Xcodeの再インストールが住んだので、<code>doctor</code>で最後に注意される
<code>Homebrewを24時間以内にアップデートしてないよ</code>の表示を消すため
<code>brew update</code>を実行。</p>

<pre><code>$ brew update
error: The following untracked working tree files would be overwritten by merge:
        Library/Formula/bigloo.rb
Please move or remove them before you can merge.
Aborting
Error: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master
</code></pre>

<p>エラーが出てしまったので、上で言われている<code>bigloo.rb</code>を一旦退避(その後削除)。</p>

<pre><code>$ mv /usr/local/Library/Formula/bigloo.rb ~/tmp/
</code></pre>

<p>再びアップデート</p>

<pre><code>$ brew upate
</code></pre>

<p>今度はOK。</p>

<p>ということで再び<code>brew doctor</code>をして残りを潰していきます。</p>

<h2 id="gitの状態の回復">gitの状態の回復</h2>

<p>Homebrewを大分前にインストールしたままの状態で何かしたのか、
<code>You have uncommited modifications to Homebrew</code>と言った注意があるので、
これも指示通り</p>

<pre><code>$ cd /usr/local/Library &amp;&amp; git stash &amp;&amp; git clean -d -f
</code></pre>

<p>で解決。</p>

<h2 id="Unlinked+kegs">Unlinked kegs</h2>

<p>リンク関係がおかしいといったエラーが出るので、これも言われるがまま</p>

<pre><code>$ brew link ghc
</code></pre>

<p>今回は<code>ghc</code>だけについて言われたので1つだけ。</p>

<h2 id="Unexpected+libralies">Unexpected libralies</h2>

<p><code>/usr/local/lib</code>にUnexpectedな物がある、と注意される。
みてみるとBoost系が主なんですがこれもどこで入れたか覚えてない...</p>

<p>差し当たりHomebrewでBoostをインストールしてみます。</p>

<pre><code>$ brew install boost
</code></pre>

<p>これでインストールされたのは</p>

<pre><code>libboost_atomic-met.dylib
</code></pre>

<p>と言った感じのファイルたちで一方</p>

<pre><code>libboost_atomic.dylib
</code></pre>

<p>と言った感じの元からあるファイル達はUnexpectedだと注意されます。</p>

<p>そこで、一旦注意されているファイルを退避させることにしました。</p>

<pre><code>$ brew doctor &gt;&amp; doctor.log
</code></pre>

<p>で、実際、Unexpectedだと言われているものが必要あるかないかを確認して、
特に今すぐ消して困る、といったものも無かったので</p>

<pre><code>$ mkdir -p ~/Documents/bkup/usr_local_lib/
$ cat doctor.log |grep  usr|grep -v Warning|xargs -J % mv % mv % ~/Documents/bkup/usr_local_lib/
</code></pre>

<p>で、全てのUnexpectedなファイルを退避。一応しばらくとっておきます。</p>

<h2 id="Broken+symlink">Broken symlink</h2>

<p>これで大体カタが付きましたが、<code>brew doctor</code>してみると
無効なリンクがあるとのことで、これも言われたとおり</p>

<pre><code>$ brew prune
</code></pre>

<p>で解決。</p>

<p>で、もう一度doctorしてみると</p>

<pre><code>$ brew doctor
Your system is ready to brew.
</code></pre>

<p>ということで全てFix出来ました。</p>

<h1 id="gitのインストール">gitのインストール</h1>

<p>やっとのことHomebrewがちゃんと設定出来たので、gitをインストール。</p>

<pre><code>$ brew install git
</code></pre>

<p>だけ。これで現時点での安定版の最新であるgit 1.8.3.1が<code>/usr/local/bin</code>
以下にインストールされます。</p>

<p><code>PATH</code>の設定が<code>local</code>をさして居なかったり<code>/usr/bin</code>より後にある場合は
<code>.bashrc</code>を変更して</p>

<pre><code>export PATH=/usr/local/bin:/usr/bin:$PATH
</code></pre>

<p>の様な行を加えます。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><code>simple</code>は<code>1.7.11</code>から導入されたらしいのでこれより古いやつが<code>/usr/bin/</code>にあったと言うこと。Xcodeのコマンドラインツールも途中で入れているので、これによってgitも更新されたらしく、今調べると、<code>/usr/bin/</code>にあるgitは<code>1.7.12.4</code>なので、これを使っても<code>simple</code>で文句は言われなくなってます...
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p>そんなわけで、最新版に、というわけではありませんが、Xcodeのコマンドラインツールを入れるとこの<code>/usr/bin/git</code>も更新されるわけですね。(最初のやつもXcodeのやつかな?覚えてないけど。)
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p>ncurses辺りがscreenだかコンパイルするときに必要だったのかな...
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p><a href="http://guide.macports.org/chunked/installing.macports.uninstalling.html">MacPorts Guide: Uninstall</a>
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
