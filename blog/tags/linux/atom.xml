<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Linux | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/linux/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-09T11:57:48+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[brew-fileのUbuntuなどDebian系Linuxへの対応]]></title>
    <link href="https://rcmdnk.com/blog/2020/02/06/computer-linux-homebrew-brew-file/"/>
    <updated>2020-02-06T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/02/06/computer-linux-homebrew-brew-file</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4798109088?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4798109088&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51S3TB2CW8L._SS200_.jpg" alt="Debian 辞典 (Desktop reference)" /></a>
</div>

<p>brew-fileをLinuxにも対応させた、と書いてましたが、
Ubuntu等では動かない状態だったので対応しました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#brew-file" id="markdown-toc-brew-file">brew-file</a></li>
  <li><a href="#linuxへの対応" id="markdown-toc-linuxへの対応">Linuxへの対応</a></li>
  <li><a href="#debian系への対応" id="markdown-toc-debian系への対応">Debian系への対応</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="brew-file">brew-file</h2>

<p>Homebrewのパッケージリストを管理するツール。</p>

<p>Homebrew-fileと書いたりbrew-fileと書いたりこのブログの中でも統一されて無くて良くないですが、
管理してるレポジトリ名が<code>homebrew-file</code>で
コマンド名は<code>brew-file</code>、<code>brew</code>のサブコマンドとして<code>brew file</code>で呼び出される様なものです。
なのでその時々の気分で変わってしまってすいません。(多分、brew-fileとしておくのが良いのかな、と最近は。)</p>

<div class="github-widget" data-repo="rcmdnk/homebrew-file"></div>

<p>Homebrew自体にも現在はbundleというBrewfileファイルに書き出す機能がありますが、
brew-fileではBrewfile自体をGitHubのレポジトリで管理したり、
また、<code>brew install</code>時などに自動でBrewfileをアップデートしたり、
普段<code>brew-file</code>というコマンドを意識せずに自動で管理できる様なものを目指しています。</p>

<p>ほんとはbundleの機能に追加できれば良いんですが、あちらRubyでこちらPythonで
統一するのも面倒だし、その先新しいこと加えるときにRubyよりPythonのが(個人的に)やりやすいので
別途の形に。</p>

<p>ちなみに、以前、そこそこ使われてきたのでbrew-fileのformulaを
公式のレポジトリに入れてもらおうかと思ったこともあったんですが、
上記の様にbundleという似た(今はもう)公式のツールがあるので微妙かな、ということで
入れないことにしました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail"><div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B011WTXSJ2?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B011WTXSJ2&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51RErbdy69L._SS90_CR0,0,120,90_.jpg" alt="The Persistence Formula: Follow Through, Stop Quitting, Stay Focused, Avoid Distraction, Achieve Your Goals, Control Your Habits, Maximize Productivity, ... Enjoy The Entire Journey (English Edition)" /></a>
</div></div><a class="click_box_link" href="https://rcmdnk.com/blog/2015/07/20/computer-homebrew-brew-file-mac/">HomebrewにFormulaを公式に入れてもらうためにチェックする事</a></div></li></ul>

<p>まあ、Formulaの更新も自由に出来るので管理上は公式に入ってない方が楽なのでそれはそれで良いかな、と。</p>

<h2 id="linuxへの対応">Linuxへの対応</h2>

<p>今年はじめLinuxbrewがHomebrewに統一されたのでそれを機に
Linuxでも本格的にHomebrewを使うためbrew-fileもLinux対応させました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/02/27/computer-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/02/27/computer-linux-homebrew/">LinuxでHomebrewを使う: Homebrew-fileも対応させた</a></div></li></ul>

<p>ただ、自分で使っていたのがRedHat系で、
最近WindowsでWindows Subsystem for Linux(WSL)なUbuntuの所でエラーが出て使えなかったので
それに対応させました。</p>

<h2 id="debian系への対応">Debian系への対応</h2>

<p>ここで問題になったRedHat系とDebian系の違いは、<code>/bin/sh</code>の違いです。
RedHat系はBash、Debian系はDash。</p>

<p>brew-fileの中で、外部コマンドを<code>subprocess.Popen</code>で呼び出している部分がありますが、
<code>brew</code>コマンドを呼ぶ際、brew-fileの設定で<code>brew-file</code>へのラッパー関数に設定している場合があるので、
その場合のループを防ぐために<code>command brew</code>の様な呼び方をしていました。</p>

<p>これでMacでもRedHat系でも問題なかったのですが、Ubuntuでやってみると</p>

<pre><code>[ERROR]: Failed at command: command brew --prefix
</code></pre>

<p>というエラー。実際にはPopenが</p>

<pre><code>command brew --prefix: [Errno 2] No such file or directory
</code></pre>

<p>みたいなエラーを出しています。</p>

<p>簡単なスクリプト例としては</p>

<figure class="code"><figcaption><span>title lang: </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/usr/bin/env python3
</span><span class="line">import subprocess
</span><span class="line">subprocess.call(["command", "echo", "foo"])</span></code></pre></td></tr></table></div></figure>

<p>とか。Ubuntuとかで実行すると</p>

<pre><code>FileNotFoundError: [Errno 2] layouto such file or directory: 'command': 'command'
</code></pre>

<p>とか出ると思います。</p>

<p>これがDashでは<code>command</code>というものがないのだ、と思ってたんですが、
普通に</p>

<pre><code>$ /bin/sh # Dash起動
$ command echo foo
foo
</code></pre>

<p>とかは出来ます。
ちょっとこの辺調べようとしたんですがよくわからないままなのでまたそのうち。。。</p>

<p>とりあえず<code>command brew...</code>というのがうまく行かないので、
Bashで直接やれば、ということで</p>

<pre><code>["bash", "-i", "-c", "brew ls"]
</code></pre>

<p>みたいなものを渡してみたんですが、これがRedHat系で</p>

<pre><code>Package bash-completion was not found in the pkg-config search path.
Perhaps you should add the directory containing `bash-completion.pc'
to the PKG_CONFIG_PATH environment variable
No package 'bash-completion' found
bash: /yum: No such file or directory
</code></pre>

<p>というエラーを出しました。
どうやらbrewコマンドの中での何かしら環境変数の設定とかがうまくいってない模様。
<code>Popen</code>呼ぶときには現在の環境変数全てを渡す様なことはしているので、ちょっとよくわからない。</p>

<p>PKG_CONFIG_PATH云々はわかりますが、そもそもなんでこういう事が出てくるか、
というのがbrewの中身を見たりしないとちょっと理解できなくて、
面倒なので見てません。</p>

<p>ただ、そもそも<code>-i</code>を付けてインタラクティブモードで<code>bash</code>を呼ぶ必要があるのか、というところで、
<code>-i</code>ナシにしてみるとうまくいきました。</p>

<pre><code>["bash", "-c", "brew ls"]
</code></pre>

<p>みたいな感じ。</p>

<p>ただ、これも最後の実際のコマンドの部分がまとめた状態になるので余り良くない。</p>

<p>ということで、関数、aliasを無視するにどうするか、と思ったところ、
単に<code>brew</code>へのフルパスを取ってやるのが一番楽だし正確かな、ということでそうしました。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2018/01/30/computer-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20180130_aliasfunc_120_90.jpg" width="120" height="90" alt="20180130_aliasfunc_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2018/01/30/computer-bash-zsh/">Bash/Zshで関数やaliasを無視してオリジナルのコマンドを使う方法</a></div></li></ul>

<p>ちょっと/bin/shに関する部分やsubprocessで呼ぶ際の環境、さらには
subprocess.Popenでのshellやexecutable引数の意味、など
もう一度ちゃんと理解しようと調べ始めて面倒になって中途半端な認識になってるので、
またそのうちまとめられれば、とは思ってます。</p>

<p>Ref:</p>

<blockquote>
  <p><a href="https://github.com/Linuxbrew/legacy-linuxbrew/issues/46">Linuxbrew: “Package bash-completion was not found…” at command prompt. · Issue #46 · Linuxbrew/legacy-linuxbrew</a></p>
</blockquote>

<blockquote>
  <p><a href="https://astropengu.in/blog/12/">ADC/MDAS への tmux のインストール</a></p>
</blockquote>

<blockquote>
  <p><a href="https://www.saltycrane.com/blog/2011/04/how-use-bash-shell-python-subprocess-instead-binsh/">How to use the bash shell with Python’s subprocess module instead of /bin/sh - SaltyCrane Blog</a></p>
</blockquote>

<blockquote>
  <p><a href="https://qiita.com/yoichi22/items/5afa8b3b39c723acb359">subprocess で shell=True でリストを与えたときの挙動 - Qiita</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxにHomebrewでShellCheckをインストールしたい(が、諦める)]]></title>
    <link href="https://rcmdnk.com/blog/2020/01/24/computer-linux-bash/"/>
    <updated>2020-01-24T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/01/24/computer-linux-bash</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/4774186945?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4774186945&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41i956UyusL._SS200_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB+DB PRESS plus)" /></a>
</div>

<p>シェルスクリプトのチェックツールShellCheckをHomebrewでインストールしようとしたら
ちょっと面倒だった件。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#shellcheck" id="markdown-toc-shellcheck">ShellCheck</a></li>
  <li><a href="#linuxでのshellcheckのインストール" id="markdown-toc-linuxでのshellcheckのインストール">LinuxでのShellCheckのインストール</a></li>
  <li><a href="#gcc8をwithout-glibcで入れられるように" id="markdown-toc-gcc8をwithout-glibcで入れられるように">gcc@8を–without-glibcで入れられるように</a></li>
  <li><a href="#without-glibcなgcc8でトライ" id="markdown-toc-without-glibcなgcc8でトライ">without-glibcなgcc@8でトライ</a></li>
  <li><a href="#without-glibcなgcc9でトライ" id="markdown-toc-without-glibcなgcc9でトライ">without-glibcなgcc@9でトライ</a></li>
  <li><a href="#gcc7とか" id="markdown-toc-gcc7とか">gcc@7とか</a></li>
  <li><a href="#gccとか全部なしでやって見る" id="markdown-toc-gccとか全部なしでやって見る">gccとか全部なしでやって見る</a></li>
  <li><a href="#直接cabal-install" id="markdown-toc-直接cabal-install">直接cabal install</a></li>
  <li><a href="#諦めて直接" id="markdown-toc-諦めて直接">諦めて直接</a></li>
  <li><a href="#macでのshecllcheck" id="markdown-toc-macでのshecllcheck">MacでのShecllCheck</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="shellcheck">ShellCheck</h2>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2014/11/26/computer-bash-zsh/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20141126_shellcheckcli_120_90.jpg" width="120" height="90" alt="20141126_shellcheckcli_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2014/11/26/computer-bash-zsh/">シェルスクリプトを簡単にチェックできるShellCheck, Vimでも使える</a></div></li></ul>

<p>ShellCheckはシェルスクリプトの文法をチェックしてくれるツールで、
Vimとかと連携しておくと捗ります。</p>

<h2 id="linuxでのshellcheckのインストール">LinuxでのShellCheckのインストール</h2>

<p>インストールするのはCentOS 7です。</p>

<p>LinuxbrewがHomebrewに統合されたのを機に、
ユーザーローカルエリアにインストールするツールはLinuxでもHomebrewで行うようにしてきました。</p>

<p>その話は随分前の話なんですがなんですが、今更ShecllCheckが入ってないことに気が付きました。</p>

<p>ということでインストールしてみようとすると、</p>

<pre><code>$ brew install shellcheck
Updating Homebrew...
==&gt; Auto-updated Homebrew!
Updated 1 tap (homebrew/core).
No changes to formulae.
==&gt; Installing dependencies for shellcheck: pandoc
==&gt; Installing shellcheck dependency: pandoc
==&gt; Downloading https://hackage.haskell.org/package/pandoc-2.9.1.1/pandoc-2.9.1.1.tar.gz
Already downloaded: /home/user/.cache/Homebrew/downloads/4292bf61443a19f2a8957e8af9c220e56e8b2d83a1497b14fbbb1715811569f5--pandoc-2.9.1.1.tar.gz
==&gt; cabal v1-sandbox init
==&gt; cabal v1-update
==&gt; cabal v1-sandbox init
==&gt; cabal v1-install --jobs=32 --max-backjumps=100000 --only-dependencies
Last 15 lines from /home/user/.cache/Homebrew/Logs/pandoc/04.cabal:
2020-XX-XX XX:XX:XX +0900
cabal
v1-install
--jobs=32
--max-backjumps=100000
--only-dependencies
gcc-5: error: unrecognized command line option '-no-pie'
`gcc-5' failed in phase `C Compiler'. (Exit code: 1)
READ THIS: https://docs.brew.sh/Troubleshooting
</code></pre>

<p>というエラー。
探してみるとこんなIssueが。</p>

<blockquote>
  <p><a href="https://github.com/Homebrew/linuxbrew-core/issues/10694">shellcheck fails to install · Issue #10694 · Homebrew/linuxbrew-core</a></p>
</blockquote>

<p>ここで</p>

<pre><code>brew install gcc@8
brew install shellcheck -svd --cc=gcc-8
</code></pre>

<p>というのがありますが、ちょっと注意が必要なのは何も考えずに<code>gcc@8</code>を入れると
<code>glibc</code>が入って環境によっては問題が起こる点。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/">Linuxbrew改めHomebrew@Linuxでrelocation errorに対する対処法</a></div></li></ul>

<p><code>gcc</code>には<code>--without-glibc</code>というオプションがあるのですが、<code>gcc@8</code>の<a href="https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc@8.rb">Formula</a>にはその様なオプションはありません。</p>

<p>ということで仕方ないので自作。</p>

<blockquote>
  <p><a href="https://github.com/rcmdnk/homebrew-rcmdnkpac/blob/master/rcmdnk-gcc%408.rb">homebrew-rcmdnkpac/rcmdnk-gcc@8.rb at master · rcmdnk/homebrew-rcmdnkpac</a></p>
</blockquote>

<p><a href="https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc@8.rb">gcc@8のFormula</a>
に
<a href="https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc.rb">gccのFormula</a>
のglibcのところをちょっと足しただけですが。</p>

<p>これで、Linuxで</p>

<pre><code>$ brew install rcmdnk/rcmdnkpac/rcmdnk-gcc@8 --without-glibc
</code></pre>

<p>でglibcなしでgcc@8が入れられます。</p>

<p>これでOK、と思ってたら</p>

<pre><code>$ brew install shellcheck --cc=gcc-8
Warning: You passed `--cc=gcc-8`.
You will encounter build failures with some formulae.
Please create pull requests instead of asking for help on Homebrew's GitHub,
Discourse, Twitter or IRC. You are responsible for resolving any issues you
experience while you are running this unsupported configuration.
==&gt; Installing dependencies for shellcheck: pandoc
==&gt; Installing shellcheck dependency: pandoc
Error: An exception occurred within a child process:
  RuntimeError: The requested Homebrew GCC was not installed. You must:
    brew install gcc@8
</code></pre>

<p>どうやら<code>--cc</code>オプションはHomebrewの中でFormulaから処理しているらしく、
<code>gcc@8</code>の名前で入ってないとだめ、ということに。。。</p>

<p>同じ名前のFormulaを別のTapで入れるとconflictを起こして問題になるので、
Linuxbrew-coreのFormulaをアップデートするしかありません。</p>

<h2 id="gcc8をwithout-glibcで入れられるように">gcc@8を–without-glibcで入れられるように</h2>

<blockquote>
  <p><a href="https://github.com/Homebrew/linuxbrew-core/pull/19054">add –without-glibc option to gcc@X by rcmdnk · Pull Request #19054 · Homebrew/linuxbrew-core</a></p>
</blockquote>

<p>gccのFormulaを参考にすれば簡単にできるのでgcc@8なども<code>--without-glibc</code>出来るように変更。</p>

<p>Pull Requestを出してある状態ですが、とりあえず自分でFormula(gcc@8.rbなど)を</p>

<pre><code>~/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core/Formula
</code></pre>

<p>にコピーしてインストール。</p>

<pre><code>$ brew install gcc@8  --without-glibc
</code></pre>

<p>入りました。</p>

<p>すでにPull Requestはマージされてるので<code>brew update</code>すれば<code>gcc@8</code>なども<code>--without-glibc</code>で入れられるはずです。</p>

<h2 id="without-glibcなgcc8でトライ">without-glibcなgcc@8でトライ</h2>

<p>これでもう一度トライ:</p>

<pre><code>$ brew install shellcheck -svd --cc=gcc-8
...
Downloaded   aeson-1.4.6.0
Starting     aeson-1.4.6.0
Building     JuicyPixels-3.3.4
Building     aeson-1.4.6.0
Completed    hxt-9.3.1.18
Failed to install JuicyPixels-3.3.4
Build log ( /tmp/pandoc-20200115-158652-15h1ohp/pandoc-2.9.1.1/.cabal-sandbox/logs/ghc-8.8.1/JuicyPixels-3.3.4-683Rg9ZKIIHL6oz4xD5Bes.log ):
cabal: Entering directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
Configuring JuicyPixels-3.3.4...
Preprocessing library for JuicyPixels-3.3.4..
Building library for JuicyPixels-3.3.4..
[ 1 of 30] Compiling Codec.Picture.InternalHelper ( src/Codec/Picture/InternalHelper.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/InternalHelper.o )
[ 2 of 30] Compiling Codec.Picture.Metadata.Exif ( src/Codec/Picture/Metadata/Exif.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata/Exif.o )
[ 3 of 30] Compiling Codec.Picture.Metadata ( src/Codec/Picture/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata.o )
[ 4 of 30] Compiling Codec.Picture.Tiff.Internal.Types ( src/Codec/Picture/Tiff/Internal/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Types.o )
[ 5 of 30] Compiling Codec.Picture.Tiff.Internal.Metadata ( src/Codec/Picture/Tiff/Internal/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Metadata.o )
[ 6 of 30] Compiling Codec.Picture.Types ( src/Codec/Picture/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Types.o )
&lt;command line&gt;: /lib/libz.so: wrong ELF class: ELFCLASS32
cabal: Leaving directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
Completed    cryptonite-0.26
Completed    aeson-1.4.6.0
cabal: Error: some packages failed to install:
JuicyPixels-3.3.4-683Rg9ZKIIHL6oz4xD5Bes failed during the building phase. The
exception was:
ExitFailure 1
/home/user/.linuxbrew/opt/curl/bin/curl --version
java -version
/home/user/.linuxbrew/Homebrew/Library/Homebrew/build.rb (Formulary::FormulaLoader): loading /home/user/.linuxbrew/Homebrew/Library/Taps/linuxbrew/homebrew-xorg/Formula/xorg.rb
</code></pre>

<p>で止まってしまいます。</p>

<pre><code>Failed to install JuicyPixels-3.3.4
    Build log ( /tmp/pandoc-20200115-158652-15h1ohp/pandoc-2.9.1.1/.cabal-sandbox/logs/ghc-8.8.1/JuicyPixels-3.3.4-683Rg9ZKIIHL6oz4xD5Bes.log ):
</code></pre>

<p>の辺が失敗している模様。</p>

<p>このログを見てみると</p>

<pre><code>cabal: Entering directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
Configuring JuicyPixels-3.3.4...
Preprocessing library for JuicyPixels-3.3.4..
Building library for JuicyPixels-3.3.4..
[ 1 of 30] Compiling Codec.Picture.InternalHelper ( src/Codec/Picture/InternalHelper.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/InternalHelper.o )
[ 2 of 30] Compiling Codec.Picture.Metadata.Exif ( src/Codec/Picture/Metadata/Exif.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata/Exif.o )
[ 3 of 30] Compiling Codec.Picture.Metadata ( src/Codec/Picture/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Metadata.o )
[ 4 of 30] Compiling Codec.Picture.Tiff.Internal.Types ( src/Codec/Picture/Tiff/Internal/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Types.o )
[ 5 of 30] Compiling Codec.Picture.Tiff.Internal.Metadata ( src/Codec/Picture/Tiff/Internal/Metadata.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Tiff/Internal/Metadata.o )
[ 6 of 30] Compiling Codec.Picture.Types ( src/Codec/Picture/Types.hs, dist/dist-sandbox-4b7509f0/build/Codec/Picture/Types.o )
&lt;command line&gt;: /lib/libz.so: wrong ELF class: ELFCLASS32
cabal: Leaving directory '/tmp/cabal-tmp-158859/JuicyPixels-3.3.4'
</code></pre>

<p>どうも<code>/lib/libz.so</code>を見てるのが悪いようですが、
<code>~/.linuxbrew/lib/libz.so</code>にもちゃんとHomebrewで入れたのが入っていて、
環境変数<code>LD_LIBRARY_PATH</code>にも<code>~/.linuxbrew/lib/libz.so</code>は入っています。</p>

<h2 id="without-glibcなgcc9でトライ">without-glibcなgcc@9でトライ</h2>

<p>もう一つ新しいgccがあるのでそれを入れてみる</p>

<pre><code>$ brew install gcc@9  --without-glibc
Updating Homebrew...
==&gt; Auto-updated Homebrew!
Updated Homebrew from 13f508d0d to 50354852f.
No changes to formulae.
==&gt; Downloading https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.xz
==&gt; ../configure --with-bugurl=https://github.com/Homebrew/linuxbrew-core/issues --disable-multilib --prefix=/home/user/.linuxbrew/Cellar/gcc@9/9.2.0_1 --libdir=/home/user/.linuxbrew/Cellar/gcc@9/9.2.0_1/lib/gcc/9 --enable-languages=c,c++,objc,obj-c++,fortran --disable-nls --enable-checking=release --program-suffix=-9 --with-gmp=/home/user/.linuxbrew/opt/gmp --with-mpfr=/home/user/.linuxbrew/opt/mpfr --with-mpc=/home/user/.linuxbrew/opt/libmpc --with-isl=/home/user/.linuxbrew/opt/isl --with-pkgversion=Homebrew GCC 9.2.0_1 --without-glibc
==&gt; make
Last 15 lines from /home/user/.cache/Homebrew/Logs/gcc@9/02.make:
/bin/sh ../../gcc/../move-if-change tmp-constrs.h tm-constrs.h
/bin/sh ../../gcc/../move-if-change tmp-preds.c insn-preds.c
echo timestamp &gt; s-constrs-h
/bin/sh ../../gcc/../move-if-change tmp-preds.h tm-preds.h
echo timestamp &gt; s-preds
/bin/sh ../../gcc/../move-if-change tmp-condmd.c build/gencondmd.c
echo timestamp &gt; s-preds-h
echo timestamp &gt; s-conditions
rm gcc.pod
make[3]: Leaving directory `/tmp/gcc@9-20200115-163739-1cqulwf/gcc-9.2.0/build/gcc'
make[2]: *** [all-stage1-gcc] Error 2
make[2]: Leaving directory `/tmp/gcc@9-20200115-163739-1cqulwf/gcc-9.2.0/build'
make[1]: *** [stage1-bubble] Error 2
make[1]: Leaving directory `/tmp/gcc@9-20200115-163739-1cqulwf/gcc-9.2.0/build'
make: *** [all] Error 2
sh: line 1: 193696 Segmentation fault      /usr/bin/gcc --version 2&gt; /dev/null
READ THIS: https://docs.brew.sh/Troubleshooting
These open issues may also help:
llvm: can't pick up gcc-toolchain if run from opt/llvm/bin/clang++  https://github.com/Homebrew/linuxbrew-core/issues/18601
</code></pre>

<p>ここでsegmentation fault…</p>

<p>これは面倒なのでこれ以上見てません。。。</p>

<h2 id="gcc7とか">gcc@7とか</h2>

<p>もうちょっと前のgccを使ってみてもインストールは出来ましたがshellcheckのインストールで
<code>gcc@8</code>の場合と同じようになりました。</p>

<h2 id="gccとか全部なしでやって見る">gccとか全部なしでやって見る</h2>

<p>その他、<code>gcc</code>自体も<code>brew rm</code>して、とかもやってみましたが何も上手く行かず。。。</p>

<p>Homebrewではどうやってもうまく行きません。</p>

<h2 id="直接cabal-install">直接cabal install</h2>

<p>shellcheckのインストール時に、<code>cabal</code>を使っているので直接使ってみる</p>

<pre><code>$ cabal install ShellCheck
</code></pre>

<p>が、これも最初のものと同じエラーが出ます。。。</p>

<h2 id="諦めて直接">諦めて直接</h2>

<div class="github-widget" data-repo="koalaman/shellcheck"></div>

<p>のREADMEに従ってpre-compiledされたものを入れてしまうことにしました。</p>

<pre><code>$ scversion="stable"
$ wget -qO- "https://storage.googleapis.com/shellcheck/shellcheck-${scversion?}.linux.x86_64.tar.xz" | tar -xJv
$ cp shellcheck-${shellcheck} ~/usr/bin
</code></pre>

<p>もうこれで良しとしておきます。。。</p>

<h2 id="macでのshecllcheck">MacでのShecllCheck</h2>

<p>Macでも確認したらなぜか入ってなくてHomebrewで再インストールしたのですが、
その際にBrewfileにすでにあるよ、という
<a href="https://github.com/rcmdnk/homebrew-file">homebrew-file</a>
のwarningが出て、おかしいなと思って
<a href="https://github.com/rcmdnk/Brewfile/blob/master/Brewfile">Brewfile</a>
の履歴を見ると<code>shellcheck</code>自体は2017年に追加されてそのままでした。
それだと前のMacのときのものなので、Mac新しくしてからずっと使ってなかった?
(でも最近でもVimでシェルスクリプトのチェックを見たような気がするが。。。)</p>

<p>確かに再インストール前はVim+Aleでチェックが効いてなかったのが、</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2017/09/25/computer-vim/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20170925_vimale_120_90.jpg" width="120" height="90" alt="20170925_vimale_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2017/09/25/computer-vim/">VimのSyntaxチェッカーをALEにした</a></div></li></ul>

<p>インストール後には効くようになりました、当たり前だけど。</p>

<p>なぞ。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cronジョブでの環境変数設定について、と色々cronについて補足]]></title>
    <link href="https://rcmdnk.com/blog/2020/01/12/computer-linux-mac/"/>
    <updated>2020-01-12T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2020/01/12/computer-linux-mac</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B07VGSVMDD?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B07VGSVMDD&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41pbAuobUxL._SS200_.jpg" alt="Amazon | CRON.: El encuentro de una especie humana de la última era glaciar. (Spanish Edition) [Kindle edition] by Alejandro Naya | Science Fiction | Kindleストア" /></a>
</div>

<p>cronジョブでは実行時に環境変数が最小限の
環境変数しか設定されないため、例えばPATHとかも最小限で
普段使っているコマンドが使えなかったりします。</p>

<p>その場合には走らせるcronジョブのスクリプトの中で設定するか、
もしくはcronジョブの定義で変数を設定してあげる必要があります。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#デフォルトの環境変数" id="markdown-toc-デフォルトの環境変数">デフォルトの環境変数</a></li>
  <li><a href="#環境変数の設定" id="markdown-toc-環境変数の設定">環境変数の設定</a></li>
  <li><a href="#cronの特殊な変数" id="markdown-toc-cronの特殊な変数">cronの特殊な変数</a></li>
  <li><a href="#cronジョブの書き方" id="markdown-toc-cronジョブの書き方">cronジョブの書き方</a></li>
  <li><a href="#をエスケープしないといけない" id="markdown-toc-をエスケープしないといけない">%をエスケープしないといけない</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="デフォルトの環境変数">デフォルトの環境変数</h2>

<pre><code>$ cat a.sh
#!/bin/bash
env &gt; $HOME/cron.log
</code></pre>

<p>こんな感じのスクリプトを作って<code>chmod 755</code>しておいて、
<code>crontab -e</code>で</p>

<pre><code>39 * * * * $HOME/a.sh
</code></pre>

<p>と設定し(39は分、すぐに実行できる時間に)調べてみます。</p>

<p>CentOS 7だと</p>

<pre><code>XDG_SESSION_ID=&lt;xxx&gt;
SHELL=/bin/sh
USER=&lt;user&gt;
PATH=/usr/bin:/bin
_=/usr/bin/env
PWD=/home/&lt;user&gt;
LANG=en_US.UTF-8
HOME=/home/&lt;user&gt;
SHLVL=2
LOGNAME=&lt;user&gt;
XDG_RUNTIME_DIR=/run/user/&lt;uid&gt;
</code></pre>

<p>macOS Catalinaだと</p>

<pre><code>SHELL=/bin/sh
USER=&lt;user&gt;
PATH=/usr/bin:/bin
_=/usr/bin/env
PWD=/Users/&lt;user&gt;
HOME=/Users/&lt;user&gt;
SHLVL=2
LOGNAME=&lt;user&gt;
</code></pre>

<p>みたいな感じで基本的に<code>USER</code>と<code>HOME</code>、<code>PATH</code>くらいです。
<code>PATH</code>も<code>/usr/bin:/bin</code>と必要最小限のものしか通ってません。</p>

<p>このまま普段使っているシェルスクリプトとかをcronジョブに設定すると
中で使っているコマンドにPATHが通って無くて失敗したりします。</p>

<h2 id="環境変数の設定">環境変数の設定</h2>

<p>環境変数は、cronのジョブの定義をする前に変数設定を書いてあげるとそれを使ってくれます。</p>

<pre><code>MY_VAL=xxx
39 * * * * $HOME/a.sh
</code></pre>

<p>とすれば<code>MY_VAL=xxx</code>が見れるはずです。</p>

<p>もし、</p>

<pre><code>$ cat b.sh
#!/bin/bash
env &gt; $HOME/cron2.log
</code></pre>

<p>を用意して</p>

<pre><code>MY_VAL=xxx
39 * * * * $HOME/a.sh
MY_VAL2=yyy
39 * * * * $HOME/b.sh
</code></pre>

<p>みたいなcronの定義をすると
<strong>cron.log</strong>の方には<code>MY_VAL=xxx</code>だけが出て、<strong>cron2.log</strong>の方には<code>MY_VAL=xxx</code>と<code>MY_VAL2=yyy</code>の両方が出てきます。</p>

<p>上から順に見ていき、ジョブの定義の時点でどういうものが設定されているか、
がそのまま渡される形です。</p>

<p>ちょっと注意が必要なのは、cronの定義は<strong>シェルスクリプトではない</strong>、ということです。</p>

<p>シェルスクリプト(もしくは普段のシェル上での作業)で環境変数を設定するには
<code>export</code>が必要で、使わないとただのシェル変数でサブプロセスに引き継がれません。</p>

<p>一方、cronの定義では上の様なたんなる<code>X=Y</code>の形で環境変数を設定することになります。
<code>export</code>とかは使えません。</p>

<p>また、前に定義した変数を使って変数を定義することはできません。</p>

<pre><code>MY_VAL=xxx
MY_VAL2=$MY_VAL
</code></pre>

<p>とかしても<code>MY_VAL2</code>には<strong>$MY_VAL</strong>という文字列そのものが設定されてしまいます。</p>

<p>一方、ジョブの定義では使えて</p>

<pre><code>COMMAND_PATH=/path/to/command
39 * * * * $COMMAND_PATH/my_command
</code></pre>

<p>みたいなことはちゃんと<code>$COMMAND_PAHT</code>を展開してくれます。
もちろん、<code>my_command</code>の中でも<code>$COMMAND_PATH</code>を使えます。</p>

<h2 id="cronの特殊な変数">cronの特殊な変数</h2>

<p>cronで良く設定する変数としては</p>

<pre><code>MAILTO=my_mail@example.como
</code></pre>

<p>の様に<code>MAILTO</code>を設定して出力をメールに送るものだと思います。
設定しないと出力はローカルマシンの該当ユーザーのメールに送られます。</p>

<p>勿論これを設定しておけばこの値をスクリプトの中で使うことも出来ます。</p>

<p>もう一つ、<code>SHELL</code>の設定。
上を見ても設定されているのがわかりますが、このシェルでコマンドが実行されます。
通常<code>/bin/sh</code>がデフォルトなので、普段<code>/bin/bash</code>を使ってる感覚でコマンドを定義すると
失敗することがあります。</p>

<p>出力をファイルに出そうとして<code>&gt;&amp; log</code>とかしたら<code>&gt;&amp;</code>が使えなかった、とか。</p>

<p>なるべくcronジョブに設定するものは専用のスクリプトを用意して、
出力とかも全部中で処理するようにすると、
外側での<code>SHELL</code>の影響を受けなくなるので良いかとは思います。</p>

<h2 id="cronジョブの書き方">cronジョブの書き方</h2>

<p>ついでによくわからなくなるcronジョブの書き方のまとめ。</p>

<p>ジョブの定義としてはユーザー単位で定義する場合には通常<code>crontab -e</code>で定義ファイルを開いて編集。
システムとして登録する場合には
<strong>/etc/cron.d/</strong>の中に定義ファイルを配置。</p>

<p>どちらも書き方は同じようなものですが、基本的に</p>

<pre><code>&lt;分&gt; &lt;時&gt; &lt;日&gt; &lt;月&gt; &lt;曜日&gt; my command
</code></pre>

<p>と書いていつ実行するか、を定義します。
後ろに実行コマンドを書きますが、<strong>/etc/cron.d/</strong>の場合にはその前にユーザーを指定する必要があります。</p>

<pre><code>&lt;分&gt; &lt;時&gt; &lt;日&gt; &lt;月&gt; &lt;曜日&gt; user my command...
</code></pre>

<p><code>*</code>を指定すれば全ての場合、になります。</p>

<pre><code>10 * * * *
</code></pre>

<p>なら毎時10分に実行。</p>

<pre><code>10 1 * * *
</code></pre>

<p>なら毎日1時10分に実行。</p>

<p>曜日、は0~7で0と7が日曜、間の1から6が月曜から土曜になります。</p>

<p>月と曜日に関しては<code>Jan</code>、<code>Sun</code>など名前の3文字でも指定できます(大文字小文字は関係なし)。</p>

<p>また、1時間のうちに複数回実行したいなら</p>

<pre><code>10,40 * * * *
</code></pre>

<p>の様にコンマで区切って複数指定することが出来ます。</p>

<pre><code>10 1-3 * * *
</code></pre>

<p>の様にハイフンでつなぐと、上野場合は1時、2時、3時の全てで10分にじっこうすることになります。</p>

<p>または、</p>

<pre><code>*/10 * * * *
</code></pre>

<p>の様な書き方をすると10分ごとに実行してくれます。</p>

<p>もしくは</p>

<pre><code>15-35/10 * * * *
</code></pre>

<p>とかすると、 15分、25分、35分に実行されます。(15-35分の中で10分おき)</p>

<p>もし、日にちと曜日の両方を<code>*</code>以外で指定していた場合、どちらかが満たされている場合に<code>OR</code>で実行されます。
<code>*</code>が全部を表すのに使うので、指定すると<code>AND</code>になりそうなものですがちょっと注意が必要です。</p>

<p>これ以外にも
以下の様にリブート時を指定したり、毎時、などを簡略化してかける方法もあります。</p>

<pre><code>@reboot         Run once, at startup.
@yearly         Run once a year, "0 0 1 1 *".
@annually       (same as @yearly)
@monthly        Run once a month, "0 0 1 * *".
@weekly         Run once a week, "0 0 * * 0".
@daily          Run once a day, "0 0 * * *".
@midnight       (same as @daily)
@hourly         Run once an hour, "0 * * * *".
</code></pre>

<h2 id="をエスケープしないといけない">%をエスケープしないといけない</h2>

<p>cronジョブの定義で<code>%</code>は特殊文字となり
それ以降の文字列がコマンドへの標準入力として使われる様になります。</p>

<p>コマンドの中で<code>%</code>を使いたい場合には<code>\</code>でエスケープする必要があります。</p>

<pre><code>10 * * * * date +%s
</code></pre>

<p>だと</p>

<pre><code>date + &lt; &lt;(echo s)
</code></pre>

<p>というコマンドを実行するのと同じになります。</p>

<p>この場合は何も出力されないだけですが、普通はなにか変なエラーになるかと。</p>

<p>正しくやりたい通りにするためには</p>

<pre><code>10 * * * * date +\%s
</code></pre>

<p>の様に<code>%</code>をエスケープしてやる必要があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tar: Removing leading `/’ from member name について]]></title>
    <link href="https://rcmdnk.com/blog/2019/12/11/computer-linux/"/>
    <updated>2019-12-11T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/12/11/computer-linux</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B082L3C4VZ?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B082L3C4VZ&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/31sbwpW2SyL._SS200_.jpg" alt="TAR TARCOM 30周年 Tシャツ M goodenough グッドイナフ 藤原ヒロシ" /></a>
</div>

<p>Linuxなどで<code>tar</code>コマンドを使ってファイルやディレクトリをまとめようとしたとき、
<code>tar: Removing leading '/’ from member nam</code>という注意が出る件について。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#tar-removing-leading--from-member-name" id="markdown-toc-tar-removing-leading--from-member-name">tar: Removing leading `/’ from member name</a></li>
  <li><a href="#-pオプション" id="markdown-toc--pオプション">-Pオプション</a></li>
  <li><a href="#-cオプション" id="markdown-toc--cオプション">-Cオプション</a></li>
  <li><a href="#-t-の様な使い方をしている場合" id="markdown-toc--t-の様な使い方をしている場合">-T <file>の様な使い方をしている場合</file></a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="tar-removing-leading--from-member-name">tar: Removing leading `/’ from member name</h2>

<pre><code>$ tar cfz ./hoge.tar.gz /home/user/my/dir
</code></pre>

<p>とかしようとすると</p>

<pre><code>tar: Removing leading `/’ from member name
</code></pre>

<p>という注意が出ます。</p>

<p>これは<code>tar</code>でまとめようとしている先が<code>/</code>から始まっている絶対パスになっていることが原因で、
注意が出ることで、このパスの先頭の<code>/</code>を外して<code>home/user/my/dir</code>として扱うよ、
ということを言っています。</p>

<p>何を言っているかというと、この出来た<code>hoge.tar.gz</code>を解答したとき、この状態だと
この<code>hoge.tar.gz</code>を他に持っていって解凍すると</p>

<pre><code>$ tar xzf ./hoge.tar.gz
</code></pre>

<p>このとき、この作業を行っているディレクトリの下に</p>

<pre><code>./home/user/my/dir
</code></pre>

<p>が出来る様になります。つまり<code>/home/user/my/dir</code>の先頭のスラッシュを外すことで相対パスに変化させていることになります。</p>

<p>これは、もしスラッシュを付けたままの絶対パスであるとすると、
どのディレクトリで作業してもこのファイルを解凍すると
必ず<code>/home/user/my/dir</code>にファイルが展開されることになり、
これは通常意図されてない動作になっているだろう、ということからです。</p>

<h2 id="-pオプション">-Pオプション</h2>

<p>これに対して、<code>-P</code>(大文字)を与えると<code>/</code>を保持したままの圧縮ファイルを作ることも出来ます。</p>

<pre><code>$ tar cfz -P ./hoge.tar.gz /home/user/my/dir
</code></pre>

<p>この場合、<strong>hoge.tar.gz</strong>をどこで解凍したとしても
<code>/home/user/my/dir</code>にファイルが展開されます。</p>

<p>例えばUnixの<code>/etc/XXX</code>のファイルをコピーして他のサーバーに送りたい、というような場合には使えるかもしれませんが、
そういった場合でも意図せずファイルを上書きしてしまう可能性があるので
直接配置したりしたり、まだ<code>scp</code>や<code>rsync</code>で送った方が良いとは思います。</p>

<p>そのファイル自体、ふと試しに解凍してみた、という事が起きると問題になる可能性が高いので、
そういったものを作ること自体、よほど理由がない限りは辞めたほうが良いだろう、ということです。</p>

<h2 id="-cオプション">-Cオプション</h2>

<p><code>-C &lt;dir&gt;</code>を使うとそのディレクトリを親ディレクトリとしてファイルをまとめることが出来ます。</p>

<pre><code>$ tar cfz ./hoge.tar.gz -C / home/user/my/dir
</code></pre>

<p>は</p>

<pre><code>$ tar cfz ./hoge.tar.gz /home/user/my/dir
</code></pre>

<p>と全く同じ<strong>hoge.tar.gz</strong>を作ります。</p>

<p>もしくは</p>

<pre><code>$ tar cfz ./hoge.tar.gz -C / ./home/user/my/dir
</code></pre>

<p>でも同じ。</p>

<p>これは<code>/</code>が先頭にある絶対パスの場合に逆に上の様に<code>/</code>を親ディレクトリとし、そこからの
相対パスとして<code>home/user/my/dir</code>を見るように強制変更している、という事実があるからです。</p>

<p>逆に、この様に絶対パス的な感じで保存したい場合、
下手なwarningを出さないためには上の様に<code>-C /</code>を使い、パス側の先頭のスラッシュを外して
やることが正しい使い方になります。</p>

<p><code>-C</code>は指定したディレクトリが親になるので、例えば</p>

<pre><code>$ tar cfz ./hoge.tar.gz -C /home/user/my/ dir
</code></pre>

<p>とすれば、出来た<strong>hoge.tar.gz</strong>を解凍すれば<strong>dir</strong>が直接見える様な内容になります。</p>

<h2 id="-t-の様な使い方をしている場合">-T <file>の様な使い方をしている場合</file></h2>

<p><code>-T &lt;file&gt;</code>とするとファイルの中身をまとめる事が出来ますが、
この中身が絶対パスで書かれていても上の様な注意が出ます。</p>

<p>これは外側からどうこう出来ないので、ファイルの中のリストの先頭の<strong>/</strong>を外す(もしくは<code>.</code>をつけて<code>./home/...</code>みたいな感じの相対パス的な感じにする)ようにして
かつ<code>-C /</code>を指定する、という事をする必要があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew(Linuxbrew)でELF: x: Errorが再発]]></title>
    <link href="https://rcmdnk.com/blog/2019/11/26/computer-linux-homebrew/"/>
    <updated>2019-11-26T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2019/11/26/computer-linux-homebrew</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/6131962499?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=6131962499&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41qtSMdHRSL._SS200_.jpg" alt="Embedded Glibc" /></a>
</div>

<p>LinuxbrewがHomebrewに統合され、Linux環境で個人環境を作るために使っていますが、
以前あった<code>ELF: x: Error</code>と行った感じのエラーがまた起こりました。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#起こった問題" id="markdown-toc-起こった問題">起こった問題</a></li>
  <li><a href="#とりあえずまともに動くように" id="markdown-toc-とりあえずまともに動くように">とりあえずまともに動くように</a></li>
  <li><a href="#原因" id="markdown-toc-原因">原因</a></li>
  <li><a href="#解決法" id="markdown-toc-解決法">解決法</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="起こった問題">起こった問題</h2>

<p>Linuxの環境はリモートでsshして使っているものですが、
ログインしてみたところ、<strong>.bashrc</strong>の中で使っているコマンドなどが色々エラーを吐き、
その後ログインは出来たものの、なにかコマンドを使おうにも</p>

<pre><code>$ ls
ls: 0s": ELF: x: Error 1325453653
</code></pre>

<p>の様なエラーが出て何も出来ない状態。唯一Bashの内部コマンドだけは使えますが、
<code>ls</code>も<code>mv</code>も全ての外部コマンドが使えない状態。</p>

<h2 id="とりあえずまともに動くように">とりあえずまともに動くように</h2>

<p>これは以前も見た現象です。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/05/08/computer-linux-homebrew/">Linuxbrew改めHomebrew@Linuxでrelocation errorに対する対処法</a></div></li></ul>

<p>Homebrewで入れたglibcが悪い。</p>

<p>何も出来ない状態で焦りますが、とりあえず</p>

<pre><code>$ unset LD_LIBRARY_PATH
</code></pre>

<p>をすれば大概のコマンドは使える様になります。
もともと</p>

<pre><code>$HOME/.linuxbrew/lib
</code></pre>

<p>を<code>LD_LIBRARY_PATH</code>に加える様なことをしてなければ問題は起こりませんが、
それだとHomebrewで入れたツールが一部使えなかったりするので。</p>

<h2 id="原因">原因</h2>

<p>この件に関しては<code>gcc</code>を<code>--without-glibc</code>でインストールすることで解決していたはずです。</p>

<p>試しに<code>brew ls</code>してみると何故か<code>glibc</code>が居ました。</p>

<p>ここで<code>gcc</code>の情報を見てみると</p>

<pre><code>$ brew info gcc
gcc: stable 5.5.0 (bottled)
GNU compiler collection
https://gcc.gnu.org/
/home/user/.linuxbrew/Cellar/gcc/5.5.0_5 (1,325 files, 149.8MB) *
  Poured from bottle on 2019-11-26 at 04:10:30
From: https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc.rb
==&gt; Dependencies
Required: zlib ✔, gmp ✔, libmpc ✔, mpfr ✔, isl@0.18 ✔
Recommended: glibc ✔
==&gt; Options
--without-glibc
    Build without glibc support
==&gt; Analytics
install: 105,120 (30 days), 302,485 (90 days), 1,023,467 (365 days)
install_on_request: 56,404 (30 days), 154,200 (90 days), 494,533 (365 days)
build_error: 0 (30 days)
</code></pre>

<p>といった感じ<code>--without-glibc</code>は適用されてない状態です。</p>

<pre><code>  Poured from bottle on 2019-11-26 at 04:10:30
</code></pre>

<p>とありますが、どうやら最近アップデートがあってそれが入った模様。
この環境ではcronジョブで毎日<code>brew upgrade</code>を行っているのでそれで入ったみたいです。</p>

<p>なぜか<code>--without-glibc</code>が無視されてますが、
Homebrew自体はこの様なオプションは非推奨にしているので、
<code>brew upgrade</code>などの際のオプションの取り扱いに問題があるのかもしれません。</p>

<ul class="post_card"><li class="index_click_box"><div class="group"><div class="title-small-thumbnail">
  <a href="https://rcmdnk.com/blog/2019/02/08/computer-mac-linux-homebrew/"><img class="small-thumbnail-img" src="https://rcmdnk.com/images/post/thumbnail/20190208_homebrew_120_90.jpg" width="120" height="90" alt="20190208_homebrew_120_90" /></a>
</div><a class="click_box_link" href="https://rcmdnk.com/blog/2019/02/08/computer-mac-linux-homebrew/">Homebrew 2.0.0リリース: Linuxbrewの統合</a></div></li></ul>

<p>一応他のパッケージも<code>brew deps --tree --installed</code>で確認してみましたが、
やはい<code>gcc</code>だけが<code>glibc</code>に依存しているのでそのせいです。</p>

<p><code>gcc</code>のアップグレードに関しては恐らく以下の辺の変更のあとのアップグレード。</p>

<blockquote>
  <p><a href="https://github.com/Homebrew/linuxbrew-core/commit/1bc7d454052a9aa098e1b2a994ce64190b924268#diff-baf58e557d0debf0bd219be97ec02ab8">Merge branch homebrew/master into linuxbrew/master · Homebrew/linuxbrew-core@1bc7d45</a></p>
</blockquote>

<blockquote>
  <p><a href="https://github.com/Homebrew/linuxbrew-core/commit/bb95011d34572f62b7048a81c9b7d302eb6616a3#diff-baf58e557d0debf0bd219be97ec02ab8">gcc: update 5.5.0_5 bottle. · Homebrew/linuxbrew-core@bb95011</a></p>
</blockquote>

<h2 id="解決法">解決法</h2>

<p>最初にインストールしたときにやったように<code>gcc</code>、<code>glibc</code>を一旦削除して<code>gcc</code>を<code>--without-glibc</code>で入れ直します。</p>

<p><code>gcc</code>は使わなければすぐにインストールする必要もないのですが、
<code>/home/linuxbrew/.linuxbrew</code>を使わず個人の<code>$HOME/.linuxbrew/</code>を使っている場合には
基本的にすべてのパッケージをコンパイルして入れることになり、その際に<code>gcc</code>がインストールされることが多いです。
その際に<code>glibc</code>が入ってしまうのを避けるため、明示的に<code>--without-glibc</code>を指定して先に<code>gcc</code>を入れておいた方が安全です。</p>

<pre><code>$ brew uninstall gcc glibc
Uninstalling /home/user/.linuxbrew/Cellar/gcc/5.5.0_5... (1,325 files, 149.8MB)
Uninstalling /home/user/.linuxbrew/Cellar/glibc/2.23... (1,419 files, 46.1MB)
$ brew cleanup
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/curl/bin/curl: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/git/bin/git: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
Removing: /home/user/.cache/Homebrew/go_cache... (1,193 files, 66.7MB)
Pruned 3 symbolic links and 538 directories from /home/user/.linuxbrew
$ brew install gcc --without-glibc
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/curl/bin/curl: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/git/bin/git: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/curl/bin/curl: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/git/bin/git: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/curl/bin/curl: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/git/bin/git: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
Warning: git 2.24.0_2 is already installed and up-to-date
To reinstall 2.24.0_2, run `brew reinstall git`
Updating Homebrew...
Error: Git must be installed and in your PATH!
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/curl/bin/curl: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
/home/user/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: /home/user/.linuxbrew/opt/git/bin/git: /home/user/.linuxbrew/lib/ld.so: bad ELF interpreter: No such file or directory
==&gt; Downloading https://ftp.gnu.org/gnu/gcc/gcc-5.5.0/gcc-5.5.0.tar.xz
######################################################################## 100.0%
==&gt; ../configure --with-isl=/home/user/.linuxbrew/opt/isl@0.18 --with-bugurl=https://github.com/Homebrew/linuxbrew-core/issues --with-boot-ldflags=-static-libstdc++ -static-libgcc  --prefix=/home/user/.linuxbrew/Cellar/g
==&gt; make BOOT_LDFLAGS=-Wl,-headerpad_max_install_names


==&gt; make install-strip
==&gt; Creating the GCC specs file: /home/user/.linuxbrew/Cellar/gcc/5.5.0_5/lib/gcc/x86_64-unknown-linux-gnu/5.5.0/specs
🍺  /home/user/.linuxbrew/Cellar/gcc/5.5.0_5: 1,335 files, 143.4MB, built in 10 minutes 48 seconds
$ brew info gcc
gcc: stable 5.5.0 (bottled)
GNU compiler collection
https://gcc.gnu.org/
/home/user/.linuxbrew/Cellar/gcc/5.5.0_5 (1,335 files, 143.4MB) *
  Built from source on 2019-11-26 at 11:34:45 with: --without-glibc
From: https://github.com/Homebrew/linuxbrew-core/blob/master/Formula/gcc.rb
==&gt; Dependencies
Required: zlib (installed), gmp (installed), libmpc (installed), mpfr (installed), isl@0.18 (installed)
Recommended: glibc (uninstalled)
==&gt; Options
--without-glibc
    Build without glibc support
</code></pre>

<p><code>ggcc</code>が<code>glibc</code>なしでインストールできました。</p>

<p>これで、</p>

<pre><code>export LD_LIBRARY_PATH=$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH
</code></pre>

<p>をしても問題が起こらない様になったはずです。</p>

<h2 id="まとめ">まとめ</h2>

<p>この辺のglibcの問題関しては</p>

<ul>
  <li>Homebrewの<code>glibc</code>がシステムの<code>glibc</code>と衝突をを起こしてしまう
    <ul>
      <li><strong>/usr/bin</strong>にあるコマンドなどを全て無視することは出来ないのでこの様な衝突を起こしてしまう環境ではHomebrewで<code>glibc</code>はインストールしても使えない</li>
    </ul>
  </li>
  <li><code>/home/linuxbrew/.linuxbrew</code>を使わない場合にbottleを直接入れられない
    <ul>
      <li>一部のパッケージはコンパイル時に指定されたライブラリのPATHなどが内部に残っていて、<code>/home/linuxbrew/.linuxbrew/</code>以外の場所で使おうとするとうまく動かないものがある</li>
      <li>従って全てのパッケージは<code>/home/linuxbrew/.linuxbrew</code>以外に入れるときにはコンパイルして入れるようにしている</li>
      <li>その際に<code>gcc</code>がHomebrewでインストールされてなければインストールする</li>
    </ul>
  </li>
  <li><code>gcc</code>は<code>https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh</code>を使ってHomebrewをインストールする時に自動的にインストールされてしまう。
    <ul>
      <li>ただし、この<code>gcc</code>のインストール自体は<a href="https://github.com/Homebrew/brew">Homebrew/brew)</a>の中で行われているため<a href="https://github.com/Linuxbrew/install">Linuxbrew/install</a>の方を変更してどうにかなるものでもない</li>
      <li>Homebrew本体の方でLinuxbrewのインストーラーからオプションを渡してごちゃごちゃやるのはけっこう大変で、かつ、Macのこととは関係ないので優先度が低い</li>
    </ul>
  </li>
</ul>

<p>と言った感じで根本的に解決するのが難しい部分です。</p>

<p>Homebrewの方にプルリクエスト出してみようとちょっといじったりもしてたんですが、
そのためだけに無駄に複雑になってしまって多分拒否されそうだったので
もうちょっと整理して、というところで止まってしまった状態です。</p>

<p>取り敢えずは上記の処方箋でなんとかなるのでそれで乗り切ってますが、
今回、アップグレードでも問題が起きたので、ちょっとその辺も含めてまた見てみたいとは思ってます。</p>

]]></content>
  </entry>
  
</feed>
