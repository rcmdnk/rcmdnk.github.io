<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: CSS | rcmdnk's blog]]></title>
  <link href="https://rcmdnk.com/blog/tags/css/atom.xml" rel="self"/>
  <link href="https://rcmdnk.com/"/>
  <updated>2020-08-11T00:23:45+00:00</updated>
  <id>https://rcmdnk.com/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rcmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yellow Lab Tools: サイトを色々深く解析して改善を提示してくれるツール]]></title>
    <link href="https://rcmdnk.com/blog/2015/07/14/blog-javascript-css/"/>
    <updated>2015-07-14T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/07/14/blog-javascript-css</id>
    <content type="html"><![CDATA[<p><a href="https://rcmdnk.com/blog/2015/07/07/blog-octopress/">Google DevelopersのPageSpeed Insightsを参考にしてサイトを高速化</a>
を書いた後に、
Twitterでこれ知ってる？と言われた
<a href="http://yellowlab.tools/">Yellow Lab Tools</a>
が結構高機能で色々面白かったのでその紹介。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#yellow-lab-tools" id="markdown-toc-yellow-lab-tools">Yellow Lab Tools</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="yellow-lab-tools">Yellow Lab Tools</h2>

<p><a href="http://yellowlab.tools/">Yellow Lab Tools</a>
はWebページを入力するとそのページを解析して、
HTML, JavaScript, CSS等について改善案を出してくれるWebツール。</p>

<p><a href="https://rcmdnk.com/blog/2015/07/07/blog-octopress/">Google DevelopersのPageSpeed Insightsを参考にしてサイトを高速化</a>
を書いた後に、作者の人がTwitterでこれ知ってる?という感じでメッセージを送ってきたので見てみました。
(フランス人で多分日本語は読めないので単に<code>PageSpeed Insights</code>という
ワードを拾ってメッセージを流してるみたい。)
いきなり来たのでちょっとあれかな、と思いましたが、
<a href="https://github.com/gmetais/YellowLabTools">GitHubのレポジトリ</a>
の方も400以上Starが付いてたりしてよさ気なので試してみることに。</p>

<p>サイトの解析をしてくれるWebツールは沢山ありますが、
このツールの特徴としてはJavaScriptやCSSの内容についても細かく
解析してくれるところです。</p>

<p>このブログのトップページをやってみたところ</p>

<blockquote>
  <p><a href="http://yellowlab.tools/result/e59wwxy65a">Yellow Lab Tools Tested url: http://rcmdnk.github.io/</a></p>
</blockquote>

<p>例えば</p>

<ul>
  <li>DOM complexity
    <ul>
      <li>DOM max depth</li>
    </ul>
  </li>
</ul>

<p>なんかは、HTMLを解析してDOMの深さの最大な所を指摘。</p>

<ul>
  <li>Bad JavaScript
    <ul>
      <li>JavaScript errors</li>
    </ul>
  </li>
  <li>Bad CSS
    <ul>
      <li>CSS syntax error</li>
    </ul>
  </li>
</ul>

<p>ではJavaScriptやCSSでエラーを指摘。</p>

<ul>
  <li>Bad CSS
    <ul>
      <li>Duplicated selectors</li>
      <li>Duplicated properties</li>
    </ul>
  </li>
</ul>

<p>ではCSSでの重複した指定を指摘。</p>

<ul>
  <li>CSS complexity
    <ul>
      <li><a href="http://yellowlab.tools/result/e59wwxy65a/rule/cssColors">Different colors</a></li>
    </ul>
  </li>
</ul>

<p>ではCSSで使ってる色の一覧を表示。</p>

<ul>
  <li>jQuery
    <ul>
      <li>jQuery usage</li>
    </ul>
  </li>
</ul>

<p>では逆にjQueryを余り使ってないなら
代わりにVanilla JS
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
を使ってみたら?的な事を指摘。</p>

<p>みたいな感じで他のサイト解析によくある
ページ表示スピードに関するものに加え、
色々と細かいエラーとか改善案も示してくれます。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[purifycssで不必要なCSSを探す]]></title>
    <link href="https://rcmdnk.com/blog/2015/07/01/blog-css/"/>
    <updated>2015-07-01T00:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/07/01/blog-css</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00W651U88?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00W651U88&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51e%2BkHAeFHL._SS200_.jpg" alt="Purify (The Ivory Solution Book 3) (English Edition)" /></a>
</div>

<p>この前
<a href="https://rcmdnk.com/blog/2015/06/16/blog-octopress-css/">CSSの読み込み負担を下げる</a>
の所でちょっとCSSの見直しをしましたが、
別のPurifyCSSという別のツールを見つけたのでそれについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#purifycss" id="markdown-toc-purifycss">PurifyCSS</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="purifycss">PurifyCSS</h2>

<div class="github-widget" data-repo="purifycss/purifycss"></div>

<p>PurifyCSSは指定したCSSの中から特定のページの中で
使っているものだけを抜き出してくれるツールです。</p>

<p>Node.jsでライブラリとして使うか、
コマンドラインツールとして使う事が出来ます。</p>

<p>Node.jsで特定のプロジェクト内で使う場合には</p>

<pre><code>$ npm install purify-css
</code></pre>

<p>コマンドラインで使うためにシステムにインストールするには</p>

<pre><code>$ npm install -g purify-css
</code></pre>

<p>とします。</p>

<p>ただし、現在npmでパッケージインストール出来るバージョンがちょっと古くて
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>、
GitHubのレポジトリにある最新版を取ってきたかったので</p>

<pre><code>$ npm install -g https://github.com/purifycss/purifycss
</code></pre>

<p>としてレポジトリから直接インストールします。</p>

<p>コマンドラインでは</p>

<pre><code>$ purifycss  ~/test/public/stylesheets/screen.css ~/test/public/index.html --out purified.css
</code></pre>

<p>とすると、元の<strong>screen.css</strong>の中から
<strong>~/test/public/index.html</strong>の中で使われてるものだけを抜き出してくれます。</p>

<p><code>--out</code>でその出力先を指定。(指定がない場合は標準出力に出ます。)</p>

<p>さらに
また、<code>--min</code>オプションを付けると出力時にCSSをminifyしてくれます。
(インプットがminifyされたものであっても、<code>--min</code>を付けないと
一行ずつ<code>minify</code>されてない状態で出力されます。)</p>

<p>実際どれ位削減されたのか知りたい場合は<code>--info</code>を付けると</p>

<pre><code>$ purifycss --info  ~/test/public/stylesheets/screen.css ~/test/public/index.html --out purified.css
##################################
Before purify, CSS was 61537 chars long.
After purify, CSS is 32163 chars long. (1.9 times smaller)
##################################
This function took:  459 ms
</code></pre>

<p>みたいな感じで削減前と削減後の文字数を表示してくれます。</p>

<p>さらに<code>--rejected</code>を加えると削除した方の値を表示してくれます。
この<code>--rejected</code>オプションが今のnpmパッケージだと使えないので
GitHubから直接取ってくる必要があります。</p>

<pre><code>$ purifycss --rejected  ~/test/public/stylesheets/screen.css ~/test/public/index.html --out purified.css
##################################
Rejected selectors:
applet
object
iframe
h2
h3
h4
h5
h6
blockquote
html .gist .gist-file .gist-meta
.serif
...
</code></pre>

<p>みたいな感じ。</p>

<p>この部分が
<a href="https://rcmdnk.com/blog/2015/06/16/blog-octopress-css/">CSSの読み込み負担を下げる</a>
のとこで使ってみた
<a href="https://github.com/giakki/uncss">UnCSS</a>
と比べてかなり便利な点です。</p>

<p>どちらもサイト全体ではなくて特定のページについてなので
削減されたものを直接使うのは他で使われてるものも落とされてる可能性が
高いので出来ません。</p>

<p>逆に必要ない、といったものを表示してくれるとこれを目安に。
不必要な物を削除していく事が出来ます。</p>

<p>実際に実行してみた結果、上の<code>info</code>のところでも出てますが、
6万文字が3万文字程度まで半分位になっています。</p>

<p>これはUnCSSでやった結果も出力側が同じくらいだったので
大体同じ様な感じかな、と。</p>

<p>UnCSSの方はインプットの指定の仕方が
Webで公開されてるページを指定して、
CSSについては自動で読み込まれるだけなので、
外部のCSSとかも大量に読み込まれてその結果なのかな、と思ってましたが、
そうでも無いのかも？(か、外部のもので使ってる部分が少ないので
結果的に出力は同じ位になってるだけ、ということかも。)</p>

<p>一方PurifyCSSの方はGitHubのREADMEを見ると、
JavaScriptで作られる要素もきちんと見ぬくよ、と言う所がかなり強調されてます。</p>

<p>いずれにしろこの手のツールで直接削減してしまうのは
間違ってしまう可能性もありますが、
削除できそうな物を探す手段としてはかなり有用だと思うので
PurifyCSSが使えそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debugCSSでCSSをチェックする]]></title>
    <link href="https://rcmdnk.com/blog/2015/06/27/blog-css-javascript/"/>
    <updated>2015-06-27T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/06/27/blog-css-javascript</id>
    <content type="html"><![CDATA[<p><a href="http://yahoo.github.io/debugCSS/">debugCSS</a>
というブックマークレットが面白かったのでそれについて。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#debugcss" id="markdown-toc-debugcss">debugCSS</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="debugcss">debugCSS</h2>

<p><a href="http://yahoo.github.io/debugCSS/">debugCSS</a>
は表示中のページのCSSをチェックして結果をページ上に表示してくれる
ブックマークレットです。</p>

<p>チェックしたいページを表示して
ブックマークレットを実行すると</p>

<p><img src="https://rcmdnk.com/images/post/20150627_debugcss.jpg" alt="debugcss" class="pic" /></p>

<p>こんな感じでページの中に直接エラーメッセージなどを表示してくれます。</p>

<p>右下にエラーなどそれぞれの合計が出ます。</p>

<p>ここではエラーが出ませんでしたが、
エラーがあると</p>

<p><img src="https://rcmdnk.com/images/post/20150627_debugcsserror.jpg" alt="debugcsserror" class="pic" /></p>

<p>こんな感じで赤い枠が。</p>

<p>NoticeやWarningはちょっと基準が厳しくて大量にチェックされすぎな感じもしますが、
チェック自体は大きなページでも一瞬で終わって表示されるので、
手軽にチェックしてみると結構面白いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSSの読み込み負担を下げる]]></title>
    <link href="https://rcmdnk.com/blog/2015/06/16/blog-octopress-css/"/>
    <updated>2015-06-16T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2015/06/16/blog-octopress-css</id>
    <content type="html"><![CDATA[<div class="amazon-img">
  <a href="//www.amazon.co.jp/gp/product/B00M0ESXUI?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00M0ESXUI&amp;linkCode=shr&amp;tag=rcmdnk0c-22" rel="nofollow" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51nSEOKWSrL._SS200_.jpg" alt="Web制作者のためのCSS設計の教科書 モダンWeb開発に欠かせない「修正しやすいCSS」の設計手法" /></a>
</div>

<p>Googleの
<a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a>
で見ると
<strong>スクロールせずに見えるコンテンツのレンダリングをブロックしている JavaScript/CSS を排除する</strong>
という項目が出ててCSSファイルがブロックしてる様なので
それをなんとかしよう、と言う話。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#これまでの設定" id="markdown-toc-これまでの設定">これまでの設定</a></li>
  <li><a href="#body-前に持ってってみる" id="markdown-toc-body-前に持ってってみる">&lt;/body&gt; 前に持ってってみる</a></li>
  <li><a href="#インライン化を試してみる" id="markdown-toc-インライン化を試してみる">インライン化を試してみる</a></li>
  <li><a href="#使ってないcssの削除" id="markdown-toc-使ってないcssの削除">使ってないCSSの削除</a></li>
  <li><a href="#fontawesomeだけ下に持っていく" id="markdown-toc-fontawesomeだけ下に持っていく">FontAwesomeだけ下に持っていく</a></li>
  <li><a href="#javascriptを全部後ろに持って行ってscreencssもその直前に" id="markdown-toc-javascriptを全部後ろに持って行ってscreencssもその直前に">JavaScriptを全部後ろに持って行ってscreen.cssもその直前に</a></li>
  <li><a href="#その他参考" id="markdown-toc-その他参考">その他参考</a></li>
  <li><a href="#まとめ" id="markdown-toc-まとめ">まとめ</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="これまでの設定">これまでの設定</h2>

<p>これまでCSSファイルは<strong>sass</strong>で書いたものをまとめた
<strong>/stylesheets/screen.css</strong>とFontAwesome
の物を<code>head</code>内で呼んでました。</p>

<pre><code>&lt;link href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet"&gt;
&lt;link href="{{root_url}}/stylesheets/screen.css" media="screen, projection" rel="stylesheet"&gt;
</code></pre>

<h2 id="body-前に持ってってみる">&lt;/body&gt; 前に持ってってみる</h2>

<p>これが上にあるのがダメなので、JavaScriptとかでよくやるみたいに
下に持って行ってさらに非同期で読み込むようにしてみます。</p>

<p><strong>source/_incldues/after_fotter.html</strong>なんかに</p>

<figure class="code"><figcaption><span>after_footer.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span></span><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;text/javascript&quot;</span><span class="p">&gt;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">  <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">j</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;link&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="nx">j</span><span class="p">.</span><span class="nx">rel</span> <span class="o">=</span> <span class="s1">&#39;stylesheets&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">j</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">u</span><span class="p">;</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span><span class="nx">j</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;}</span>
</span><span class="line">      <span class="nx">s</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="nx">s</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s2">&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css&quot;</span><span class="p">,</span><span class="s2">&quot;font-awesome-css&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s2">&quot;{{root_url}}/stylesheets/screen.css&quot;</span><span class="p">,</span><span class="s2">&quot;screen-css&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">})(</span><span class="nb">document</span><span class="p">);</span>
</span><span class="line"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>な感じで書きます。</p>

<p>ここでIDもこの様に指定しておけば、
<code>head</code>内で</p>

<pre><code>&lt;link href="{{root_url}}/stylesheets/screen.css" media="screen, projection" rel="stylesheet" id="screen-css"&gt;
</code></pre>

<p>と書いた時に再度読み込むことを避ける事が出来ます。</p>

<p>取り敢えずこれでやってみたところ、
最初の表示が崩れて表示されるのと、全部読み込んだ後でもページ中におかしな表示が残る様になってしまいました。</p>

<p>JavaScriptで後からいじる部分とかがあるので、最初にきちんと<strong>screen.css</strong>の方が読み込まれてないとダメみたいです。</p>

<h2 id="インライン化を試してみる">インライン化を試してみる</h2>

<p>PageSpeed Insightの<a href="https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery">CSS の配信を最適化する</a>
を参照すると、
スクロールせずに見える範囲(Above the fold)のコンテンツに関するCSSだけを抜き出して
<code>head</code>内にインラインで書き、
本体の<code>screen.css</code>とかは
<code>&lt;/html&gt;</code>の下に書けば良い、とのこと。</p>

<p>この様な部分を自分で探して抜き出すのは結構大変ですが、
世の中には色々便利なツールがあります。</p>

<blockquote>
  <p><a href="https://github.com/addyosmani/critical-path-css-tools">addyosmani/critical-path-css-tools</a></p>
</blockquote>

<p>ここにある色々なツールで自分のサイトのAbove the foldな部分の
CSSを抜き出すことが出来ます。</p>

<p>試しにウェブサービスになってる</p>

<blockquote>
  <p><a href="http://jonassebastianohlsson.com/criticalpathcssgenerator/">Critical Path CSS Generator - by Jonas Ohlsson</a></p>
</blockquote>

<p>で試してみると、
元が59180文字だったのが9665抜き出されました。
6分の1位。</p>

<p>この部分だけ取り敢えず他のファイルに書いて<code>head</code>で読み込んで、
<strong>screen.css</strong>だけ下に持って行ってみましたが、
やはり途中で上手く行かないところがあります。</p>

<p>ちょっとページのJavaScriptとか細かいところまで見て
特にページの中の大きさとか決めてる物はAbove the foldに無いところでも
持ってこないとダメそう。</p>

<p>それにはちょっとSCSS全部を整理しないといけないのでちょっと今回は断念。</p>

<h2 id="使ってないcssの削除">使ってないCSSの削除</h2>

<p>また、上のリンク集の中に
<a href="https://github.com/giakki/uncss">UnCSS</a>
というツールがあって、これをかけると実際に使われてるものだけを取ってきてくれる物があります。</p>

<p>こちらのツールはページ全体を読んで
使われてる物を探してきている様ですが、
インプットの指定がいまいち分からず、FontAwesomeとかGoogle検索のCSSとか
全部入りの状態でトップページを見てみたところ、
30000文字程度だったので、
<strong>screen.css</strong>だけで6万文字近くあるのを考えると大分無駄がありそうです。。。
とは言っても他にコードのあるページとかだとここでは使ってないものもありますし、
全ページで使われてる物をきちんと抜き出すのは結構大変そうです。</p>

<p>これもそのうち<strong>気が向いたらリスト</strong>へ。</p>

<h2 id="fontawesomeだけ下に持っていく">FontAwesomeだけ下に持っていく</h2>

<p>FontAwesomeは単に記号の置き換えをしてるだけなので
ページの組み立てにはそれ程影響がありません。</p>

<p>なので上のスクリプトでFontAwesomeだけにして、
<strong>screen.css</strong>だけ<code>head</code>内に残す様にしてみました。</p>

<p>するとPageSpeed Insightでも
<strong>スクロールせずに見えるコンテンツのレンダリングをブロックしている JavaScript/CSS を排除する</strong>
の部分からFontAwesomeは消えて<strong>修正が必要</strong>から<strong>修正を考慮</strong>の項目に移すことが出来ました。</p>

<p>表示も気持ち速くなった感じ。
(キャッシュも効いてたりするので見た目では分かりづらいですが、
これらに関してはちゃんと測ったりはしてないです。)</p>

<h2 id="javascriptを全部後ろに持って行ってscreencssもその直前に">JavaScriptを全部後ろに持って行ってscreen.cssもその直前に</h2>

<p>JavaScriptの方も色々と整理していて、
全部のスクリプトを<code>&lt;/body&gt;</code>前に持って行くことが出来たので、
その前で<strong>screen.css</strong>を読めばよいか、ということで
上の例の様な非同期にしないで、<code>&lt;/body&gt;</code>前で直接</p>

<pre><code>&lt;link href="{{root_url}}/stylesheets/screen.css" media="screen, projection" rel="stylesheet"&gt;
</code></pre>

<p>と呼んでJavaScriptを呼ぶ様なこともしてみました。</p>

<p>すると今度は</p>

<blockquote>
  <p>表示可能コンテンツの優先順位を決定する</p>

  <p>スクロールせずに見えるコンテンツをレンダリングするには、追加でネットワークのラウンド トリップが必要です。最適なパフォーマンスを得るには、スクロールせずに見えるコンテンツをレンダリングするのに必要な HTML の量を減らしてください。
スクロールせずに見えるコンテンツをレンダリングするには 49.2 KB の HTML レスポンスが必要でした。このためにはネットワーク ラウンドトリップが 3 回必要となります。最初の 2 回のラウンドトリップ分の HTML のみでレンダリングできるよう、スクロールせずに見えるコンテンツの優先順位を決定してください。
2 回以内のラウンドトリップでの HTML 配信で、最後のスクロールせずに見えるコンテンツの約 6% のみレンダリングできました（スクリーンショットを見る）。</p>

</blockquote>

<p>みたいな警告が。</p>

<p>これはいわゆるFOUC(Flash of Unstyled Content)問題
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
だと思うんですが、HTMLを一度
レンダリングしてしまってから
CSSを見つけて再びレンダリングする、みたいな作業になってしまって
余計な負荷がかかってしまってる様子。</p>

<p>なのでやはりページの枠組みを作ってる様なCSSの部分は前に残さないとダメだな、と。</p>

<h2 id="その他参考">その他参考</h2>

<p>今回色々やるにあたって参考になったページ。</p>

<blockquote>
  <p><a href="http://patrickhamann.com/workshops/performance/tasks/2_Critical_Path/2_2.html">2.2 Above the fold CSS</a></p>
</blockquote>

<p>Above the foldやUnCSSについても書いてあります。
Above the foldに関しては
<a href="javascript:(function(){var%20CSSCriticalPath=function(w,d,opts){var%20opt=opts%20||{};var%20css={};var%20pushCSS=function(r){if(!!css[r.selectorText]===false)css[r.selectorText]={};var%20styles=r.style.cssText.split(/;(%3F![A-Za-z0-9])/);for(var%20i=0;i%20%3C%20styles.length;i++){if(!!styles[i]===false)continue;var%20pair=styles[i].split(%22:%20%22);pair[0]=pair[0].trim();pair[1]=pair[1].trim();css[r.selectorText][pair[0]]=pair[1];}};var%20parseTree=function(){var%20height=w.innerHeight;var%20walker=d.createTreeWalker(d,NodeFilter.SHOW_ELEMENT,function(node){return%20NodeFilter.FILTER_ACCEPT;},true);while(walker.nextNode()){var%20node=walker.currentNode;var%20rect=node.getBoundingClientRect();if(rect.top%20%3C%20height%20||%20opt.scanFullPage){var%20rules=w.getMatchedCSSRules(node);if(!!rules){for(var%20r=0;r%20%3C%20rules.length;r++){pushCSS(rules[r]);}}}}};this.generateCSS=function(){var%20finalCSS=%22%22;for(var%20k%20in%20css){finalCSS+=k+%22%20{%20%22;for(var%20j%20in%20css[k]){finalCSS+=j+%22:%20%22+css[k][j]+%22;%20%22;}finalCSS+=%22}\n%22;}return%20finalCSS;};parseTree();};var%20cp=new%20CSSCriticalPath(window,document);var%20css=cp.generateCSS();console.log(css);})();">ブックマークレット</a>
が紹介されてますが、このブックマークレットは
Firefoxでは動かないのでGoogle Chromeとかで使う必要がありました。</p>

<p>また、さらに最後に
<a href="http://addyosmani.github.io/basket.js/">basket.js</a>(<a href="https://github.com/addyosmani/basket.js">addyosmani/basket.js</a>
というJavaScriptが紹介されています。</p>

<p>これは一度取ってきたスクリプトとかをブラウザのキャッシュの代わりにローカルストレージ(localStorage)に
保存して次からそれを読み出す、と言う事を行ってくれるスクリプトです。</p>

<p>ブラウザとか環境にも依りますが、大体の場合キャッシュの方が
速いみたいですが<sup id="fninref:2"><a href="#fnin:2" rel="footnote">2</a></sup>、
例えばサーバー側でキャッシュの設定とかを出来ない環境とかだとより有効なのかな、と。
今後、この辺のブラウザの仕様も変わっていくのかも知れませんが。</p>

<p>GitHub Pagesだと.htaccessでキャッシュの有効時間とかの設定を変えたり出来ないので<sup id="fninref:3"><a href="#fnin:3" rel="footnote">3</a></sup>、
コレ使えるかな、とも。</p>

<p>ただ、頻繁にページを見ない限りは逆にこのスクリプトを読む分だけ
遅くなってしまうし、
後、CSSの場合はちょっと面倒<sup id="fninref:4"><a href="#fnin:4" rel="footnote">4</a></sup>な感じなのでCSSには使うことは試してません。</p>

<h2 id="まとめ">まとめ</h2>

<p>最終的に<strong>screen.css</strong>に関してはそのまま<code>head</code>内に残し、
FontAwesomeのものだけ<strong>after_footer.html</strong>の中で非同期で呼ぶ様な
スクリプトで読み込む様にしました。</p>

<p>FontAwesomeが他の物をブロックしなくなった分だけちょっとは良くなったかな、と。
ただ、FontAwesomeはそもそも一部しか使ってないので
<strong>UnCSS</strong>とか使って出てきたものだけを使うのもありかな、とも。
(そうすると便利さが半減しますが。)</p>

<p><strong>screen.css</strong>の方も整理する事が必要な感じなので、
ちょっとずつ見ていこうとは思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでサイドバーを残そうとしてハマった所]]></title>
    <link href="https://rcmdnk.com/blog/2013/11/20/blog-css/"/>
    <updated>2013-11-20T12:00:00+00:00</updated>
    <id>https://rcmdnk.com/blog/2013/11/20/blog-css</id>
    <content type="html"><![CDATA[<p>Octopressの初期設定だとブログの幅を狭くしていくと
サイドバーが下に回る様になってるんですが、
なんとなくそれを止めようと思って試した時に
ちょっとハマった所について。</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#cssについての勘違い" id="markdown-toc-cssについての勘違い">CSSについての勘違い</a></li>
  <li><a href="#1px-borderの罠" id="markdown-toc-1px-borderの罠">1px borderの罠</a></li>
</ul>
<div class="group"></div>

<div class="center_wrapper">
  <div>
  <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-3802317723662375" data-ad-slot="5762198341"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
  </div>
</div>

<h2 id="cssについての勘違い">CSSについての勘違い</h2>

<p>Octopressのページ構成を物凄く簡略化するとこんな感じ。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span></span><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span><span class="line">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span><span class="line">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;content&quot;</span><span class="p">&gt;</span>
</span><span class="line">      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;entry-content&quot;</span><span class="p">&gt;</span>
</span><span class="line">        Article
</span><span class="line">      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span><span class="line">      <span class="p">&lt;</span><span class="nt">aside</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sidebar&quot;</span><span class="p">&gt;</span>
</span><span class="line">        Sidebar
</span><span class="line">      <span class="p">&lt;/</span><span class="nt">aside</span><span class="p">&gt;</span>
</span><span class="line">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span><span class="line">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span><span class="line"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>これで、各要素がこんな感じ。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span></span><span class="nt">body</span><span class="p">{</span>
</span><span class="line">    <span class="kp">-webkit-</span><span class="n">text-size-adjust</span><span class="p">:</span><span class="kc">auto</span><span class="p">;</span>
</span><span class="line">    <span class="k">max-width</span><span class="p">:</span><span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">    <span class="k">min-width</span><span class="p">:</span><span class="mi">300</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">    <span class="k">position</span><span class="p">:</span><span class="kc">relative</span><span class="p">;</span>
</span><span class="line">    <span class="k">margin</span><span class="p">:</span><span class="mi">0</span> <span class="kc">auto</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">#</span><span class="nn">content</span><span class="p">{</span>
</span><span class="line">    <span class="k">overflow</span><span class="p">:</span><span class="kc">visible</span><span class="p">;</span>
</span><span class="line">    <span class="k">margin-right</span><span class="p">:</span><span class="mi">150</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">    <span class="k">position</span><span class="p">:</span><span class="kc">relative</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">#</span><span class="nn">content</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span>
</span><span class="line">    <span class="k">width</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class="line">    <span class="k">float</span><span class="p">:</span><span class="kc">left</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">aside</span><span class="p">.</span><span class="nc">sidebar</span><span class="p">{</span>
</span><span class="line">    <span class="k">width</span><span class="p">:</span><span class="mi">150</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">    <span class="k">padding</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">clear</span><span class="p">:</span><span class="kc">none</span><span class="p">;</span>
</span><span class="line">    <span class="k">float</span><span class="p">:</span><span class="kc">left</span><span class="p">;</span>
</span><span class="line">    <span class="k">margin</span><span class="p">:</span><span class="mi">0</span> <span class="mi">-100</span><span class="kt">%</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>実際、最初のclassicテーマだと、レスポンシブな感じになってますが
その辺りは省いてます。</p>

<p>これで、上のままだとこんな感じ:</p>

<blockquote>
  <p><a href="https://rcmdnk.com/rawhtml/octopress-sidebar/css_ok.html" target="_blank">サイドバーがそのまま留まる</a></p>
</blockquote>

<p>ブラウザを狭くして行ってもらうとわかると思いますが、最小限まで行くと、
サイドバーの方がそのままはみ出していきます。</p>

<p>で、この時に、Sidebarの幅を150pxのまま、
Articleの方を100pxとかSidebarより狭くしたい、と思ってそうしてたんですが、
上のbodyの幅を短くしてmarginはそのまま残してもこんな感じで狭くしていくと
サイドバーが下に行ってしまいます。</p>

<blockquote>
  <p><a href="https://rcmdnk.com/rawhtml/octopress-sidebar/css_no.html" target="_blank">サイドバーが下に行ってしまう</a></p>
</blockquote>

<p>しっかり理解してなかった点は、<code>margin-left:-100%</code>みたいな感じで右に
ずらしていても、元のスペースに充分に余白がないと駄目、ということです。</p>

<p>上だとArticle部分はmarginを引いて100pxまでは必ず残るんですが
(全体が250pxになると100pxになる)、
全体幅が300px切るとSidebarは左の元の部分に充分な幅が無くなって下に落ちてしまってます。</p>

<p>取り敢えず、単にCSSをよく知らなかっただけ、です。。。
floatで横にmarginを使って持ってきたい時は簡単には幅の広い方を
メインにしてやらないと駄目、ということ(で正しいはず)。</p>

<h2 id="1px-borderの罠">1px borderの罠</h2>

<p>この辺を切り替えるのは面倒なので、取り敢えず両方等幅にして
過ごそうと思ったんですが、どうもギリギリまで狭めると
やはり下に行ってしまうことが。</p>

<p>Octopressで基本的に幅等を決めてるのは<code>sass/base/_layout.scss</code>
の中なので、この中で計算してmarginやら色々変えて正しく出来てるはずなのに、
どうしても出来ないという事態に。</p>

<p>そんな中、ふと<code>sass/ase/_theme.scss</code>を見てみると一番下にこんな記述。。。</p>

<figure class="code"><figcaption><span>sass/ase/_theme.scss</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span></span><span class="nt">body</span> <span class="p">{</span>
</span><span class="line">  <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class="line">    <span class="nt">background</span><span class="nd">:</span> <span class="err">$</span><span class="nt">sidebar-bg</span> <span class="err">$</span><span class="nt">noise-bg</span><span class="o">;</span>
</span><span class="line">    <span class="nt">border-bottom</span><span class="nd">:</span> <span class="nt">1px</span> <span class="nt">solid</span> <span class="err">$</span><span class="nt">page-border-bottom</span><span class="o">;</span>
</span><span class="line">    <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class="line">      <span class="nt">background</span><span class="nd">:</span> <span class="err">$</span><span class="nt">main-bg</span> <span class="err">$</span><span class="nt">noise-bg</span><span class="o">;</span>
</span><span class="line">      <span class="nt">border-right</span><span class="nd">:</span> <span class="nt">1px</span> <span class="nt">solid</span> <span class="err">$</span><span class="nt">sidebar-border</span><span class="o">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>そう言えばこのボーダーの色を背景と一緒にして消してたので忘れてましたが、
確かにサイドバーとの間にこのボーダーがありました。</p>

<p>ただ、どちらかと言うとthemeというよりlayoutにあるべきものな気も。。。</p>

<p>というわけで、この1pxを0に
<sup id="fninref:1"><a href="#fnin:1" rel="footnote">1</a></sup>
して試してみたらうまくいきました。
(現在のブログを狭めてみるとサイドバーが最後まで残ります。)</p>

]]></content>
  </entry>
  
</feed>
