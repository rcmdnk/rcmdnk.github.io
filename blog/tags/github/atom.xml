<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: GitHub | rcmdnk's blog]]></title>
  <link href="http://rcmdnk.github.io/blog/tags/github/atom.xml" rel="self"/>
  <link href="http://rcmdnk.github.io/"/>
  <updated>2013-08-23T13:09:01+02:00</updated>
  <id>http://rcmdnk.github.io/</id>
  <author>
    <name><![CDATA[rcmdnk]]></name>
    <email><![CDATA[rdmdnk@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[始めてのpull request @ GitHub]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/19/computer-git-github/"/>
    <updated>2013-05-19T19:00:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/19/computer-git-github</id>
    <content type="html"><![CDATA[<p>GitHubを使い始めてしばらく経ちましたが、始めてPull Requestをしてみたので
やり方をメモしておきます。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Pull+Requestを送ったレポジトリ">Pull Requestを送ったレポジトリ</h1>

<p>以前<a href="/blog/2013/05/02/blog-octopress">Octopressへ絵文字の導入</a>で紹介した
<a href="https://github.com/chriskempson/jekyll-emoji">jekyll-emoji</a>と言う
プラグインに対して、emojiのイメージを外部における様な設定を可能にする
変更をリクエストしてみました。</p>

<h1 id="実際に行った手順">実際に行った手順</h1>

<h2 id="Forkする">Forkする</h2>

<p>まず、<a href="https://github.com/">GitHub</a>にログインした状態で
リクエストを送りたいレポジトリのページに行きます。</p>

<p>各レポジトリの右上には<code>Fork</code>と言うボタンがあるので、このボタンをクリックします。</p>

<p><img src="/images/post/20130519_fork.jpg" alt="" title="" /></p>

<p>そうすると自分のアカウントにレポジトリのコピーが出来るので、
このレポジトリに対して変更を行なって行くことになります。
自分のページの<code>Repositories</code>で確認が出来ます。</p>

<p><img src="/images/post/20130519_fork3.jpg" alt="" title="" /></p>

<p>Forkした相手のレポジトリはこんな感じで自分の<code>Contributions</code>
にも載ります。</p>

<p><img src="/images/post/20130519_fork2.jpg" alt="" title="" /></p>

<h2 id="Forkしたレポジトリをclone">Forkしたレポジトリをclone</h2>

<p>Forkしたレポジトリをローカルにcloneして変更を行います。</p>

<p>通常のレポジトリ同様、リモートのアドレスを確認してcloneします。</p>

<p><img src="/images/post/20130519_clone.jpg" alt="" title="" /></p>

<pre><code>git clone git@github.com:rcmdnk/jekyll-emoji.git
</code></pre>

<p>GUIアプリでやっている人はそちらで。</p>

<h2 id="作業用ブランチを作って変更を適用する">作業用ブランチを作って変更を適用する</h2>

<p>色々な所で書かれてますが、Pull Requestを送る時は作業用のブランチを
作ってそちらからリクエストを送るのが良い様です。</p>

<p>今回の様な頻繁に更新されない様なレポジトリに対して、
ちょっとした変更を送るだけならあまり気にすることではないと思いますが、
オリジナルが頻繁に更新されるような場合や自分の変更に時間がかかる場合は、
Masterブランチをオリジナルの変更を追うためのブランチとして活用する、
というのが１つの理由です。</p>

<p>今回は外部へemojiディレクトリを置く、と言うことで<code>external</code>と言うブランチを
作りました。</p>

<pre><code>cd jekyll-emoji
git checkout -b external
</code></pre>

<p>これで<code>external</code>ブランチに移ったのでゴニョゴニョと変更します。</p>

<h2 id="変更をcommitしてリモートへpush">変更をcommitしてリモートへpush</h2>

<pre><code>git commit -am "add external flags"
git push origin external
</code></pre>

<p>これでGitHubのレポジトリに<code>external</code>ブランチが出来ます。</p>

<h2 id="Pull+Requestを送る">Pull Requestを送る</h2>

<p>GitHubに戻り変更を行ったレポジトリのページからPull Requestを送ります。
作業を行ったブランチへ変更し、ページ上部の<code>Pull Request</code>
ボタンを押すとPull Requestをするページに移動するので、
適宣コメントを書いてリクエストを送ります。</p>

<p><img src="/images/post/20130519_pull_request_external.jpg" alt="" title="" /></p>

<h2 id="オリジナルの作者とやり取りしながら変更を取り込んでもらう">オリジナルの作者とやり取りしながら変更を取り込んでもらう</h2>

<p>Pull Requestを送ると、
<a href="https://github.com/chriskempson/jekyll-emoji/pull/2">このような</a>
ページでやりとりを行える様になります。</p>

<p>ここで作者とやり取りしながら適宣修正して取り込んでもらうようにします。</p>

<p>もし、自分の変更をさらに修正したい場合は単に自分のレポジトリの該当ブランチを
アップデートすれば(<code>commit&amp;push</code>)そのまま相手にも伝わります。</p>

<p>今回は２回程アップデートをした上で取り込んでもらいました。
(２回目は単なるバグでしたが...)</p>

<h1 id="まとめ">まとめ</h1>

<p>今回は小さなアップデートだったので簡単なことしかしていませんが、
さらに数回に渡ってコミットした後に送る場合や、
オリジナルのアップデートがあってそれを取り込んだりすることが
必要になる場合がありますが、
それらについて、さらに詳しい説明は以下のページがとてもわかり易かったです。</p>

<blockquote><p>Ref: <a href="http://d.hatena.ne.jp/hnw/20110528">GitHubへpull requestする際のベストプラクティス</a></p></blockquote>

<p>ちなみに、commitの説明文て、動詞を現在形と過去形とどっちで書くのが
正しいのだろう、とたまに考えながら、でも殆ど気にせず
気が向く方で書いていたのですが(上の変更でも最初は<code>add</code>で次は<code>fixed</code>)
どうなんでしょう?
職場に居るネイティブの人達も人によって違ったりするので
語学的な感覚でもどっちでもありみたいですが、
どっちでも良いから最初にガイドラインを作っておいてそれに従う、
と言うようにするべきなんでしょうね、多分。</p>

<blockquote><p>Ref: <a href="http://agpg.seesaa.net/article/279123617.html">続: コミットログは現在形?過去形?それとも?</a></p></blockquote>

<p></p>

<hr />

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git + Dropbox使用時の注意点]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/05/12/computer-octopress-git-github-dropbox/"/>
    <updated>2013-05-12T20:57:00+02:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/05/12/computer-octopress-git-github-dropbox</id>
    <content type="html"><![CDATA[<p>OctopressのファイルはDropboxに入れて管理していて、
複数の端末からアップデートすることがあります。</p>

<p>先日<code>rake deploy</code>してもページがアップデートされないな、
と思っていたらgitで<code>commit</code>/<code>push</code>するときにエラーが出ていました。
(<code>generate</code>した時のエラーは気をつけますが<code>deploy</code>時は
ちゃんと見てなかった。。。)
ついでにcygwin上でのパーミッション等についても調べたので
まとめておきます。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="Dropboxでの競合エラー">Dropboxでの競合エラー</h1>

<p>ちゃんと見れば簡単なことなのですが、次の様なエラーが起っていました。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2 id="copying+public+to+_deploy">copying public to _deploy&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>$ rake deploy
</span><span class='line'>...&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cp -r public/. &lt;em>deploy
</span><span class='line'>cd &lt;/em>deploy&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2 id="Commiting:+Site+updated+at+2013-05-11+16:59:45+UTC">Commiting: Site updated at 2013-05-11 16:59:45 UTC&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>fatal: Reference has invalid format: 'refs/heads/master (XXXX の競合コピ ー 2013-05-10)'&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2 id="Pushing+generated+_deploy+website">Pushing generated _deploy website&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>fatal: Reference has invalid format: 'refs/heads/master (XXXX の競合コピ ー 2013-05-10)'&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2 id="Github+Pages+deploy+complete">Github Pages deploy complete&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>cd -
</span><span class='line'>fatal: The remote end hung up unexpectedly</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>よく見ればちゃんと<code>fatal</code>と言ってるんですが、
ローカルで<code>preview</code>チェックはOKだったので<code>deploy</code>コマンド打って
ブラウザでチェック、まではもう深く考えない流れ作業なので、
ブラウザを何度更新してもアップデートされないな、とちょっと悩んでしまいました...</p>

<p>問題は<code>_deploy/.git/refs/heads/</code>以下に上に出ている
<code>master (XXXX の競合コピー 2013-05-10)</code>と言う名前のファイルが出来ていて、
gitが変なファイルがあって分からない、と言っている訳です。</p>

<p>このファイルは、Dropboxで競合が起こった時に上手くマージ出来なかった時に
作られます。
今回は片方の端末でDropboxがちょっと落ちていた時があって、
その間にもOctopress内をアップデートしてしまったのが原因だと思います。</p>

<p>取り敢えず、この<code>master</code>以外にもいくつか競合コピーがあったので
全て削除したら文句を言われなくなりましたのでOKです。</p>

<p>Dropbox内なので、最悪上手くいかなくても復元出来るので取り敢えず消してしまいましたが、
安全を取るならバックアップを取っておくべきかもしれません
(この程度のことならば冗長かもしれませんが)。</p>

<h1 id="Dropboxでのファイルパーミッションの問題(各OSでのパーミッションについて)">Dropboxでのファイルパーミッションの問題(各OSでのパーミッションについて)</h1>

<p>ついでに、これまで何度かファイルのパーミッションがおかしくて
手で権限変更したりする必要があって気になっていたことがあったので
調べてみました。</p>

<p>通常、Dropbox内でのファイルをExploerとかから見る場合は
読み取り実行など問題ありません。</p>

<p>ただ、Macでターミナルから見たり、Windowsでcygwinからファイルを
見たりするとそれぞれのパーミッションが違って見えます。</p>

<p>最初はMacとWindows(cygwin)
で使っているとそれぞれでパーミッションの構造自体が単に違うだけかな、
とか思っていたんですが、
どうやらDropboxでは基本的にファイルやディレクトリのパーミッションは
伝播されず、1つの端末でパーミッションを変更しても
他の端末では反映されません。(Windows同士でも反映されませんでした。)</p>

<p>さらに、問題はファイルなどが作られた時の初期パーミッションが
環境によって違うことです。</p>

<p>通常の設定だと、ファイルやディレクトリ(フォルダ)を作った場合
次の様なパーミッション(権限)<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>になります。</p>

<table class="center">
  <tr>
    <th>OS</th>
    <th>作成方法</th>
    <th>作成物</th>
    <th>権限</th>
  </tr>
  <tr>
    <td rowspan="4" >Windows<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></td>
    <td rowspan="2">Explorer</td>
    <td>ファイル</td>
    <td>700(*)</td>
  </tr>
  <tr>
    <td>ディレクトリ</td>
    <td>700(*)</td>
  </tr>
  <tr>
    <td rowspan="2">Command</td>
    <td>ファイル</td>
    <td>644</td>
  </tr>
  <tr>
    <td>ディレクトリ</td>
    <td>755</td>
  </tr>
  <tr>
    <td rowspan="4">Mac<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup></td>
    <td rowspan="2">Finder</td>
    <td>ファイル</td>
    <td>644</td>
  </tr>
  <tr>
    <td>ディレクトリ</td>
    <td>755</td>
  </tr>
  <tr>
    <td rowspan="2">Command</td>
    <td>ファイル</td>
    <td>644</td>
  </tr>
  <tr>
    <td>ディレクトリ</td>
    <td>755</td>
  </tr>
  <tr>
    <td>Linux<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup></td>
    <td colspan="3">Macと同じ</td>
  </tr>
</table>


<p><code>Explorer</code>、<code>Finder</code>となっているのはExplorer等で右クリックから
新規作成で作った場合です。
OSの普通の作業で作られる場合も同様で、
従ってDropboxの同期によって作られるファイルも<code>Exploer</code>と同様になります。</p>

<p>見て分かるように、Macの場合はFinderでもコマンドラインからでも
同じ様に扱われますが、
Windowsの場合、cygwin以外で作られたファイル等は全て
700のパーミッションを持っています。</p>

<hr />

<p><em>2013/06/25 WindowsのAdministrators状態について追記</em></p>

<p>さらに700と言っても</p>

<pre><code>$ ls -l
-rwx------+ 1 Administrators None 2 May 12 21:00 a.txt
</code></pre>

<p>の様に所有者を見ると<code>Administrators</code>になっています。
cygwin上で作ったファイルはちゃんとユーザーのものになります。</p>

<pre><code>$ touch b.txt
$ ls -l
-rwx------+ 1 Administrators None 2 May 12 21:00 a.txt
-rwx------+ 1 User           None 2 May 12 21:10 b.txt
</code></pre>

<p>この所有者はExploerからファイルを右クリックして<code>プロパティ</code>の<code>詳細</code>から見れるものとは
同期してない様です。
新規作成で作ったテキスト等は<code>詳細</code>ではユーザー名になっていても
cygwinからはAdministratorsの物に見えていました。</p>

<p>Windows内のDropbox以外のフォルダも見てみましたが、
最初にシステムに作られるユーザーのもの(Desktopフォルダだったり)は
ユーザーの所有に見えたり、その後自分で作った物に関しては
作ったソフトも関係しているのか、まばらでいまいちどの様に決まるのか良く分かってません。</p>

<p>問題なのはAdministrators用で700なので、ここでユーザーに権限が無いように見えることです。
これに関しては詳しく調べて無いですが、手元で使ってる環境で、
共にユーザーが管理者権限持っていてUAC等切っている状態で、</p>

<ul>
<li>Windows Vista : 読む、実行はできるが書き込みが出来ない。ただ、どうも
<code>管理者だけど書き込み権限が無い</code>状態にあるみたいで、viで<code>:w!</code>とすれば書き込めるし、
<code>chmod +w a.txt</code>とすれば普通に書き込める様になる。(<code>ls -l</code>の結果は変わらず)。
所謂root権限状態?</li>
<li>Windows 7: Administrators所有で700になっているファイルも普通に書き込める。
つまりAdministratorsと管理者権限を持ったユーザーの区別無し?</li>
</ul>


<p>といった感じです。問題なのはVistaの場合で、
DropboxでOctopressの記事なんかを管理していると全てreadonlyの状態になっているので
他で作った記事は毎回<code>chmod +w file</code>する必要があります。
<code>rake isolate[file]</code>的な事を一旦すれば、全てが再生成される形になるので、
記事全てがreadonly状態に。</p>

<p>仕方が無いのでoctopressのトップディレクトリやDropboxのトップディレクトリで
気が向いたら(気になったら)</p>

<pre><code>$ chmod -R +w ./
</code></pre>

<p>として書き込み権限を与えています。</p>

<p><em>追記終わり</em></p>

<hr />

<hr />

<p>*2013/06/26 さらに追記
ファイルを作る際に親フォルダの権限を変えると中に作られる
ファイルの権限も変わってくる様です。</p>

<p>Cygwin外で作られるファイルがAdministratorsの所有物なのは変わらないのですが、
フォルダを<code>chmod 755 folder</code>としてから<code>folder</code>内に
Cygwin外からファイルを作ると、パーミッションが755だったりします。
さらにファイルに書き込み可能だったりします。
また、フォルダを<code>chown +w folder</code>等としても同様(?)。</p>

<p>取り敢えず、Cygwinでのトップディレクトリに行って全部USER所有に変えてみました。</p>

<pre><code>$ cd /
$ chown -R +w ./
</code></pre>

<p>この状態で、Explorer上で新規ファイルを作ったりするとAdministrators所有で
700状態ですが、USERで書き込み可能です。</p>

<p>この状態でDropboxで新たなファイルを他のPCで追加した所、同期されたファイルは</p>

<pre><code>$ ls 
----------+ 1 Administrators None     0 Jun 26 23:00 a.txt
</code></pre>

<p>の様な形に...読んだりパーミッションを変えたり所有者を変えたりはできますが、
最初の状態は書き込み不可なので結局以前と一緒です。</p>

<p>ソフトによっても動作が違う様で、イマイチ良くわからない、という感じで
中途半端で申し訳ないですが、
取り敢えず、Cygwinからよく使うフォルダは<code>chmod -R +w</code>しておくと
Explorerなどで作ったファイルは書き込み可能な状態に出来ます。</p>

<p>ただ、VistaでDropboxフォルダを使う場合、Dropbox経由でコピーされてきた
ファイルはどうしても書き込み権限が無い状態で作られるようです。
(cronで<code>chmod -R +w ./Dropbox</code>的なコマンドを1日1回くらい実行する、とかで対処するくらい
しかないのでしょうか...?)</p>

<p><em>追記終わり</em></p>

<hr />

<p>WindowsではNTFSアクセス制御リスト(Access Control List, ACL)<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup><sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup>
と呼ばれるシステムでファイルを管理していて、
これで決定されたパーミッションがcygwinからも見えています。
つまり、通常作られるファイルは、他人からは見えない様なファイルで、
所有者には実行権限も与えられています。</p>

<p>このACLは<code>/etc/fstab</code>へマウント設定を追加してあげると無効にすることが出来ます。
<sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup></p>

<p>:warning: 以下に設定変更方法を書いていますが、下にも書く様に副作用が
強いため、結果的には使わないことにしています。</p>

<p>まず、現状のマウントポイントを確認:</p>

<pre><code>$ mount
C:/cygwin/bin on /usr/bin type ntfs (binary,auto)
C:/cygwin/lib on /usr/lib type ntfs (binary,auto)
C:/cygwin on / type ntfs (binary,auto)
C: on /cygdrive/c type ntfs (binary,posix=0,user,noumount,auto)
</code></pre>

<p><code>/etc/fstab</code>に何も書かれて居ない状態ですが、上の4つについては
最初からマウントされるようになっています。
のでセットアップで特に変更しなければ上の様になっているかと思います。</p>

<p>次に、これらに関連する項目を<code>/etc/fstab</code>へ書いて定義を変更します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/fstab</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:/cygwin/bin /usr/bin  ntfs     binary,noacl,notexec              0 0
</span><span class='line'>C:/cygwin/lib /usr/lib  ntfs     binary,noacl,notexec              0 0
</span><span class='line'>C:/cygwin     /         ntfs     binary,noacl,notexec,override     0 0
</span><span class='line'>none          /cygdrive cygdrive binary,noacl,notexec,posix=0,user 0 0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>と追加します。(初期のままだと<code>/etc/fstab</code>にはコメントが書かれているだけです。)</p>

<p>書き方は<sup id='fnref:8'><a href='#fn:8' rel='footnote'>8</a></sup></p>

<pre><code>Windowsのパス Cygwinのパス ファイルシステム　オプション 0 0
</code></pre>

<p>Windowsのパスも<code>\</code>でなく</code>/<code>を使います。
最後のcygdriveの設定ではファイルシステムは</code>cygdrive`を設定します。
最後の2つはdump/fsckオプションですが、cygwinでは使わない(?)ので、
ここでは0にしておきます。</p>

<p>上で確認したものと比べて分かるように、追加したオプションは
<code>noacl</code>でこれによってACLの設定を無視する様になります。</p>

<p>この設定を加えてからcygwinを再起動すると、全てのファイルの
cygwinから見えるパーミッションが変わります。</p>

<p>ただ、<code>noacl</code>だとファイルのパーミッションをcygwinが勝手に中身を
判断して決定するようになってしまい、<code>chmod</code>等でも変更が出来ません。<sup id='fnref:9'><a href='#fn:9' rel='footnote'>9</a></sup></p>

<p>さらに気持ち悪いことに、実行権限が無いファイルでも実行出来てしまうようになります。
(TAB補完は効かないが、ちゃんと書けばどんなファイルでも実行しようとする。)</p>

<p>また、<code>exec</code>/<code>notexec</code>と言うオプションがあって、これらを指定すると
以下のディレクトリのファイル全てが実行ファイル(755)/通常ファイル(644)
になります。
この場合でも一意に決まってしまって変更出来ません。</p>

<p>ので、結局上の設定を消して元に戻しました。
(元に戻すと、<code>noacl</code>等を設定する以前のパーミッションに全て戻ります。)</p>

<p>大分古い記事ですがACLやマウント方法について詳細に書いてあるものもありました<sup id='fnref:10'><a href='#fn:10' rel='footnote'>10</a></sup>。
細かい事を直したいときに参考になるかもしれません。</p>

<h1 id="Dropbox上でのgit/svn">Dropbox上でのgit/svn</h1>

<p>パーミッション関連で困ることは、勿論スクリプトに実行権限がついてなくて
実行出来ない、と言うこともあるのですが、
それ以上にgitでコミットするといちいちファイルモードを変更してしまって
困ってしまいます。</p>

<p>なので、特にDropbox上でgit(svnでも)のレポジトリを管理している場合は、</p>

<pre><code>git config core.filemode false
</code></pre>

<p>するか<code>./.git/config</code>を書き換えて(<code>filemode = true</code>を<code>false</code>へ)
ファイルのパーミッションは無視する様にした方が余計な変更を入れない
ので良いと思います。</p>

<p>特にOctopressの様な場合は、基本的に実行ファイルは含まないので、
問題ないと思います。</p>

<p>Octopressの場合はOctopressの親ディレクトリの<code>./.git/config</code>と
deploy用の<code>./_deploy/.git/config</code>を変更して下さい。</p>

<p>ちなみに、大概の場合各レポジトリのconfigファイルにfilemodeの設定が
加えられているので
<code>$HOME/.gitconfig</code>で設定しても意味がないことが多いので注意が必要です。</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> ここではWindowsの場合はcygwinから見た場合のパーミッションの話です。
  Unix系の権限は所有者、グループユーザー、その他の枠でそれぞれ、
  読み(4)、書き(2)、実行(1)の権限を指定しますが、この時、
  表にあるように権限の数字を足した物を並べて表示します。
  <code>ls -l</code>すると<code>rwxr-xr-x</code>等と出ますがこれは所有者r(読み)w(書き)r実行可能で、
  グループユーザー及びその他は読み込みと実行のみ許可されている、と言うことで、
  数字では755になります。
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> Windows Vista/7, cygwin 1.7.18
  <a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p> Mac OS X Lion (10.7.5)
  <a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p> Scientific Linux 6
  <a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p> <a href="http://www.atmarkit.co.jp/fwin2k/win2ktips/700whatisacl/whatisacl.html">アクセス制御リストACLとは？</a>
  <a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p> <a href="http://www.teppi.com/solution/file_mgmt/006_filing_win_acl01.php">Windowsアクセス権設定（ACL）の基礎知識</a>
  <a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p> <a href="http://www.akamoz.jp/you/uni/cygwin.htm">Cygwin 1.5からCygwin 1.7へのアップグレード</a>
  <a href='#fnref:7' rev='footnote'>↩</a></p>
</li><li id='fn:8'><p> <a href="http://ksugita.blog62.fc2.com/blog-entry-23.html">Cygwin1.7の /etc/fstabのフォーマット</a>
  <a href='#fnref:8' rev='footnote'>↩</a></p>
</li><li id='fn:9'><p> 先頭行を見て<code>#!</code>等かどうかで判断して実行ファイル(755)か
  通常ファイル(644)に自動的に決まるとのことです: Ref <a href="http://d.hatena.ne.jp/kfujieda/20110521/1305982895">普段はWindowsを使っているのよ</a>
  <a href='#fnref:9' rev='footnote'>↩</a></p>
</li><li id='fn:10'><p><a href="http://www.sixnine.net/cygwin/cygwin-doc/professional.html">Cygwin for Professionals</a></p></p>

<p><a href='#fnref:10' rev='footnote'>↩</a>

</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub pages + Octopressの導入]]></title>
    <link href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/"/>
    <updated>2013-03-07T03:45:00+01:00</updated>
    <id>http://rcmdnk.github.io/blog/2013/03/07/setup-octopress</id>
    <content type="html"><![CDATA[<p>GitHubを使って色々管理をし始めた今日このごろ、
GitHubでは<a href="http://pages.github.com/">GitHub Pages</a>とページが
簡単に作れるということを知って、
さらにしばらく調べていたら<a href="http://octopress.org/">Octopress</a>と
言うツールを使ってブログをGitHub Pages上でブログを作る、
と言うのが面白そうだったのでいっその事ブログも作って見ることにしました。</p>

<p>ということでまずは、導入メモ。
今回はMacとWindowsで作業を行ったのでそれらのメモです。</p>

<!-- more -->


<p><br class="clearBoth">

<h1>Contents</h1>
{:TOC}

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3802317723662375";
/* imgRectMid */
google_ad_slot = "9043394444";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>



</p>

<h1 id="GitHubでの設定">GitHubでの設定</h1>

<p><a href="https://github.com/">GitHub</a>のアカウントを作ります。
gitの導入なり、ssh-keyの登録なりは色々な所で紹介されているので省略。</p>

<p>アカウントが作成できたら、<a href="https://github.com/new">Create a new repo</a>へ行き、
"username.github.com"というGitHub page用のレポジトリを作ります。</p>

<hr />

<p>追記:</p>

<p>今はGitHub Pagesのドメインが変わって、<code>username.github.com</code>ではなく、<code>username.github.io</code>が割り当てられるので、
リポジトリも<code>username.github.io</code>にすべきです。
Rakefileの中に、</p>

<pre><code>  branch = (repo_url.match(/\/[\w-]+\.github\.io/).nil?) ? 'gh-pages' : 'master'
</code></pre>

<p>という箇所がありますが、この箇所が<code>github\.io/</code>となっていれば<code>io</code>レポジトリにしておかないと
実際に公開するのに少し手間が必要です。
(masterの代わりにgh-pagesというブランチにpushしてしまいます。
<code>gh-pages</code>というのはGitHubで特別なブランチで、このブランチにあるものを
GitHub Pagesの元、<code>username.github.io/&lt;repository&gt;</code>で公開できます。
USER.github.comはさらに特殊なレポジトリで、そこのmasterにあるファイルを
<code>username.github.io/</code>で公開します。)</p>

<p>もし、古いOctopressでここが<code>github\.com/</code>の場合、
ここを<code>io</code>に直すか、<code>username.github.com</code>のレポジトリを使う必要があります。</p>

<hr />

<h1 id="rubyのインストール">rubyのインストール</h1>

<h2 id="Macの場合+(rvmを使う)">Macの場合 (rvmを使う)</h2>

<p>現在使っているMacは2011年に買ったLionなのですが、
入っているrubyは1.8.7で、octopressには1.9.3以上が必要なので
新しいものを<a href="https://rvm.io/">rvm</a>を使って入れます。</p>

<p>rvmのインストールで、<code>... bash -s stable --ruby</code>とするとrubyも同時にインストール
出来るのですが、自分の環境だと</p>

<pre><code>There is no checksum for 'http://production.cf.rubygems.org/rubygems/rubygems-2.0.2.tgz' or 'rubygems-2.0.2.tgz', it's not possible to validate it.
If you wish to continue with unverified download add '--verify-downloads 1' after the command.

There has been an error while trying to fetch the source.
Halting the installation.
</code></pre>

<p>と言うメッセージが出たので、別途入れることにしました。
現時点でrubyの最新版が2.0.0、これと同時にインストールされるrubygemが2.0.2で、
どうもこれが悪さしてるみたいです。
2.0.0でメッセージにあるように<code>--veryfy-downloads 1</code>をつけてもrubygemの
インストールで失敗している様なので1.9.3をインストールすることにしました。</p>

<pre><code>$ # rvm installl, ref: https://rvm.io/
$ \curl -L https://get.rvm.io|bash -s stable
$ # ruby install, also rubygems-1.8.25 (at this time) will be installed
$ rvm install 1.9.3
</code></pre>

<p>この時点ではPATH等が上記のコマンドによって自動的に設定されますが、
今後も<code>$HOME/.rvm</code>以下のrubyを使うように、bashを使っている場合は<code>.bash_profile</code>
(または<code>.bashrc</code>を<code>.bash_profile</code>から読み込む様にしてある場合は<code>.bashrc</code>)に
```sh</p>

<pre><code>if [ -s $HOME/.rvm/scripts/rvm ];then
  source $HOME/.rvm/scripts/rvm
fi
</code></pre>

<p>```
を加えておきます。</p>

<h2 id="Windowsでの設定">Windowsでの設定</h2>

<p>今回は<a href="http://www.cygwin.com/">Cygwin</a>を使って環境を作りました。
インストール時にはOctopress用に最低限</p>

<ul>
<li>Devel:git</li>
<li>Ruby:全部</li>
</ul>


<p>はインストールします。
gitをCUIで積極的に使う場合は</p>

<ul>
<li>Utils:<a href="http://jonas.nitro.dk/tig/">tig</a> (gitのCUIブラウザー)</li>
</ul>


<p>もインストールしておくと良いと思います。</p>

<p>Cygwinでsetup.exeでインストールされるrubyは現時点で1.9.3なのでそのまま使えます。
現時点で使っている物は</p>

<ul>
<li>Cygwin 1.7.17</li>
<li>ruby 1.9.3p385</li>
<li>git version 1.7.9</li>
<li>tig version 1.1</li>
</ul>


<p>です。</p>

<p>CygwinはRubyのためで、この他にもWindowsにインストールする方法としては</p>

<ul>
<li><a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>:
rubyを使えるコマンドプロンプトがインストールされる。</li>
<li><a href="https://github.com/scottmuc/yari">yari</a>: Yet Another Ruby Installer、rvm
などにinspireされたツールということらしいが、コマンドプロンプトからrubyをインストール出来る。(<a href="http://blog.zerosharp.com/setting-up-octopress-on-windows-again/">参考ページ</a>)</li>
<li>これらの場合には別途<a href="http://git-scm.com/downloads">Git</a>または<a href="http://windows.github.com/">GitHub Client</a>も必要。
また、</li>
<li><a href="http://www.mingw.org/">MinGW</a>: Cygwinからフォークして出来たUnix環境を作るソフト。</li>
</ul>


<p>といったものもあります。</p>

<p>CygwinでOctopressをインストールする時、下にある
<code>bundle install</code>で<code>posix-spawn</code>をインストールする時に
上手く行かないのでこれだけ先に別にインストールしておきます。</p>

<pre><code>$ # for cygwin only
$ cd ~/tmp # anywhere tmporally space
$ gem install rake-compiler
$ git clone git://github.com/rtomayko/posix-spawn.git
$ cd posix-spawn
$ rake gem
$ gem install pkg/posix-spawn-0.3.6
</code></pre>

<p>もし<code>rake gem</code>の所でエラーが出るようなら、もう一度、Cygwinのsetup.exeで
Ruby等が全て最新になっているか確認してみてください。
全てUpdateしなおすと上手く行くこともあります。
それでも上手くいかない場合は個別に上手く行くバージョンを調べて
インストールしたりする必要があるかもしれません。</p>

<h1 id="Octopressのインストール">Octopressのインストール</h1>

<p>Octopressをcloneしてきてインストールします。</p>

<pre><code>$ cd /path/to/octopress/install/dir
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<p><a href="http://octopress.org/docs/setup/">公式のsetupページ</a>にもあるように、
rvmを使っている場合はcdした時に、octopress内の.rvmrcをtrustするか聞かれるので
yesとします。</p>

<pre><code>$ gem intall bundler
$ bundle install
$ rake install
</code></pre>

<p>もしここで、<code>rake aborted!</code>と出たら、(rakeのバージョン云々のメッセージとともに)</p>

<pre><code>$ bundle update
</code></pre>

<p>を一度実行してからもう一度<code>rake install</code>すればインストール出来るとおもいます。</p>

<p>ここまで出来たら、試しに<code>rake preview</code>とコマンドを打ってみると</p>

<pre><code>$ rake preview
Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
....
</code></pre>

<p>と始まるので、ブラウザで<a href="http://localhost:4000/">http://localhost:4000/</a>
を開いてみます。
そうすると"My Octopress Blog"と言ったタイトルのブログページが見れると思います。</p>

<p><code>rake preview</code>コマンドはHTMLにコンバートする<code>rake generate</code>コマンドも
同時に行うので、
いきなりpreviewコマンドを叩いてもちゃんとそれまで編集した物が反映されています。
さらにsourceを監視している様で、previewしながら記事を編集すると
即座にページを作成してくれるのでブラウザを再読み込みすると直ぐに
ローカルで編集したものがチェック出来ます。</p>

<h1 id="記事やページを作る">記事やページを作る</h1>

<p>新しいブログ記事を作るには</p>

<pre><code>$ rake new_post["test post"]
</code></pre>

<p>とすると<code>source/_posts/YYYY-mm-DD-test-post.markdown</code>と言うファイルができるので
それをMarkdown形式で編集します。</p>

<p>新たなページを作るには</p>

<pre><code>$ rake new_page["test-page"]
</code></pre>

<p>とすると<code>source/test-page/index.markdown</code>と言うファイルができるので、これも
Markdown形式で編集します。
ページの方はBlog上に直接リンクが貼られないので必要ならばリンクを
どこかに書いておく必要があります
(<a href="/blog/2013/03/10/pages/">Octopressのページの作成</a>)。</p>

<p><code>rake preview</code>してみるとtest postと言うタイトルの記事がpostされているのが分かります。
さらに、<a href="http://localhost:4000/test-page">http://localhost:4000/test-page</a>
にアクセスしてみると、
Test Pageと言うタイトルのページが表れるはずです。</p>

<p>preview中に記事を編集しても即座にブラウザをリロードすれば反映されるので
常に確認しながら書くことも可能です。</p>

<p>ちなみに、最初に<code>new_post</code>などに使うタイトルがファイル名に使われるので、
ここでは日本語は使えない様です。
タイトル自体は出来たファイルの<a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML Front Matterブロック</a>(ファイル上部の<code>---</code>で囲まれた部分)
にある<code>title</code>の値を編集すれば日本語に出来ます。</p>

<p>日本語の記事に関しては、utf-8にエンコードされてないと文字化けします。</p>

<h1 id="GitHubとOctopressを繋げて記事を公開する">GitHubとOctopressを繋げて記事を公開する</h1>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>とコマンドを打ってレポジトリ
(<code>git@github.com:username/username.github.com</code>)を入力すればOK。</p>

<hr />

<p>追記:</p>

<p>同上。
<code>git@github.com:username/username.github.io</code>を入力。</p>

<hr />

<p>次にブログを実際に作ってGitHubへpushします。</p>

<pre><code>$ rake generate # convert to html
$ rake deploy   # publish (push to GitHub)
</code></pre>

<p>これで暫く経ってから<code>username.github.com</code>(<code>username.github.io</code>)にアクセスすると
ブログが出来ていのが確認出来るはずです。</p>

<hr />

<p>追記:</p>

<p>もし、ブログが見えない場合、GitHubの<code>username.github.io</code>等のレポジトリを
調べて見てください。上に書いたように、<code>master</code>にpushする代わりに、
<code>gh-pages</code>にpushされてる可能性があります。
その場合、Rakefileを上の様に確認し、<code>_deploy</code>を削除して再度
設定しなおして見てください。
GitHub上の<code>username.github.io</code>の<code>gh-pages</code>ブランチは消してしまっても構いません。
(一番最初ならレポジトリ毎消して再度作りなおしても構いません。)</p>

<hr />

<p>この2つのコマンドは</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>で一気に行う事も可能です。
ただし、<code>gen_deploy</code>は<code>generate</code>が失敗した場合でも<code>deploy</code>を実行するので、
<code>generate</code>失敗時な形で投稿されてしまうことがあります。
さらに、下にある<code>published</code>のステートメントは最後の方に判断されるらしく、
例えば後で投稿しようと思っている下書きが他にあって、
今書いているものを投稿しようとしてその時に<code>gen_deploy</code>すると、
中途半端な今の記事と後で投稿する予定の下書きの方も送られてしまうことがあるので
ちょっとした変更とか以外は一回ちゃんと<code>generate</code>した方がよいです。</p>

<p>previewで見ながら編集していた場合には既にページが出来ているので<code>rake deploy</code>
するだけでもOKです。
ただし、preview中に大きな編集(テーマを変えたり)するとたまにgenerate
が上手く行かなくなってページがおかしくなるので、そいういった場合は
別途<code>rage generate</code>してやればちゃんとページが作成されます。</p>

<h1 id="下書きをdeployしないようにする">下書きをdeployしないようにする</h1>

<p>一部下書きがあって完成してない状態でも、他の部分だけを公開したい時も
あると思いますが、その場合は</p>

<pre><code>published: false
</code></pre>

<p>をYAMLブロックに加えるとそのファイルはpreviewでは見れますが、deployされません。</p>

<h1 id="sourceの管理">sourceの管理</h1>

<p><a href="http://octopress.org/docs/deploying/github/">Octopressのインストラクション</a>
だとsouceにあるMarkdown形式のファイルもGitHubで管理する様になっていますが、
無料版だと元のファイルそのものが公開になってしまいますし、
下書きの段階でもバックアップしておこうと思うと
公開されてしまいます。
さらにgitの管理の面でも面倒が起こったりするとのことなので
(<a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで</a>にとても詳しく書いてあります)
他の人を真似てsourceは<a href="https://bitbucket.org">Bitbucket</a>の方で管理します。
BitbucketはGitHubと同じような要領でssh keyの登録やレポジトリの作成が出来ますが、
無料で非公開のレポジトリを作ることが出来ます。</p>

<p>Bitbucketの方で、<code>username.github.com</code>
(管理しやすいようにGitHubのページと同じ名前のレポジトリにしましたが、何でもOKです)
をprivate repository (Create a new repositoryのページで
<code>This is a private repository</code>にチェックを入れておく)として作ります。</p>

<p>Butbucketのリモートレポジトリを登録します。</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:username/username.github.com.git
$ git push -u bitbucket source
</code></pre>

<p>これで何か書いたら</p>

<pre><code>$ git add .
$ git commit -m "comment"
$ git push
</code></pre>

<p>でBitbucketの方に記事のバックアップがとれます。</p>

<p>Bitbucketをあまりちゃんと使ってなかってんですが、
Bitbucketだとdiffがside-by-sideでも見れますね。
GitHubもそのうち出来るようになってもらいたい…</p>

<h1 id="管理のまとめ">管理のまとめ</h1>

<ul>
<li><p>記事を書くには</p>

<pre><code>$ rake new_post["title"]
</code></pre>

<p>でファイル(source/_posts/YYYY-mm-DD-test-post.markdown)を作成して、それを編集する。</p></li>
<li><p>ブログのポストとは別にページが作りたい場合は</p>

<pre><code>$ rake new_page["title"]
</code></pre>

<p>で新たなページを作り、source/title/index.markdownとして出来たファイルを編集
したりしてページを作る。</p></li>
<li><p>書いたらプレビューしてみる</p>

<pre><code>$ rake preview
</code></pre>

<p>を走らせて、<a href="http://localhost:4000/">http://localhost:4000/</a>をブラウザで開く。
途中で変更しすぎておかしくなったら一度generateする。</p>

<pre><code>$ rake generate
</code></pre></li>
<li><p>記事の元のファイルをバックアップしたいときはBitbucketに送る</p>

<pre><code>$ git add . # or files what you want to backup
$ git commit -m "comment"
$ git push
</code></pre></li>
<li><p>出来たらGitHubに送って公開する</p>

<pre><code>$ git generate
$ git deploy
</code></pre>

<p>または</p>

<pre><code>$ git gen_deploy
</code></pre></li>
<li><p>暫く使ってると色々キャッシュが溜まってくるので</p>

<pre><code>$ rake clean
</code></pre>

<p>をすると</p>

<pre><code>$ rm -rf .pygments-cache/** .gist-cache/** .sass-cache/** source/stylesheets/screen.css
</code></pre>

<p>をしてくれます。</p></li>
<li><p>gitの話ですが、暫く使っているとgitの管理ファイル(.git内)もどんどん肥大化していってしまうので、 気が向いたら</p>

<pre><code>$ git gc
</code></pre></li>
</ul>


<p>を行うと不要なファイルを削除したり最適化を行なってくれます。</p>
]]></content>
  </entry>
  
</feed>
